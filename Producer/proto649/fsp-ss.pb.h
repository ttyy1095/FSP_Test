// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-ss.proto

#ifndef PROTOBUF_fsp_2dss_2eproto__INCLUDED
#define PROTOBUF_fsp_2dss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fsp-common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class BillInfo;
class BillInfoDefaultTypeInternal;
extern BillInfoDefaultTypeInternal _BillInfo_default_instance_;
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class CommonInfo;
class CommonInfoDefaultTypeInternal;
extern CommonInfoDefaultTypeInternal _CommonInfo_default_instance_;
class CommonInvokeInfo;
class CommonInvokeInfoDefaultTypeInternal;
extern CommonInvokeInfoDefaultTypeInternal _CommonInvokeInfo_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupServer;
class GroupServerDefaultTypeInternal;
extern GroupServerDefaultTypeInternal _GroupServer_default_instance_;
class NotifyStreamDestroied;
class NotifyStreamDestroiedDefaultTypeInternal;
extern NotifyStreamDestroiedDefaultTypeInternal _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRsp;
class NotifyStreamDestroiedRspDefaultTypeInternal;
extern NotifyStreamDestroiedRspDefaultTypeInternal _NotifyStreamDestroiedRsp_default_instance_;
class Proxy;
class ProxyDefaultTypeInternal;
extern ProxyDefaultTypeInternal _Proxy_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamServer;
class StreamServerDefaultTypeInternal;
extern StreamServerDefaultTypeInternal _StreamServer_default_instance_;
class StreamSourceChanged;
class StreamSourceChangedDefaultTypeInternal;
extern StreamSourceChangedDefaultTypeInternal _StreamSourceChanged_default_instance_;
class StreamSourceChangedRsp;
class StreamSourceChangedRspDefaultTypeInternal;
extern StreamSourceChangedRspDefaultTypeInternal _StreamSourceChangedRsp_default_instance_;
}  // namespace common
namespace ss {
class LoginReceivingChannel;
class LoginReceivingChannelDefaultTypeInternal;
extern LoginReceivingChannelDefaultTypeInternal _LoginReceivingChannel_default_instance_;
class LoginReceivingChannelRsp;
class LoginReceivingChannelRspDefaultTypeInternal;
extern LoginReceivingChannelRspDefaultTypeInternal _LoginReceivingChannelRsp_default_instance_;
class LoginSendingChannel;
class LoginSendingChannelDefaultTypeInternal;
extern LoginSendingChannelDefaultTypeInternal _LoginSendingChannel_default_instance_;
class LoginSendingChannelRsp;
class LoginSendingChannelRspDefaultTypeInternal;
extern LoginSendingChannelRspDefaultTypeInternal _LoginSendingChannelRsp_default_instance_;
class Logout;
class LogoutDefaultTypeInternal;
extern LogoutDefaultTypeInternal _Logout_default_instance_;
class LogoutRsp;
class LogoutRspDefaultTypeInternal;
extern LogoutRspDefaultTypeInternal _LogoutRsp_default_instance_;
class NotifyStreamSendingStart;
class NotifyStreamSendingStartDefaultTypeInternal;
extern NotifyStreamSendingStartDefaultTypeInternal _NotifyStreamSendingStart_default_instance_;
class NotifyStreamSendingStartRsp;
class NotifyStreamSendingStartRspDefaultTypeInternal;
extern NotifyStreamSendingStartRspDefaultTypeInternal _NotifyStreamSendingStartRsp_default_instance_;
class NotifyStreamSendingStop;
class NotifyStreamSendingStopDefaultTypeInternal;
extern NotifyStreamSendingStopDefaultTypeInternal _NotifyStreamSendingStop_default_instance_;
class NotifyStreamSendingStopRsp;
class NotifyStreamSendingStopRspDefaultTypeInternal;
extern NotifyStreamSendingStopRspDefaultTypeInternal _NotifyStreamSendingStopRsp_default_instance_;
}  // namespace ss
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace ss {

namespace protobuf_fsp_2dss_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fsp_2dss_2eproto

enum ProtoDictionary {
  Enum2UnknownInterface = 0,
  Enum2LoginReceivingChannel = 7000,
  Enum2LoginReceivingChannelRsp = 7001,
  Enum2LoginSendingChannel = 7003,
  Enum2LoginSendingChannelRsp = 7004,
  Enum2NotifyStreamSendingStart = 7005,
  Enum2NotifyStreamSendingStartRsp = 7006,
  Enum2NotifyStreamSendingStop = 7007,
  Enum2NotifyStreamSendingStopRsp = 7008,
  Enum2Logout = 7009,
  Enum2LogoutRsp = 7010,
  ProtoDictionary_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoDictionary_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoDictionary_IsValid(int value);
const ProtoDictionary ProtoDictionary_MIN = Enum2UnknownInterface;
const ProtoDictionary ProtoDictionary_MAX = Enum2LogoutRsp;
const int ProtoDictionary_ARRAYSIZE = ProtoDictionary_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor();
inline const ::std::string& ProtoDictionary_Name(ProtoDictionary value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDictionary_descriptor(), value);
}
inline bool ProtoDictionary_Parse(
    const ::std::string& name, ProtoDictionary* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDictionary>(
    ProtoDictionary_descriptor(), name, value);
}
// ===================================================================

class LoginReceivingChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel) */ {
 public:
  LoginReceivingChannel();
  virtual ~LoginReceivingChannel();

  LoginReceivingChannel(const LoginReceivingChannel& from);

  inline LoginReceivingChannel& operator=(const LoginReceivingChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReceivingChannel& default_instance();

  static inline const LoginReceivingChannel* internal_default_instance() {
    return reinterpret_cast<const LoginReceivingChannel*>(
               &_LoginReceivingChannel_default_instance_);
  }

  void UnsafeArenaSwap(LoginReceivingChannel* other);
  void Swap(LoginReceivingChannel* other);

  // implements Message ----------------------------------------------

  inline LoginReceivingChannel* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginReceivingChannel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginReceivingChannel& from);
  void MergeFrom(const LoginReceivingChannel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginReceivingChannel* other);
  protected:
  explicit LoginReceivingChannel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string stream_subscribe_token = 2;
  void clear_stream_subscribe_token();
  static const int kStreamSubscribeTokenFieldNumber = 2;
  const ::std::string& stream_subscribe_token() const;
  void set_stream_subscribe_token(const ::std::string& value);
  void set_stream_subscribe_token(const char* value);
  void set_stream_subscribe_token(const char* value, size_t size);
  ::std::string* mutable_stream_subscribe_token();
  ::std::string* release_stream_subscribe_token();
  void set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token);
  ::std::string* unsafe_arena_release_stream_subscribe_token();
  void unsafe_arena_set_allocated_stream_subscribe_token(
      ::std::string* stream_subscribe_token);

  // string client_token = 3;
  void clear_client_token();
  static const int kClientTokenFieldNumber = 3;
  const ::std::string& client_token() const;
  void set_client_token(const ::std::string& value);
  void set_client_token(const char* value);
  void set_client_token(const char* value, size_t size);
  ::std::string* mutable_client_token();
  ::std::string* release_client_token();
  void set_allocated_client_token(::std::string* client_token);
  ::std::string* unsafe_arena_release_client_token();
  void unsafe_arena_set_allocated_client_token(
      ::std::string* client_token);

  // string next_instance_list = 5;
  void clear_next_instance_list();
  static const int kNextInstanceListFieldNumber = 5;
  const ::std::string& next_instance_list() const;
  void set_next_instance_list(const ::std::string& value);
  void set_next_instance_list(const char* value);
  void set_next_instance_list(const char* value, size_t size);
  ::std::string* mutable_next_instance_list();
  ::std::string* release_next_instance_list();
  void set_allocated_next_instance_list(::std::string* next_instance_list);
  ::std::string* unsafe_arena_release_next_instance_list();
  void unsafe_arena_set_allocated_next_instance_list(
      ::std::string* next_instance_list);

  // string next_address_list = 6;
  void clear_next_address_list();
  static const int kNextAddressListFieldNumber = 6;
  const ::std::string& next_address_list() const;
  void set_next_address_list(const ::std::string& value);
  void set_next_address_list(const char* value);
  void set_next_address_list(const char* value, size_t size);
  ::std::string* mutable_next_address_list();
  ::std::string* release_next_address_list();
  void set_allocated_next_address_list(::std::string* next_address_list);
  ::std::string* unsafe_arena_release_next_address_list();
  void unsafe_arena_set_allocated_next_address_list(
      ::std::string* next_address_list);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 4;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // int32 stream_type = 7;
  void clear_stream_type();
  static const int kStreamTypeFieldNumber = 7;
  ::google::protobuf::int32 stream_type() const;
  void set_stream_type(::google::protobuf::int32 value);

  // int32 stream_property = 8;
  void clear_stream_property();
  static const int kStreamPropertyFieldNumber = 8;
  ::google::protobuf::int32 stream_property() const;
  void set_stream_property(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_subscribe_token_;
  ::google::protobuf::internal::ArenaStringPtr client_token_;
  ::google::protobuf::internal::ArenaStringPtr next_instance_list_;
  ::google::protobuf::internal::ArenaStringPtr next_address_list_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  ::google::protobuf::int32 stream_type_;
  ::google::protobuf::int32 stream_property_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Logout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.Logout) */ {
 public:
  Logout();
  virtual ~Logout();

  Logout(const Logout& from);

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logout& default_instance();

  static inline const Logout* internal_default_instance() {
    return reinterpret_cast<const Logout*>(
               &_Logout_default_instance_);
  }

  void UnsafeArenaSwap(Logout* other);
  void Swap(Logout* other);

  // implements Message ----------------------------------------------

  inline Logout* New() const PROTOBUF_FINAL { return New(NULL); }

  Logout* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Logout* other);
  protected:
  explicit Logout(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.Logout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.LogoutRsp) */ {
 public:
  LogoutRsp();
  virtual ~LogoutRsp();

  LogoutRsp(const LogoutRsp& from);

  inline LogoutRsp& operator=(const LogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRsp& default_instance();

  static inline const LogoutRsp* internal_default_instance() {
    return reinterpret_cast<const LogoutRsp*>(
               &_LogoutRsp_default_instance_);
  }

  void UnsafeArenaSwap(LogoutRsp* other);
  void Swap(LogoutRsp* other);

  // implements Message ----------------------------------------------

  inline LogoutRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutRsp& from);
  void MergeFrom(const LogoutRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutRsp* other);
  protected:
  explicit LogoutRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.LogoutRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginReceivingChannelRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp) */ {
 public:
  LoginReceivingChannelRsp();
  virtual ~LoginReceivingChannelRsp();

  LoginReceivingChannelRsp(const LoginReceivingChannelRsp& from);

  inline LoginReceivingChannelRsp& operator=(const LoginReceivingChannelRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginReceivingChannelRsp& default_instance();

  static inline const LoginReceivingChannelRsp* internal_default_instance() {
    return reinterpret_cast<const LoginReceivingChannelRsp*>(
               &_LoginReceivingChannelRsp_default_instance_);
  }

  void UnsafeArenaSwap(LoginReceivingChannelRsp* other);
  void Swap(LoginReceivingChannelRsp* other);

  // implements Message ----------------------------------------------

  inline LoginReceivingChannelRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginReceivingChannelRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginReceivingChannelRsp& from);
  void MergeFrom(const LoginReceivingChannelRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginReceivingChannelRsp* other);
  protected:
  explicit LoginReceivingChannelRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginSendingChannel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.LoginSendingChannel) */ {
 public:
  LoginSendingChannel();
  virtual ~LoginSendingChannel();

  LoginSendingChannel(const LoginSendingChannel& from);

  inline LoginSendingChannel& operator=(const LoginSendingChannel& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginSendingChannel& default_instance();

  static inline const LoginSendingChannel* internal_default_instance() {
    return reinterpret_cast<const LoginSendingChannel*>(
               &_LoginSendingChannel_default_instance_);
  }

  void UnsafeArenaSwap(LoginSendingChannel* other);
  void Swap(LoginSendingChannel* other);

  // implements Message ----------------------------------------------

  inline LoginSendingChannel* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginSendingChannel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginSendingChannel& from);
  void MergeFrom(const LoginSendingChannel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginSendingChannel* other);
  protected:
  explicit LoginSendingChannel(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string stream_publish_token = 2;
  void clear_stream_publish_token();
  static const int kStreamPublishTokenFieldNumber = 2;
  const ::std::string& stream_publish_token() const;
  void set_stream_publish_token(const ::std::string& value);
  void set_stream_publish_token(const char* value);
  void set_stream_publish_token(const char* value, size_t size);
  ::std::string* mutable_stream_publish_token();
  ::std::string* release_stream_publish_token();
  void set_allocated_stream_publish_token(::std::string* stream_publish_token);
  ::std::string* unsafe_arena_release_stream_publish_token();
  void unsafe_arena_set_allocated_stream_publish_token(
      ::std::string* stream_publish_token);

  // string client_token = 3;
  void clear_client_token();
  static const int kClientTokenFieldNumber = 3;
  const ::std::string& client_token() const;
  void set_client_token(const ::std::string& value);
  void set_client_token(const char* value);
  void set_client_token(const char* value, size_t size);
  ::std::string* mutable_client_token();
  ::std::string* release_client_token();
  void set_allocated_client_token(::std::string* client_token);
  ::std::string* unsafe_arena_release_client_token();
  void unsafe_arena_set_allocated_client_token(
      ::std::string* client_token);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_publish_token_;
  ::google::protobuf::internal::ArenaStringPtr client_token_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginSendingChannelRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp) */ {
 public:
  LoginSendingChannelRsp();
  virtual ~LoginSendingChannelRsp();

  LoginSendingChannelRsp(const LoginSendingChannelRsp& from);

  inline LoginSendingChannelRsp& operator=(const LoginSendingChannelRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginSendingChannelRsp& default_instance();

  static inline const LoginSendingChannelRsp* internal_default_instance() {
    return reinterpret_cast<const LoginSendingChannelRsp*>(
               &_LoginSendingChannelRsp_default_instance_);
  }

  void UnsafeArenaSwap(LoginSendingChannelRsp* other);
  void Swap(LoginSendingChannelRsp* other);

  // implements Message ----------------------------------------------

  inline LoginSendingChannelRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginSendingChannelRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginSendingChannelRsp& from);
  void MergeFrom(const LoginSendingChannelRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginSendingChannelRsp* other);
  protected:
  explicit LoginSendingChannelRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart) */ {
 public:
  NotifyStreamSendingStart();
  virtual ~NotifyStreamSendingStart();

  NotifyStreamSendingStart(const NotifyStreamSendingStart& from);

  inline NotifyStreamSendingStart& operator=(const NotifyStreamSendingStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStart& default_instance();

  static inline const NotifyStreamSendingStart* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStart*>(
               &_NotifyStreamSendingStart_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStart* other);
  void Swap(NotifyStreamSendingStart* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStart* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStart& from);
  void MergeFrom(const NotifyStreamSendingStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStart* other);
  protected:
  explicit NotifyStreamSendingStart(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string recv_client_id = 1;
  void clear_recv_client_id();
  static const int kRecvClientIdFieldNumber = 1;
  const ::std::string& recv_client_id() const;
  void set_recv_client_id(const ::std::string& value);
  void set_recv_client_id(const char* value);
  void set_recv_client_id(const char* value, size_t size);
  ::std::string* mutable_recv_client_id();
  ::std::string* release_recv_client_id();
  void set_allocated_recv_client_id(::std::string* recv_client_id);
  ::std::string* unsafe_arena_release_recv_client_id();
  void unsafe_arena_set_allocated_recv_client_id(
      ::std::string* recv_client_id);

  // string stream_id = 2;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 3;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr recv_client_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStartRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp) */ {
 public:
  NotifyStreamSendingStartRsp();
  virtual ~NotifyStreamSendingStartRsp();

  NotifyStreamSendingStartRsp(const NotifyStreamSendingStartRsp& from);

  inline NotifyStreamSendingStartRsp& operator=(const NotifyStreamSendingStartRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStartRsp& default_instance();

  static inline const NotifyStreamSendingStartRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStartRsp*>(
               &_NotifyStreamSendingStartRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStartRsp* other);
  void Swap(NotifyStreamSendingStartRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStartRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStartRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStartRsp& from);
  void MergeFrom(const NotifyStreamSendingStartRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStartRsp* other);
  protected:
  explicit NotifyStreamSendingStartRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop) */ {
 public:
  NotifyStreamSendingStop();
  virtual ~NotifyStreamSendingStop();

  NotifyStreamSendingStop(const NotifyStreamSendingStop& from);

  inline NotifyStreamSendingStop& operator=(const NotifyStreamSendingStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStop& default_instance();

  static inline const NotifyStreamSendingStop* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStop*>(
               &_NotifyStreamSendingStop_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStop* other);
  void Swap(NotifyStreamSendingStop* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStop* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStop* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStop& from);
  void MergeFrom(const NotifyStreamSendingStop& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStop* other);
  protected:
  explicit NotifyStreamSendingStop(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string recv_client_id = 2;
  void clear_recv_client_id();
  static const int kRecvClientIdFieldNumber = 2;
  const ::std::string& recv_client_id() const;
  void set_recv_client_id(const ::std::string& value);
  void set_recv_client_id(const char* value);
  void set_recv_client_id(const char* value, size_t size);
  ::std::string* mutable_recv_client_id();
  ::std::string* release_recv_client_id();
  void set_allocated_recv_client_id(::std::string* recv_client_id);
  ::std::string* unsafe_arena_release_recv_client_id();
  void unsafe_arena_set_allocated_recv_client_id(
      ::std::string* recv_client_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr recv_client_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStopRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp) */ {
 public:
  NotifyStreamSendingStopRsp();
  virtual ~NotifyStreamSendingStopRsp();

  NotifyStreamSendingStopRsp(const NotifyStreamSendingStopRsp& from);

  inline NotifyStreamSendingStopRsp& operator=(const NotifyStreamSendingStopRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStopRsp& default_instance();

  static inline const NotifyStreamSendingStopRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStopRsp*>(
               &_NotifyStreamSendingStopRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStopRsp* other);
  void Swap(NotifyStreamSendingStopRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStopRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStopRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStopRsp& from);
  void MergeFrom(const NotifyStreamSendingStopRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStopRsp* other);
  protected:
  explicit NotifyStreamSendingStopRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dss_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReceivingChannel

// string stream_id = 1;
inline void LoginReceivingChannel::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoginReceivingChannel::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
  return stream_id_.Get();
}
inline void LoginReceivingChannel::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}
inline void LoginReceivingChannel::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}
inline void LoginReceivingChannel::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}
inline ::std::string* LoginReceivingChannel::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoginReceivingChannel::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}
inline void LoginReceivingChannel::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}

// string stream_subscribe_token = 2;
inline void LoginReceivingChannel::clear_stream_subscribe_token() {
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoginReceivingChannel::stream_subscribe_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
  return stream_subscribe_token_.Get();
}
inline void LoginReceivingChannel::set_stream_subscribe_token(const ::std::string& value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}
inline void LoginReceivingChannel::set_stream_subscribe_token(const char* value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}
inline void LoginReceivingChannel::set_stream_subscribe_token(const char* value,
    size_t size) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}
inline ::std::string* LoginReceivingChannel::mutable_stream_subscribe_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
  return stream_subscribe_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
  
  return stream_subscribe_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::unsafe_arena_release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_subscribe_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoginReceivingChannel::set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token) {
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_subscribe_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}
inline void LoginReceivingChannel::unsafe_arena_set_allocated_stream_subscribe_token(
    ::std::string* stream_subscribe_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_subscribe_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}

// string client_token = 3;
inline void LoginReceivingChannel::clear_client_token() {
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoginReceivingChannel::client_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
  return client_token_.Get();
}
inline void LoginReceivingChannel::set_client_token(const ::std::string& value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}
inline void LoginReceivingChannel::set_client_token(const char* value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}
inline void LoginReceivingChannel::set_client_token(const char* value,
    size_t size) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}
inline ::std::string* LoginReceivingChannel::mutable_client_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
  return client_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::release_client_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
  
  return client_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::unsafe_arena_release_client_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoginReceivingChannel::set_allocated_client_token(::std::string* client_token) {
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}
inline void LoginReceivingChannel::unsafe_arena_set_allocated_client_token(
    ::std::string* client_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
inline bool LoginReceivingChannel::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void LoginReceivingChannel::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& LoginReceivingChannel::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* LoginReceivingChannel::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* LoginReceivingChannel::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void LoginReceivingChannel::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
}

// string next_instance_list = 5;
inline void LoginReceivingChannel::clear_next_instance_list() {
  next_instance_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoginReceivingChannel::next_instance_list() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
  return next_instance_list_.Get();
}
inline void LoginReceivingChannel::set_next_instance_list(const ::std::string& value) {
  
  next_instance_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}
inline void LoginReceivingChannel::set_next_instance_list(const char* value) {
  
  next_instance_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}
inline void LoginReceivingChannel::set_next_instance_list(const char* value,
    size_t size) {
  
  next_instance_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}
inline ::std::string* LoginReceivingChannel::mutable_next_instance_list() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
  return next_instance_list_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::release_next_instance_list() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
  
  return next_instance_list_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::unsafe_arena_release_next_instance_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_instance_list_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoginReceivingChannel::set_allocated_next_instance_list(::std::string* next_instance_list) {
  if (next_instance_list != NULL) {
    
  } else {
    
  }
  next_instance_list_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_instance_list,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}
inline void LoginReceivingChannel::unsafe_arena_set_allocated_next_instance_list(
    ::std::string* next_instance_list) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_instance_list != NULL) {
    
  } else {
    
  }
  next_instance_list_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_instance_list, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}

// string next_address_list = 6;
inline void LoginReceivingChannel::clear_next_address_list() {
  next_address_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoginReceivingChannel::next_address_list() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
  return next_address_list_.Get();
}
inline void LoginReceivingChannel::set_next_address_list(const ::std::string& value) {
  
  next_address_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}
inline void LoginReceivingChannel::set_next_address_list(const char* value) {
  
  next_address_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}
inline void LoginReceivingChannel::set_next_address_list(const char* value,
    size_t size) {
  
  next_address_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}
inline ::std::string* LoginReceivingChannel::mutable_next_address_list() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
  return next_address_list_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::release_next_address_list() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
  
  return next_address_list_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginReceivingChannel::unsafe_arena_release_next_address_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_address_list_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoginReceivingChannel::set_allocated_next_address_list(::std::string* next_address_list) {
  if (next_address_list != NULL) {
    
  } else {
    
  }
  next_address_list_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_address_list,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}
inline void LoginReceivingChannel::unsafe_arena_set_allocated_next_address_list(
    ::std::string* next_address_list) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_address_list != NULL) {
    
  } else {
    
  }
  next_address_list_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_address_list, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}

// int32 stream_type = 7;
inline void LoginReceivingChannel::clear_stream_type() {
  stream_type_ = 0;
}
inline ::google::protobuf::int32 LoginReceivingChannel::stream_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_type)
  return stream_type_;
}
inline void LoginReceivingChannel::set_stream_type(::google::protobuf::int32 value) {
  
  stream_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_type)
}

// int32 stream_property = 8;
inline void LoginReceivingChannel::clear_stream_property() {
  stream_property_ = 0;
}
inline ::google::protobuf::int32 LoginReceivingChannel::stream_property() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_property)
  return stream_property_;
}
inline void LoginReceivingChannel::set_stream_property(::google::protobuf::int32 value) {
  
  stream_property_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_property)
}

// -------------------------------------------------------------------

// Logout

// -------------------------------------------------------------------

// LogoutRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool LogoutRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void LogoutRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& LogoutRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void LogoutRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
}

// -------------------------------------------------------------------

// LoginReceivingChannelRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool LoginReceivingChannelRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void LoginReceivingChannelRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& LoginReceivingChannelRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LoginReceivingChannelRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LoginReceivingChannelRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void LoginReceivingChannelRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
}

// -------------------------------------------------------------------

// LoginSendingChannel

// string stream_id = 1;
inline void LoginSendingChannel::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoginSendingChannel::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
  return stream_id_.Get();
}
inline void LoginSendingChannel::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}
inline void LoginSendingChannel::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}
inline void LoginSendingChannel::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}
inline ::std::string* LoginSendingChannel::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginSendingChannel::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginSendingChannel::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoginSendingChannel::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}
inline void LoginSendingChannel::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}

// string stream_publish_token = 2;
inline void LoginSendingChannel::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoginSendingChannel::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
  return stream_publish_token_.Get();
}
inline void LoginSendingChannel::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}
inline void LoginSendingChannel::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}
inline void LoginSendingChannel::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}
inline ::std::string* LoginSendingChannel::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginSendingChannel::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginSendingChannel::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoginSendingChannel::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}
inline void LoginSendingChannel::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}

// string client_token = 3;
inline void LoginSendingChannel::clear_client_token() {
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoginSendingChannel::client_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
  return client_token_.Get();
}
inline void LoginSendingChannel::set_client_token(const ::std::string& value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}
inline void LoginSendingChannel::set_client_token(const char* value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}
inline void LoginSendingChannel::set_client_token(const char* value,
    size_t size) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}
inline ::std::string* LoginSendingChannel::mutable_client_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
  return client_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginSendingChannel::release_client_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
  
  return client_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginSendingChannel::unsafe_arena_release_client_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoginSendingChannel::set_allocated_client_token(::std::string* client_token) {
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}
inline void LoginSendingChannel::unsafe_arena_set_allocated_client_token(
    ::std::string* client_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}

// -------------------------------------------------------------------

// LoginSendingChannelRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool LoginSendingChannelRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void LoginSendingChannelRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& LoginSendingChannelRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LoginSendingChannelRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LoginSendingChannelRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void LoginSendingChannelRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
}

// string client_id = 2;
inline void LoginSendingChannelRsp::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& LoginSendingChannelRsp::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
  return client_id_.Get();
}
inline void LoginSendingChannelRsp::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}
inline void LoginSendingChannelRsp::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}
inline void LoginSendingChannelRsp::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}
inline ::std::string* LoginSendingChannelRsp::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginSendingChannelRsp::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* LoginSendingChannelRsp::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LoginSendingChannelRsp::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}
inline void LoginSendingChannelRsp::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStart

// string recv_client_id = 1;
inline void NotifyStreamSendingStart::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStart::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Get();
}
inline void NotifyStreamSendingStart::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}
inline void NotifyStreamSendingStart::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}
inline void NotifyStreamSendingStart::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}
inline ::std::string* NotifyStreamSendingStart::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStart::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}
inline void NotifyStreamSendingStart::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}

// string stream_id = 2;
inline void NotifyStreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
  return stream_id_.Get();
}
inline void NotifyStreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}
inline void NotifyStreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}
inline void NotifyStreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}
inline ::std::string* NotifyStreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}
inline void NotifyStreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
inline bool NotifyStreamSendingStart::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void NotifyStreamSendingStart::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& NotifyStreamSendingStart::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamSendingStart::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyStreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyStreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStop

// string stream_id = 1;
inline void NotifyStreamSendingStop::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStop::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
  return stream_id_.Get();
}
inline void NotifyStreamSendingStop::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}
inline void NotifyStreamSendingStop::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}
inline void NotifyStreamSendingStop::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}
inline ::std::string* NotifyStreamSendingStop::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStop::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}
inline void NotifyStreamSendingStop::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}

// string recv_client_id = 2;
inline void NotifyStreamSendingStop::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStop::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Get();
}
inline void NotifyStreamSendingStop::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}
inline void NotifyStreamSendingStop::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}
inline void NotifyStreamSendingStop::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}
inline ::std::string* NotifyStreamSendingStop::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStop::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}
inline void NotifyStreamSendingStop::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyStreamSendingStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyStreamSendingStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamSendingStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ss
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::ss::ProtoDictionary> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::ss::ProtoDictionary>() {
  return ::com::fsmeeting::fsp::proto::ss::ProtoDictionary_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fsp_2dss_2eproto__INCLUDED
