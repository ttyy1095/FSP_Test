// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-gc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fsp-gc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace gc {
class CreateGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateGroup> {
} _CreateGroup_default_instance_;
class CreateGroupRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateGroupRsp> {
} _CreateGroupRsp_default_instance_;
class DestroyGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DestroyGroup> {
} _DestroyGroup_default_instance_;
class DestroyGroupRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DestroyGroupRsp> {
} _DestroyGroupRsp_default_instance_;
class GetGroupServersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetGroupServers> {
} _GetGroupServers_default_instance_;
class GetGroupServersRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetGroupServersRsp> {
} _GetGroupServersRsp_default_instance_;
class JoinGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoinGroup> {
} _JoinGroup_default_instance_;
class JoinGroupRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoinGroupRsp> {
} _JoinGroupRsp_default_instance_;
class QuitGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitGroup> {
} _QuitGroup_default_instance_;
class QuitGroupRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitGroupRsp> {
} _QuitGroupRsp_default_instance_;
class NotifyStreamPublishedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamPublished> {
} _NotifyStreamPublished_default_instance_;
class NotifyStreamPublishedRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamPublishedRsp> {
} _NotifyStreamPublishedRsp_default_instance_;
class GetStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStream> {
} _GetStream_default_instance_;
class GetStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamRsp> {
} _GetStreamRsp_default_instance_;
class BroadcastMediaInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BroadcastMediaInfo> {
} _BroadcastMediaInfo_default_instance_;
class BroadcastMediaInfoRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BroadcastMediaInfoRsp> {
} _BroadcastMediaInfoRsp_default_instance_;

namespace protobuf_fsp_2dgc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, service_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, company_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRsp, group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroup, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroup, group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroupRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyGroupRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServers, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServers, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServers, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServers, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServers, company_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServers, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServers, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServersRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServersRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetGroupServersRsp, group_servers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, group_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, service_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRsp, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRsp, company_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroup, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroup, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroup, service_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroup, service_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroupRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroupRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, media_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, media_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, media_id2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublishedRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublishedRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, media_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, media_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, commoninvokeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, media_id2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamRsp, stream_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMediaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMediaInfo, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMediaInfo, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMediaInfo, media_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMediaInfo, media_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMediaInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMediaInfoRsp, response_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CreateGroup)},
  { 8, -1, sizeof(CreateGroupRsp)},
  { 14, -1, sizeof(DestroyGroup)},
  { 20, -1, sizeof(DestroyGroupRsp)},
  { 25, -1, sizeof(GetGroupServers)},
  { 36, -1, sizeof(GetGroupServersRsp)},
  { 42, -1, sizeof(JoinGroup)},
  { 52, -1, sizeof(JoinGroupRsp)},
  { 59, -1, sizeof(QuitGroup)},
  { 68, -1, sizeof(QuitGroupRsp)},
  { 73, -1, sizeof(NotifyStreamPublished)},
  { 84, -1, sizeof(NotifyStreamPublishedRsp)},
  { 89, -1, sizeof(GetStream)},
  { 99, -1, sizeof(GetStreamRsp)},
  { 105, -1, sizeof(BroadcastMediaInfo)},
  { 113, -1, sizeof(BroadcastMediaInfoRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateGroupRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DestroyGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DestroyGroupRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetGroupServers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetGroupServersRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinGroupRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitGroupRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamPublished_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamPublishedRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BroadcastMediaInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BroadcastMediaInfoRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fsp-gc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

}  // namespace

void TableStruct::Shutdown() {
  _CreateGroup_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CreateGroupRsp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DestroyGroup_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DestroyGroupRsp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GetGroupServers_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GetGroupServersRsp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _JoinGroup_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _JoinGroupRsp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _QuitGroup_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _QuitGroupRsp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _NotifyStreamPublished_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _NotifyStreamPublishedRsp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _GetStream_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _GetStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _BroadcastMediaInfo_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _BroadcastMediaInfoRsp_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::InitDefaults();
  _CreateGroup_default_instance_.DefaultConstruct();
  _CreateGroupRsp_default_instance_.DefaultConstruct();
  _DestroyGroup_default_instance_.DefaultConstruct();
  _DestroyGroupRsp_default_instance_.DefaultConstruct();
  _GetGroupServers_default_instance_.DefaultConstruct();
  _GetGroupServersRsp_default_instance_.DefaultConstruct();
  _JoinGroup_default_instance_.DefaultConstruct();
  _JoinGroupRsp_default_instance_.DefaultConstruct();
  _QuitGroup_default_instance_.DefaultConstruct();
  _QuitGroupRsp_default_instance_.DefaultConstruct();
  _NotifyStreamPublished_default_instance_.DefaultConstruct();
  _NotifyStreamPublishedRsp_default_instance_.DefaultConstruct();
  _GetStream_default_instance_.DefaultConstruct();
  _GetStreamRsp_default_instance_.DefaultConstruct();
  _BroadcastMediaInfo_default_instance_.DefaultConstruct();
  _BroadcastMediaInfoRsp_default_instance_.DefaultConstruct();
  _CreateGroupRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _CreateGroupRsp_default_instance_.get_mutable()->group_ = const_cast< ::com::fsmeeting::fsp::proto::common::Group*>(
      ::com::fsmeeting::fsp::proto::common::Group::internal_default_instance());
  _DestroyGroupRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetGroupServersRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _JoinGroup_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _JoinGroupRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _QuitGroupRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyStreamPublishedRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetStream_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _GetStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetStreamRsp_default_instance_.get_mutable()->stream_ = const_cast< ::com::fsmeeting::fsp::proto::common::Stream*>(
      ::com::fsmeeting::fsp::proto::common::Stream::internal_default_instance());
  _BroadcastMediaInfoRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014fsp-gc.proto\022\032com.fsmeeting.fsp.proto."
      "gc\032\020fsp-common.proto\"\205\001\n\013CreateGroup\022\016\n\006"
      "app_id\030\001 \001(\t\022A\n\014service_type\030\002 \001(\0162+.com"
      ".fsmeeting.fsp.proto.common.ServiceType\022"
      "\017\n\007room_id\030\003 \001(\t\022\022\n\ncompany_id\030\004 \001(\t\"\210\001\n"
      "\016CreateGroupRsp\022@\n\010response\030\001 \001(\0132..com."
      "fsmeeting.fsp.proto.common.CommonRespons"
      "e\0224\n\005group\030\002 \001(\0132%.com.fsmeeting.fsp.pro"
      "to.common.Group\"0\n\014DestroyGroup\022\016\n\006app_i"
      "d\030\001 \001(\t\022\020\n\010group_id\030\002 \001(\t\"S\n\017DestroyGrou"
      "pRsp\022@\n\010response\030\001 \001(\0132..com.fsmeeting.f"
      "sp.proto.common.CommonResponse\"\212\001\n\017GetGr"
      "oupServers\022\020\n\010group_id\030\001 \001(\t\022\021\n\tclient_i"
      "p\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\t\022\016\n\006app_id\030\004 \001(\t"
      "\022\022\n\ncompany_id\030\005 \001(\t\022\017\n\007room_id\030\006 \001(\t\022\014\n"
      "\004type\030\007 \001(\005\"\232\001\n\022GetGroupServersRsp\022@\n\010re"
      "sponse\030\001 \001(\0132..com.fsmeeting.fsp.proto.c"
      "ommon.CommonResponse\022B\n\rgroup_servers\030\002 "
      "\003(\0132+.com.fsmeeting.fsp.proto.common.Gro"
      "upServer\"\277\001\n\tJoinGroup\022\020\n\010group_id\030\001 \001(\t"
      "\022\017\n\007user_id\030\002 \001(\t\022\023\n\013group_token\030\003 \001(\t\022\021"
      "\n\tclient_id\030\004 \001(\t\022\033\n\023service_instance_id"
      "\030\005 \001(\t\022J\n\020commonInvokeInfo\030\006 \001(\01320.com.f"
      "smeeting.fsp.proto.common.CommonInvokeIn"
      "fo\"u\n\014JoinGroupRsp\022@\n\010response\030\001 \001(\0132..c"
      "om.fsmeeting.fsp.proto.common.CommonResp"
      "onse\022\017\n\007room_id\030\002 \001(\t\022\022\n\ncompany_id\030\003 \001("
      "\t\"\240\001\n\tQuitGroup\022\020\n\010group_id\030\001 \001(\t\022\017\n\007use"
      "r_id\030\002 \001(\t\022\021\n\tclient_id\030\003 \001(\t\022\033\n\023service"
      "_instance_id\030\004 \001(\t\022@\n\014service_type\030\005 \001(\016"
      "2*.com.fsmeeting.fsp.proto.common.Server"
      "Type\"P\n\014QuitGroupRsp\022@\n\010response\030\001 \001(\0132."
      ".com.fsmeeting.fsp.proto.common.CommonRe"
      "sponse\"\304\001\n\025NotifyStreamPublished\022\021\n\tclie"
      "nt_id\030\001 \001(\t\022\021\n\tstream_id\030\002 \001(\t\022\020\n\010group_"
      "id\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\022\020\n\010media_id\030\005 "
      "\001(\005\022=\n\nmedia_type\030\006 \001(\0162).com.fsmeeting."
      "fsp.proto.common.MediaType\022\021\n\tmedia_id2\030"
      "\007 \001(\t\"\\\n\030NotifyStreamPublishedRsp\022@\n\010res"
      "ponse\030\001 \001(\0132..com.fsmeeting.fsp.proto.co"
      "mmon.CommonResponse\"\336\001\n\tGetStream\022\020\n\010gro"
      "up_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\020\n\010media_id"
      "\030\003 \001(\005\022=\n\nmedia_type\030\004 \001(\0162).com.fsmeeti"
      "ng.fsp.proto.common.MediaType\022J\n\020commonI"
      "nvokeInfo\030\005 \001(\01320.com.fsmeeting.fsp.prot"
      "o.common.CommonInvokeInfo\022\021\n\tmedia_id2\030\006"
      " \001(\t\"\210\001\n\014GetStreamRsp\022@\n\010response\030\001 \001(\0132"
      "..com.fsmeeting.fsp.proto.common.CommonR"
      "esponse\0226\n\006stream\030\002 \001(\0132&.com.fsmeeting."
      "fsp.proto.common.Stream\"]\n\022BroadcastMedi"
      "aInfo\022\020\n\010group_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t"
      "\022\022\n\nmedia_type\030\003 \001(\005\022\020\n\010media_id\030\004 \001(\t\"Y"
      "\n\025BroadcastMediaInfoRsp\022@\n\010response\030\001 \001("
      "\0132..com.fsmeeting.fsp.proto.common.Commo"
      "nResponse*\354\004\n\017ProtoDictionary\022\031\n\025Enum2Un"
      "knownInterface\020\000\022\025\n\020Enum2CreateGroup\020\270\027\022"
      "\030\n\023Enum2CreateGroupRsp\020\271\027\022\026\n\021Enum2Destro"
      "yGroup\020\272\027\022\031\n\024Enum2DestroyGroupRsp\020\273\027\022\031\n\024"
      "Enum2GetGroupServers\020\274\027\022\034\n\027Enum2GetGroup"
      "ServersRsp\020\275\027\022\023\n\016Enum2JoinGroup\020\276\027\022\026\n\021En"
      "um2JoinGroupRsp\020\277\027\022\023\n\016Enum2QuitGroup\020\300\027\022"
      "\026\n\021Enum2QuitGroupRsp\020\301\027\022\023\n\016Enum2GetStrea"
      "m\020\302\027\022\026\n\021Enum2GetStreamRsp\020\304\027\022\037\n\032Enum2Not"
      "ifyStreamPublished\020\305\027\022\"\n\035Enum2NotifyStre"
      "amPublishedRsp\020\306\027\022#\n\036Enum2NotifyStartBro"
      "adcastMedia\020\307\027\022&\n!Enum2NotifyStartBroadc"
      "astMediaRsp\020\310\027\022\"\n\035Enum2NotifyStopBroadca"
      "stMedia\020\311\027\022%\n Enum2NotifyStopBroadcastMe"
      "diaRsp\020\312\027\022\034\n\027Enum2GetVNCGroupServers\020\313\027\022"
      "\037\n\032Enum2GetVNCGroupServersRsp\020\314\027B\'\n\032com."
      "fsmeeting.fsp.proto.gcP\001\370\001\001\242\002\003GPBb\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2841);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsp-gc.proto", &protobuf_RegisterTypes);
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fsp_2dgc_2eproto

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_enum_descriptors[0];
}
bool ProtoDictionary_IsValid(int value) {
  switch (value) {
    case 0:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
    case 3008:
    case 3009:
    case 3010:
    case 3012:
    case 3013:
    case 3014:
    case 3015:
    case 3016:
    case 3017:
    case 3018:
    case 3019:
    case 3020:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGroup::kAppIdFieldNumber;
const int CreateGroup::kServiceTypeFieldNumber;
const int CreateGroup::kRoomIdFieldNumber;
const int CreateGroup::kCompanyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGroup::CreateGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.CreateGroup)
}
CreateGroup::CreateGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.CreateGroup)
}
CreateGroup::CreateGroup(const CreateGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_id().size() > 0) {
    room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id(),
      GetArenaNoVirtual());
  }
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.company_id().size() > 0) {
    company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_id(),
      GetArenaNoVirtual());
  }
  service_type_ = from.service_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.CreateGroup)
}

void CreateGroup::SharedCtor() {
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_type_ = 0;
  _cached_size_ = 0;
}

CreateGroup::~CreateGroup() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.CreateGroup)
  SharedDtor();
}

void CreateGroup::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  room_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  company_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CreateGroup::ArenaDtor(void* object) {
  CreateGroup* _this = reinterpret_cast< CreateGroup* >(object);
  (void)_this;
}
void CreateGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroup::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[0].descriptor;
}

const CreateGroup& CreateGroup::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateGroup* CreateGroup::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateGroup>(arena);
}

void CreateGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.CreateGroup)
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_type_ = 0;
}

bool CreateGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.CreateGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string app_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.CreateGroup.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.ServiceType service_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_service_type(static_cast< ::com::fsmeeting::fsp::proto::common::ServiceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.CreateGroup.room_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string company_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.CreateGroup.company_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.CreateGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.CreateGroup)
  return false;
#undef DO_
}

void CreateGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.CreateGroup)
  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.CreateGroup.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.ServiceType service_type = 2;
  if (this->service_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->service_type(), output);
  }

  // string room_id = 3;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.CreateGroup.room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_id(), output);
  }

  // string company_id = 4;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.CreateGroup.company_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->company_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.CreateGroup)
}

::google::protobuf::uint8* CreateGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.CreateGroup)
  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.CreateGroup.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.ServiceType service_type = 2;
  if (this->service_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->service_type(), target);
  }

  // string room_id = 3;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.CreateGroup.room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_id(), target);
  }

  // string company_id = 4;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.CreateGroup.company_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->company_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.CreateGroup)
  return target;
}

size_t CreateGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.CreateGroup)
  size_t total_size = 0;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string room_id = 3;
  if (this->room_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_id());
  }

  // string company_id = 4;
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->company_id());
  }

  // .com.fsmeeting.fsp.proto.common.ServiceType service_type = 2;
  if (this->service_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->service_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.CreateGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.CreateGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.CreateGroup)
    MergeFrom(*source);
  }
}

void CreateGroup::MergeFrom(const CreateGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.CreateGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.room_id().size() > 0) {
    set_room_id(from.room_id());
  }
  if (from.company_id().size() > 0) {
    set_company_id(from.company_id());
  }
  if (from.service_type() != 0) {
    set_service_type(from.service_type());
  }
}

void CreateGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.CreateGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroup::CopyFrom(const CreateGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.CreateGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroup::IsInitialized() const {
  return true;
}

void CreateGroup::Swap(CreateGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateGroup::UnsafeArenaSwap(CreateGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateGroup::InternalSwap(CreateGroup* other) {
  app_id_.Swap(&other->app_id_);
  room_id_.Swap(&other->room_id_);
  company_id_.Swap(&other->company_id_);
  std::swap(service_type_, other->service_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGroup::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGroup

// string app_id = 1;
void CreateGroup::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateGroup::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
  return app_id_.Get();
}
void CreateGroup::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}
void CreateGroup::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}
void CreateGroup::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}
::std::string* CreateGroup::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateGroup::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateGroup::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateGroup::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}
void CreateGroup::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}

// .com.fsmeeting.fsp.proto.common.ServiceType service_type = 2;
void CreateGroup::clear_service_type() {
  service_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::ServiceType CreateGroup::service_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroup.service_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ServiceType >(service_type_);
}
void CreateGroup::set_service_type(::com::fsmeeting::fsp::proto::common::ServiceType value) {
  
  service_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.CreateGroup.service_type)
}

// string room_id = 3;
void CreateGroup::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateGroup::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
  return room_id_.Get();
}
void CreateGroup::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}
void CreateGroup::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}
void CreateGroup::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}
::std::string* CreateGroup::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateGroup::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateGroup::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateGroup::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}
void CreateGroup::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}

// string company_id = 4;
void CreateGroup::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateGroup::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
  return company_id_.Get();
}
void CreateGroup::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}
void CreateGroup::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}
void CreateGroup::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}
::std::string* CreateGroup::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateGroup::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateGroup::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateGroup::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}
void CreateGroup::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateGroupRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CreateGroupRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CreateGroupRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void CreateGroupRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void CreateGroupRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
}
void CreateGroupRsp::_slow_mutable_group() {
  group_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::Group >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::Group* CreateGroupRsp::_slow_release_group() {
  if (group_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::Group* temp = new ::com::fsmeeting::fsp::proto::common::Group(*group_);
    group_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::Group* CreateGroupRsp::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
  
  ::com::fsmeeting::fsp::proto::common::Group* temp = group_;
  group_ = NULL;
  return temp;
}
void CreateGroupRsp::_slow_set_allocated_group(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::Group** group) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*group) == NULL) {
      message_arena->Own(*group);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*group)) {
      ::com::fsmeeting::fsp::proto::common::Group* new_group = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::Group >(
            message_arena);
      new_group->CopyFrom(**group);
      *group = new_group;
    }
}
void CreateGroupRsp::unsafe_arena_set_allocated_group(
    ::com::fsmeeting::fsp::proto::common::Group* group) {
  if (GetArenaNoVirtual() == NULL) {
    delete group_;
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGroupRsp::kResponseFieldNumber;
const int CreateGroupRsp::kGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGroupRsp::CreateGroupRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
}
CreateGroupRsp::CreateGroupRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
}
CreateGroupRsp::CreateGroupRsp(const CreateGroupRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_group()) {
    group_ = new ::com::fsmeeting::fsp::proto::common::Group(*from.group_);
  } else {
    group_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
}

void CreateGroupRsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&group_) -
    reinterpret_cast<char*>(&response_) + sizeof(group_));
  _cached_size_ = 0;
}

CreateGroupRsp::~CreateGroupRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  SharedDtor();
}

void CreateGroupRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
  if (this != internal_default_instance()) {
    delete group_;
  }
}

void CreateGroupRsp::ArenaDtor(void* object) {
  CreateGroupRsp* _this = reinterpret_cast< CreateGroupRsp* >(object);
  (void)_this;
}
void CreateGroupRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateGroupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupRsp::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[1].descriptor;
}

const CreateGroupRsp& CreateGroupRsp::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateGroupRsp* CreateGroupRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateGroupRsp>(arena);
}

void CreateGroupRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  if (GetArenaNoVirtual() == NULL && group_ != NULL) {
    delete group_;
  }
  group_ = NULL;
}

bool CreateGroupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.Group group = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  return false;
#undef DO_
}

void CreateGroupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // .com.fsmeeting.fsp.proto.common.Group group = 2;
  if (this->has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->group_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
}

::google::protobuf::uint8* CreateGroupRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.Group group = 2;
  if (this->has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->group_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  return target;
}

size_t CreateGroupRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .com.fsmeeting.fsp.proto.common.Group group = 2;
  if (this->has_group()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->group_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateGroupRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGroupRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
    MergeFrom(*source);
  }
}

void CreateGroupRsp::MergeFrom(const CreateGroupRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.has_group()) {
    mutable_group()->::com::fsmeeting::fsp::proto::common::Group::MergeFrom(from.group());
  }
}

void CreateGroupRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupRsp::CopyFrom(const CreateGroupRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGroupRsp::IsInitialized() const {
  return true;
}

void CreateGroupRsp::Swap(CreateGroupRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateGroupRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateGroupRsp::UnsafeArenaSwap(CreateGroupRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateGroupRsp::InternalSwap(CreateGroupRsp* other) {
  std::swap(response_, other->response_);
  std::swap(group_, other->group_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGroupRsp::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool CreateGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void CreateGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& CreateGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CreateGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CreateGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void CreateGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
}

// .com.fsmeeting.fsp.proto.common.Group group = 2;
bool CreateGroupRsp::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
void CreateGroupRsp::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::Group& CreateGroupRsp::group() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
  return group_ != NULL ? *group_
                         : *::com::fsmeeting::fsp::proto::common::Group::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::Group* CreateGroupRsp::mutable_group() {
  
  if (group_ == NULL) {
    _slow_mutable_group();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
  return group_;
}
::com::fsmeeting::fsp::proto::common::Group* CreateGroupRsp::release_group() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_group();
  } else {
    ::com::fsmeeting::fsp::proto::common::Group* temp = group_;
    group_ = NULL;
    return temp;
  }
}
 void CreateGroupRsp::set_allocated_group(::com::fsmeeting::fsp::proto::common::Group* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete group_;
  }
  if (group != NULL) {
    _slow_set_allocated_group(message_arena, &group);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyGroup::kAppIdFieldNumber;
const int DestroyGroup::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyGroup::DestroyGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.DestroyGroup)
}
DestroyGroup::DestroyGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.DestroyGroup)
}
DestroyGroup::DestroyGroup(const DestroyGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.DestroyGroup)
}

void DestroyGroup::SharedCtor() {
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DestroyGroup::~DestroyGroup() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  SharedDtor();
}

void DestroyGroup::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DestroyGroup::ArenaDtor(void* object) {
  DestroyGroup* _this = reinterpret_cast< DestroyGroup* >(object);
  (void)_this;
}
void DestroyGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DestroyGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyGroup::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[2].descriptor;
}

const DestroyGroup& DestroyGroup::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DestroyGroup* DestroyGroup::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DestroyGroup>(arena);
}

void DestroyGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DestroyGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string app_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  return false;
#undef DO_
}

void DestroyGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // string group_id = 2;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.DestroyGroup)
}

::google::protobuf::uint8* DestroyGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // string group_id = 2;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  return target;
}

size_t DestroyGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  size_t total_size = 0;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string group_id = 2;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.DestroyGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.DestroyGroup)
    MergeFrom(*source);
  }
}

void DestroyGroup::MergeFrom(const DestroyGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
}

void DestroyGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyGroup::CopyFrom(const DestroyGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.DestroyGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyGroup::IsInitialized() const {
  return true;
}

void DestroyGroup::Swap(DestroyGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DestroyGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DestroyGroup::UnsafeArenaSwap(DestroyGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DestroyGroup::InternalSwap(DestroyGroup* other) {
  app_id_.Swap(&other->app_id_);
  group_id_.Swap(&other->group_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyGroup::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyGroup

// string app_id = 1;
void DestroyGroup::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DestroyGroup::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
  return app_id_.Get();
}
void DestroyGroup::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}
void DestroyGroup::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}
void DestroyGroup::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}
::std::string* DestroyGroup::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DestroyGroup::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DestroyGroup::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DestroyGroup::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}
void DestroyGroup::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}

// string group_id = 2;
void DestroyGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DestroyGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
  return group_id_.Get();
}
void DestroyGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}
void DestroyGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}
void DestroyGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}
::std::string* DestroyGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DestroyGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DestroyGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DestroyGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}
void DestroyGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DestroyGroupRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyGroupRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyGroupRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void DestroyGroupRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void DestroyGroupRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyGroupRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyGroupRsp::DestroyGroupRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
}
DestroyGroupRsp::DestroyGroupRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
}
DestroyGroupRsp::DestroyGroupRsp(const DestroyGroupRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
}

void DestroyGroupRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

DestroyGroupRsp::~DestroyGroupRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  SharedDtor();
}

void DestroyGroupRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void DestroyGroupRsp::ArenaDtor(void* object) {
  DestroyGroupRsp* _this = reinterpret_cast< DestroyGroupRsp* >(object);
  (void)_this;
}
void DestroyGroupRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DestroyGroupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyGroupRsp::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[3].descriptor;
}

const DestroyGroupRsp& DestroyGroupRsp::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DestroyGroupRsp* DestroyGroupRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DestroyGroupRsp>(arena);
}

void DestroyGroupRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool DestroyGroupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  return false;
#undef DO_
}

void DestroyGroupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
}

::google::protobuf::uint8* DestroyGroupRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  return target;
}

size_t DestroyGroupRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyGroupRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyGroupRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyGroupRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
    MergeFrom(*source);
  }
}

void DestroyGroupRsp::MergeFrom(const DestroyGroupRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void DestroyGroupRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyGroupRsp::CopyFrom(const DestroyGroupRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyGroupRsp::IsInitialized() const {
  return true;
}

void DestroyGroupRsp::Swap(DestroyGroupRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DestroyGroupRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DestroyGroupRsp::UnsafeArenaSwap(DestroyGroupRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DestroyGroupRsp::InternalSwap(DestroyGroupRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyGroupRsp::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool DestroyGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void DestroyGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& DestroyGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void DestroyGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGroupServers::kGroupIdFieldNumber;
const int GetGroupServers::kClientIpFieldNumber;
const int GetGroupServers::kUserIdFieldNumber;
const int GetGroupServers::kAppIdFieldNumber;
const int GetGroupServers::kCompanyIdFieldNumber;
const int GetGroupServers::kRoomIdFieldNumber;
const int GetGroupServers::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGroupServers::GetGroupServers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.GetGroupServers)
}
GetGroupServers::GetGroupServers(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.GetGroupServers)
}
GetGroupServers::GetGroupServers(const GetGroupServers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ip(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.company_id().size() > 0) {
    company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_id(),
      GetArenaNoVirtual());
  }
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_id().size() > 0) {
    room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id(),
      GetArenaNoVirtual());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.GetGroupServers)
}

void GetGroupServers::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

GetGroupServers::~GetGroupServers() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  SharedDtor();
}

void GetGroupServers::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_ip_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  company_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  room_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetGroupServers::ArenaDtor(void* object) {
  GetGroupServers* _this = reinterpret_cast< GetGroupServers* >(object);
  (void)_this;
}
void GetGroupServers::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetGroupServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupServers::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[4].descriptor;
}

const GetGroupServers& GetGroupServers::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetGroupServers* GetGroupServers::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetGroupServers>(arena);
}

void GetGroupServers::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_ = 0;
}

bool GetGroupServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_ip = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string company_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  return false;
#undef DO_
}

void GetGroupServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string client_ip = 2;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_ip(), output);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // string app_id = 4;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->app_id(), output);
  }

  // string company_id = 5;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->company_id(), output);
  }

  // string room_id = 6;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->room_id(), output);
  }

  // int32 type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.GetGroupServers)
}

::google::protobuf::uint8* GetGroupServers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string client_ip = 2;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_ip(), target);
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // string app_id = 4;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->app_id(), target);
  }

  // string company_id = 5;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->company_id(), target);
  }

  // string room_id = 6;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->room_id(), target);
  }

  // int32 type = 7;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  return target;
}

size_t GetGroupServers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string client_ip = 2;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string app_id = 4;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string company_id = 5;
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->company_id());
  }

  // string room_id = 6;
  if (this->room_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_id());
  }

  // int32 type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupServers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGroupServers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetGroupServers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.GetGroupServers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.GetGroupServers)
    MergeFrom(*source);
  }
}

void GetGroupServers::MergeFrom(const GetGroupServers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.client_ip().size() > 0) {
    set_client_ip(from.client_ip());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.company_id().size() > 0) {
    set_company_id(from.company_id());
  }
  if (from.room_id().size() > 0) {
    set_room_id(from.room_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GetGroupServers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupServers::CopyFrom(const GetGroupServers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.GetGroupServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupServers::IsInitialized() const {
  return true;
}

void GetGroupServers::Swap(GetGroupServers* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetGroupServers* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetGroupServers::UnsafeArenaSwap(GetGroupServers* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetGroupServers::InternalSwap(GetGroupServers* other) {
  group_id_.Swap(&other->group_id_);
  client_ip_.Swap(&other->client_ip_);
  user_id_.Swap(&other->user_id_);
  app_id_.Swap(&other->app_id_);
  company_id_.Swap(&other->company_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetGroupServers::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetGroupServers

// string group_id = 1;
void GetGroupServers::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetGroupServers::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
  return group_id_.Get();
}
void GetGroupServers::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}
void GetGroupServers::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}
void GetGroupServers::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}
::std::string* GetGroupServers::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetGroupServers::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}
void GetGroupServers::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}

// string client_ip = 2;
void GetGroupServers::clear_client_ip() {
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetGroupServers::client_ip() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
  return client_ip_.Get();
}
void GetGroupServers::set_client_ip(const ::std::string& value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}
void GetGroupServers::set_client_ip(const char* value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}
void GetGroupServers::set_client_ip(const char* value,
    size_t size) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}
::std::string* GetGroupServers::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
  return client_ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::release_client_ip() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
  
  return client_ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::unsafe_arena_release_client_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetGroupServers::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}
void GetGroupServers::unsafe_arena_set_allocated_client_ip(
    ::std::string* client_ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}

// string user_id = 3;
void GetGroupServers::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetGroupServers::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
  return user_id_.Get();
}
void GetGroupServers::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}
void GetGroupServers::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}
void GetGroupServers::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}
::std::string* GetGroupServers::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetGroupServers::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}
void GetGroupServers::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}

// string app_id = 4;
void GetGroupServers::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetGroupServers::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
  return app_id_.Get();
}
void GetGroupServers::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}
void GetGroupServers::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}
void GetGroupServers::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}
::std::string* GetGroupServers::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetGroupServers::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}
void GetGroupServers::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}

// string company_id = 5;
void GetGroupServers::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetGroupServers::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
  return company_id_.Get();
}
void GetGroupServers::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}
void GetGroupServers::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}
void GetGroupServers::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}
::std::string* GetGroupServers::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetGroupServers::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}
void GetGroupServers::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}

// string room_id = 6;
void GetGroupServers::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetGroupServers::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
  return room_id_.Get();
}
void GetGroupServers::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}
void GetGroupServers::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}
void GetGroupServers::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}
::std::string* GetGroupServers::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetGroupServers::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetGroupServers::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}
void GetGroupServers::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}

// int32 type = 7;
void GetGroupServers::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 GetGroupServers::type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.type)
  return type_;
}
void GetGroupServers::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetGroupServersRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetGroupServersRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetGroupServersRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GetGroupServersRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GetGroupServersRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetGroupServersRsp::kResponseFieldNumber;
const int GetGroupServersRsp::kGroupServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetGroupServersRsp::GetGroupServersRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
}
GetGroupServersRsp::GetGroupServersRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  group_servers_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
}
GetGroupServersRsp::GetGroupServersRsp(const GetGroupServersRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      group_servers_(from.group_servers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
}

void GetGroupServersRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

GetGroupServersRsp::~GetGroupServersRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  SharedDtor();
}

void GetGroupServersRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GetGroupServersRsp::ArenaDtor(void* object) {
  GetGroupServersRsp* _this = reinterpret_cast< GetGroupServersRsp* >(object);
  (void)_this;
}
void GetGroupServersRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetGroupServersRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetGroupServersRsp::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[5].descriptor;
}

const GetGroupServersRsp& GetGroupServersRsp::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetGroupServersRsp* GetGroupServersRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetGroupServersRsp>(arena);
}

void GetGroupServersRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  group_servers_.Clear();
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool GetGroupServersRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.fsmeeting.fsp.proto.common.GroupServer group_servers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_group_servers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  return false;
#undef DO_
}

void GetGroupServersRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // repeated .com.fsmeeting.fsp.proto.common.GroupServer group_servers = 2;
  for (unsigned int i = 0, n = this->group_servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_servers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
}

::google::protobuf::uint8* GetGroupServersRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // repeated .com.fsmeeting.fsp.proto.common.GroupServer group_servers = 2;
  for (unsigned int i = 0, n = this->group_servers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->group_servers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  return target;
}

size_t GetGroupServersRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  size_t total_size = 0;

  // repeated .com.fsmeeting.fsp.proto.common.GroupServer group_servers = 2;
  {
    unsigned int count = this->group_servers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_servers(i));
    }
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetGroupServersRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetGroupServersRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetGroupServersRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
    MergeFrom(*source);
  }
}

void GetGroupServersRsp::MergeFrom(const GetGroupServersRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_servers_.MergeFrom(from.group_servers_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void GetGroupServersRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetGroupServersRsp::CopyFrom(const GetGroupServersRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetGroupServersRsp::IsInitialized() const {
  return true;
}

void GetGroupServersRsp::Swap(GetGroupServersRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetGroupServersRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetGroupServersRsp::UnsafeArenaSwap(GetGroupServersRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetGroupServersRsp::InternalSwap(GetGroupServersRsp* other) {
  group_servers_.UnsafeArenaSwap(&other->group_servers_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetGroupServersRsp::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetGroupServersRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GetGroupServersRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GetGroupServersRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetGroupServersRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetGroupServersRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetGroupServersRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GetGroupServersRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
}

// repeated .com.fsmeeting.fsp.proto.common.GroupServer group_servers = 2;
int GetGroupServersRsp::group_servers_size() const {
  return group_servers_.size();
}
void GetGroupServersRsp::clear_group_servers() {
  group_servers_.Clear();
}
const ::com::fsmeeting::fsp::proto::common::GroupServer& GetGroupServersRsp::group_servers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return group_servers_.Get(index);
}
::com::fsmeeting::fsp::proto::common::GroupServer* GetGroupServersRsp::mutable_group_servers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return group_servers_.Mutable(index);
}
::com::fsmeeting::fsp::proto::common::GroupServer* GetGroupServersRsp::add_group_servers() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return group_servers_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::GroupServer >*
GetGroupServersRsp::mutable_group_servers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return &group_servers_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::GroupServer >&
GetGroupServersRsp::group_servers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return group_servers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void JoinGroup::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* JoinGroup::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* JoinGroup::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void JoinGroup::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void JoinGroup::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGroup::kGroupIdFieldNumber;
const int JoinGroup::kUserIdFieldNumber;
const int JoinGroup::kGroupTokenFieldNumber;
const int JoinGroup::kClientIdFieldNumber;
const int JoinGroup::kServiceInstanceIdFieldNumber;
const int JoinGroup::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGroup::JoinGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.JoinGroup)
}
JoinGroup::JoinGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.JoinGroup)
}
JoinGroup::JoinGroup(const JoinGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  group_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_token().size() > 0) {
    group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_token(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_instance_id().size() > 0) {
    service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_instance_id(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.JoinGroup)
}

void JoinGroup::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commoninvokeinfo_ = NULL;
  _cached_size_ = 0;
}

JoinGroup::~JoinGroup() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.JoinGroup)
  SharedDtor();
}

void JoinGroup::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void JoinGroup::ArenaDtor(void* object) {
  JoinGroup* _this = reinterpret_cast< JoinGroup* >(object);
  (void)_this;
}
void JoinGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void JoinGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroup::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[6].descriptor;
}

const JoinGroup& JoinGroup::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinGroup* JoinGroup::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<JoinGroup>(arena);
}

void JoinGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.JoinGroup)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
}

bool JoinGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.JoinGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.JoinGroup.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.JoinGroup.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_token = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_token().data(), this->group_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.JoinGroup.group_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.JoinGroup.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_instance_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_instance_id().data(), this->service_instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.JoinGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.JoinGroup)
  return false;
#undef DO_
}

void JoinGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.JoinGroup)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string group_token = 3;
  if (this->group_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_token().data(), this->group_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.group_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_token(), output);
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_id(), output);
  }

  // string service_instance_id = 5;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->service_instance_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 6;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.JoinGroup)
}

::google::protobuf::uint8* JoinGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.JoinGroup)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string group_token = 3;
  if (this->group_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_token().data(), this->group_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.group_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_token(), target);
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_id(), target);
  }

  // string service_instance_id = 5;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->service_instance_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 6;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.JoinGroup)
  return target;
}

size_t JoinGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.JoinGroup)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string group_token = 3;
  if (this->group_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_token());
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string service_instance_id = 5;
  if (this->service_instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_instance_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 6;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.JoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.JoinGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.JoinGroup)
    MergeFrom(*source);
  }
}

void JoinGroup::MergeFrom(const JoinGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.JoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.group_token().size() > 0) {
    set_group_token(from.group_token());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.service_instance_id().size() > 0) {
    set_service_instance_id(from.service_instance_id());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
}

void JoinGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.JoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroup::CopyFrom(const JoinGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.JoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroup::IsInitialized() const {
  return true;
}

void JoinGroup::Swap(JoinGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    JoinGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void JoinGroup::UnsafeArenaSwap(JoinGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void JoinGroup::InternalSwap(JoinGroup* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  group_token_.Swap(&other->group_token_);
  client_id_.Swap(&other->client_id_);
  service_instance_id_.Swap(&other->service_instance_id_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinGroup::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGroup

// string group_id = 1;
void JoinGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
  return group_id_.Get();
}
void JoinGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}
void JoinGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}
void JoinGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}
::std::string* JoinGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}
void JoinGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}

// string user_id = 2;
void JoinGroup::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroup::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
  return user_id_.Get();
}
void JoinGroup::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}
void JoinGroup::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}
void JoinGroup::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}
::std::string* JoinGroup::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroup::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}
void JoinGroup::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}

// string group_token = 3;
void JoinGroup::clear_group_token() {
  group_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroup::group_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
  return group_token_.Get();
}
void JoinGroup::set_group_token(const ::std::string& value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}
void JoinGroup::set_group_token(const char* value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}
void JoinGroup::set_group_token(const char* value,
    size_t size) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}
::std::string* JoinGroup::mutable_group_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
  return group_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::release_group_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
  
  return group_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::unsafe_arena_release_group_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroup::set_allocated_group_token(::std::string* group_token) {
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}
void JoinGroup::unsafe_arena_set_allocated_group_token(
    ::std::string* group_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}

// string client_id = 4;
void JoinGroup::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroup::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
  return client_id_.Get();
}
void JoinGroup::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}
void JoinGroup::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}
void JoinGroup::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}
::std::string* JoinGroup::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroup::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}
void JoinGroup::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}

// string service_instance_id = 5;
void JoinGroup::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroup::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
  return service_instance_id_.Get();
}
void JoinGroup::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}
void JoinGroup::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}
void JoinGroup::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}
::std::string* JoinGroup::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroup::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}
void JoinGroup::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 6;
bool JoinGroup::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void JoinGroup::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& JoinGroup::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* JoinGroup::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* JoinGroup::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void JoinGroup::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void JoinGroupRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void JoinGroupRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void JoinGroupRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGroupRsp::kResponseFieldNumber;
const int JoinGroupRsp::kRoomIdFieldNumber;
const int JoinGroupRsp::kCompanyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGroupRsp::JoinGroupRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
}
JoinGroupRsp::JoinGroupRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
}
JoinGroupRsp::JoinGroupRsp(const JoinGroupRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_id().size() > 0) {
    room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id(),
      GetArenaNoVirtual());
  }
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.company_id().size() > 0) {
    company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_id(),
      GetArenaNoVirtual());
  }
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
}

void JoinGroupRsp::SharedCtor() {
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = NULL;
  _cached_size_ = 0;
}

JoinGroupRsp::~JoinGroupRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  SharedDtor();
}

void JoinGroupRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  room_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  company_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete response_;
  }
}

void JoinGroupRsp::ArenaDtor(void* object) {
  JoinGroupRsp* _this = reinterpret_cast< JoinGroupRsp* >(object);
  (void)_this;
}
void JoinGroupRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void JoinGroupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupRsp::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[7].descriptor;
}

const JoinGroupRsp& JoinGroupRsp::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinGroupRsp* JoinGroupRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<JoinGroupRsp>(arena);
}

void JoinGroupRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool JoinGroupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string company_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  return false;
#undef DO_
}

void JoinGroupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // string room_id = 2;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room_id(), output);
  }

  // string company_id = 3;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->company_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
}

::google::protobuf::uint8* JoinGroupRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // string room_id = 2;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_id(), target);
  }

  // string company_id = 3;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->company_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  return target;
}

size_t JoinGroupRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  size_t total_size = 0;

  // string room_id = 2;
  if (this->room_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_id());
  }

  // string company_id = 3;
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->company_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGroupRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinGroupRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
    MergeFrom(*source);
  }
}

void JoinGroupRsp::MergeFrom(const JoinGroupRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.room_id().size() > 0) {
    set_room_id(from.room_id());
  }
  if (from.company_id().size() > 0) {
    set_company_id(from.company_id());
  }
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void JoinGroupRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupRsp::CopyFrom(const JoinGroupRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupRsp::IsInitialized() const {
  return true;
}

void JoinGroupRsp::Swap(JoinGroupRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    JoinGroupRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void JoinGroupRsp::UnsafeArenaSwap(JoinGroupRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void JoinGroupRsp::InternalSwap(JoinGroupRsp* other) {
  room_id_.Swap(&other->room_id_);
  company_id_.Swap(&other->company_id_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinGroupRsp::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool JoinGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void JoinGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& JoinGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void JoinGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
}

// string room_id = 2;
void JoinGroupRsp::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroupRsp::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
  return room_id_.Get();
}
void JoinGroupRsp::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}
void JoinGroupRsp::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}
void JoinGroupRsp::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}
::std::string* JoinGroupRsp::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroupRsp::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroupRsp::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroupRsp::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}
void JoinGroupRsp::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}

// string company_id = 3;
void JoinGroupRsp::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroupRsp::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
  return company_id_.Get();
}
void JoinGroupRsp::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}
void JoinGroupRsp::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}
void JoinGroupRsp::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}
::std::string* JoinGroupRsp::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroupRsp::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroupRsp::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroupRsp::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}
void JoinGroupRsp::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitGroup::kGroupIdFieldNumber;
const int QuitGroup::kUserIdFieldNumber;
const int QuitGroup::kClientIdFieldNumber;
const int QuitGroup::kServiceInstanceIdFieldNumber;
const int QuitGroup::kServiceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitGroup::QuitGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.QuitGroup)
}
QuitGroup::QuitGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.QuitGroup)
}
QuitGroup::QuitGroup(const QuitGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_instance_id().size() > 0) {
    service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_instance_id(),
      GetArenaNoVirtual());
  }
  service_type_ = from.service_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.QuitGroup)
}

void QuitGroup::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_type_ = 0;
  _cached_size_ = 0;
}

QuitGroup::~QuitGroup() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.QuitGroup)
  SharedDtor();
}

void QuitGroup::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void QuitGroup::ArenaDtor(void* object) {
  QuitGroup* _this = reinterpret_cast< QuitGroup* >(object);
  (void)_this;
}
void QuitGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QuitGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitGroup::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[8].descriptor;
}

const QuitGroup& QuitGroup::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitGroup* QuitGroup::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QuitGroup>(arena);
}

void QuitGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.QuitGroup)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_type_ = 0;
}

bool QuitGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.QuitGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.QuitGroup.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.QuitGroup.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.QuitGroup.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_instance_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_instance_id().data(), this->service_instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.ServerType service_type = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_service_type(static_cast< ::com::fsmeeting::fsp::proto::common::ServerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.QuitGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.QuitGroup)
  return false;
#undef DO_
}

void QuitGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.QuitGroup)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.QuitGroup.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.QuitGroup.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.QuitGroup.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_id(), output);
  }

  // string service_instance_id = 4;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->service_instance_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.ServerType service_type = 5;
  if (this->service_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->service_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.QuitGroup)
}

::google::protobuf::uint8* QuitGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.QuitGroup)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.QuitGroup.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.QuitGroup.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.QuitGroup.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_id(), target);
  }

  // string service_instance_id = 4;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->service_instance_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.ServerType service_type = 5;
  if (this->service_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->service_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.QuitGroup)
  return target;
}

size_t QuitGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.QuitGroup)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string service_instance_id = 4;
  if (this->service_instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_instance_id());
  }

  // .com.fsmeeting.fsp.proto.common.ServerType service_type = 5;
  if (this->service_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->service_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.QuitGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.QuitGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.QuitGroup)
    MergeFrom(*source);
  }
}

void QuitGroup::MergeFrom(const QuitGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.QuitGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.service_instance_id().size() > 0) {
    set_service_instance_id(from.service_instance_id());
  }
  if (from.service_type() != 0) {
    set_service_type(from.service_type());
  }
}

void QuitGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.QuitGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGroup::CopyFrom(const QuitGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.QuitGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroup::IsInitialized() const {
  return true;
}

void QuitGroup::Swap(QuitGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QuitGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void QuitGroup::UnsafeArenaSwap(QuitGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QuitGroup::InternalSwap(QuitGroup* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  client_id_.Swap(&other->client_id_);
  service_instance_id_.Swap(&other->service_instance_id_);
  std::swap(service_type_, other->service_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitGroup::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitGroup

// string group_id = 1;
void QuitGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& QuitGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
  return group_id_.Get();
}
void QuitGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}
void QuitGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}
void QuitGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}
::std::string* QuitGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void QuitGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}
void QuitGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}

// string user_id = 2;
void QuitGroup::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& QuitGroup::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
  return user_id_.Get();
}
void QuitGroup::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}
void QuitGroup::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}
void QuitGroup::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}
::std::string* QuitGroup::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void QuitGroup::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}
void QuitGroup::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}

// string client_id = 3;
void QuitGroup::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& QuitGroup::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
  return client_id_.Get();
}
void QuitGroup::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}
void QuitGroup::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}
void QuitGroup::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}
::std::string* QuitGroup::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void QuitGroup::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}
void QuitGroup::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}

// string service_instance_id = 4;
void QuitGroup::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& QuitGroup::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
  return service_instance_id_.Get();
}
void QuitGroup::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}
void QuitGroup::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}
void QuitGroup::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}
::std::string* QuitGroup::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void QuitGroup::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}
void QuitGroup::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}

// .com.fsmeeting.fsp.proto.common.ServerType service_type = 5;
void QuitGroup::clear_service_type() {
  service_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::ServerType QuitGroup::service_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.service_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ServerType >(service_type_);
}
void QuitGroup::set_service_type(::com::fsmeeting::fsp::proto::common::ServerType value) {
  
  service_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.service_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void QuitGroupRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void QuitGroupRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void QuitGroupRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitGroupRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitGroupRsp::QuitGroupRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
}
QuitGroupRsp::QuitGroupRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
}
QuitGroupRsp::QuitGroupRsp(const QuitGroupRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
}

void QuitGroupRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

QuitGroupRsp::~QuitGroupRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  SharedDtor();
}

void QuitGroupRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void QuitGroupRsp::ArenaDtor(void* object) {
  QuitGroupRsp* _this = reinterpret_cast< QuitGroupRsp* >(object);
  (void)_this;
}
void QuitGroupRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QuitGroupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitGroupRsp::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[9].descriptor;
}

const QuitGroupRsp& QuitGroupRsp::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitGroupRsp* QuitGroupRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QuitGroupRsp>(arena);
}

void QuitGroupRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool QuitGroupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  return false;
#undef DO_
}

void QuitGroupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
}

::google::protobuf::uint8* QuitGroupRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  return target;
}

size_t QuitGroupRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitGroupRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGroupRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitGroupRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
    MergeFrom(*source);
  }
}

void QuitGroupRsp::MergeFrom(const QuitGroupRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void QuitGroupRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGroupRsp::CopyFrom(const QuitGroupRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroupRsp::IsInitialized() const {
  return true;
}

void QuitGroupRsp::Swap(QuitGroupRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QuitGroupRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void QuitGroupRsp::UnsafeArenaSwap(QuitGroupRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QuitGroupRsp::InternalSwap(QuitGroupRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitGroupRsp::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool QuitGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void QuitGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& QuitGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void QuitGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamPublished::kClientIdFieldNumber;
const int NotifyStreamPublished::kStreamIdFieldNumber;
const int NotifyStreamPublished::kGroupIdFieldNumber;
const int NotifyStreamPublished::kUserIdFieldNumber;
const int NotifyStreamPublished::kMediaIdFieldNumber;
const int NotifyStreamPublished::kMediaTypeFieldNumber;
const int NotifyStreamPublished::kMediaId2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamPublished::NotifyStreamPublished()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
}
NotifyStreamPublished::NotifyStreamPublished(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
}
NotifyStreamPublished::NotifyStreamPublished(const NotifyStreamPublished& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  media_id2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.media_id2().size() > 0) {
    media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_id2(),
      GetArenaNoVirtual());
  }
  ::memcpy(&media_id_, &from.media_id_,
    reinterpret_cast<char*>(&media_type_) -
    reinterpret_cast<char*>(&media_id_) + sizeof(media_type_));
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
}

void NotifyStreamPublished::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&media_id_, 0, reinterpret_cast<char*>(&media_type_) -
    reinterpret_cast<char*>(&media_id_) + sizeof(media_type_));
  _cached_size_ = 0;
}

NotifyStreamPublished::~NotifyStreamPublished() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  SharedDtor();
}

void NotifyStreamPublished::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  media_id2_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NotifyStreamPublished::ArenaDtor(void* object) {
  NotifyStreamPublished* _this = reinterpret_cast< NotifyStreamPublished* >(object);
  (void)_this;
}
void NotifyStreamPublished::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamPublished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamPublished::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[10].descriptor;
}

const NotifyStreamPublished& NotifyStreamPublished::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamPublished* NotifyStreamPublished::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamPublished>(arena);
}

void NotifyStreamPublished::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_id2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&media_id_, 0, reinterpret_cast<char*>(&media_type_) -
    reinterpret_cast<char*>(&media_id_) + sizeof(media_type_));
}

bool NotifyStreamPublished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 media_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_media_type(static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_id2 = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_id2().data(), this->media_id2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  return false;
#undef DO_
}

void NotifyStreamPublished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_id(), output);
  }

  // string group_id = 3;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_id(), output);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // int32 media_id = 5;
  if (this->media_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->media_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->media_type(), output);
  }

  // string media_id2 = 7;
  if (this->media_id2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id2().data(), this->media_id2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->media_id2(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
}

::google::protobuf::uint8* NotifyStreamPublished::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_id(), target);
  }

  // string group_id = 3;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_id(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // int32 media_id = 5;
  if (this->media_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->media_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->media_type(), target);
  }

  // string media_id2 = 7;
  if (this->media_id2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id2().data(), this->media_id2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->media_id2(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  return target;
}

size_t NotifyStreamPublished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  size_t total_size = 0;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string group_id = 3;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string media_id2 = 7;
  if (this->media_id2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_id2());
  }

  // int32 media_id = 5;
  if (this->media_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->media_id());
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamPublished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamPublished* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamPublished>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
    MergeFrom(*source);
  }
}

void NotifyStreamPublished::MergeFrom(const NotifyStreamPublished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.media_id2().size() > 0) {
    set_media_id2(from.media_id2());
  }
  if (from.media_id() != 0) {
    set_media_id(from.media_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void NotifyStreamPublished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamPublished::CopyFrom(const NotifyStreamPublished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamPublished::IsInitialized() const {
  return true;
}

void NotifyStreamPublished::Swap(NotifyStreamPublished* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamPublished* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamPublished::UnsafeArenaSwap(NotifyStreamPublished* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamPublished::InternalSwap(NotifyStreamPublished* other) {
  client_id_.Swap(&other->client_id_);
  stream_id_.Swap(&other->stream_id_);
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  media_id2_.Swap(&other->media_id2_);
  std::swap(media_id_, other->media_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamPublished::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamPublished

// string client_id = 1;
void NotifyStreamPublished::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamPublished::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
  return client_id_.Get();
}
void NotifyStreamPublished::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}
void NotifyStreamPublished::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}
void NotifyStreamPublished::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}
::std::string* NotifyStreamPublished::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamPublished::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}
void NotifyStreamPublished::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}

// string stream_id = 2;
void NotifyStreamPublished::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamPublished::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
  return stream_id_.Get();
}
void NotifyStreamPublished::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}
void NotifyStreamPublished::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}
void NotifyStreamPublished::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}
::std::string* NotifyStreamPublished::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamPublished::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}
void NotifyStreamPublished::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}

// string group_id = 3;
void NotifyStreamPublished::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamPublished::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
  return group_id_.Get();
}
void NotifyStreamPublished::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}
void NotifyStreamPublished::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}
void NotifyStreamPublished::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}
::std::string* NotifyStreamPublished::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamPublished::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}
void NotifyStreamPublished::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}

// string user_id = 4;
void NotifyStreamPublished::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamPublished::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
  return user_id_.Get();
}
void NotifyStreamPublished::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}
void NotifyStreamPublished::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}
void NotifyStreamPublished::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}
::std::string* NotifyStreamPublished::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamPublished::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}
void NotifyStreamPublished::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}

// int32 media_id = 5;
void NotifyStreamPublished::clear_media_id() {
  media_id_ = 0;
}
::google::protobuf::int32 NotifyStreamPublished::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id)
  return media_id_;
}
void NotifyStreamPublished::set_media_id(::google::protobuf::int32 value) {
  
  media_id_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
void NotifyStreamPublished::clear_media_type() {
  media_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::MediaType NotifyStreamPublished::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
void NotifyStreamPublished::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_type)
}

// string media_id2 = 7;
void NotifyStreamPublished::clear_media_id2() {
  media_id2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamPublished::media_id2() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
  return media_id2_.Get();
}
void NotifyStreamPublished::set_media_id2(const ::std::string& value) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}
void NotifyStreamPublished::set_media_id2(const char* value) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}
void NotifyStreamPublished::set_media_id2(const char* value,
    size_t size) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}
::std::string* NotifyStreamPublished::mutable_media_id2() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
  return media_id2_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::release_media_id2() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
  
  return media_id2_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::unsafe_arena_release_media_id2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id2_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamPublished::set_allocated_media_id2(::std::string* media_id2) {
  if (media_id2 != NULL) {
    
  } else {
    
  }
  media_id2_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}
void NotifyStreamPublished::unsafe_arena_set_allocated_media_id2(
    ::std::string* media_id2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id2 != NULL) {
    
  } else {
    
  }
  media_id2_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamPublishedRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyStreamPublishedRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyStreamPublishedRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamPublishedRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamPublishedRsp::NotifyStreamPublishedRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
}
NotifyStreamPublishedRsp::NotifyStreamPublishedRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
}
NotifyStreamPublishedRsp::NotifyStreamPublishedRsp(const NotifyStreamPublishedRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
}

void NotifyStreamPublishedRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamPublishedRsp::~NotifyStreamPublishedRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  SharedDtor();
}

void NotifyStreamPublishedRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyStreamPublishedRsp::ArenaDtor(void* object) {
  NotifyStreamPublishedRsp* _this = reinterpret_cast< NotifyStreamPublishedRsp* >(object);
  (void)_this;
}
void NotifyStreamPublishedRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamPublishedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamPublishedRsp::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[11].descriptor;
}

const NotifyStreamPublishedRsp& NotifyStreamPublishedRsp::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamPublishedRsp* NotifyStreamPublishedRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamPublishedRsp>(arena);
}

void NotifyStreamPublishedRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyStreamPublishedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  return false;
#undef DO_
}

void NotifyStreamPublishedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
}

::google::protobuf::uint8* NotifyStreamPublishedRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  return target;
}

size_t NotifyStreamPublishedRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamPublishedRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamPublishedRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamPublishedRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
    MergeFrom(*source);
  }
}

void NotifyStreamPublishedRsp::MergeFrom(const NotifyStreamPublishedRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyStreamPublishedRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamPublishedRsp::CopyFrom(const NotifyStreamPublishedRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamPublishedRsp::IsInitialized() const {
  return true;
}

void NotifyStreamPublishedRsp::Swap(NotifyStreamPublishedRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamPublishedRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamPublishedRsp::UnsafeArenaSwap(NotifyStreamPublishedRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamPublishedRsp::InternalSwap(NotifyStreamPublishedRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamPublishedRsp::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamPublishedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyStreamPublishedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyStreamPublishedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamPublishedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyStreamPublishedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetStream::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetStream::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetStream::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void GetStream::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void GetStream::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStream::kGroupIdFieldNumber;
const int GetStream::kUserIdFieldNumber;
const int GetStream::kMediaIdFieldNumber;
const int GetStream::kMediaTypeFieldNumber;
const int GetStream::kCommonInvokeInfoFieldNumber;
const int GetStream::kMediaId2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStream::GetStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.GetStream)
}
GetStream::GetStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.GetStream)
}
GetStream::GetStream(const GetStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  media_id2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.media_id2().size() > 0) {
    media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_id2(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  ::memcpy(&media_id_, &from.media_id_,
    reinterpret_cast<char*>(&media_type_) -
    reinterpret_cast<char*>(&media_id_) + sizeof(media_type_));
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.GetStream)
}

void GetStream::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commoninvokeinfo_, 0, reinterpret_cast<char*>(&media_type_) -
    reinterpret_cast<char*>(&commoninvokeinfo_) + sizeof(media_type_));
  _cached_size_ = 0;
}

GetStream::~GetStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.GetStream)
  SharedDtor();
}

void GetStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  media_id2_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void GetStream::ArenaDtor(void* object) {
  GetStream* _this = reinterpret_cast< GetStream* >(object);
  (void)_this;
}
void GetStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStream::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[12].descriptor;
}

const GetStream& GetStream::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStream* GetStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStream>(arena);
}

void GetStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.GetStream)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_id2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
  ::memset(&media_id_, 0, reinterpret_cast<char*>(&media_type_) -
    reinterpret_cast<char*>(&media_id_) + sizeof(media_type_));
}

bool GetStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.GetStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.GetStream.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.GetStream.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 media_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_media_type(static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_id2 = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_id2().data(), this->media_id2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.GetStream.media_id2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.GetStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.GetStream)
  return false;
#undef DO_
}

void GetStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.GetStream)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetStream.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetStream.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // int32 media_id = 3;
  if (this->media_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->media_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->media_type(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->commoninvokeinfo_, output);
  }

  // string media_id2 = 6;
  if (this->media_id2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id2().data(), this->media_id2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetStream.media_id2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->media_id2(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.GetStream)
}

::google::protobuf::uint8* GetStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.GetStream)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetStream.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetStream.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // int32 media_id = 3;
  if (this->media_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->media_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->media_type(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->commoninvokeinfo_, false, target);
  }

  // string media_id2 = 6;
  if (this->media_id2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id2().data(), this->media_id2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.GetStream.media_id2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->media_id2(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.GetStream)
  return target;
}

size_t GetStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.GetStream)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string media_id2 = 6;
  if (this->media_id2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_id2());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  // int32 media_id = 3;
  if (this->media_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->media_id());
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.GetStream)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.GetStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.GetStream)
    MergeFrom(*source);
  }
}

void GetStream::MergeFrom(const GetStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.GetStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.media_id2().size() > 0) {
    set_media_id2(from.media_id2());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
  if (from.media_id() != 0) {
    set_media_id(from.media_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void GetStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.GetStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStream::CopyFrom(const GetStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.GetStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStream::IsInitialized() const {
  return true;
}

void GetStream::Swap(GetStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStream::UnsafeArenaSwap(GetStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStream::InternalSwap(GetStream* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  media_id2_.Swap(&other->media_id2_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(media_id_, other->media_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStream::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStream

// string group_id = 1;
void GetStream::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStream::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
  return group_id_.Get();
}
void GetStream::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}
void GetStream::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}
void GetStream::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}
::std::string* GetStream::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStream::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}
void GetStream::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}

// string user_id = 2;
void GetStream::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStream::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
  return user_id_.Get();
}
void GetStream::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}
void GetStream::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}
void GetStream::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}
::std::string* GetStream::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStream::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}
void GetStream::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}

// int32 media_id = 3;
void GetStream::clear_media_id() {
  media_id_ = 0;
}
::google::protobuf::int32 GetStream::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.media_id)
  return media_id_;
}
void GetStream::set_media_id(::google::protobuf::int32 value) {
  
  media_id_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
void GetStream::clear_media_type() {
  media_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::MediaType GetStream::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
void GetStream::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.media_type)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
bool GetStream::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void GetStream::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& GetStream::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetStream::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetStream::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void GetStream::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
}

// string media_id2 = 6;
void GetStream::clear_media_id2() {
  media_id2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStream::media_id2() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
  return media_id2_.Get();
}
void GetStream::set_media_id2(const ::std::string& value) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}
void GetStream::set_media_id2(const char* value) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}
void GetStream::set_media_id2(const char* value,
    size_t size) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}
::std::string* GetStream::mutable_media_id2() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
  return media_id2_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::release_media_id2() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
  
  return media_id2_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::unsafe_arena_release_media_id2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id2_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStream::set_allocated_media_id2(::std::string* media_id2) {
  if (media_id2 != NULL) {
    
  } else {
    
  }
  media_id2_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}
void GetStream::unsafe_arena_set_allocated_media_id2(
    ::std::string* media_id2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id2 != NULL) {
    
  } else {
    
  }
  media_id2_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GetStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GetStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
}
void GetStreamRsp::_slow_mutable_stream() {
  stream_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::Stream >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::_slow_release_stream() {
  if (stream_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::Stream* temp = new ::com::fsmeeting::fsp::proto::common::Stream(*stream_);
    stream_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
  
  ::com::fsmeeting::fsp::proto::common::Stream* temp = stream_;
  stream_ = NULL;
  return temp;
}
void GetStreamRsp::_slow_set_allocated_stream(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::Stream** stream) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stream) == NULL) {
      message_arena->Own(*stream);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stream)) {
      ::com::fsmeeting::fsp::proto::common::Stream* new_stream = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::Stream >(
            message_arena);
      new_stream->CopyFrom(**stream);
      *stream = new_stream;
    }
}
void GetStreamRsp::unsafe_arena_set_allocated_stream(
    ::com::fsmeeting::fsp::proto::common::Stream* stream) {
  if (GetArenaNoVirtual() == NULL) {
    delete stream_;
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamRsp::kResponseFieldNumber;
const int GetStreamRsp::kStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamRsp::GetStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
}
GetStreamRsp::GetStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
}
GetStreamRsp::GetStreamRsp(const GetStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_stream()) {
    stream_ = new ::com::fsmeeting::fsp::proto::common::Stream(*from.stream_);
  } else {
    stream_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
}

void GetStreamRsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&stream_) -
    reinterpret_cast<char*>(&response_) + sizeof(stream_));
  _cached_size_ = 0;
}

GetStreamRsp::~GetStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  SharedDtor();
}

void GetStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
  if (this != internal_default_instance()) {
    delete stream_;
  }
}

void GetStreamRsp::ArenaDtor(void* object) {
  GetStreamRsp* _this = reinterpret_cast< GetStreamRsp* >(object);
  (void)_this;
}
void GetStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamRsp::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[13].descriptor;
}

const GetStreamRsp& GetStreamRsp::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamRsp* GetStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamRsp>(arena);
}

void GetStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  if (GetArenaNoVirtual() == NULL && stream_ != NULL) {
    delete stream_;
  }
  stream_ = NULL;
}

bool GetStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  return false;
#undef DO_
}

void GetStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  if (this->has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stream_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
}

::google::protobuf::uint8* GetStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  if (this->has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stream_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  return target;
}

size_t GetStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  if (this->has_stream()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stream_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
    MergeFrom(*source);
  }
}

void GetStreamRsp::MergeFrom(const GetStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.has_stream()) {
    mutable_stream()->::com::fsmeeting::fsp::proto::common::Stream::MergeFrom(from.stream());
  }
}

void GetStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamRsp::CopyFrom(const GetStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamRsp::IsInitialized() const {
  return true;
}

void GetStreamRsp::Swap(GetStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamRsp::UnsafeArenaSwap(GetStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamRsp::InternalSwap(GetStreamRsp* other) {
  std::swap(response_, other->response_);
  std::swap(stream_, other->stream_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamRsp::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GetStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GetStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GetStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
}

// .com.fsmeeting.fsp.proto.common.Stream stream = 2;
bool GetStreamRsp::has_stream() const {
  return this != internal_default_instance() && stream_ != NULL;
}
void GetStreamRsp::clear_stream() {
  if (GetArenaNoVirtual() == NULL && stream_ != NULL) delete stream_;
  stream_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::Stream& GetStreamRsp::stream() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
  return stream_ != NULL ? *stream_
                         : *::com::fsmeeting::fsp::proto::common::Stream::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::mutable_stream() {
  
  if (stream_ == NULL) {
    _slow_mutable_stream();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
  return stream_;
}
::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::release_stream() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stream();
  } else {
    ::com::fsmeeting::fsp::proto::common::Stream* temp = stream_;
    stream_ = NULL;
    return temp;
  }
}
 void GetStreamRsp::set_allocated_stream(::com::fsmeeting::fsp::proto::common::Stream* stream) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stream_;
  }
  if (stream != NULL) {
    _slow_set_allocated_stream(message_arena, &stream);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastMediaInfo::kGroupIdFieldNumber;
const int BroadcastMediaInfo::kUserIdFieldNumber;
const int BroadcastMediaInfo::kMediaTypeFieldNumber;
const int BroadcastMediaInfo::kMediaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastMediaInfo::BroadcastMediaInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
}
BroadcastMediaInfo::BroadcastMediaInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
}
BroadcastMediaInfo::BroadcastMediaInfo(const BroadcastMediaInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.media_id().size() > 0) {
    media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_id(),
      GetArenaNoVirtual());
  }
  media_type_ = from.media_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
}

void BroadcastMediaInfo::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  _cached_size_ = 0;
}

BroadcastMediaInfo::~BroadcastMediaInfo() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  SharedDtor();
}

void BroadcastMediaInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  media_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void BroadcastMediaInfo::ArenaDtor(void* object) {
  BroadcastMediaInfo* _this = reinterpret_cast< BroadcastMediaInfo* >(object);
  (void)_this;
}
void BroadcastMediaInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BroadcastMediaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastMediaInfo::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[14].descriptor;
}

const BroadcastMediaInfo& BroadcastMediaInfo::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

BroadcastMediaInfo* BroadcastMediaInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BroadcastMediaInfo>(arena);
}

void BroadcastMediaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_type_ = 0;
}

bool BroadcastMediaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 media_type = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  return false;
#undef DO_
}

void BroadcastMediaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // int32 media_type = 3;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->media_type(), output);
  }

  // string media_id = 4;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->media_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
}

::google::protobuf::uint8* BroadcastMediaInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // int32 media_type = 3;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->media_type(), target);
  }

  // string media_id = 4;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->media_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  return target;
}

size_t BroadcastMediaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string media_id = 4;
  if (this->media_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_id());
  }

  // int32 media_type = 3;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastMediaInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastMediaInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastMediaInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
    MergeFrom(*source);
  }
}

void BroadcastMediaInfo::MergeFrom(const BroadcastMediaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.media_id().size() > 0) {
    set_media_id(from.media_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void BroadcastMediaInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastMediaInfo::CopyFrom(const BroadcastMediaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMediaInfo::IsInitialized() const {
  return true;
}

void BroadcastMediaInfo::Swap(BroadcastMediaInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BroadcastMediaInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BroadcastMediaInfo::UnsafeArenaSwap(BroadcastMediaInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BroadcastMediaInfo::InternalSwap(BroadcastMediaInfo* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  media_id_.Swap(&other->media_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastMediaInfo::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastMediaInfo

// string group_id = 1;
void BroadcastMediaInfo::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BroadcastMediaInfo::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
  return group_id_.Get();
}
void BroadcastMediaInfo::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}
void BroadcastMediaInfo::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}
void BroadcastMediaInfo::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}
::std::string* BroadcastMediaInfo::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastMediaInfo::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastMediaInfo::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BroadcastMediaInfo::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}
void BroadcastMediaInfo::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}

// string user_id = 2;
void BroadcastMediaInfo::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BroadcastMediaInfo::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
  return user_id_.Get();
}
void BroadcastMediaInfo::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}
void BroadcastMediaInfo::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}
void BroadcastMediaInfo::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}
::std::string* BroadcastMediaInfo::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastMediaInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastMediaInfo::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BroadcastMediaInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}
void BroadcastMediaInfo::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}

// int32 media_type = 3;
void BroadcastMediaInfo::clear_media_type() {
  media_type_ = 0;
}
::google::protobuf::int32 BroadcastMediaInfo::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_type)
  return media_type_;
}
void BroadcastMediaInfo::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_type)
}

// string media_id = 4;
void BroadcastMediaInfo::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BroadcastMediaInfo::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
  return media_id_.Get();
}
void BroadcastMediaInfo::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}
void BroadcastMediaInfo::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}
void BroadcastMediaInfo::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}
::std::string* BroadcastMediaInfo::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastMediaInfo::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastMediaInfo::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BroadcastMediaInfo::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}
void BroadcastMediaInfo::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void BroadcastMediaInfoRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* BroadcastMediaInfoRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* BroadcastMediaInfoRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void BroadcastMediaInfoRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void BroadcastMediaInfoRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastMediaInfoRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastMediaInfoRsp::BroadcastMediaInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dgc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
}
BroadcastMediaInfoRsp::BroadcastMediaInfoRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dgc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
}
BroadcastMediaInfoRsp::BroadcastMediaInfoRsp(const BroadcastMediaInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
}

void BroadcastMediaInfoRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

BroadcastMediaInfoRsp::~BroadcastMediaInfoRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  SharedDtor();
}

void BroadcastMediaInfoRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void BroadcastMediaInfoRsp::ArenaDtor(void* object) {
  BroadcastMediaInfoRsp* _this = reinterpret_cast< BroadcastMediaInfoRsp* >(object);
  (void)_this;
}
void BroadcastMediaInfoRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BroadcastMediaInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastMediaInfoRsp::descriptor() {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[15].descriptor;
}

const BroadcastMediaInfoRsp& BroadcastMediaInfoRsp::default_instance() {
  protobuf_fsp_2dgc_2eproto::InitDefaults();
  return *internal_default_instance();
}

BroadcastMediaInfoRsp* BroadcastMediaInfoRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BroadcastMediaInfoRsp>(arena);
}

void BroadcastMediaInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool BroadcastMediaInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  return false;
#undef DO_
}

void BroadcastMediaInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
}

::google::protobuf::uint8* BroadcastMediaInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  return target;
}

size_t BroadcastMediaInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastMediaInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastMediaInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastMediaInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
    MergeFrom(*source);
  }
}

void BroadcastMediaInfoRsp::MergeFrom(const BroadcastMediaInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void BroadcastMediaInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastMediaInfoRsp::CopyFrom(const BroadcastMediaInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMediaInfoRsp::IsInitialized() const {
  return true;
}

void BroadcastMediaInfoRsp::Swap(BroadcastMediaInfoRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BroadcastMediaInfoRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BroadcastMediaInfoRsp::UnsafeArenaSwap(BroadcastMediaInfoRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BroadcastMediaInfoRsp::InternalSwap(BroadcastMediaInfoRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastMediaInfoRsp::GetMetadata() const {
  protobuf_fsp_2dgc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dgc_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastMediaInfoRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool BroadcastMediaInfoRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void BroadcastMediaInfoRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& BroadcastMediaInfoRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* BroadcastMediaInfoRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* BroadcastMediaInfoRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void BroadcastMediaInfoRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gc
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

// @@protoc_insertion_point(global_scope)
