// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-sc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fsp-sc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace sc {
class CreateStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateStream> {
} _CreateStream_default_instance_;
class CreateStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateStreamRsp> {
} _CreateStreamRsp_default_instance_;
class DestroyStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DestroyStream> {
} _DestroyStream_default_instance_;
class DestroyStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DestroyStreamRsp> {
} _DestroyStreamRsp_default_instance_;
class ClientConnectedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientConnected> {
} _ClientConnected_default_instance_;
class ClientConnectedRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientConnectedRsp> {
} _ClientConnectedRsp_default_instance_;
class ClientDisconnectedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientDisconnected> {
} _ClientDisconnected_default_instance_;
class ClientDisconnectedRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientDisconnectedRsp> {
} _ClientDisconnectedRsp_default_instance_;
class PublishStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishStream> {
} _PublishStream_default_instance_;
class PublishStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishStreamRsp> {
} _PublishStreamRsp_default_instance_;
class UnpublishStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnpublishStream> {
} _UnpublishStream_default_instance_;
class UnpublishStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnpublishStreamRsp> {
} _UnpublishStreamRsp_default_instance_;
class GetStreamServersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamServers> {
} _GetStreamServers_default_instance_;
class GetStreamServersRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamServersRsp> {
} _GetStreamServersRsp_default_instance_;
class StreamSendingStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamSendingStart> {
} _StreamSendingStart_default_instance_;
class StreamSendingStartRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamSendingStartRsp> {
} _StreamSendingStartRsp_default_instance_;
class StreamSendingStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamSendingStop> {
} _StreamSendingStop_default_instance_;
class StreamSendingStopRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamSendingStopRsp> {
} _StreamSendingStopRsp_default_instance_;
class CheckStreamPublishTokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckStreamPublishToken> {
} _CheckStreamPublishToken_default_instance_;
class CheckStreamPublishTokenRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckStreamPublishTokenRsp> {
} _CheckStreamPublishTokenRsp_default_instance_;
class CheckStreamSubscribeTokenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckStreamSubscribeToken> {
} _CheckStreamSubscribeToken_default_instance_;
class CheckStreamSubscribeTokenRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CheckStreamSubscribeTokenRsp> {
} _CheckStreamSubscribeTokenRsp_default_instance_;
class SetStreamSourceServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetStreamSourceServer> {
} _SetStreamSourceServer_default_instance_;
class SetStreamSourceServerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetStreamSourceServerRsp> {
} _SetStreamSourceServerRsp_default_instance_;
class CleanStreamSourceServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CleanStreamSourceServer> {
} _CleanStreamSourceServer_default_instance_;
class GetSuperiorStreamServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetSuperiorStreamServer> {
} _GetSuperiorStreamServer_default_instance_;
class GetSuperiorStreamServerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetSuperiorStreamServerRsp> {
} _GetSuperiorStreamServerRsp_default_instance_;
class ChannelConnectedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelConnected> {
} _ChannelConnected_default_instance_;
class ChannelConnectedRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelConnectedRsp> {
} _ChannelConnectedRsp_default_instance_;
class ChannelConnected2RspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelConnected2Rsp> {
} _ChannelConnected2Rsp_default_instance_;
class ChannelDisconnectedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelDisconnected> {
} _ChannelDisconnected_default_instance_;
class ChannelDisconnectedRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelDisconnectedRsp> {
} _ChannelDisconnectedRsp_default_instance_;
class GetStreamTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamType> {
} _GetStreamType_default_instance_;
class GetStreamTypeRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamTypeRsp> {
} _GetStreamTypeRsp_default_instance_;
class GetStreamPropertyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamProperty> {
} _GetStreamProperty_default_instance_;
class GetStreamPropertyRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamPropertyRsp> {
} _GetStreamPropertyRsp_default_instance_;

namespace protobuf_fsp_2dsc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[36];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStream, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStream, stream_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStream, stream_property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStream, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamRsp, stream_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateStreamRsp, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyStream, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyStream, app_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyStreamRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnected, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnected, service_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnected, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnected, client_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnected, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectedRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectedRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisconnected, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisconnected, service_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisconnected, app_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisconnectedRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisconnectedRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStream, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStream, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStream, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStream, commoninvokeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStream, set_stream_source_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStreamRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnpublishStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnpublishStream, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnpublishStream, client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnpublishStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnpublishStreamRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, company_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, media_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServersRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServersRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServersRsp, streamservers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStart, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStart, recv_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStart, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStartRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStartRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStop, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStop, recv_client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStopRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStopRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamPublishToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamPublishToken, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamPublishToken, stream_publish_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamPublishTokenRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamPublishTokenRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamPublishTokenRsp, valid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamSubscribeToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamSubscribeToken, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamSubscribeToken, stream_subscribe_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamSubscribeTokenRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamSubscribeTokenRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckStreamSubscribeTokenRsp, valid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStreamSourceServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStreamSourceServer, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStreamSourceServer, service_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStreamSourceServer, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStreamSourceServerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStreamSourceServerRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanStreamSourceServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanStreamSourceServer, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CleanStreamSourceServer, service_instance_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServer, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServer, service_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServer, commoninvokeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServer, unexpected_disconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServer, node_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServerRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServerRsp, stream_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSuperiorStreamServerRsp, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected, service_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnectedRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnectedRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnectedRsp, channel_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected2Rsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected2Rsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected2Rsp, channel_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConnected2Rsp, stream_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDisconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDisconnected, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDisconnected, service_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDisconnected, stream_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDisconnectedRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelDisconnectedRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamType, stream_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamTypeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamTypeRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamTypeRsp, stream_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamProperty, stream_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamPropertyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamPropertyRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamPropertyRsp, stream_property_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CreateStream)},
  { 8, -1, sizeof(CreateStreamRsp)},
  { 15, -1, sizeof(DestroyStream)},
  { 21, -1, sizeof(DestroyStreamRsp)},
  { 26, -1, sizeof(ClientConnected)},
  { 35, -1, sizeof(ClientConnectedRsp)},
  { 40, -1, sizeof(ClientDisconnected)},
  { 47, -1, sizeof(ClientDisconnectedRsp)},
  { 52, -1, sizeof(PublishStream)},
  { 61, -1, sizeof(PublishStreamRsp)},
  { 66, -1, sizeof(UnpublishStream)},
  { 72, -1, sizeof(UnpublishStreamRsp)},
  { 77, -1, sizeof(GetStreamServers)},
  { 90, -1, sizeof(GetStreamServersRsp)},
  { 96, -1, sizeof(StreamSendingStart)},
  { 103, -1, sizeof(StreamSendingStartRsp)},
  { 108, -1, sizeof(StreamSendingStop)},
  { 114, -1, sizeof(StreamSendingStopRsp)},
  { 119, -1, sizeof(CheckStreamPublishToken)},
  { 125, -1, sizeof(CheckStreamPublishTokenRsp)},
  { 131, -1, sizeof(CheckStreamSubscribeToken)},
  { 137, -1, sizeof(CheckStreamSubscribeTokenRsp)},
  { 143, -1, sizeof(SetStreamSourceServer)},
  { 150, -1, sizeof(SetStreamSourceServerRsp)},
  { 155, -1, sizeof(CleanStreamSourceServer)},
  { 161, -1, sizeof(GetSuperiorStreamServer)},
  { 170, -1, sizeof(GetSuperiorStreamServerRsp)},
  { 177, -1, sizeof(ChannelConnected)},
  { 186, -1, sizeof(ChannelConnectedRsp)},
  { 192, -1, sizeof(ChannelConnected2Rsp)},
  { 199, -1, sizeof(ChannelDisconnected)},
  { 206, -1, sizeof(ChannelDisconnectedRsp)},
  { 211, -1, sizeof(GetStreamType)},
  { 216, -1, sizeof(GetStreamTypeRsp)},
  { 222, -1, sizeof(GetStreamProperty)},
  { 227, -1, sizeof(GetStreamPropertyRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateStreamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DestroyStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DestroyStreamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientConnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientConnectedRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientDisconnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientDisconnectedRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishStreamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnpublishStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnpublishStreamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamServers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamServersRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamSendingStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamSendingStartRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamSendingStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamSendingStopRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckStreamPublishToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckStreamPublishTokenRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckStreamSubscribeToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckStreamSubscribeTokenRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetStreamSourceServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetStreamSourceServerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CleanStreamSourceServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSuperiorStreamServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetSuperiorStreamServerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelConnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelConnectedRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelConnected2Rsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelDisconnected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelDisconnectedRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamTypeRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamPropertyRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fsp-sc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 36);
}

}  // namespace

void TableStruct::Shutdown() {
  _CreateStream_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CreateStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DestroyStream_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DestroyStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ClientConnected_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ClientConnectedRsp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ClientDisconnected_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ClientDisconnectedRsp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _PublishStream_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _PublishStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _UnpublishStream_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _UnpublishStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _GetStreamServers_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _GetStreamServersRsp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _StreamSendingStart_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _StreamSendingStartRsp_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _StreamSendingStop_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _StreamSendingStopRsp_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CheckStreamPublishToken_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CheckStreamPublishTokenRsp_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CheckStreamSubscribeToken_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CheckStreamSubscribeTokenRsp_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SetStreamSourceServer_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SetStreamSourceServerRsp_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CleanStreamSourceServer_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _GetSuperiorStreamServer_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _GetSuperiorStreamServerRsp_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _ChannelConnected_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _ChannelConnectedRsp_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _ChannelConnected2Rsp_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _ChannelDisconnected_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _ChannelDisconnectedRsp_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _GetStreamType_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _GetStreamTypeRsp_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _GetStreamProperty_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _GetStreamPropertyRsp_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::InitDefaults();
  _CreateStream_default_instance_.DefaultConstruct();
  _CreateStreamRsp_default_instance_.DefaultConstruct();
  _DestroyStream_default_instance_.DefaultConstruct();
  _DestroyStreamRsp_default_instance_.DefaultConstruct();
  _ClientConnected_default_instance_.DefaultConstruct();
  _ClientConnectedRsp_default_instance_.DefaultConstruct();
  _ClientDisconnected_default_instance_.DefaultConstruct();
  _ClientDisconnectedRsp_default_instance_.DefaultConstruct();
  _PublishStream_default_instance_.DefaultConstruct();
  _PublishStreamRsp_default_instance_.DefaultConstruct();
  _UnpublishStream_default_instance_.DefaultConstruct();
  _UnpublishStreamRsp_default_instance_.DefaultConstruct();
  _GetStreamServers_default_instance_.DefaultConstruct();
  _GetStreamServersRsp_default_instance_.DefaultConstruct();
  _StreamSendingStart_default_instance_.DefaultConstruct();
  _StreamSendingStartRsp_default_instance_.DefaultConstruct();
  _StreamSendingStop_default_instance_.DefaultConstruct();
  _StreamSendingStopRsp_default_instance_.DefaultConstruct();
  _CheckStreamPublishToken_default_instance_.DefaultConstruct();
  _CheckStreamPublishTokenRsp_default_instance_.DefaultConstruct();
  _CheckStreamSubscribeToken_default_instance_.DefaultConstruct();
  _CheckStreamSubscribeTokenRsp_default_instance_.DefaultConstruct();
  _SetStreamSourceServer_default_instance_.DefaultConstruct();
  _SetStreamSourceServerRsp_default_instance_.DefaultConstruct();
  _CleanStreamSourceServer_default_instance_.DefaultConstruct();
  _GetSuperiorStreamServer_default_instance_.DefaultConstruct();
  _GetSuperiorStreamServerRsp_default_instance_.DefaultConstruct();
  _ChannelConnected_default_instance_.DefaultConstruct();
  _ChannelConnectedRsp_default_instance_.DefaultConstruct();
  _ChannelConnected2Rsp_default_instance_.DefaultConstruct();
  _ChannelDisconnected_default_instance_.DefaultConstruct();
  _ChannelDisconnectedRsp_default_instance_.DefaultConstruct();
  _GetStreamType_default_instance_.DefaultConstruct();
  _GetStreamTypeRsp_default_instance_.DefaultConstruct();
  _GetStreamProperty_default_instance_.DefaultConstruct();
  _GetStreamPropertyRsp_default_instance_.DefaultConstruct();
  _CreateStream_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _CreateStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _CreateStreamRsp_default_instance_.get_mutable()->stream_ = const_cast< ::com::fsmeeting::fsp::proto::common::Stream*>(
      ::com::fsmeeting::fsp::proto::common::Stream::internal_default_instance());
  _CreateStreamRsp_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _DestroyStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _ClientConnected_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _ClientConnectedRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _ClientDisconnectedRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _PublishStream_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _PublishStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _UnpublishStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetStreamServersRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _StreamSendingStart_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _StreamSendingStartRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _StreamSendingStopRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _CheckStreamPublishTokenRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _CheckStreamSubscribeTokenRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _SetStreamSourceServer_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _SetStreamSourceServerRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetSuperiorStreamServer_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _GetSuperiorStreamServerRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetSuperiorStreamServerRsp_default_instance_.get_mutable()->stream_server_ = const_cast< ::com::fsmeeting::fsp::proto::common::StreamServer*>(
      ::com::fsmeeting::fsp::proto::common::StreamServer::internal_default_instance());
  _GetSuperiorStreamServerRsp_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _ChannelConnected_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _ChannelConnectedRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _ChannelConnected2Rsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _ChannelConnected2Rsp_default_instance_.get_mutable()->stream_ = const_cast< ::com::fsmeeting::fsp::proto::common::Stream*>(
      ::com::fsmeeting::fsp::proto::common::Stream::internal_default_instance());
  _ChannelDisconnectedRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetStreamTypeRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetStreamPropertyRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014fsp-sc.proto\022\032com.fsmeeting.fsp.proto."
      "sc\032\020fsp-common.proto\"\364\001\n\014CreateStream\022\016\n"
      "\006app_id\030\001 \001(\t\022\?\n\013stream_type\030\002 \001(\0162*.com"
      ".fsmeeting.fsp.proto.common.StreamType\022G"
      "\n\017stream_property\030\003 \001(\0162..com.fsmeeting."
      "fsp.proto.common.StreamProperty\022J\n\020commo"
      "nInvokeInfo\030\004 \001(\01320.com.fsmeeting.fsp.pr"
      "oto.common.CommonInvokeInfo\"\327\001\n\017CreateSt"
      "reamRsp\022@\n\010response\030\001 \001(\0132..com.fsmeetin"
      "g.fsp.proto.common.CommonResponse\0226\n\006str"
      "eam\030\002 \001(\0132&.com.fsmeeting.fsp.proto.comm"
      "on.Stream\022J\n\020commonInvokeInfo\030\003 \001(\01320.co"
      "m.fsmeeting.fsp.proto.common.CommonInvok"
      "eInfo\"5\n\rDestroyStream\022\021\n\tstream_id\030\001 \001("
      "\t\022\021\n\tapp_token\030\002 \001(\t\"T\n\020DestroyStreamRsp"
      "\022@\n\010response\030\001 \001(\0132..com.fsmeeting.fsp.p"
      "roto.common.CommonResponse\"\262\001\n\017ClientCon"
      "nected\022\021\n\tclient_id\030\001 \001(\t\022\033\n\023service_ins"
      "tance_id\030\002 \001(\t\022\016\n\006app_id\030\003 \001(\t\022\023\n\013client"
      "_name\030\004 \001(\t\022J\n\020commonInvokeInfo\030\005 \001(\01320."
      "com.fsmeeting.fsp.proto.common.CommonInv"
      "okeInfo\"V\n\022ClientConnectedRsp\022@\n\010respons"
      "e\030\001 \001(\0132..com.fsmeeting.fsp.proto.common"
      ".CommonResponse\"T\n\022ClientDisconnected\022\021\n"
      "\tclient_id\030\001 \001(\t\022\033\n\023service_instance_id\030"
      "\002 \001(\t\022\016\n\006app_id\030\003 \001(\t\"Y\n\025ClientDisconnec"
      "tedRsp\022@\n\010response\030\001 \001(\0132..com.fsmeeting"
      ".fsp.proto.common.CommonResponse\"\257\001\n\rPub"
      "lishStream\022\021\n\tstream_id\030\001 \001(\t\022\021\n\tclient_"
      "id\030\002 \001(\t\022\021\n\tclient_ip\030\003 \001(\t\022J\n\020commonInv"
      "okeInfo\030\004 \001(\01320.com.fsmeeting.fsp.proto."
      "common.CommonInvokeInfo\022\031\n\021set_stream_so"
      "urce\030\005 \001(\010\"T\n\020PublishStreamRsp\022@\n\010respon"
      "se\030\001 \001(\0132..com.fsmeeting.fsp.proto.commo"
      "n.CommonResponse\"7\n\017UnpublishStream\022\021\n\ts"
      "tream_id\030\001 \001(\t\022\021\n\tclient_id\030\002 \001(\t\"V\n\022Unp"
      "ublishStreamRsp\022@\n\010response\030\001 \001(\0132..com."
      "fsmeeting.fsp.proto.common.CommonRespons"
      "e\"\267\001\n\020GetStreamServers\022\021\n\tstream_id\030\001 \001("
      "\t\022\021\n\tclient_id\030\002 \001(\t\022\021\n\tclient_ip\030\003 \001(\t\022"
      "\020\n\010group_id\030\004 \001(\t\022\017\n\007user_id\030\005 \001(\t\022\016\n\006ap"
      "p_id\030\006 \001(\t\022\022\n\ncompany_id\030\007 \001(\t\022\017\n\007room_i"
      "d\030\010 \001(\t\022\022\n\nmedia_type\030\t \001(\005\"\234\001\n\023GetStrea"
      "mServersRsp\022@\n\010response\030\001 \001(\0132..com.fsme"
      "eting.fsp.proto.common.CommonResponse\022C\n"
      "\rstreamServers\030\002 \003(\0132,.com.fsmeeting.fsp"
      ".proto.common.StreamServer\"\213\001\n\022StreamSen"
      "dingStart\022\021\n\tstream_id\030\001 \001(\t\022\026\n\016recv_cli"
      "ent_id\030\002 \001(\t\022J\n\020commonInvokeInfo\030\003 \001(\01320"
      ".com.fsmeeting.fsp.proto.common.CommonIn"
      "vokeInfo\"Y\n\025StreamSendingStartRsp\022@\n\010res"
      "ponse\030\001 \001(\0132..com.fsmeeting.fsp.proto.co"
      "mmon.CommonResponse\">\n\021StreamSendingStop"
      "\022\021\n\tstream_id\030\001 \001(\t\022\026\n\016recv_client_id\030\002 "
      "\001(\t\"X\n\024StreamSendingStopRsp\022@\n\010response\030"
      "\001 \001(\0132..com.fsmeeting.fsp.proto.common.C"
      "ommonResponse\"J\n\027CheckStreamPublishToken"
      "\022\021\n\tstream_id\030\001 \001(\t\022\034\n\024stream_publish_to"
      "ken\030\002 \001(\t\"m\n\032CheckStreamPublishTokenRsp\022"
      "@\n\010response\030\001 \001(\0132..com.fsmeeting.fsp.pr"
      "oto.common.CommonResponse\022\r\n\005valid\030\002 \001(\010"
      "\"N\n\031CheckStreamSubscribeToken\022\021\n\tstream_"
      "id\030\001 \001(\t\022\036\n\026stream_subscribe_token\030\002 \001(\t"
      "\"o\n\034CheckStreamSubscribeTokenRsp\022@\n\010resp"
      "onse\030\001 \001(\0132..com.fsmeeting.fsp.proto.com"
      "mon.CommonResponse\022\r\n\005valid\030\002 \001(\010\"\223\001\n\025Se"
      "tStreamSourceServer\022\021\n\tstream_id\030\001 \001(\t\022\033"
      "\n\023service_instance_id\030\002 \001(\t\022J\n\020commonInv"
      "okeInfo\030\003 \001(\01320.com.fsmeeting.fsp.proto."
      "common.CommonInvokeInfo\"\\\n\030SetStreamSour"
      "ceServerRsp\022@\n\010response\030\001 \001(\0132..com.fsme"
      "eting.fsp.proto.common.CommonResponse\"I\n"
      "\027CleanStreamSourceServer\022\021\n\tstream_id\030\001 "
      "\001(\t\022\033\n\023service_instance_id\030\002 \001(\t\"\307\001\n\027Get"
      "SuperiorStreamServer\022\021\n\tstream_id\030\001 \001(\t\022"
      "\033\n\023service_instance_id\030\002 \001(\t\022J\n\020commonIn"
      "vokeInfo\030\003 \001(\01320.com.fsmeeting.fsp.proto"
      ".common.CommonInvokeInfo\022\035\n\025unexpected_d"
      "isconnect\030\004 \001(\010\022\021\n\tnode_type\030\005 \001(\005\"\357\001\n\032G"
      "etSuperiorStreamServerRsp\022@\n\010response\030\001 "
      "\001(\0132..com.fsmeeting.fsp.proto.common.Com"
      "monResponse\022C\n\rstream_server\030\002 \001(\0132,.com"
      ".fsmeeting.fsp.proto.common.StreamServer"
      "\022J\n\020commonInvokeInfo\030\003 \001(\01320.com.fsmeeti"
      "ng.fsp.proto.common.CommonInvokeInfo\"\343\001\n"
      "\020ChannelConnected\022\021\n\tclient_id\030\001 \001(\t\022\033\n\023"
      "service_instance_id\030\002 \001(\t\022\021\n\tstream_id\030\003"
      " \001(\t\022@\n\tdirection\030\004 \001(\0162-.com.fsmeeting."
      "fsp.proto.common.DataDirection\022J\n\020common"
      "InvokeInfo\030\005 \001(\01320.com.fsmeeting.fsp.pro"
      "to.common.CommonInvokeInfo\"\232\001\n\023ChannelCo"
      "nnectedRsp\022@\n\010response\030\001 \001(\0132..com.fsmee"
      "ting.fsp.proto.common.CommonResponse\022A\n\014"
      "channel_type\030\002 \001(\0162+.com.fsmeeting.fsp.p"
      "roto.common.ChannelType\"\323\001\n\024ChannelConne"
      "cted2Rsp\022@\n\010response\030\001 \001(\0132..com.fsmeeti"
      "ng.fsp.proto.common.CommonResponse\022A\n\014ch"
      "annel_type\030\002 \001(\0162+.com.fsmeeting.fsp.pro"
      "to.common.ChannelType\0226\n\006stream\030\003 \001(\0132&."
      "com.fsmeeting.fsp.proto.common.Stream\"X\n"
      "\023ChannelDisconnected\022\021\n\tclient_id\030\001 \001(\t\022"
      "\033\n\023service_instance_id\030\002 \001(\t\022\021\n\tstream_i"
      "d\030\003 \001(\t\"Z\n\026ChannelDisconnectedRsp\022@\n\010res"
      "ponse\030\001 \001(\0132..com.fsmeeting.fsp.proto.co"
      "mmon.CommonResponse\"\"\n\rGetStreamType\022\021\n\t"
      "stream_id\030\001 \001(\t\"\225\001\n\020GetStreamTypeRsp\022@\n\010"
      "response\030\001 \001(\0132..com.fsmeeting.fsp.proto"
      ".common.CommonResponse\022\?\n\013stream_type\030\002 "
      "\001(\0162*.com.fsmeeting.fsp.proto.common.Str"
      "eamType\"&\n\021GetStreamProperty\022\021\n\tstream_i"
      "d\030\001 \001(\t\"\241\001\n\024GetStreamPropertyRsp\022@\n\010resp"
      "onse\030\001 \001(\0132..com.fsmeeting.fsp.proto.com"
      "mon.CommonResponse\022G\n\017stream_property\030\002 "
      "\001(\0162..com.fsmeeting.fsp.proto.common.Str"
      "eamProperty*\224\n\n\017ProtoDictionary\022\031\n\025Enum2"
      "UnknownInterface\020\000\022\026\n\021Enum2CreateStream\020"
      "\360.\022\031\n\024Enum2CreateStreamRsp\020\361.\022\027\n\022Enum2De"
      "stroyStream\020\362.\022\032\n\025Enum2DestroyStreamRsp\020"
      "\363.\022\031\n\024Enum2ClientConnected\020\364.\022\034\n\027Enum2Cl"
      "ientConnectedRsp\020\365.\022\034\n\027Enum2ClientDiscon"
      "nected\020\366.\022\037\n\032Enum2ClientDisconnectedRsp\020"
      "\367.\022\032\n\025Enum2GetStreamServers\020\370.\022\035\n\030Enum2G"
      "etStreamServersRsp\020\371.\022\034\n\027Enum2StreamSend"
      "ingStart\020\372.\022\037\n\032Enum2StreamSendingStartRs"
      "p\020\373.\022\033\n\026Enum2StreamSendingStop\020\374.\022\036\n\031Enu"
      "m2StreamSendingStopRsp\020\375.\022\027\n\022Enum2Publis"
      "hStream\020\376.\022\032\n\025Enum2PublishStreamRsp\020\377.\022\031"
      "\n\024Enum2UnpublishStream\020\200/\022\034\n\027Enum2Unpubl"
      "ishStreamRsp\020\201/\022\037\n\032Enum2SetStreamSourceS"
      "erver\020\202/\022\"\n\035Enum2SetStreamSourceServerRs"
      "p\020\203/\022!\n\034Enum2GetSuperiorStreamServer\020\204/\022"
      "$\n\037Enum2GetSuperiorStreamServerRsp\020\205/\022\032\n"
      "\025Enum2ChannelConnected\020\207/\022\035\n\030Enum2Channe"
      "lConnectedRsp\020\210/\022\035\n\030Enum2ChannelDisconne"
      "cted\020\211/\022 \n\033Enum2ChannelDisconnectedRsp\020\212"
      "/\022!\n\034Enum2CheckStreamPublishToken\020\213/\022$\n\037"
      "Enum2CheckStreamPublishTokenRsp\020\214/\022#\n\036En"
      "um2CheckStreamSubscribeToken\020\215/\022&\n!Enum2"
      "CheckStreamSubscribeTokenRsp\020\216/\022\027\n\022Enum2"
      "GetStreamType\020\217/\022\032\n\025Enum2GetStreamTypeRs"
      "p\020\220/\022\033\n\026Enum2GetStreamProperty\020\221/\022\036\n\031Enu"
      "m2GetStreamPropertyRsp\020\222/\022\"\n\035Enum2Notify"
      "StreamSendingStart\020\223/\022%\n Enum2NotifyStre"
      "amSendingStartRsp\020\224/\022!\n\034Enum2CleanStream"
      "SourceServer\020\225/\022$\n\037Enum2CleanStreamSourc"
      "eServerRsp\020\226/\022\033\n\026Enum2ChannelConnected2\020"
      "\227/\022\036\n\031Enum2ChannelConnected2Rsp\020\230/B\'\n\032co"
      "m.fsmeeting.fsp.proto.scP\001\370\001\001\242\002\003GPBb\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsp-sc.proto", &protobuf_RegisterTypes);
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fsp_2dsc_2eproto

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_enum_descriptors[0];
}
bool ProtoDictionary_IsValid(int value) {
  switch (value) {
    case 0:
    case 6000:
    case 6001:
    case 6002:
    case 6003:
    case 6004:
    case 6005:
    case 6006:
    case 6007:
    case 6008:
    case 6009:
    case 6010:
    case 6011:
    case 6012:
    case 6013:
    case 6014:
    case 6015:
    case 6016:
    case 6017:
    case 6018:
    case 6019:
    case 6020:
    case 6021:
    case 6023:
    case 6024:
    case 6025:
    case 6026:
    case 6027:
    case 6028:
    case 6029:
    case 6030:
    case 6031:
    case 6032:
    case 6033:
    case 6034:
    case 6035:
    case 6036:
    case 6037:
    case 6038:
    case 6039:
    case 6040:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CreateStream::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStream::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStream::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void CreateStream::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void CreateStream::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateStream::kAppIdFieldNumber;
const int CreateStream::kStreamTypeFieldNumber;
const int CreateStream::kStreamPropertyFieldNumber;
const int CreateStream::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateStream::CreateStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.CreateStream)
}
CreateStream::CreateStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.CreateStream)
}
CreateStream::CreateStream(const CreateStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  ::memcpy(&stream_type_, &from.stream_type_,
    reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&stream_type_) + sizeof(stream_property_));
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.CreateStream)
}

void CreateStream::SharedCtor() {
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commoninvokeinfo_, 0, reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&commoninvokeinfo_) + sizeof(stream_property_));
  _cached_size_ = 0;
}

CreateStream::~CreateStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.CreateStream)
  SharedDtor();
}

void CreateStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void CreateStream::ArenaDtor(void* object) {
  CreateStream* _this = reinterpret_cast< CreateStream* >(object);
  (void)_this;
}
void CreateStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStream::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[0].descriptor;
}

const CreateStream& CreateStream::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateStream* CreateStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateStream>(arena);
}

void CreateStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.CreateStream)
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
  ::memset(&stream_type_, 0, reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&stream_type_) + sizeof(stream_property_));
}

bool CreateStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.CreateStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string app_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.CreateStream.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stream_type(static_cast< ::com::fsmeeting::fsp::proto::common::StreamType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stream_property(static_cast< ::com::fsmeeting::fsp::proto::common::StreamProperty >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.CreateStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.CreateStream)
  return false;
#undef DO_
}

void CreateStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.CreateStream)
  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CreateStream.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  if (this->stream_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stream_type(), output);
  }

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
  if (this->stream_property() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->stream_property(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.CreateStream)
}

::google::protobuf::uint8* CreateStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.CreateStream)
  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CreateStream.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  if (this->stream_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stream_type(), target);
  }

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
  if (this->stream_property() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->stream_property(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.CreateStream)
  return target;
}

size_t CreateStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.CreateStream)
  size_t total_size = 0;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  if (this->stream_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_type());
  }

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
  if (this->stream_property() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_property());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.CreateStream)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.CreateStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.CreateStream)
    MergeFrom(*source);
  }
}

void CreateStream::MergeFrom(const CreateStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.CreateStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
  if (from.stream_type() != 0) {
    set_stream_type(from.stream_type());
  }
  if (from.stream_property() != 0) {
    set_stream_property(from.stream_property());
  }
}

void CreateStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.CreateStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStream::CopyFrom(const CreateStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.CreateStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStream::IsInitialized() const {
  return true;
}

void CreateStream::Swap(CreateStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateStream::UnsafeArenaSwap(CreateStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateStream::InternalSwap(CreateStream* other) {
  app_id_.Swap(&other->app_id_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(stream_type_, other->stream_type_);
  std::swap(stream_property_, other->stream_property_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateStream::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateStream

// string app_id = 1;
void CreateStream::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CreateStream::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
  return app_id_.Get();
}
void CreateStream::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}
void CreateStream::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}
void CreateStream::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}
::std::string* CreateStream::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateStream::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CreateStream::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CreateStream::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}
void CreateStream::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}

// .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
void CreateStream::clear_stream_type() {
  stream_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::StreamType CreateStream::stream_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStream.stream_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamType >(stream_type_);
}
void CreateStream::set_stream_type(::com::fsmeeting::fsp::proto::common::StreamType value) {
  
  stream_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CreateStream.stream_type)
}

// .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
void CreateStream::clear_stream_property() {
  stream_property_ = 0;
}
::com::fsmeeting::fsp::proto::common::StreamProperty CreateStream::stream_property() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStream.stream_property)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamProperty >(stream_property_);
}
void CreateStream::set_stream_property(::com::fsmeeting::fsp::proto::common::StreamProperty value) {
  
  stream_property_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CreateStream.stream_property)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
bool CreateStream::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void CreateStream::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& CreateStream::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStream::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStream::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void CreateStream::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CreateStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CreateStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CreateStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void CreateStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void CreateStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
}
void CreateStreamRsp::_slow_mutable_stream() {
  stream_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::Stream >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::Stream* CreateStreamRsp::_slow_release_stream() {
  if (stream_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::Stream* temp = new ::com::fsmeeting::fsp::proto::common::Stream(*stream_);
    stream_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::Stream* CreateStreamRsp::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
  
  ::com::fsmeeting::fsp::proto::common::Stream* temp = stream_;
  stream_ = NULL;
  return temp;
}
void CreateStreamRsp::_slow_set_allocated_stream(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::Stream** stream) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stream) == NULL) {
      message_arena->Own(*stream);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stream)) {
      ::com::fsmeeting::fsp::proto::common::Stream* new_stream = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::Stream >(
            message_arena);
      new_stream->CopyFrom(**stream);
      *stream = new_stream;
    }
}
void CreateStreamRsp::unsafe_arena_set_allocated_stream(
    ::com::fsmeeting::fsp::proto::common::Stream* stream) {
  if (GetArenaNoVirtual() == NULL) {
    delete stream_;
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
}
void CreateStreamRsp::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStreamRsp::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStreamRsp::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void CreateStreamRsp::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void CreateStreamRsp::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateStreamRsp::kResponseFieldNumber;
const int CreateStreamRsp::kStreamFieldNumber;
const int CreateStreamRsp::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateStreamRsp::CreateStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
}
CreateStreamRsp::CreateStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
}
CreateStreamRsp::CreateStreamRsp(const CreateStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_stream()) {
    stream_ = new ::com::fsmeeting::fsp::proto::common::Stream(*from.stream_);
  } else {
    stream_ = NULL;
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
}

void CreateStreamRsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&commoninvokeinfo_) -
    reinterpret_cast<char*>(&response_) + sizeof(commoninvokeinfo_));
  _cached_size_ = 0;
}

CreateStreamRsp::~CreateStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  SharedDtor();
}

void CreateStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
  if (this != internal_default_instance()) {
    delete stream_;
  }
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void CreateStreamRsp::ArenaDtor(void* object) {
  CreateStreamRsp* _this = reinterpret_cast< CreateStreamRsp* >(object);
  (void)_this;
}
void CreateStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateStreamRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[1].descriptor;
}

const CreateStreamRsp& CreateStreamRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateStreamRsp* CreateStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateStreamRsp>(arena);
}

void CreateStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  if (GetArenaNoVirtual() == NULL && stream_ != NULL) {
    delete stream_;
  }
  stream_ = NULL;
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
}

bool CreateStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  return false;
#undef DO_
}

void CreateStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  if (this->has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stream_, output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
}

::google::protobuf::uint8* CreateStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  if (this->has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stream_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  return target;
}

size_t CreateStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  if (this->has_stream()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stream_);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
    MergeFrom(*source);
  }
}

void CreateStreamRsp::MergeFrom(const CreateStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.has_stream()) {
    mutable_stream()->::com::fsmeeting::fsp::proto::common::Stream::MergeFrom(from.stream());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
}

void CreateStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateStreamRsp::CopyFrom(const CreateStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateStreamRsp::IsInitialized() const {
  return true;
}

void CreateStreamRsp::Swap(CreateStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateStreamRsp::UnsafeArenaSwap(CreateStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateStreamRsp::InternalSwap(CreateStreamRsp* other) {
  std::swap(response_, other->response_);
  std::swap(stream_, other->stream_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateStreamRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool CreateStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void CreateStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& CreateStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CreateStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CreateStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void CreateStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
}

// .com.fsmeeting.fsp.proto.common.Stream stream = 2;
bool CreateStreamRsp::has_stream() const {
  return this != internal_default_instance() && stream_ != NULL;
}
void CreateStreamRsp::clear_stream() {
  if (GetArenaNoVirtual() == NULL && stream_ != NULL) delete stream_;
  stream_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::Stream& CreateStreamRsp::stream() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
  return stream_ != NULL ? *stream_
                         : *::com::fsmeeting::fsp::proto::common::Stream::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::Stream* CreateStreamRsp::mutable_stream() {
  
  if (stream_ == NULL) {
    _slow_mutable_stream();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
  return stream_;
}
::com::fsmeeting::fsp::proto::common::Stream* CreateStreamRsp::release_stream() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stream();
  } else {
    ::com::fsmeeting::fsp::proto::common::Stream* temp = stream_;
    stream_ = NULL;
    return temp;
  }
}
 void CreateStreamRsp::set_allocated_stream(::com::fsmeeting::fsp::proto::common::Stream* stream) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stream_;
  }
  if (stream != NULL) {
    _slow_set_allocated_stream(message_arena, &stream);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
bool CreateStreamRsp::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void CreateStreamRsp::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& CreateStreamRsp::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStreamRsp::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStreamRsp::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void CreateStreamRsp::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyStream::kStreamIdFieldNumber;
const int DestroyStream::kAppTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyStream::DestroyStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.DestroyStream)
}
DestroyStream::DestroyStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.DestroyStream)
}
DestroyStream::DestroyStream(const DestroyStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  app_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_token().size() > 0) {
    app_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.DestroyStream)
}

void DestroyStream::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DestroyStream::~DestroyStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.DestroyStream)
  SharedDtor();
}

void DestroyStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  app_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void DestroyStream::ArenaDtor(void* object) {
  DestroyStream* _this = reinterpret_cast< DestroyStream* >(object);
  (void)_this;
}
void DestroyStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DestroyStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyStream::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[2].descriptor;
}

const DestroyStream& DestroyStream::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DestroyStream* DestroyStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DestroyStream>(arena);
}

void DestroyStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.DestroyStream)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  app_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool DestroyStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.DestroyStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_token().data(), this->app_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.DestroyStream.app_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.DestroyStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.DestroyStream)
  return false;
#undef DO_
}

void DestroyStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.DestroyStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string app_token = 2;
  if (this->app_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_token().data(), this->app_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.DestroyStream.app_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->app_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.DestroyStream)
}

::google::protobuf::uint8* DestroyStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.DestroyStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string app_token = 2;
  if (this->app_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_token().data(), this->app_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.DestroyStream.app_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.DestroyStream)
  return target;
}

size_t DestroyStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.DestroyStream)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string app_token = 2;
  if (this->app_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.DestroyStream)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.DestroyStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.DestroyStream)
    MergeFrom(*source);
  }
}

void DestroyStream::MergeFrom(const DestroyStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.DestroyStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.app_token().size() > 0) {
    set_app_token(from.app_token());
  }
}

void DestroyStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.DestroyStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyStream::CopyFrom(const DestroyStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.DestroyStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyStream::IsInitialized() const {
  return true;
}

void DestroyStream::Swap(DestroyStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DestroyStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DestroyStream::UnsafeArenaSwap(DestroyStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DestroyStream::InternalSwap(DestroyStream* other) {
  stream_id_.Swap(&other->stream_id_);
  app_token_.Swap(&other->app_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyStream::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyStream

// string stream_id = 1;
void DestroyStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DestroyStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
  return stream_id_.Get();
}
void DestroyStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}
void DestroyStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}
void DestroyStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}
::std::string* DestroyStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DestroyStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DestroyStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DestroyStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}
void DestroyStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}

// string app_token = 2;
void DestroyStream::clear_app_token() {
  app_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& DestroyStream::app_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
  return app_token_.Get();
}
void DestroyStream::set_app_token(const ::std::string& value) {
  
  app_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}
void DestroyStream::set_app_token(const char* value) {
  
  app_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}
void DestroyStream::set_app_token(const char* value,
    size_t size) {
  
  app_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}
::std::string* DestroyStream::mutable_app_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
  return app_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DestroyStream::release_app_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
  
  return app_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* DestroyStream::unsafe_arena_release_app_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void DestroyStream::set_allocated_app_token(::std::string* app_token) {
  if (app_token != NULL) {
    
  } else {
    
  }
  app_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}
void DestroyStream::unsafe_arena_set_allocated_app_token(
    ::std::string* app_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_token != NULL) {
    
  } else {
    
  }
  app_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void DestroyStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void DestroyStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void DestroyStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyStreamRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyStreamRsp::DestroyStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
}
DestroyStreamRsp::DestroyStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
}
DestroyStreamRsp::DestroyStreamRsp(const DestroyStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
}

void DestroyStreamRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

DestroyStreamRsp::~DestroyStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  SharedDtor();
}

void DestroyStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void DestroyStreamRsp::ArenaDtor(void* object) {
  DestroyStreamRsp* _this = reinterpret_cast< DestroyStreamRsp* >(object);
  (void)_this;
}
void DestroyStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DestroyStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyStreamRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[3].descriptor;
}

const DestroyStreamRsp& DestroyStreamRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

DestroyStreamRsp* DestroyStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DestroyStreamRsp>(arena);
}

void DestroyStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool DestroyStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  return false;
#undef DO_
}

void DestroyStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
}

::google::protobuf::uint8* DestroyStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  return target;
}

size_t DestroyStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
    MergeFrom(*source);
  }
}

void DestroyStreamRsp::MergeFrom(const DestroyStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void DestroyStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyStreamRsp::CopyFrom(const DestroyStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyStreamRsp::IsInitialized() const {
  return true;
}

void DestroyStreamRsp::Swap(DestroyStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DestroyStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DestroyStreamRsp::UnsafeArenaSwap(DestroyStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DestroyStreamRsp::InternalSwap(DestroyStreamRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyStreamRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool DestroyStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void DestroyStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& DestroyStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void DestroyStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ClientConnected::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ClientConnected::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ClientConnected::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void ClientConnected::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void ClientConnected::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientConnected::kClientIdFieldNumber;
const int ClientConnected::kServiceInstanceIdFieldNumber;
const int ClientConnected::kAppIdFieldNumber;
const int ClientConnected::kClientNameFieldNumber;
const int ClientConnected::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientConnected::ClientConnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.ClientConnected)
}
ClientConnected::ClientConnected(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.ClientConnected)
}
ClientConnected::ClientConnected(const ClientConnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_instance_id().size() > 0) {
    service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_instance_id(),
      GetArenaNoVirtual());
  }
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_name().size() > 0) {
    client_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_name(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.ClientConnected)
}

void ClientConnected::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commoninvokeinfo_ = NULL;
  _cached_size_ = 0;
}

ClientConnected::~ClientConnected() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.ClientConnected)
  SharedDtor();
}

void ClientConnected::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void ClientConnected::ArenaDtor(void* object) {
  ClientConnected* _this = reinterpret_cast< ClientConnected* >(object);
  (void)_this;
}
void ClientConnected::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClientConnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientConnected::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[4].descriptor;
}

const ClientConnected& ClientConnected::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientConnected* ClientConnected::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClientConnected>(arena);
}

void ClientConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.ClientConnected)
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
}

bool ClientConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.ClientConnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ClientConnected.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_instance_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_instance_id().data(), this->service_instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ClientConnected.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ClientConnected.client_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.ClientConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.ClientConnected)
  return false;
#undef DO_
}

void ClientConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.ClientConnected)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientConnected.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_instance_id(), output);
  }

  // string app_id = 3;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientConnected.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->app_id(), output);
  }

  // string client_name = 4;
  if (this->client_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientConnected.client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_name(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.ClientConnected)
}

::google::protobuf::uint8* ClientConnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.ClientConnected)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientConnected.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_instance_id(), target);
  }

  // string app_id = 3;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientConnected.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->app_id(), target);
  }

  // string client_name = 4;
  if (this->client_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientConnected.client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_name(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.ClientConnected)
  return target;
}

size_t ClientConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.ClientConnected)
  size_t total_size = 0;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_instance_id());
  }

  // string app_id = 3;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string client_name = 4;
  if (this->client_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_name());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.ClientConnected)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientConnected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientConnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.ClientConnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.ClientConnected)
    MergeFrom(*source);
  }
}

void ClientConnected::MergeFrom(const ClientConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.ClientConnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.service_instance_id().size() > 0) {
    set_service_instance_id(from.service_instance_id());
  }
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.client_name().size() > 0) {
    set_client_name(from.client_name());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
}

void ClientConnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.ClientConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConnected::CopyFrom(const ClientConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.ClientConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConnected::IsInitialized() const {
  return true;
}

void ClientConnected::Swap(ClientConnected* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClientConnected* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ClientConnected::UnsafeArenaSwap(ClientConnected* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClientConnected::InternalSwap(ClientConnected* other) {
  client_id_.Swap(&other->client_id_);
  service_instance_id_.Swap(&other->service_instance_id_);
  app_id_.Swap(&other->app_id_);
  client_name_.Swap(&other->client_name_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientConnected::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientConnected

// string client_id = 1;
void ClientConnected::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ClientConnected::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
  return client_id_.Get();
}
void ClientConnected::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}
void ClientConnected::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}
void ClientConnected::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}
::std::string* ClientConnected::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientConnected::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientConnected::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ClientConnected::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}
void ClientConnected::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}

// string service_instance_id = 2;
void ClientConnected::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ClientConnected::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
  return service_instance_id_.Get();
}
void ClientConnected::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}
void ClientConnected::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}
void ClientConnected::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}
::std::string* ClientConnected::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientConnected::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientConnected::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ClientConnected::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}
void ClientConnected::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}

// string app_id = 3;
void ClientConnected::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ClientConnected::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
  return app_id_.Get();
}
void ClientConnected::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}
void ClientConnected::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}
void ClientConnected::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}
::std::string* ClientConnected::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientConnected::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientConnected::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ClientConnected::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}
void ClientConnected::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}

// string client_name = 4;
void ClientConnected::clear_client_name() {
  client_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ClientConnected::client_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
  return client_name_.Get();
}
void ClientConnected::set_client_name(const ::std::string& value) {
  
  client_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}
void ClientConnected::set_client_name(const char* value) {
  
  client_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}
void ClientConnected::set_client_name(const char* value,
    size_t size) {
  
  client_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}
::std::string* ClientConnected::mutable_client_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
  return client_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientConnected::release_client_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
  
  return client_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientConnected::unsafe_arena_release_client_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ClientConnected::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}
void ClientConnected::unsafe_arena_set_allocated_client_name(
    ::std::string* client_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_name != NULL) {
    
  } else {
    
  }
  client_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
bool ClientConnected::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void ClientConnected::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& ClientConnected::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ClientConnected::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ClientConnected::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void ClientConnected::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ClientConnectedRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ClientConnectedRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ClientConnectedRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void ClientConnectedRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void ClientConnectedRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientConnectedRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientConnectedRsp::ClientConnectedRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
}
ClientConnectedRsp::ClientConnectedRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
}
ClientConnectedRsp::ClientConnectedRsp(const ClientConnectedRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
}

void ClientConnectedRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

ClientConnectedRsp::~ClientConnectedRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  SharedDtor();
}

void ClientConnectedRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void ClientConnectedRsp::ArenaDtor(void* object) {
  ClientConnectedRsp* _this = reinterpret_cast< ClientConnectedRsp* >(object);
  (void)_this;
}
void ClientConnectedRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClientConnectedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientConnectedRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[5].descriptor;
}

const ClientConnectedRsp& ClientConnectedRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientConnectedRsp* ClientConnectedRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClientConnectedRsp>(arena);
}

void ClientConnectedRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool ClientConnectedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  return false;
#undef DO_
}

void ClientConnectedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
}

::google::protobuf::uint8* ClientConnectedRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  return target;
}

size_t ClientConnectedRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConnectedRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientConnectedRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientConnectedRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
    MergeFrom(*source);
  }
}

void ClientConnectedRsp::MergeFrom(const ClientConnectedRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void ClientConnectedRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConnectedRsp::CopyFrom(const ClientConnectedRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConnectedRsp::IsInitialized() const {
  return true;
}

void ClientConnectedRsp::Swap(ClientConnectedRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClientConnectedRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ClientConnectedRsp::UnsafeArenaSwap(ClientConnectedRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClientConnectedRsp::InternalSwap(ClientConnectedRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientConnectedRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientConnectedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool ClientConnectedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void ClientConnectedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& ClientConnectedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ClientConnectedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ClientConnectedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void ClientConnectedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientDisconnected::kClientIdFieldNumber;
const int ClientDisconnected::kServiceInstanceIdFieldNumber;
const int ClientDisconnected::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientDisconnected::ClientDisconnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
}
ClientDisconnected::ClientDisconnected(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
}
ClientDisconnected::ClientDisconnected(const ClientDisconnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_instance_id().size() > 0) {
    service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_instance_id(),
      GetArenaNoVirtual());
  }
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
}

void ClientDisconnected::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClientDisconnected::~ClientDisconnected() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  SharedDtor();
}

void ClientDisconnected::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ClientDisconnected::ArenaDtor(void* object) {
  ClientDisconnected* _this = reinterpret_cast< ClientDisconnected* >(object);
  (void)_this;
}
void ClientDisconnected::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClientDisconnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDisconnected::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[6].descriptor;
}

const ClientDisconnected& ClientDisconnected::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientDisconnected* ClientDisconnected::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClientDisconnected>(arena);
}

void ClientDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ClientDisconnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_instance_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_instance_id().data(), this->service_instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  return false;
#undef DO_
}

void ClientDisconnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_instance_id(), output);
  }

  // string app_id = 3;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->app_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
}

::google::protobuf::uint8* ClientDisconnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_instance_id(), target);
  }

  // string app_id = 3;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->app_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  return target;
}

size_t ClientDisconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  size_t total_size = 0;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_instance_id());
  }

  // string app_id = 3;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDisconnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientDisconnected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientDisconnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
    MergeFrom(*source);
  }
}

void ClientDisconnected::MergeFrom(const ClientDisconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.service_instance_id().size() > 0) {
    set_service_instance_id(from.service_instance_id());
  }
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
}

void ClientDisconnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDisconnected::CopyFrom(const ClientDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDisconnected::IsInitialized() const {
  return true;
}

void ClientDisconnected::Swap(ClientDisconnected* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClientDisconnected* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ClientDisconnected::UnsafeArenaSwap(ClientDisconnected* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClientDisconnected::InternalSwap(ClientDisconnected* other) {
  client_id_.Swap(&other->client_id_);
  service_instance_id_.Swap(&other->service_instance_id_);
  app_id_.Swap(&other->app_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientDisconnected::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientDisconnected

// string client_id = 1;
void ClientDisconnected::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ClientDisconnected::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
  return client_id_.Get();
}
void ClientDisconnected::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}
void ClientDisconnected::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}
void ClientDisconnected::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}
::std::string* ClientDisconnected::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientDisconnected::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientDisconnected::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ClientDisconnected::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}
void ClientDisconnected::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}

// string service_instance_id = 2;
void ClientDisconnected::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ClientDisconnected::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
  return service_instance_id_.Get();
}
void ClientDisconnected::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}
void ClientDisconnected::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}
void ClientDisconnected::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}
::std::string* ClientDisconnected::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientDisconnected::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientDisconnected::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ClientDisconnected::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}
void ClientDisconnected::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}

// string app_id = 3;
void ClientDisconnected::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ClientDisconnected::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
  return app_id_.Get();
}
void ClientDisconnected::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}
void ClientDisconnected::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}
void ClientDisconnected::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}
::std::string* ClientDisconnected::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientDisconnected::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ClientDisconnected::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ClientDisconnected::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}
void ClientDisconnected::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ClientDisconnectedRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ClientDisconnectedRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ClientDisconnectedRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void ClientDisconnectedRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void ClientDisconnectedRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientDisconnectedRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientDisconnectedRsp::ClientDisconnectedRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
}
ClientDisconnectedRsp::ClientDisconnectedRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
}
ClientDisconnectedRsp::ClientDisconnectedRsp(const ClientDisconnectedRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
}

void ClientDisconnectedRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

ClientDisconnectedRsp::~ClientDisconnectedRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  SharedDtor();
}

void ClientDisconnectedRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void ClientDisconnectedRsp::ArenaDtor(void* object) {
  ClientDisconnectedRsp* _this = reinterpret_cast< ClientDisconnectedRsp* >(object);
  (void)_this;
}
void ClientDisconnectedRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ClientDisconnectedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDisconnectedRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[7].descriptor;
}

const ClientDisconnectedRsp& ClientDisconnectedRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientDisconnectedRsp* ClientDisconnectedRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ClientDisconnectedRsp>(arena);
}

void ClientDisconnectedRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool ClientDisconnectedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  return false;
#undef DO_
}

void ClientDisconnectedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
}

::google::protobuf::uint8* ClientDisconnectedRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  return target;
}

size_t ClientDisconnectedRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDisconnectedRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientDisconnectedRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientDisconnectedRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
    MergeFrom(*source);
  }
}

void ClientDisconnectedRsp::MergeFrom(const ClientDisconnectedRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void ClientDisconnectedRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDisconnectedRsp::CopyFrom(const ClientDisconnectedRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDisconnectedRsp::IsInitialized() const {
  return true;
}

void ClientDisconnectedRsp::Swap(ClientDisconnectedRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ClientDisconnectedRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ClientDisconnectedRsp::UnsafeArenaSwap(ClientDisconnectedRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ClientDisconnectedRsp::InternalSwap(ClientDisconnectedRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientDisconnectedRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientDisconnectedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool ClientDisconnectedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void ClientDisconnectedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& ClientDisconnectedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ClientDisconnectedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ClientDisconnectedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void ClientDisconnectedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void PublishStream::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* PublishStream::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* PublishStream::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void PublishStream::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void PublishStream::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishStream::kStreamIdFieldNumber;
const int PublishStream::kClientIdFieldNumber;
const int PublishStream::kClientIpFieldNumber;
const int PublishStream::kCommonInvokeInfoFieldNumber;
const int PublishStream::kSetStreamSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishStream::PublishStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.PublishStream)
}
PublishStream::PublishStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.PublishStream)
}
PublishStream::PublishStream(const PublishStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ip(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  set_stream_source_ = from.set_stream_source_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.PublishStream)
}

void PublishStream::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commoninvokeinfo_, 0, reinterpret_cast<char*>(&set_stream_source_) -
    reinterpret_cast<char*>(&commoninvokeinfo_) + sizeof(set_stream_source_));
  _cached_size_ = 0;
}

PublishStream::~PublishStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.PublishStream)
  SharedDtor();
}

void PublishStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_ip_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void PublishStream::ArenaDtor(void* object) {
  PublishStream* _this = reinterpret_cast< PublishStream* >(object);
  (void)_this;
}
void PublishStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PublishStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishStream::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[8].descriptor;
}

const PublishStream& PublishStream::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishStream* PublishStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PublishStream>(arena);
}

void PublishStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.PublishStream)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
  set_stream_source_ = false;
}

bool PublishStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.PublishStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.PublishStream.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.PublishStream.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_ip = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.PublishStream.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool set_stream_source = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_stream_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.PublishStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.PublishStream)
  return false;
#undef DO_
}

void PublishStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.PublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.PublishStream.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.PublishStream.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.PublishStream.client_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_ip(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->commoninvokeinfo_, output);
  }

  // bool set_stream_source = 5;
  if (this->set_stream_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->set_stream_source(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.PublishStream)
}

::google::protobuf::uint8* PublishStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.PublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.PublishStream.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.PublishStream.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.PublishStream.client_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_ip(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->commoninvokeinfo_, false, target);
  }

  // bool set_stream_source = 5;
  if (this->set_stream_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->set_stream_source(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.PublishStream)
  return target;
}

size_t PublishStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.PublishStream)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  // bool set_stream_source = 5;
  if (this->set_stream_source() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.PublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.PublishStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.PublishStream)
    MergeFrom(*source);
  }
}

void PublishStream::MergeFrom(const PublishStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.PublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.client_ip().size() > 0) {
    set_client_ip(from.client_ip());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
  if (from.set_stream_source() != 0) {
    set_set_stream_source(from.set_stream_source());
  }
}

void PublishStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.PublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishStream::CopyFrom(const PublishStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.PublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishStream::IsInitialized() const {
  return true;
}

void PublishStream::Swap(PublishStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PublishStream::UnsafeArenaSwap(PublishStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishStream::InternalSwap(PublishStream* other) {
  stream_id_.Swap(&other->stream_id_);
  client_id_.Swap(&other->client_id_);
  client_ip_.Swap(&other->client_ip_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(set_stream_source_, other->set_stream_source_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishStream::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishStream

// string stream_id = 1;
void PublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
  return stream_id_.Get();
}
void PublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}
void PublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}
void PublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}
::std::string* PublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}
void PublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}

// string client_id = 2;
void PublishStream::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PublishStream::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
  return client_id_.Get();
}
void PublishStream::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}
void PublishStream::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}
void PublishStream::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}
::std::string* PublishStream::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PublishStream::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}
void PublishStream::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}

// string client_ip = 3;
void PublishStream::clear_client_ip() {
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PublishStream::client_ip() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
  return client_ip_.Get();
}
void PublishStream::set_client_ip(const ::std::string& value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}
void PublishStream::set_client_ip(const char* value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}
void PublishStream::set_client_ip(const char* value,
    size_t size) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}
::std::string* PublishStream::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
  return client_ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::release_client_ip() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
  
  return client_ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::unsafe_arena_release_client_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PublishStream::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}
void PublishStream::unsafe_arena_set_allocated_client_ip(
    ::std::string* client_ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
bool PublishStream::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void PublishStream::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& PublishStream::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* PublishStream::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* PublishStream::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void PublishStream::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
}

// bool set_stream_source = 5;
void PublishStream::clear_set_stream_source() {
  set_stream_source_ = false;
}
bool PublishStream::set_stream_source() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.set_stream_source)
  return set_stream_source_;
}
void PublishStream::set_set_stream_source(bool value) {
  
  set_stream_source_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.PublishStream.set_stream_source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void PublishStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void PublishStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void PublishStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishStreamRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishStreamRsp::PublishStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
}
PublishStreamRsp::PublishStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
}
PublishStreamRsp::PublishStreamRsp(const PublishStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
}

void PublishStreamRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

PublishStreamRsp::~PublishStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  SharedDtor();
}

void PublishStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void PublishStreamRsp::ArenaDtor(void* object) {
  PublishStreamRsp* _this = reinterpret_cast< PublishStreamRsp* >(object);
  (void)_this;
}
void PublishStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PublishStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishStreamRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[9].descriptor;
}

const PublishStreamRsp& PublishStreamRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishStreamRsp* PublishStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PublishStreamRsp>(arena);
}

void PublishStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool PublishStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  return false;
#undef DO_
}

void PublishStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
}

::google::protobuf::uint8* PublishStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  return target;
}

size_t PublishStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
    MergeFrom(*source);
  }
}

void PublishStreamRsp::MergeFrom(const PublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void PublishStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishStreamRsp::CopyFrom(const PublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishStreamRsp::IsInitialized() const {
  return true;
}

void PublishStreamRsp::Swap(PublishStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PublishStreamRsp::UnsafeArenaSwap(PublishStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishStreamRsp::InternalSwap(PublishStreamRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishStreamRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool PublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void PublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& PublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void PublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnpublishStream::kStreamIdFieldNumber;
const int UnpublishStream::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnpublishStream::UnpublishStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.UnpublishStream)
}
UnpublishStream::UnpublishStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.UnpublishStream)
}
UnpublishStream::UnpublishStream(const UnpublishStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.UnpublishStream)
}

void UnpublishStream::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UnpublishStream::~UnpublishStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  SharedDtor();
}

void UnpublishStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void UnpublishStream::ArenaDtor(void* object) {
  UnpublishStream* _this = reinterpret_cast< UnpublishStream* >(object);
  (void)_this;
}
void UnpublishStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UnpublishStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnpublishStream::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[10].descriptor;
}

const UnpublishStream& UnpublishStream::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnpublishStream* UnpublishStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UnpublishStream>(arena);
}

void UnpublishStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool UnpublishStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  return false;
#undef DO_
}

void UnpublishStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.UnpublishStream)
}

::google::protobuf::uint8* UnpublishStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  return target;
}

size_t UnpublishStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnpublishStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  const UnpublishStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnpublishStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.UnpublishStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.UnpublishStream)
    MergeFrom(*source);
  }
}

void UnpublishStream::MergeFrom(const UnpublishStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
}

void UnpublishStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnpublishStream::CopyFrom(const UnpublishStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.UnpublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishStream::IsInitialized() const {
  return true;
}

void UnpublishStream::Swap(UnpublishStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UnpublishStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UnpublishStream::UnsafeArenaSwap(UnpublishStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UnpublishStream::InternalSwap(UnpublishStream* other) {
  stream_id_.Swap(&other->stream_id_);
  client_id_.Swap(&other->client_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnpublishStream::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnpublishStream

// string stream_id = 1;
void UnpublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UnpublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
  return stream_id_.Get();
}
void UnpublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}
void UnpublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}
void UnpublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}
::std::string* UnpublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UnpublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UnpublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UnpublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}
void UnpublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}

// string client_id = 2;
void UnpublishStream::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UnpublishStream::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
  return client_id_.Get();
}
void UnpublishStream::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}
void UnpublishStream::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}
void UnpublishStream::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}
::std::string* UnpublishStream::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UnpublishStream::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UnpublishStream::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UnpublishStream::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}
void UnpublishStream::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UnpublishStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* UnpublishStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* UnpublishStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void UnpublishStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void UnpublishStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnpublishStreamRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnpublishStreamRsp::UnpublishStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
}
UnpublishStreamRsp::UnpublishStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
}
UnpublishStreamRsp::UnpublishStreamRsp(const UnpublishStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
}

void UnpublishStreamRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

UnpublishStreamRsp::~UnpublishStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  SharedDtor();
}

void UnpublishStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void UnpublishStreamRsp::ArenaDtor(void* object) {
  UnpublishStreamRsp* _this = reinterpret_cast< UnpublishStreamRsp* >(object);
  (void)_this;
}
void UnpublishStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UnpublishStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnpublishStreamRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[11].descriptor;
}

const UnpublishStreamRsp& UnpublishStreamRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnpublishStreamRsp* UnpublishStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UnpublishStreamRsp>(arena);
}

void UnpublishStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool UnpublishStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  return false;
#undef DO_
}

void UnpublishStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
}

::google::protobuf::uint8* UnpublishStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  return target;
}

size_t UnpublishStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnpublishStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const UnpublishStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnpublishStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
    MergeFrom(*source);
  }
}

void UnpublishStreamRsp::MergeFrom(const UnpublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void UnpublishStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnpublishStreamRsp::CopyFrom(const UnpublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnpublishStreamRsp::IsInitialized() const {
  return true;
}

void UnpublishStreamRsp::Swap(UnpublishStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UnpublishStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UnpublishStreamRsp::UnsafeArenaSwap(UnpublishStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UnpublishStreamRsp::InternalSwap(UnpublishStreamRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnpublishStreamRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnpublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool UnpublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void UnpublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& UnpublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* UnpublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* UnpublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void UnpublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamServers::kStreamIdFieldNumber;
const int GetStreamServers::kClientIdFieldNumber;
const int GetStreamServers::kClientIpFieldNumber;
const int GetStreamServers::kGroupIdFieldNumber;
const int GetStreamServers::kUserIdFieldNumber;
const int GetStreamServers::kAppIdFieldNumber;
const int GetStreamServers::kCompanyIdFieldNumber;
const int GetStreamServers::kRoomIdFieldNumber;
const int GetStreamServers::kMediaTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamServers::GetStreamServers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.GetStreamServers)
}
GetStreamServers::GetStreamServers(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.GetStreamServers)
}
GetStreamServers::GetStreamServers(const GetStreamServers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ip(),
      GetArenaNoVirtual());
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.company_id().size() > 0) {
    company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_id(),
      GetArenaNoVirtual());
  }
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_id().size() > 0) {
    room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id(),
      GetArenaNoVirtual());
  }
  media_type_ = from.media_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.GetStreamServers)
}

void GetStreamServers::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  _cached_size_ = 0;
}

GetStreamServers::~GetStreamServers() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  SharedDtor();
}

void GetStreamServers::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_ip_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  company_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  room_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetStreamServers::ArenaDtor(void* object) {
  GetStreamServers* _this = reinterpret_cast< GetStreamServers* >(object);
  (void)_this;
}
void GetStreamServers::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamServers::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[12].descriptor;
}

const GetStreamServers& GetStreamServers::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamServers* GetStreamServers::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamServers>(arena);
}

void GetStreamServers::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_type_ = 0;
}

bool GetStreamServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_ip = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string company_id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_id = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 media_type = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  return false;
#undef DO_
}

void GetStreamServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_ip(), output);
  }

  // string group_id = 4;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_id(), output);
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_id(), output);
  }

  // string app_id = 6;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->app_id(), output);
  }

  // string company_id = 7;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->company_id(), output);
  }

  // string room_id = 8;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->room_id(), output);
  }

  // int32 media_type = 9;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->media_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.GetStreamServers)
}

::google::protobuf::uint8* GetStreamServers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_ip(), target);
  }

  // string group_id = 4;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_id(), target);
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_id(), target);
  }

  // string app_id = 6;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->app_id(), target);
  }

  // string company_id = 7;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->company_id(), target);
  }

  // string room_id = 8;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->room_id(), target);
  }

  // int32 media_type = 9;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->media_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  return target;
}

size_t GetStreamServers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string client_ip = 3;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // string group_id = 4;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string app_id = 6;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string company_id = 7;
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->company_id());
  }

  // string room_id = 8;
  if (this->room_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_id());
  }

  // int32 media_type = 9;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamServers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamServers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamServers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.GetStreamServers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.GetStreamServers)
    MergeFrom(*source);
  }
}

void GetStreamServers::MergeFrom(const GetStreamServers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.client_ip().size() > 0) {
    set_client_ip(from.client_ip());
  }
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.company_id().size() > 0) {
    set_company_id(from.company_id());
  }
  if (from.room_id().size() > 0) {
    set_room_id(from.room_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void GetStreamServers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamServers::CopyFrom(const GetStreamServers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamServers::IsInitialized() const {
  return true;
}

void GetStreamServers::Swap(GetStreamServers* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamServers* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamServers::UnsafeArenaSwap(GetStreamServers* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamServers::InternalSwap(GetStreamServers* other) {
  stream_id_.Swap(&other->stream_id_);
  client_id_.Swap(&other->client_id_);
  client_ip_.Swap(&other->client_ip_);
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  app_id_.Swap(&other->app_id_);
  company_id_.Swap(&other->company_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamServers::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamServers

// string stream_id = 1;
void GetStreamServers::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
  return stream_id_.Get();
}
void GetStreamServers::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}
void GetStreamServers::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}
void GetStreamServers::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}
::std::string* GetStreamServers::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}
void GetStreamServers::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}

// string client_id = 2;
void GetStreamServers::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
  return client_id_.Get();
}
void GetStreamServers::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}
void GetStreamServers::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}
void GetStreamServers::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}
::std::string* GetStreamServers::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}
void GetStreamServers::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}

// string client_ip = 3;
void GetStreamServers::clear_client_ip() {
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::client_ip() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
  return client_ip_.Get();
}
void GetStreamServers::set_client_ip(const ::std::string& value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}
void GetStreamServers::set_client_ip(const char* value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}
void GetStreamServers::set_client_ip(const char* value,
    size_t size) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}
::std::string* GetStreamServers::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
  return client_ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_client_ip() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
  
  return client_ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_client_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}
void GetStreamServers::unsafe_arena_set_allocated_client_ip(
    ::std::string* client_ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}

// string group_id = 4;
void GetStreamServers::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
  return group_id_.Get();
}
void GetStreamServers::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}
void GetStreamServers::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}
void GetStreamServers::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}
::std::string* GetStreamServers::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}
void GetStreamServers::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}

// string user_id = 5;
void GetStreamServers::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
  return user_id_.Get();
}
void GetStreamServers::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}
void GetStreamServers::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}
void GetStreamServers::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}
::std::string* GetStreamServers::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}
void GetStreamServers::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}

// string app_id = 6;
void GetStreamServers::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
  return app_id_.Get();
}
void GetStreamServers::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}
void GetStreamServers::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}
void GetStreamServers::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}
::std::string* GetStreamServers::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}
void GetStreamServers::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}

// string company_id = 7;
void GetStreamServers::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
  return company_id_.Get();
}
void GetStreamServers::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}
void GetStreamServers::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}
void GetStreamServers::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}
::std::string* GetStreamServers::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}
void GetStreamServers::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}

// string room_id = 8;
void GetStreamServers::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
  return room_id_.Get();
}
void GetStreamServers::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}
void GetStreamServers::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}
void GetStreamServers::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}
::std::string* GetStreamServers::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}
void GetStreamServers::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}

// int32 media_type = 9;
void GetStreamServers::clear_media_type() {
  media_type_ = 0;
}
::google::protobuf::int32 GetStreamServers::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.media_type)
  return media_type_;
}
void GetStreamServers::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.media_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetStreamServersRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GetStreamServersRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GetStreamServersRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamServersRsp::kResponseFieldNumber;
const int GetStreamServersRsp::kStreamServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamServersRsp::GetStreamServersRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
}
GetStreamServersRsp::GetStreamServersRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  streamservers_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
}
GetStreamServersRsp::GetStreamServersRsp(const GetStreamServersRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      streamservers_(from.streamservers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
}

void GetStreamServersRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

GetStreamServersRsp::~GetStreamServersRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  SharedDtor();
}

void GetStreamServersRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GetStreamServersRsp::ArenaDtor(void* object) {
  GetStreamServersRsp* _this = reinterpret_cast< GetStreamServersRsp* >(object);
  (void)_this;
}
void GetStreamServersRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamServersRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamServersRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[13].descriptor;
}

const GetStreamServersRsp& GetStreamServersRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamServersRsp* GetStreamServersRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamServersRsp>(arena);
}

void GetStreamServersRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  streamservers_.Clear();
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool GetStreamServersRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_streamservers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  return false;
#undef DO_
}

void GetStreamServersRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
  for (unsigned int i = 0, n = this->streamservers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->streamservers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
}

::google::protobuf::uint8* GetStreamServersRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
  for (unsigned int i = 0, n = this->streamservers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->streamservers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  return target;
}

size_t GetStreamServersRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  size_t total_size = 0;

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
  {
    unsigned int count = this->streamservers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streamservers(i));
    }
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamServersRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamServersRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamServersRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
    MergeFrom(*source);
  }
}

void GetStreamServersRsp::MergeFrom(const GetStreamServersRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  streamservers_.MergeFrom(from.streamservers_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void GetStreamServersRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamServersRsp::CopyFrom(const GetStreamServersRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamServersRsp::IsInitialized() const {
  return true;
}

void GetStreamServersRsp::Swap(GetStreamServersRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamServersRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamServersRsp::UnsafeArenaSwap(GetStreamServersRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamServersRsp::InternalSwap(GetStreamServersRsp* other) {
  streamservers_.UnsafeArenaSwap(&other->streamservers_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamServersRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamServersRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GetStreamServersRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GetStreamServersRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamServersRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GetStreamServersRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
}

// repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
int GetStreamServersRsp::streamservers_size() const {
  return streamservers_.size();
}
void GetStreamServersRsp::clear_streamservers() {
  streamservers_.Clear();
}
const ::com::fsmeeting::fsp::proto::common::StreamServer& GetStreamServersRsp::streamservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return streamservers_.Get(index);
}
::com::fsmeeting::fsp::proto::common::StreamServer* GetStreamServersRsp::mutable_streamservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return streamservers_.Mutable(index);
}
::com::fsmeeting::fsp::proto::common::StreamServer* GetStreamServersRsp::add_streamservers() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return streamservers_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
GetStreamServersRsp::mutable_streamservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return &streamservers_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
GetStreamServersRsp::streamservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return streamservers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StreamSendingStart::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void StreamSendingStart::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void StreamSendingStart::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSendingStart::kStreamIdFieldNumber;
const int StreamSendingStart::kRecvClientIdFieldNumber;
const int StreamSendingStart::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSendingStart::StreamSendingStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
}
StreamSendingStart::StreamSendingStart(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
}
StreamSendingStart::StreamSendingStart(const StreamSendingStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_client_id().size() > 0) {
    recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_client_id(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
}

void StreamSendingStart::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commoninvokeinfo_ = NULL;
  _cached_size_ = 0;
}

StreamSendingStart::~StreamSendingStart() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  SharedDtor();
}

void StreamSendingStart::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  recv_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void StreamSendingStart::ArenaDtor(void* object) {
  StreamSendingStart* _this = reinterpret_cast< StreamSendingStart* >(object);
  (void)_this;
}
void StreamSendingStart::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamSendingStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSendingStart::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[14].descriptor;
}

const StreamSendingStart& StreamSendingStart::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamSendingStart* StreamSendingStart::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamSendingStart>(arena);
}

void StreamSendingStart::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
}

bool StreamSendingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recv_client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_client_id().data(), this->recv_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  return false;
#undef DO_
}

void StreamSendingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recv_client_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
}

::google::protobuf::uint8* StreamSendingStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recv_client_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  return target;
}

size_t StreamSendingStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_client_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSendingStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSendingStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSendingStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
    MergeFrom(*source);
  }
}

void StreamSendingStart::MergeFrom(const StreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.recv_client_id().size() > 0) {
    set_recv_client_id(from.recv_client_id());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
}

void StreamSendingStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSendingStart::CopyFrom(const StreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSendingStart::IsInitialized() const {
  return true;
}

void StreamSendingStart::Swap(StreamSendingStart* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamSendingStart* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamSendingStart::UnsafeArenaSwap(StreamSendingStart* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamSendingStart::InternalSwap(StreamSendingStart* other) {
  stream_id_.Swap(&other->stream_id_);
  recv_client_id_.Swap(&other->recv_client_id_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSendingStart::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSendingStart

// string stream_id = 1;
void StreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
  return stream_id_.Get();
}
void StreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}
void StreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}
void StreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}
::std::string* StreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}
void StreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}

// string recv_client_id = 2;
void StreamSendingStart::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamSendingStart::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
  return recv_client_id_.Get();
}
void StreamSendingStart::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}
void StreamSendingStart::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}
void StreamSendingStart::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}
::std::string* StreamSendingStart::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStart::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStart::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamSendingStart::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}
void StreamSendingStart::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
bool StreamSendingStart::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void StreamSendingStart::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& StreamSendingStart::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void StreamSendingStart::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StreamSendingStartRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void StreamSendingStartRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void StreamSendingStartRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSendingStartRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSendingStartRsp::StreamSendingStartRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
}
StreamSendingStartRsp::StreamSendingStartRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
}
StreamSendingStartRsp::StreamSendingStartRsp(const StreamSendingStartRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
}

void StreamSendingStartRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

StreamSendingStartRsp::~StreamSendingStartRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  SharedDtor();
}

void StreamSendingStartRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void StreamSendingStartRsp::ArenaDtor(void* object) {
  StreamSendingStartRsp* _this = reinterpret_cast< StreamSendingStartRsp* >(object);
  (void)_this;
}
void StreamSendingStartRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamSendingStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSendingStartRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[15].descriptor;
}

const StreamSendingStartRsp& StreamSendingStartRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamSendingStartRsp* StreamSendingStartRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamSendingStartRsp>(arena);
}

void StreamSendingStartRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool StreamSendingStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  return false;
#undef DO_
}

void StreamSendingStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
}

::google::protobuf::uint8* StreamSendingStartRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  return target;
}

size_t StreamSendingStartRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSendingStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSendingStartRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSendingStartRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
    MergeFrom(*source);
  }
}

void StreamSendingStartRsp::MergeFrom(const StreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void StreamSendingStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSendingStartRsp::CopyFrom(const StreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSendingStartRsp::IsInitialized() const {
  return true;
}

void StreamSendingStartRsp::Swap(StreamSendingStartRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamSendingStartRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamSendingStartRsp::UnsafeArenaSwap(StreamSendingStartRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamSendingStartRsp::InternalSwap(StreamSendingStartRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSendingStartRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool StreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void StreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void StreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSendingStop::kStreamIdFieldNumber;
const int StreamSendingStop::kRecvClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSendingStop::StreamSendingStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
}
StreamSendingStop::StreamSendingStop(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
}
StreamSendingStop::StreamSendingStop(const StreamSendingStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_client_id().size() > 0) {
    recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_client_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
}

void StreamSendingStop::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StreamSendingStop::~StreamSendingStop() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  SharedDtor();
}

void StreamSendingStop::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  recv_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void StreamSendingStop::ArenaDtor(void* object) {
  StreamSendingStop* _this = reinterpret_cast< StreamSendingStop* >(object);
  (void)_this;
}
void StreamSendingStop::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamSendingStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSendingStop::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[16].descriptor;
}

const StreamSendingStop& StreamSendingStop::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamSendingStop* StreamSendingStop::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamSendingStop>(arena);
}

void StreamSendingStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool StreamSendingStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recv_client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_client_id().data(), this->recv_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  return false;
#undef DO_
}

void StreamSendingStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recv_client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
}

::google::protobuf::uint8* StreamSendingStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recv_client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  return target;
}

size_t StreamSendingStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSendingStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSendingStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSendingStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
    MergeFrom(*source);
  }
}

void StreamSendingStop::MergeFrom(const StreamSendingStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.recv_client_id().size() > 0) {
    set_recv_client_id(from.recv_client_id());
  }
}

void StreamSendingStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSendingStop::CopyFrom(const StreamSendingStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSendingStop::IsInitialized() const {
  return true;
}

void StreamSendingStop::Swap(StreamSendingStop* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamSendingStop* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamSendingStop::UnsafeArenaSwap(StreamSendingStop* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamSendingStop::InternalSwap(StreamSendingStop* other) {
  stream_id_.Swap(&other->stream_id_);
  recv_client_id_.Swap(&other->recv_client_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSendingStop::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSendingStop

// string stream_id = 1;
void StreamSendingStop::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamSendingStop::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
  return stream_id_.Get();
}
void StreamSendingStop::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}
void StreamSendingStop::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}
void StreamSendingStop::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}
::std::string* StreamSendingStop::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStop::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStop::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamSendingStop::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}
void StreamSendingStop::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}

// string recv_client_id = 2;
void StreamSendingStop::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamSendingStop::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
  return recv_client_id_.Get();
}
void StreamSendingStop::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}
void StreamSendingStop::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}
void StreamSendingStop::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}
::std::string* StreamSendingStop::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStop::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStop::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamSendingStop::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}
void StreamSendingStop::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StreamSendingStopRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStopRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStopRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void StreamSendingStopRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void StreamSendingStopRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSendingStopRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSendingStopRsp::StreamSendingStopRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
}
StreamSendingStopRsp::StreamSendingStopRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
}
StreamSendingStopRsp::StreamSendingStopRsp(const StreamSendingStopRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
}

void StreamSendingStopRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

StreamSendingStopRsp::~StreamSendingStopRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  SharedDtor();
}

void StreamSendingStopRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void StreamSendingStopRsp::ArenaDtor(void* object) {
  StreamSendingStopRsp* _this = reinterpret_cast< StreamSendingStopRsp* >(object);
  (void)_this;
}
void StreamSendingStopRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamSendingStopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSendingStopRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[17].descriptor;
}

const StreamSendingStopRsp& StreamSendingStopRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamSendingStopRsp* StreamSendingStopRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamSendingStopRsp>(arena);
}

void StreamSendingStopRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool StreamSendingStopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  return false;
#undef DO_
}

void StreamSendingStopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
}

::google::protobuf::uint8* StreamSendingStopRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  return target;
}

size_t StreamSendingStopRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSendingStopRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSendingStopRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSendingStopRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
    MergeFrom(*source);
  }
}

void StreamSendingStopRsp::MergeFrom(const StreamSendingStopRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void StreamSendingStopRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSendingStopRsp::CopyFrom(const StreamSendingStopRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSendingStopRsp::IsInitialized() const {
  return true;
}

void StreamSendingStopRsp::Swap(StreamSendingStopRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamSendingStopRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamSendingStopRsp::UnsafeArenaSwap(StreamSendingStopRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamSendingStopRsp::InternalSwap(StreamSendingStopRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSendingStopRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSendingStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool StreamSendingStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void StreamSendingStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamSendingStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void StreamSendingStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckStreamPublishToken::kStreamIdFieldNumber;
const int CheckStreamPublishToken::kStreamPublishTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckStreamPublishToken::CheckStreamPublishToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
}
CheckStreamPublishToken::CheckStreamPublishToken(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
}
CheckStreamPublishToken::CheckStreamPublishToken(const CheckStreamPublishToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_publish_token().size() > 0) {
    stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_publish_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
}

void CheckStreamPublishToken::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CheckStreamPublishToken::~CheckStreamPublishToken() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  SharedDtor();
}

void CheckStreamPublishToken::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_publish_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CheckStreamPublishToken::ArenaDtor(void* object) {
  CheckStreamPublishToken* _this = reinterpret_cast< CheckStreamPublishToken* >(object);
  (void)_this;
}
void CheckStreamPublishToken::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CheckStreamPublishToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckStreamPublishToken::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[18].descriptor;
}

const CheckStreamPublishToken& CheckStreamPublishToken::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckStreamPublishToken* CheckStreamPublishToken::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CheckStreamPublishToken>(arena);
}

void CheckStreamPublishToken::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CheckStreamPublishToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_publish_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_publish_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_publish_token().data(), this->stream_publish_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  return false;
#undef DO_
}

void CheckStreamPublishToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_publish_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
}

::google::protobuf::uint8* CheckStreamPublishToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_publish_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  return target;
}

size_t CheckStreamPublishToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_publish_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckStreamPublishToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckStreamPublishToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckStreamPublishToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
    MergeFrom(*source);
  }
}

void CheckStreamPublishToken::MergeFrom(const CheckStreamPublishToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.stream_publish_token().size() > 0) {
    set_stream_publish_token(from.stream_publish_token());
  }
}

void CheckStreamPublishToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckStreamPublishToken::CopyFrom(const CheckStreamPublishToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckStreamPublishToken::IsInitialized() const {
  return true;
}

void CheckStreamPublishToken::Swap(CheckStreamPublishToken* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CheckStreamPublishToken* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CheckStreamPublishToken::UnsafeArenaSwap(CheckStreamPublishToken* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CheckStreamPublishToken::InternalSwap(CheckStreamPublishToken* other) {
  stream_id_.Swap(&other->stream_id_);
  stream_publish_token_.Swap(&other->stream_publish_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckStreamPublishToken::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckStreamPublishToken

// string stream_id = 1;
void CheckStreamPublishToken::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CheckStreamPublishToken::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
  return stream_id_.Get();
}
void CheckStreamPublishToken::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}
void CheckStreamPublishToken::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}
void CheckStreamPublishToken::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}
::std::string* CheckStreamPublishToken::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CheckStreamPublishToken::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CheckStreamPublishToken::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CheckStreamPublishToken::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}
void CheckStreamPublishToken::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}

// string stream_publish_token = 2;
void CheckStreamPublishToken::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CheckStreamPublishToken::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
  return stream_publish_token_.Get();
}
void CheckStreamPublishToken::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}
void CheckStreamPublishToken::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}
void CheckStreamPublishToken::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}
::std::string* CheckStreamPublishToken::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CheckStreamPublishToken::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CheckStreamPublishToken::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CheckStreamPublishToken::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}
void CheckStreamPublishToken::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CheckStreamPublishTokenRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamPublishTokenRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamPublishTokenRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void CheckStreamPublishTokenRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void CheckStreamPublishTokenRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckStreamPublishTokenRsp::kResponseFieldNumber;
const int CheckStreamPublishTokenRsp::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckStreamPublishTokenRsp::CheckStreamPublishTokenRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
}
CheckStreamPublishTokenRsp::CheckStreamPublishTokenRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
}
CheckStreamPublishTokenRsp::CheckStreamPublishTokenRsp(const CheckStreamPublishTokenRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
}

void CheckStreamPublishTokenRsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&response_) + sizeof(valid_));
  _cached_size_ = 0;
}

CheckStreamPublishTokenRsp::~CheckStreamPublishTokenRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  SharedDtor();
}

void CheckStreamPublishTokenRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void CheckStreamPublishTokenRsp::ArenaDtor(void* object) {
  CheckStreamPublishTokenRsp* _this = reinterpret_cast< CheckStreamPublishTokenRsp* >(object);
  (void)_this;
}
void CheckStreamPublishTokenRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CheckStreamPublishTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckStreamPublishTokenRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[19].descriptor;
}

const CheckStreamPublishTokenRsp& CheckStreamPublishTokenRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckStreamPublishTokenRsp* CheckStreamPublishTokenRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CheckStreamPublishTokenRsp>(arena);
}

void CheckStreamPublishTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  valid_ = false;
}

bool CheckStreamPublishTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool valid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  return false;
#undef DO_
}

void CheckStreamPublishTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // bool valid = 2;
  if (this->valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->valid(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
}

::google::protobuf::uint8* CheckStreamPublishTokenRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // bool valid = 2;
  if (this->valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->valid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  return target;
}

size_t CheckStreamPublishTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // bool valid = 2;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckStreamPublishTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckStreamPublishTokenRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckStreamPublishTokenRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
    MergeFrom(*source);
  }
}

void CheckStreamPublishTokenRsp::MergeFrom(const CheckStreamPublishTokenRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.valid() != 0) {
    set_valid(from.valid());
  }
}

void CheckStreamPublishTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckStreamPublishTokenRsp::CopyFrom(const CheckStreamPublishTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckStreamPublishTokenRsp::IsInitialized() const {
  return true;
}

void CheckStreamPublishTokenRsp::Swap(CheckStreamPublishTokenRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CheckStreamPublishTokenRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CheckStreamPublishTokenRsp::UnsafeArenaSwap(CheckStreamPublishTokenRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CheckStreamPublishTokenRsp::InternalSwap(CheckStreamPublishTokenRsp* other) {
  std::swap(response_, other->response_);
  std::swap(valid_, other->valid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckStreamPublishTokenRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckStreamPublishTokenRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool CheckStreamPublishTokenRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void CheckStreamPublishTokenRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& CheckStreamPublishTokenRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamPublishTokenRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamPublishTokenRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void CheckStreamPublishTokenRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
}

// bool valid = 2;
void CheckStreamPublishTokenRsp::clear_valid() {
  valid_ = false;
}
bool CheckStreamPublishTokenRsp::valid() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.valid)
  return valid_;
}
void CheckStreamPublishTokenRsp::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckStreamSubscribeToken::kStreamIdFieldNumber;
const int CheckStreamSubscribeToken::kStreamSubscribeTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckStreamSubscribeToken::CheckStreamSubscribeToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
}
CheckStreamSubscribeToken::CheckStreamSubscribeToken(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
}
CheckStreamSubscribeToken::CheckStreamSubscribeToken(const CheckStreamSubscribeToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  stream_subscribe_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_subscribe_token().size() > 0) {
    stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_subscribe_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
}

void CheckStreamSubscribeToken::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_subscribe_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CheckStreamSubscribeToken::~CheckStreamSubscribeToken() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  SharedDtor();
}

void CheckStreamSubscribeToken::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_subscribe_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CheckStreamSubscribeToken::ArenaDtor(void* object) {
  CheckStreamSubscribeToken* _this = reinterpret_cast< CheckStreamSubscribeToken* >(object);
  (void)_this;
}
void CheckStreamSubscribeToken::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CheckStreamSubscribeToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckStreamSubscribeToken::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[20].descriptor;
}

const CheckStreamSubscribeToken& CheckStreamSubscribeToken::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckStreamSubscribeToken* CheckStreamSubscribeToken::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CheckStreamSubscribeToken>(arena);
}

void CheckStreamSubscribeToken::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CheckStreamSubscribeToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_subscribe_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_subscribe_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  return false;
#undef DO_
}

void CheckStreamSubscribeToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string stream_subscribe_token = 2;
  if (this->stream_subscribe_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_subscribe_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
}

::google::protobuf::uint8* CheckStreamSubscribeToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string stream_subscribe_token = 2;
  if (this->stream_subscribe_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_subscribe_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  return target;
}

size_t CheckStreamSubscribeToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string stream_subscribe_token = 2;
  if (this->stream_subscribe_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_subscribe_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckStreamSubscribeToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckStreamSubscribeToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckStreamSubscribeToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
    MergeFrom(*source);
  }
}

void CheckStreamSubscribeToken::MergeFrom(const CheckStreamSubscribeToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.stream_subscribe_token().size() > 0) {
    set_stream_subscribe_token(from.stream_subscribe_token());
  }
}

void CheckStreamSubscribeToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckStreamSubscribeToken::CopyFrom(const CheckStreamSubscribeToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckStreamSubscribeToken::IsInitialized() const {
  return true;
}

void CheckStreamSubscribeToken::Swap(CheckStreamSubscribeToken* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CheckStreamSubscribeToken* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CheckStreamSubscribeToken::UnsafeArenaSwap(CheckStreamSubscribeToken* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CheckStreamSubscribeToken::InternalSwap(CheckStreamSubscribeToken* other) {
  stream_id_.Swap(&other->stream_id_);
  stream_subscribe_token_.Swap(&other->stream_subscribe_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckStreamSubscribeToken::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckStreamSubscribeToken

// string stream_id = 1;
void CheckStreamSubscribeToken::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CheckStreamSubscribeToken::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
  return stream_id_.Get();
}
void CheckStreamSubscribeToken::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}
void CheckStreamSubscribeToken::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}
void CheckStreamSubscribeToken::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}
::std::string* CheckStreamSubscribeToken::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CheckStreamSubscribeToken::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CheckStreamSubscribeToken::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CheckStreamSubscribeToken::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}
void CheckStreamSubscribeToken::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}

// string stream_subscribe_token = 2;
void CheckStreamSubscribeToken::clear_stream_subscribe_token() {
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CheckStreamSubscribeToken::stream_subscribe_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
  return stream_subscribe_token_.Get();
}
void CheckStreamSubscribeToken::set_stream_subscribe_token(const ::std::string& value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}
void CheckStreamSubscribeToken::set_stream_subscribe_token(const char* value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}
void CheckStreamSubscribeToken::set_stream_subscribe_token(const char* value,
    size_t size) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}
::std::string* CheckStreamSubscribeToken::mutable_stream_subscribe_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
  return stream_subscribe_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CheckStreamSubscribeToken::release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
  
  return stream_subscribe_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CheckStreamSubscribeToken::unsafe_arena_release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_subscribe_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CheckStreamSubscribeToken::set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token) {
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_subscribe_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}
void CheckStreamSubscribeToken::unsafe_arena_set_allocated_stream_subscribe_token(
    ::std::string* stream_subscribe_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_subscribe_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CheckStreamSubscribeTokenRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamSubscribeTokenRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamSubscribeTokenRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void CheckStreamSubscribeTokenRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void CheckStreamSubscribeTokenRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckStreamSubscribeTokenRsp::kResponseFieldNumber;
const int CheckStreamSubscribeTokenRsp::kValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckStreamSubscribeTokenRsp::CheckStreamSubscribeTokenRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
}
CheckStreamSubscribeTokenRsp::CheckStreamSubscribeTokenRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
}
CheckStreamSubscribeTokenRsp::CheckStreamSubscribeTokenRsp(const CheckStreamSubscribeTokenRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
}

void CheckStreamSubscribeTokenRsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&valid_) -
    reinterpret_cast<char*>(&response_) + sizeof(valid_));
  _cached_size_ = 0;
}

CheckStreamSubscribeTokenRsp::~CheckStreamSubscribeTokenRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  SharedDtor();
}

void CheckStreamSubscribeTokenRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void CheckStreamSubscribeTokenRsp::ArenaDtor(void* object) {
  CheckStreamSubscribeTokenRsp* _this = reinterpret_cast< CheckStreamSubscribeTokenRsp* >(object);
  (void)_this;
}
void CheckStreamSubscribeTokenRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CheckStreamSubscribeTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckStreamSubscribeTokenRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[21].descriptor;
}

const CheckStreamSubscribeTokenRsp& CheckStreamSubscribeTokenRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckStreamSubscribeTokenRsp* CheckStreamSubscribeTokenRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CheckStreamSubscribeTokenRsp>(arena);
}

void CheckStreamSubscribeTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  valid_ = false;
}

bool CheckStreamSubscribeTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool valid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  return false;
#undef DO_
}

void CheckStreamSubscribeTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // bool valid = 2;
  if (this->valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->valid(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
}

::google::protobuf::uint8* CheckStreamSubscribeTokenRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // bool valid = 2;
  if (this->valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->valid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  return target;
}

size_t CheckStreamSubscribeTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // bool valid = 2;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckStreamSubscribeTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckStreamSubscribeTokenRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckStreamSubscribeTokenRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
    MergeFrom(*source);
  }
}

void CheckStreamSubscribeTokenRsp::MergeFrom(const CheckStreamSubscribeTokenRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.valid() != 0) {
    set_valid(from.valid());
  }
}

void CheckStreamSubscribeTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckStreamSubscribeTokenRsp::CopyFrom(const CheckStreamSubscribeTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckStreamSubscribeTokenRsp::IsInitialized() const {
  return true;
}

void CheckStreamSubscribeTokenRsp::Swap(CheckStreamSubscribeTokenRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CheckStreamSubscribeTokenRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CheckStreamSubscribeTokenRsp::UnsafeArenaSwap(CheckStreamSubscribeTokenRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CheckStreamSubscribeTokenRsp::InternalSwap(CheckStreamSubscribeTokenRsp* other) {
  std::swap(response_, other->response_);
  std::swap(valid_, other->valid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckStreamSubscribeTokenRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckStreamSubscribeTokenRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool CheckStreamSubscribeTokenRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void CheckStreamSubscribeTokenRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& CheckStreamSubscribeTokenRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamSubscribeTokenRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamSubscribeTokenRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void CheckStreamSubscribeTokenRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
}

// bool valid = 2;
void CheckStreamSubscribeTokenRsp::clear_valid() {
  valid_ = false;
}
bool CheckStreamSubscribeTokenRsp::valid() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.valid)
  return valid_;
}
void CheckStreamSubscribeTokenRsp::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SetStreamSourceServer::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* SetStreamSourceServer::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* SetStreamSourceServer::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void SetStreamSourceServer::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void SetStreamSourceServer::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetStreamSourceServer::kStreamIdFieldNumber;
const int SetStreamSourceServer::kServiceInstanceIdFieldNumber;
const int SetStreamSourceServer::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetStreamSourceServer::SetStreamSourceServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
}
SetStreamSourceServer::SetStreamSourceServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
}
SetStreamSourceServer::SetStreamSourceServer(const SetStreamSourceServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_instance_id().size() > 0) {
    service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_instance_id(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
}

void SetStreamSourceServer::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commoninvokeinfo_ = NULL;
  _cached_size_ = 0;
}

SetStreamSourceServer::~SetStreamSourceServer() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  SharedDtor();
}

void SetStreamSourceServer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void SetStreamSourceServer::ArenaDtor(void* object) {
  SetStreamSourceServer* _this = reinterpret_cast< SetStreamSourceServer* >(object);
  (void)_this;
}
void SetStreamSourceServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SetStreamSourceServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetStreamSourceServer::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[22].descriptor;
}

const SetStreamSourceServer& SetStreamSourceServer::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetStreamSourceServer* SetStreamSourceServer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SetStreamSourceServer>(arena);
}

void SetStreamSourceServer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
}

bool SetStreamSourceServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_instance_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_instance_id().data(), this->service_instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  return false;
#undef DO_
}

void SetStreamSourceServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_instance_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
}

::google::protobuf::uint8* SetStreamSourceServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_instance_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  return target;
}

size_t SetStreamSourceServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_instance_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetStreamSourceServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  GOOGLE_DCHECK_NE(&from, this);
  const SetStreamSourceServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetStreamSourceServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
    MergeFrom(*source);
  }
}

void SetStreamSourceServer::MergeFrom(const SetStreamSourceServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.service_instance_id().size() > 0) {
    set_service_instance_id(from.service_instance_id());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
}

void SetStreamSourceServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStreamSourceServer::CopyFrom(const SetStreamSourceServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStreamSourceServer::IsInitialized() const {
  return true;
}

void SetStreamSourceServer::Swap(SetStreamSourceServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SetStreamSourceServer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SetStreamSourceServer::UnsafeArenaSwap(SetStreamSourceServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SetStreamSourceServer::InternalSwap(SetStreamSourceServer* other) {
  stream_id_.Swap(&other->stream_id_);
  service_instance_id_.Swap(&other->service_instance_id_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetStreamSourceServer::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetStreamSourceServer

// string stream_id = 1;
void SetStreamSourceServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SetStreamSourceServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
  return stream_id_.Get();
}
void SetStreamSourceServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}
void SetStreamSourceServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}
void SetStreamSourceServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}
::std::string* SetStreamSourceServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SetStreamSourceServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SetStreamSourceServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SetStreamSourceServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}
void SetStreamSourceServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}

// string service_instance_id = 2;
void SetStreamSourceServer::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SetStreamSourceServer::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
  return service_instance_id_.Get();
}
void SetStreamSourceServer::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}
void SetStreamSourceServer::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}
void SetStreamSourceServer::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}
::std::string* SetStreamSourceServer::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SetStreamSourceServer::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SetStreamSourceServer::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SetStreamSourceServer::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}
void SetStreamSourceServer::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
bool SetStreamSourceServer::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void SetStreamSourceServer::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& SetStreamSourceServer::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* SetStreamSourceServer::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* SetStreamSourceServer::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void SetStreamSourceServer::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SetStreamSourceServerRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SetStreamSourceServerRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SetStreamSourceServerRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void SetStreamSourceServerRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void SetStreamSourceServerRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetStreamSourceServerRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetStreamSourceServerRsp::SetStreamSourceServerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
}
SetStreamSourceServerRsp::SetStreamSourceServerRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
}
SetStreamSourceServerRsp::SetStreamSourceServerRsp(const SetStreamSourceServerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
}

void SetStreamSourceServerRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

SetStreamSourceServerRsp::~SetStreamSourceServerRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  SharedDtor();
}

void SetStreamSourceServerRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void SetStreamSourceServerRsp::ArenaDtor(void* object) {
  SetStreamSourceServerRsp* _this = reinterpret_cast< SetStreamSourceServerRsp* >(object);
  (void)_this;
}
void SetStreamSourceServerRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SetStreamSourceServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetStreamSourceServerRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[23].descriptor;
}

const SetStreamSourceServerRsp& SetStreamSourceServerRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetStreamSourceServerRsp* SetStreamSourceServerRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SetStreamSourceServerRsp>(arena);
}

void SetStreamSourceServerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool SetStreamSourceServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  return false;
#undef DO_
}

void SetStreamSourceServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
}

::google::protobuf::uint8* SetStreamSourceServerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  return target;
}

size_t SetStreamSourceServerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetStreamSourceServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetStreamSourceServerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetStreamSourceServerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
    MergeFrom(*source);
  }
}

void SetStreamSourceServerRsp::MergeFrom(const SetStreamSourceServerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void SetStreamSourceServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStreamSourceServerRsp::CopyFrom(const SetStreamSourceServerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStreamSourceServerRsp::IsInitialized() const {
  return true;
}

void SetStreamSourceServerRsp::Swap(SetStreamSourceServerRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SetStreamSourceServerRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SetStreamSourceServerRsp::UnsafeArenaSwap(SetStreamSourceServerRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SetStreamSourceServerRsp::InternalSwap(SetStreamSourceServerRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetStreamSourceServerRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetStreamSourceServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool SetStreamSourceServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void SetStreamSourceServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& SetStreamSourceServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SetStreamSourceServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SetStreamSourceServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void SetStreamSourceServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CleanStreamSourceServer::kStreamIdFieldNumber;
const int CleanStreamSourceServer::kServiceInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CleanStreamSourceServer::CleanStreamSourceServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
}
CleanStreamSourceServer::CleanStreamSourceServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
}
CleanStreamSourceServer::CleanStreamSourceServer(const CleanStreamSourceServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_instance_id().size() > 0) {
    service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_instance_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
}

void CleanStreamSourceServer::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CleanStreamSourceServer::~CleanStreamSourceServer() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  SharedDtor();
}

void CleanStreamSourceServer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CleanStreamSourceServer::ArenaDtor(void* object) {
  CleanStreamSourceServer* _this = reinterpret_cast< CleanStreamSourceServer* >(object);
  (void)_this;
}
void CleanStreamSourceServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CleanStreamSourceServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CleanStreamSourceServer::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[24].descriptor;
}

const CleanStreamSourceServer& CleanStreamSourceServer::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CleanStreamSourceServer* CleanStreamSourceServer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CleanStreamSourceServer>(arena);
}

void CleanStreamSourceServer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CleanStreamSourceServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_instance_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_instance_id().data(), this->service_instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  return false;
#undef DO_
}

void CleanStreamSourceServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_instance_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
}

::google::protobuf::uint8* CleanStreamSourceServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_instance_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  return target;
}

size_t CleanStreamSourceServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_instance_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CleanStreamSourceServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanStreamSourceServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CleanStreamSourceServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
    MergeFrom(*source);
  }
}

void CleanStreamSourceServer::MergeFrom(const CleanStreamSourceServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.service_instance_id().size() > 0) {
    set_service_instance_id(from.service_instance_id());
  }
}

void CleanStreamSourceServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanStreamSourceServer::CopyFrom(const CleanStreamSourceServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanStreamSourceServer::IsInitialized() const {
  return true;
}

void CleanStreamSourceServer::Swap(CleanStreamSourceServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CleanStreamSourceServer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CleanStreamSourceServer::UnsafeArenaSwap(CleanStreamSourceServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CleanStreamSourceServer::InternalSwap(CleanStreamSourceServer* other) {
  stream_id_.Swap(&other->stream_id_);
  service_instance_id_.Swap(&other->service_instance_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CleanStreamSourceServer::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CleanStreamSourceServer

// string stream_id = 1;
void CleanStreamSourceServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CleanStreamSourceServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
  return stream_id_.Get();
}
void CleanStreamSourceServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}
void CleanStreamSourceServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}
void CleanStreamSourceServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}
::std::string* CleanStreamSourceServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CleanStreamSourceServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CleanStreamSourceServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CleanStreamSourceServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}
void CleanStreamSourceServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}

// string service_instance_id = 2;
void CleanStreamSourceServer::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CleanStreamSourceServer::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
  return service_instance_id_.Get();
}
void CleanStreamSourceServer::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}
void CleanStreamSourceServer::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}
void CleanStreamSourceServer::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}
::std::string* CleanStreamSourceServer::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CleanStreamSourceServer::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CleanStreamSourceServer::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CleanStreamSourceServer::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}
void CleanStreamSourceServer::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetSuperiorStreamServer::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServer::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServer::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void GetSuperiorStreamServer::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void GetSuperiorStreamServer::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSuperiorStreamServer::kStreamIdFieldNumber;
const int GetSuperiorStreamServer::kServiceInstanceIdFieldNumber;
const int GetSuperiorStreamServer::kCommonInvokeInfoFieldNumber;
const int GetSuperiorStreamServer::kUnexpectedDisconnectFieldNumber;
const int GetSuperiorStreamServer::kNodeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSuperiorStreamServer::GetSuperiorStreamServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
}
GetSuperiorStreamServer::GetSuperiorStreamServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
}
GetSuperiorStreamServer::GetSuperiorStreamServer(const GetSuperiorStreamServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_instance_id().size() > 0) {
    service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_instance_id(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  ::memcpy(&unexpected_disconnect_, &from.unexpected_disconnect_,
    reinterpret_cast<char*>(&node_type_) -
    reinterpret_cast<char*>(&unexpected_disconnect_) + sizeof(node_type_));
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
}

void GetSuperiorStreamServer::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commoninvokeinfo_, 0, reinterpret_cast<char*>(&node_type_) -
    reinterpret_cast<char*>(&commoninvokeinfo_) + sizeof(node_type_));
  _cached_size_ = 0;
}

GetSuperiorStreamServer::~GetSuperiorStreamServer() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  SharedDtor();
}

void GetSuperiorStreamServer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void GetSuperiorStreamServer::ArenaDtor(void* object) {
  GetSuperiorStreamServer* _this = reinterpret_cast< GetSuperiorStreamServer* >(object);
  (void)_this;
}
void GetSuperiorStreamServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetSuperiorStreamServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSuperiorStreamServer::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[25].descriptor;
}

const GetSuperiorStreamServer& GetSuperiorStreamServer::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSuperiorStreamServer* GetSuperiorStreamServer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetSuperiorStreamServer>(arena);
}

void GetSuperiorStreamServer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
  ::memset(&unexpected_disconnect_, 0, reinterpret_cast<char*>(&node_type_) -
    reinterpret_cast<char*>(&unexpected_disconnect_) + sizeof(node_type_));
}

bool GetSuperiorStreamServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_instance_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_instance_id().data(), this->service_instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unexpected_disconnect = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unexpected_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_type = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  return false;
#undef DO_
}

void GetSuperiorStreamServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_instance_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->commoninvokeinfo_, output);
  }

  // bool unexpected_disconnect = 4;
  if (this->unexpected_disconnect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unexpected_disconnect(), output);
  }

  // int32 node_type = 5;
  if (this->node_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->node_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
}

::google::protobuf::uint8* GetSuperiorStreamServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_instance_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->commoninvokeinfo_, false, target);
  }

  // bool unexpected_disconnect = 4;
  if (this->unexpected_disconnect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unexpected_disconnect(), target);
  }

  // int32 node_type = 5;
  if (this->node_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->node_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  return target;
}

size_t GetSuperiorStreamServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_instance_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  // bool unexpected_disconnect = 4;
  if (this->unexpected_disconnect() != 0) {
    total_size += 1 + 1;
  }

  // int32 node_type = 5;
  if (this->node_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSuperiorStreamServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSuperiorStreamServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSuperiorStreamServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
    MergeFrom(*source);
  }
}

void GetSuperiorStreamServer::MergeFrom(const GetSuperiorStreamServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.service_instance_id().size() > 0) {
    set_service_instance_id(from.service_instance_id());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
  if (from.unexpected_disconnect() != 0) {
    set_unexpected_disconnect(from.unexpected_disconnect());
  }
  if (from.node_type() != 0) {
    set_node_type(from.node_type());
  }
}

void GetSuperiorStreamServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSuperiorStreamServer::CopyFrom(const GetSuperiorStreamServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSuperiorStreamServer::IsInitialized() const {
  return true;
}

void GetSuperiorStreamServer::Swap(GetSuperiorStreamServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetSuperiorStreamServer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetSuperiorStreamServer::UnsafeArenaSwap(GetSuperiorStreamServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetSuperiorStreamServer::InternalSwap(GetSuperiorStreamServer* other) {
  stream_id_.Swap(&other->stream_id_);
  service_instance_id_.Swap(&other->service_instance_id_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(unexpected_disconnect_, other->unexpected_disconnect_);
  std::swap(node_type_, other->node_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSuperiorStreamServer::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSuperiorStreamServer

// string stream_id = 1;
void GetSuperiorStreamServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetSuperiorStreamServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
  return stream_id_.Get();
}
void GetSuperiorStreamServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}
void GetSuperiorStreamServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}
void GetSuperiorStreamServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}
::std::string* GetSuperiorStreamServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetSuperiorStreamServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetSuperiorStreamServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetSuperiorStreamServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}
void GetSuperiorStreamServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}

// string service_instance_id = 2;
void GetSuperiorStreamServer::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetSuperiorStreamServer::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
  return service_instance_id_.Get();
}
void GetSuperiorStreamServer::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}
void GetSuperiorStreamServer::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}
void GetSuperiorStreamServer::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}
::std::string* GetSuperiorStreamServer::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetSuperiorStreamServer::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetSuperiorStreamServer::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetSuperiorStreamServer::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}
void GetSuperiorStreamServer::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
bool GetSuperiorStreamServer::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void GetSuperiorStreamServer::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& GetSuperiorStreamServer::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServer::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServer::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void GetSuperiorStreamServer::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
}

// bool unexpected_disconnect = 4;
void GetSuperiorStreamServer::clear_unexpected_disconnect() {
  unexpected_disconnect_ = false;
}
bool GetSuperiorStreamServer::unexpected_disconnect() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.unexpected_disconnect)
  return unexpected_disconnect_;
}
void GetSuperiorStreamServer::set_unexpected_disconnect(bool value) {
  
  unexpected_disconnect_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.unexpected_disconnect)
}

// int32 node_type = 5;
void GetSuperiorStreamServer::clear_node_type() {
  node_type_ = 0;
}
::google::protobuf::int32 GetSuperiorStreamServer::node_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.node_type)
  return node_type_;
}
void GetSuperiorStreamServer::set_node_type(::google::protobuf::int32 value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.node_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetSuperiorStreamServerRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetSuperiorStreamServerRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetSuperiorStreamServerRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GetSuperiorStreamServerRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GetSuperiorStreamServerRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
}
void GetSuperiorStreamServerRsp::_slow_mutable_stream_server() {
  stream_server_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::StreamServer >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::StreamServer* GetSuperiorStreamServerRsp::_slow_release_stream_server() {
  if (stream_server_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::StreamServer* temp = new ::com::fsmeeting::fsp::proto::common::StreamServer(*stream_server_);
    stream_server_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::StreamServer* GetSuperiorStreamServerRsp::unsafe_arena_release_stream_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
  
  ::com::fsmeeting::fsp::proto::common::StreamServer* temp = stream_server_;
  stream_server_ = NULL;
  return temp;
}
void GetSuperiorStreamServerRsp::_slow_set_allocated_stream_server(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::StreamServer** stream_server) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stream_server) == NULL) {
      message_arena->Own(*stream_server);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stream_server)) {
      ::com::fsmeeting::fsp::proto::common::StreamServer* new_stream_server = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::StreamServer >(
            message_arena);
      new_stream_server->CopyFrom(**stream_server);
      *stream_server = new_stream_server;
    }
}
void GetSuperiorStreamServerRsp::unsafe_arena_set_allocated_stream_server(
    ::com::fsmeeting::fsp::proto::common::StreamServer* stream_server) {
  if (GetArenaNoVirtual() == NULL) {
    delete stream_server_;
  }
  stream_server_ = stream_server;
  if (stream_server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
}
void GetSuperiorStreamServerRsp::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServerRsp::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServerRsp::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void GetSuperiorStreamServerRsp::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void GetSuperiorStreamServerRsp::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSuperiorStreamServerRsp::kResponseFieldNumber;
const int GetSuperiorStreamServerRsp::kStreamServerFieldNumber;
const int GetSuperiorStreamServerRsp::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSuperiorStreamServerRsp::GetSuperiorStreamServerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
}
GetSuperiorStreamServerRsp::GetSuperiorStreamServerRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
}
GetSuperiorStreamServerRsp::GetSuperiorStreamServerRsp(const GetSuperiorStreamServerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_stream_server()) {
    stream_server_ = new ::com::fsmeeting::fsp::proto::common::StreamServer(*from.stream_server_);
  } else {
    stream_server_ = NULL;
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
}

void GetSuperiorStreamServerRsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&commoninvokeinfo_) -
    reinterpret_cast<char*>(&response_) + sizeof(commoninvokeinfo_));
  _cached_size_ = 0;
}

GetSuperiorStreamServerRsp::~GetSuperiorStreamServerRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  SharedDtor();
}

void GetSuperiorStreamServerRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
  if (this != internal_default_instance()) {
    delete stream_server_;
  }
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void GetSuperiorStreamServerRsp::ArenaDtor(void* object) {
  GetSuperiorStreamServerRsp* _this = reinterpret_cast< GetSuperiorStreamServerRsp* >(object);
  (void)_this;
}
void GetSuperiorStreamServerRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetSuperiorStreamServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSuperiorStreamServerRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[26].descriptor;
}

const GetSuperiorStreamServerRsp& GetSuperiorStreamServerRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetSuperiorStreamServerRsp* GetSuperiorStreamServerRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetSuperiorStreamServerRsp>(arena);
}

void GetSuperiorStreamServerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  if (GetArenaNoVirtual() == NULL && stream_server_ != NULL) {
    delete stream_server_;
  }
  stream_server_ = NULL;
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
}

bool GetSuperiorStreamServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  return false;
#undef DO_
}

void GetSuperiorStreamServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 2;
  if (this->has_stream_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stream_server_, output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
}

::google::protobuf::uint8* GetSuperiorStreamServerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 2;
  if (this->has_stream_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stream_server_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  return target;
}

size_t GetSuperiorStreamServerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 2;
  if (this->has_stream_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stream_server_);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSuperiorStreamServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSuperiorStreamServerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSuperiorStreamServerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
    MergeFrom(*source);
  }
}

void GetSuperiorStreamServerRsp::MergeFrom(const GetSuperiorStreamServerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.has_stream_server()) {
    mutable_stream_server()->::com::fsmeeting::fsp::proto::common::StreamServer::MergeFrom(from.stream_server());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
}

void GetSuperiorStreamServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSuperiorStreamServerRsp::CopyFrom(const GetSuperiorStreamServerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSuperiorStreamServerRsp::IsInitialized() const {
  return true;
}

void GetSuperiorStreamServerRsp::Swap(GetSuperiorStreamServerRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetSuperiorStreamServerRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetSuperiorStreamServerRsp::UnsafeArenaSwap(GetSuperiorStreamServerRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetSuperiorStreamServerRsp::InternalSwap(GetSuperiorStreamServerRsp* other) {
  std::swap(response_, other->response_);
  std::swap(stream_server_, other->stream_server_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSuperiorStreamServerRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetSuperiorStreamServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GetSuperiorStreamServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GetSuperiorStreamServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetSuperiorStreamServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetSuperiorStreamServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetSuperiorStreamServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GetSuperiorStreamServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
}

// .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 2;
bool GetSuperiorStreamServerRsp::has_stream_server() const {
  return this != internal_default_instance() && stream_server_ != NULL;
}
void GetSuperiorStreamServerRsp::clear_stream_server() {
  if (GetArenaNoVirtual() == NULL && stream_server_ != NULL) delete stream_server_;
  stream_server_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::StreamServer& GetSuperiorStreamServerRsp::stream_server() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
  return stream_server_ != NULL ? *stream_server_
                         : *::com::fsmeeting::fsp::proto::common::StreamServer::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::StreamServer* GetSuperiorStreamServerRsp::mutable_stream_server() {
  
  if (stream_server_ == NULL) {
    _slow_mutable_stream_server();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
  return stream_server_;
}
::com::fsmeeting::fsp::proto::common::StreamServer* GetSuperiorStreamServerRsp::release_stream_server() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stream_server();
  } else {
    ::com::fsmeeting::fsp::proto::common::StreamServer* temp = stream_server_;
    stream_server_ = NULL;
    return temp;
  }
}
 void GetSuperiorStreamServerRsp::set_allocated_stream_server(::com::fsmeeting::fsp::proto::common::StreamServer* stream_server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stream_server_;
  }
  if (stream_server != NULL) {
    _slow_set_allocated_stream_server(message_arena, &stream_server);
  }
  stream_server_ = stream_server;
  if (stream_server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
bool GetSuperiorStreamServerRsp::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void GetSuperiorStreamServerRsp::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& GetSuperiorStreamServerRsp::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServerRsp::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServerRsp::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void GetSuperiorStreamServerRsp::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ChannelConnected::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ChannelConnected::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ChannelConnected::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void ChannelConnected::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void ChannelConnected::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelConnected::kClientIdFieldNumber;
const int ChannelConnected::kServiceInstanceIdFieldNumber;
const int ChannelConnected::kStreamIdFieldNumber;
const int ChannelConnected::kDirectionFieldNumber;
const int ChannelConnected::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelConnected::ChannelConnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.ChannelConnected)
}
ChannelConnected::ChannelConnected(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.ChannelConnected)
}
ChannelConnected::ChannelConnected(const ChannelConnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_instance_id().size() > 0) {
    service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_instance_id(),
      GetArenaNoVirtual());
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.ChannelConnected)
}

void ChannelConnected::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commoninvokeinfo_, 0, reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&commoninvokeinfo_) + sizeof(direction_));
  _cached_size_ = 0;
}

ChannelConnected::~ChannelConnected() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  SharedDtor();
}

void ChannelConnected::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void ChannelConnected::ArenaDtor(void* object) {
  ChannelConnected* _this = reinterpret_cast< ChannelConnected* >(object);
  (void)_this;
}
void ChannelConnected::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChannelConnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelConnected::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[27].descriptor;
}

const ChannelConnected& ChannelConnected::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelConnected* ChannelConnected::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ChannelConnected>(arena);
}

void ChannelConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
  direction_ = 0;
}

bool ChannelConnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_instance_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_instance_id().data(), this->service_instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.DataDirection direction = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::com::fsmeeting::fsp::proto::common::DataDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  return false;
#undef DO_
}

void ChannelConnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_instance_id(), output);
  }

  // string stream_id = 3;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stream_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.DataDirection direction = 4;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.ChannelConnected)
}

::google::protobuf::uint8* ChannelConnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_instance_id(), target);
  }

  // string stream_id = 3;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stream_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.DataDirection direction = 4;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  return target;
}

size_t ChannelConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  size_t total_size = 0;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_instance_id());
  }

  // string stream_id = 3;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  // .com.fsmeeting.fsp.proto.common.DataDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelConnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelConnected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelConnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.ChannelConnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.ChannelConnected)
    MergeFrom(*source);
  }
}

void ChannelConnected::MergeFrom(const ChannelConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.service_instance_id().size() > 0) {
    set_service_instance_id(from.service_instance_id());
  }
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void ChannelConnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelConnected::CopyFrom(const ChannelConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConnected::IsInitialized() const {
  return true;
}

void ChannelConnected::Swap(ChannelConnected* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChannelConnected* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChannelConnected::UnsafeArenaSwap(ChannelConnected* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChannelConnected::InternalSwap(ChannelConnected* other) {
  client_id_.Swap(&other->client_id_);
  service_instance_id_.Swap(&other->service_instance_id_);
  stream_id_.Swap(&other->stream_id_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(direction_, other->direction_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelConnected::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelConnected

// string client_id = 1;
void ChannelConnected::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ChannelConnected::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
  return client_id_.Get();
}
void ChannelConnected::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}
void ChannelConnected::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}
void ChannelConnected::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}
::std::string* ChannelConnected::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelConnected::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelConnected::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ChannelConnected::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}
void ChannelConnected::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}

// string service_instance_id = 2;
void ChannelConnected::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ChannelConnected::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
  return service_instance_id_.Get();
}
void ChannelConnected::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}
void ChannelConnected::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}
void ChannelConnected::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}
::std::string* ChannelConnected::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelConnected::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelConnected::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ChannelConnected::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}
void ChannelConnected::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}

// string stream_id = 3;
void ChannelConnected::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ChannelConnected::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
  return stream_id_.Get();
}
void ChannelConnected::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}
void ChannelConnected::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}
void ChannelConnected::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}
::std::string* ChannelConnected::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelConnected::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelConnected::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ChannelConnected::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}
void ChannelConnected::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}

// .com.fsmeeting.fsp.proto.common.DataDirection direction = 4;
void ChannelConnected::clear_direction() {
  direction_ = 0;
}
::com::fsmeeting::fsp::proto::common::DataDirection ChannelConnected::direction() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.direction)
  return static_cast< ::com::fsmeeting::fsp::proto::common::DataDirection >(direction_);
}
void ChannelConnected::set_direction(::com::fsmeeting::fsp::proto::common::DataDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected.direction)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
bool ChannelConnected::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void ChannelConnected::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& ChannelConnected::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ChannelConnected::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ChannelConnected::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void ChannelConnected::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ChannelConnectedRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnectedRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnectedRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void ChannelConnectedRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void ChannelConnectedRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelConnectedRsp::kResponseFieldNumber;
const int ChannelConnectedRsp::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelConnectedRsp::ChannelConnectedRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
}
ChannelConnectedRsp::ChannelConnectedRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
}
ChannelConnectedRsp::ChannelConnectedRsp(const ChannelConnectedRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
}

void ChannelConnectedRsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&response_) + sizeof(channel_type_));
  _cached_size_ = 0;
}

ChannelConnectedRsp::~ChannelConnectedRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  SharedDtor();
}

void ChannelConnectedRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void ChannelConnectedRsp::ArenaDtor(void* object) {
  ChannelConnectedRsp* _this = reinterpret_cast< ChannelConnectedRsp* >(object);
  (void)_this;
}
void ChannelConnectedRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChannelConnectedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelConnectedRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[28].descriptor;
}

const ChannelConnectedRsp& ChannelConnectedRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelConnectedRsp* ChannelConnectedRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ChannelConnectedRsp>(arena);
}

void ChannelConnectedRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  channel_type_ = 0;
}

bool ChannelConnectedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel_type(static_cast< ::com::fsmeeting::fsp::proto::common::ChannelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  return false;
#undef DO_
}

void ChannelConnectedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
  if (this->channel_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
}

::google::protobuf::uint8* ChannelConnectedRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
  if (this->channel_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  return target;
}

size_t ChannelConnectedRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
  if (this->channel_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelConnectedRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelConnectedRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelConnectedRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
    MergeFrom(*source);
  }
}

void ChannelConnectedRsp::MergeFrom(const ChannelConnectedRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.channel_type() != 0) {
    set_channel_type(from.channel_type());
  }
}

void ChannelConnectedRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelConnectedRsp::CopyFrom(const ChannelConnectedRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConnectedRsp::IsInitialized() const {
  return true;
}

void ChannelConnectedRsp::Swap(ChannelConnectedRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChannelConnectedRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChannelConnectedRsp::UnsafeArenaSwap(ChannelConnectedRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChannelConnectedRsp::InternalSwap(ChannelConnectedRsp* other) {
  std::swap(response_, other->response_);
  std::swap(channel_type_, other->channel_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelConnectedRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelConnectedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool ChannelConnectedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void ChannelConnectedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& ChannelConnectedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnectedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnectedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void ChannelConnectedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
}

// .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
void ChannelConnectedRsp::clear_channel_type() {
  channel_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::ChannelType ChannelConnectedRsp::channel_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.channel_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ChannelType >(channel_type_);
}
void ChannelConnectedRsp::set_channel_type(::com::fsmeeting::fsp::proto::common::ChannelType value) {
  
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.channel_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ChannelConnected2Rsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnected2Rsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnected2Rsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void ChannelConnected2Rsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void ChannelConnected2Rsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
}
void ChannelConnected2Rsp::_slow_mutable_stream() {
  stream_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::Stream >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::Stream* ChannelConnected2Rsp::_slow_release_stream() {
  if (stream_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::Stream* temp = new ::com::fsmeeting::fsp::proto::common::Stream(*stream_);
    stream_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::Stream* ChannelConnected2Rsp::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
  
  ::com::fsmeeting::fsp::proto::common::Stream* temp = stream_;
  stream_ = NULL;
  return temp;
}
void ChannelConnected2Rsp::_slow_set_allocated_stream(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::Stream** stream) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*stream) == NULL) {
      message_arena->Own(*stream);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*stream)) {
      ::com::fsmeeting::fsp::proto::common::Stream* new_stream = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::Stream >(
            message_arena);
      new_stream->CopyFrom(**stream);
      *stream = new_stream;
    }
}
void ChannelConnected2Rsp::unsafe_arena_set_allocated_stream(
    ::com::fsmeeting::fsp::proto::common::Stream* stream) {
  if (GetArenaNoVirtual() == NULL) {
    delete stream_;
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelConnected2Rsp::kResponseFieldNumber;
const int ChannelConnected2Rsp::kChannelTypeFieldNumber;
const int ChannelConnected2Rsp::kStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelConnected2Rsp::ChannelConnected2Rsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
}
ChannelConnected2Rsp::ChannelConnected2Rsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
}
ChannelConnected2Rsp::ChannelConnected2Rsp(const ChannelConnected2Rsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_stream()) {
    stream_ = new ::com::fsmeeting::fsp::proto::common::Stream(*from.stream_);
  } else {
    stream_ = NULL;
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
}

void ChannelConnected2Rsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&response_) + sizeof(channel_type_));
  _cached_size_ = 0;
}

ChannelConnected2Rsp::~ChannelConnected2Rsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  SharedDtor();
}

void ChannelConnected2Rsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
  if (this != internal_default_instance()) {
    delete stream_;
  }
}

void ChannelConnected2Rsp::ArenaDtor(void* object) {
  ChannelConnected2Rsp* _this = reinterpret_cast< ChannelConnected2Rsp* >(object);
  (void)_this;
}
void ChannelConnected2Rsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChannelConnected2Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelConnected2Rsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[29].descriptor;
}

const ChannelConnected2Rsp& ChannelConnected2Rsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelConnected2Rsp* ChannelConnected2Rsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ChannelConnected2Rsp>(arena);
}

void ChannelConnected2Rsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  if (GetArenaNoVirtual() == NULL && stream_ != NULL) {
    delete stream_;
  }
  stream_ = NULL;
  channel_type_ = 0;
}

bool ChannelConnected2Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channel_type(static_cast< ::com::fsmeeting::fsp::proto::common::ChannelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.Stream stream = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  return false;
#undef DO_
}

void ChannelConnected2Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
  if (this->channel_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel_type(), output);
  }

  // .com.fsmeeting.fsp.proto.common.Stream stream = 3;
  if (this->has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stream_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
}

::google::protobuf::uint8* ChannelConnected2Rsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
  if (this->channel_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel_type(), target);
  }

  // .com.fsmeeting.fsp.proto.common.Stream stream = 3;
  if (this->has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stream_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  return target;
}

size_t ChannelConnected2Rsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .com.fsmeeting.fsp.proto.common.Stream stream = 3;
  if (this->has_stream()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stream_);
  }

  // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
  if (this->channel_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelConnected2Rsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelConnected2Rsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelConnected2Rsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
    MergeFrom(*source);
  }
}

void ChannelConnected2Rsp::MergeFrom(const ChannelConnected2Rsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.has_stream()) {
    mutable_stream()->::com::fsmeeting::fsp::proto::common::Stream::MergeFrom(from.stream());
  }
  if (from.channel_type() != 0) {
    set_channel_type(from.channel_type());
  }
}

void ChannelConnected2Rsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelConnected2Rsp::CopyFrom(const ChannelConnected2Rsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConnected2Rsp::IsInitialized() const {
  return true;
}

void ChannelConnected2Rsp::Swap(ChannelConnected2Rsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChannelConnected2Rsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChannelConnected2Rsp::UnsafeArenaSwap(ChannelConnected2Rsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChannelConnected2Rsp::InternalSwap(ChannelConnected2Rsp* other) {
  std::swap(response_, other->response_);
  std::swap(stream_, other->stream_);
  std::swap(channel_type_, other->channel_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelConnected2Rsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelConnected2Rsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool ChannelConnected2Rsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void ChannelConnected2Rsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& ChannelConnected2Rsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnected2Rsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnected2Rsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void ChannelConnected2Rsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
}

// .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
void ChannelConnected2Rsp::clear_channel_type() {
  channel_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::ChannelType ChannelConnected2Rsp::channel_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.channel_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ChannelType >(channel_type_);
}
void ChannelConnected2Rsp::set_channel_type(::com::fsmeeting::fsp::proto::common::ChannelType value) {
  
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.channel_type)
}

// .com.fsmeeting.fsp.proto.common.Stream stream = 3;
bool ChannelConnected2Rsp::has_stream() const {
  return this != internal_default_instance() && stream_ != NULL;
}
void ChannelConnected2Rsp::clear_stream() {
  if (GetArenaNoVirtual() == NULL && stream_ != NULL) delete stream_;
  stream_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::Stream& ChannelConnected2Rsp::stream() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
  return stream_ != NULL ? *stream_
                         : *::com::fsmeeting::fsp::proto::common::Stream::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::Stream* ChannelConnected2Rsp::mutable_stream() {
  
  if (stream_ == NULL) {
    _slow_mutable_stream();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
  return stream_;
}
::com::fsmeeting::fsp::proto::common::Stream* ChannelConnected2Rsp::release_stream() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stream();
  } else {
    ::com::fsmeeting::fsp::proto::common::Stream* temp = stream_;
    stream_ = NULL;
    return temp;
  }
}
 void ChannelConnected2Rsp::set_allocated_stream(::com::fsmeeting::fsp::proto::common::Stream* stream) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stream_;
  }
  if (stream != NULL) {
    _slow_set_allocated_stream(message_arena, &stream);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelDisconnected::kClientIdFieldNumber;
const int ChannelDisconnected::kServiceInstanceIdFieldNumber;
const int ChannelDisconnected::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelDisconnected::ChannelDisconnected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
}
ChannelDisconnected::ChannelDisconnected(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
}
ChannelDisconnected::ChannelDisconnected(const ChannelDisconnected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_instance_id().size() > 0) {
    service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_instance_id(),
      GetArenaNoVirtual());
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
}

void ChannelDisconnected::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ChannelDisconnected::~ChannelDisconnected() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  SharedDtor();
}

void ChannelDisconnected::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ChannelDisconnected::ArenaDtor(void* object) {
  ChannelDisconnected* _this = reinterpret_cast< ChannelDisconnected* >(object);
  (void)_this;
}
void ChannelDisconnected::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChannelDisconnected::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelDisconnected::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[30].descriptor;
}

const ChannelDisconnected& ChannelDisconnected::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelDisconnected* ChannelDisconnected::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ChannelDisconnected>(arena);
}

void ChannelDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ChannelDisconnected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_instance_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_instance_id().data(), this->service_instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  return false;
#undef DO_
}

void ChannelDisconnected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_instance_id(), output);
  }

  // string stream_id = 3;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stream_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
}

::google::protobuf::uint8* ChannelDisconnected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_instance_id().data(), this->service_instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_instance_id(), target);
  }

  // string stream_id = 3;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stream_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  return target;
}

size_t ChannelDisconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  size_t total_size = 0;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string service_instance_id = 2;
  if (this->service_instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_instance_id());
  }

  // string stream_id = 3;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelDisconnected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDisconnected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelDisconnected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
    MergeFrom(*source);
  }
}

void ChannelDisconnected::MergeFrom(const ChannelDisconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.service_instance_id().size() > 0) {
    set_service_instance_id(from.service_instance_id());
  }
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
}

void ChannelDisconnected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDisconnected::CopyFrom(const ChannelDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDisconnected::IsInitialized() const {
  return true;
}

void ChannelDisconnected::Swap(ChannelDisconnected* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChannelDisconnected* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChannelDisconnected::UnsafeArenaSwap(ChannelDisconnected* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChannelDisconnected::InternalSwap(ChannelDisconnected* other) {
  client_id_.Swap(&other->client_id_);
  service_instance_id_.Swap(&other->service_instance_id_);
  stream_id_.Swap(&other->stream_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelDisconnected::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelDisconnected

// string client_id = 1;
void ChannelDisconnected::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ChannelDisconnected::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
  return client_id_.Get();
}
void ChannelDisconnected::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}
void ChannelDisconnected::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}
void ChannelDisconnected::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}
::std::string* ChannelDisconnected::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelDisconnected::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelDisconnected::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ChannelDisconnected::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}
void ChannelDisconnected::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}

// string service_instance_id = 2;
void ChannelDisconnected::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ChannelDisconnected::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
  return service_instance_id_.Get();
}
void ChannelDisconnected::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}
void ChannelDisconnected::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}
void ChannelDisconnected::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}
::std::string* ChannelDisconnected::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelDisconnected::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelDisconnected::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ChannelDisconnected::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}
void ChannelDisconnected::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}

// string stream_id = 3;
void ChannelDisconnected::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ChannelDisconnected::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
  return stream_id_.Get();
}
void ChannelDisconnected::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}
void ChannelDisconnected::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}
void ChannelDisconnected::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}
::std::string* ChannelDisconnected::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelDisconnected::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ChannelDisconnected::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ChannelDisconnected::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}
void ChannelDisconnected::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ChannelDisconnectedRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelDisconnectedRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelDisconnectedRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void ChannelDisconnectedRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void ChannelDisconnectedRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelDisconnectedRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelDisconnectedRsp::ChannelDisconnectedRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
}
ChannelDisconnectedRsp::ChannelDisconnectedRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
}
ChannelDisconnectedRsp::ChannelDisconnectedRsp(const ChannelDisconnectedRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
}

void ChannelDisconnectedRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

ChannelDisconnectedRsp::~ChannelDisconnectedRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  SharedDtor();
}

void ChannelDisconnectedRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void ChannelDisconnectedRsp::ArenaDtor(void* object) {
  ChannelDisconnectedRsp* _this = reinterpret_cast< ChannelDisconnectedRsp* >(object);
  (void)_this;
}
void ChannelDisconnectedRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ChannelDisconnectedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelDisconnectedRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[31].descriptor;
}

const ChannelDisconnectedRsp& ChannelDisconnectedRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelDisconnectedRsp* ChannelDisconnectedRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ChannelDisconnectedRsp>(arena);
}

void ChannelDisconnectedRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool ChannelDisconnectedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  return false;
#undef DO_
}

void ChannelDisconnectedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
}

::google::protobuf::uint8* ChannelDisconnectedRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  return target;
}

size_t ChannelDisconnectedRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelDisconnectedRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelDisconnectedRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelDisconnectedRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
    MergeFrom(*source);
  }
}

void ChannelDisconnectedRsp::MergeFrom(const ChannelDisconnectedRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void ChannelDisconnectedRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelDisconnectedRsp::CopyFrom(const ChannelDisconnectedRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelDisconnectedRsp::IsInitialized() const {
  return true;
}

void ChannelDisconnectedRsp::Swap(ChannelDisconnectedRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ChannelDisconnectedRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ChannelDisconnectedRsp::UnsafeArenaSwap(ChannelDisconnectedRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ChannelDisconnectedRsp::InternalSwap(ChannelDisconnectedRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelDisconnectedRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelDisconnectedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool ChannelDisconnectedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void ChannelDisconnectedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& ChannelDisconnectedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelDisconnectedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelDisconnectedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void ChannelDisconnectedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamType::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamType::GetStreamType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.GetStreamType)
}
GetStreamType::GetStreamType(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.GetStreamType)
}
GetStreamType::GetStreamType(const GetStreamType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.GetStreamType)
}

void GetStreamType::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetStreamType::~GetStreamType() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.GetStreamType)
  SharedDtor();
}

void GetStreamType::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetStreamType::ArenaDtor(void* object) {
  GetStreamType* _this = reinterpret_cast< GetStreamType* >(object);
  (void)_this;
}
void GetStreamType::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamType::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[32].descriptor;
}

const GetStreamType& GetStreamType::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamType* GetStreamType::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamType>(arena);
}

void GetStreamType::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.GetStreamType)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetStreamType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.GetStreamType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.GetStreamType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.GetStreamType)
  return false;
#undef DO_
}

void GetStreamType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.GetStreamType)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.GetStreamType)
}

::google::protobuf::uint8* GetStreamType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.GetStreamType)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.GetStreamType)
  return target;
}

size_t GetStreamType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.GetStreamType)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamType)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.GetStreamType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.GetStreamType)
    MergeFrom(*source);
  }
}

void GetStreamType::MergeFrom(const GetStreamType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
}

void GetStreamType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamType::CopyFrom(const GetStreamType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamType::IsInitialized() const {
  return true;
}

void GetStreamType::Swap(GetStreamType* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamType* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamType::UnsafeArenaSwap(GetStreamType* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamType::InternalSwap(GetStreamType* other) {
  stream_id_.Swap(&other->stream_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamType::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamType

// string stream_id = 1;
void GetStreamType::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamType::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
  return stream_id_.Get();
}
void GetStreamType::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}
void GetStreamType::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}
void GetStreamType::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}
::std::string* GetStreamType::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamType::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamType::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamType::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}
void GetStreamType::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetStreamTypeRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamTypeRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamTypeRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GetStreamTypeRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GetStreamTypeRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamTypeRsp::kResponseFieldNumber;
const int GetStreamTypeRsp::kStreamTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamTypeRsp::GetStreamTypeRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
}
GetStreamTypeRsp::GetStreamTypeRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
}
GetStreamTypeRsp::GetStreamTypeRsp(const GetStreamTypeRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  stream_type_ = from.stream_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
}

void GetStreamTypeRsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&stream_type_) -
    reinterpret_cast<char*>(&response_) + sizeof(stream_type_));
  _cached_size_ = 0;
}

GetStreamTypeRsp::~GetStreamTypeRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  SharedDtor();
}

void GetStreamTypeRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GetStreamTypeRsp::ArenaDtor(void* object) {
  GetStreamTypeRsp* _this = reinterpret_cast< GetStreamTypeRsp* >(object);
  (void)_this;
}
void GetStreamTypeRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamTypeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamTypeRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[33].descriptor;
}

const GetStreamTypeRsp& GetStreamTypeRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamTypeRsp* GetStreamTypeRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamTypeRsp>(arena);
}

void GetStreamTypeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  stream_type_ = 0;
}

bool GetStreamTypeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stream_type(static_cast< ::com::fsmeeting::fsp::proto::common::StreamType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  return false;
#undef DO_
}

void GetStreamTypeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  if (this->stream_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stream_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
}

::google::protobuf::uint8* GetStreamTypeRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  if (this->stream_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stream_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  return target;
}

size_t GetStreamTypeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  if (this->stream_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamTypeRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamTypeRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamTypeRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
    MergeFrom(*source);
  }
}

void GetStreamTypeRsp::MergeFrom(const GetStreamTypeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.stream_type() != 0) {
    set_stream_type(from.stream_type());
  }
}

void GetStreamTypeRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamTypeRsp::CopyFrom(const GetStreamTypeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamTypeRsp::IsInitialized() const {
  return true;
}

void GetStreamTypeRsp::Swap(GetStreamTypeRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamTypeRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamTypeRsp::UnsafeArenaSwap(GetStreamTypeRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamTypeRsp::InternalSwap(GetStreamTypeRsp* other) {
  std::swap(response_, other->response_);
  std::swap(stream_type_, other->stream_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamTypeRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamTypeRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GetStreamTypeRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GetStreamTypeRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamTypeRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamTypeRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamTypeRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GetStreamTypeRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
}

// .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
void GetStreamTypeRsp::clear_stream_type() {
  stream_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::StreamType GetStreamTypeRsp::stream_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.stream_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamType >(stream_type_);
}
void GetStreamTypeRsp::set_stream_type(::com::fsmeeting::fsp::proto::common::StreamType value) {
  
  stream_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.stream_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamProperty::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamProperty::GetStreamProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
}
GetStreamProperty::GetStreamProperty(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
}
GetStreamProperty::GetStreamProperty(const GetStreamProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
}

void GetStreamProperty::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetStreamProperty::~GetStreamProperty() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  SharedDtor();
}

void GetStreamProperty::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetStreamProperty::ArenaDtor(void* object) {
  GetStreamProperty* _this = reinterpret_cast< GetStreamProperty* >(object);
  (void)_this;
}
void GetStreamProperty::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamProperty::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[34].descriptor;
}

const GetStreamProperty& GetStreamProperty::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamProperty* GetStreamProperty::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamProperty>(arena);
}

void GetStreamProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetStreamProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  return false;
#undef DO_
}

void GetStreamProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
}

::google::protobuf::uint8* GetStreamProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  return target;
}

size_t GetStreamProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
    MergeFrom(*source);
  }
}

void GetStreamProperty::MergeFrom(const GetStreamProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
}

void GetStreamProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamProperty::CopyFrom(const GetStreamProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamProperty::IsInitialized() const {
  return true;
}

void GetStreamProperty::Swap(GetStreamProperty* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamProperty* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamProperty::UnsafeArenaSwap(GetStreamProperty* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamProperty::InternalSwap(GetStreamProperty* other) {
  stream_id_.Swap(&other->stream_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamProperty::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamProperty

// string stream_id = 1;
void GetStreamProperty::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamProperty::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
  return stream_id_.Get();
}
void GetStreamProperty::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}
void GetStreamProperty::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}
void GetStreamProperty::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}
::std::string* GetStreamProperty::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamProperty::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamProperty::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamProperty::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}
void GetStreamProperty::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetStreamPropertyRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamPropertyRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamPropertyRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GetStreamPropertyRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GetStreamPropertyRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamPropertyRsp::kResponseFieldNumber;
const int GetStreamPropertyRsp::kStreamPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamPropertyRsp::GetStreamPropertyRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
}
GetStreamPropertyRsp::GetStreamPropertyRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
}
GetStreamPropertyRsp::GetStreamPropertyRsp(const GetStreamPropertyRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  stream_property_ = from.stream_property_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
}

void GetStreamPropertyRsp::SharedCtor() {
  ::memset(&response_, 0, reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&response_) + sizeof(stream_property_));
  _cached_size_ = 0;
}

GetStreamPropertyRsp::~GetStreamPropertyRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  SharedDtor();
}

void GetStreamPropertyRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GetStreamPropertyRsp::ArenaDtor(void* object) {
  GetStreamPropertyRsp* _this = reinterpret_cast< GetStreamPropertyRsp* >(object);
  (void)_this;
}
void GetStreamPropertyRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamPropertyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamPropertyRsp::descriptor() {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[35].descriptor;
}

const GetStreamPropertyRsp& GetStreamPropertyRsp::default_instance() {
  protobuf_fsp_2dsc_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamPropertyRsp* GetStreamPropertyRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamPropertyRsp>(arena);
}

void GetStreamPropertyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  stream_property_ = 0;
}

bool GetStreamPropertyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stream_property(static_cast< ::com::fsmeeting::fsp::proto::common::StreamProperty >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  return false;
#undef DO_
}

void GetStreamPropertyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 2;
  if (this->stream_property() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stream_property(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
}

::google::protobuf::uint8* GetStreamPropertyRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 2;
  if (this->stream_property() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stream_property(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  return target;
}

size_t GetStreamPropertyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 2;
  if (this->stream_property() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_property());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamPropertyRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamPropertyRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamPropertyRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
    MergeFrom(*source);
  }
}

void GetStreamPropertyRsp::MergeFrom(const GetStreamPropertyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
  if (from.stream_property() != 0) {
    set_stream_property(from.stream_property());
  }
}

void GetStreamPropertyRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamPropertyRsp::CopyFrom(const GetStreamPropertyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamPropertyRsp::IsInitialized() const {
  return true;
}

void GetStreamPropertyRsp::Swap(GetStreamPropertyRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamPropertyRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamPropertyRsp::UnsafeArenaSwap(GetStreamPropertyRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamPropertyRsp::InternalSwap(GetStreamPropertyRsp* other) {
  std::swap(response_, other->response_);
  std::swap(stream_property_, other->stream_property_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamPropertyRsp::GetMetadata() const {
  protobuf_fsp_2dsc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsc_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamPropertyRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GetStreamPropertyRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GetStreamPropertyRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamPropertyRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamPropertyRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamPropertyRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GetStreamPropertyRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
}

// .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 2;
void GetStreamPropertyRsp::clear_stream_property() {
  stream_property_ = 0;
}
::com::fsmeeting::fsp::proto::common::StreamProperty GetStreamPropertyRsp::stream_property() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.stream_property)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamProperty >(stream_property_);
}
void GetStreamPropertyRsp::set_stream_property(::com::fsmeeting::fsp::proto::common::StreamProperty value) {
  
  stream_property_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.stream_property)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sc
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

// @@protoc_insertion_point(global_scope)
