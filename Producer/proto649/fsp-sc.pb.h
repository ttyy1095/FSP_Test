// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-sc.proto

#ifndef PROTOBUF_fsp_2dsc_2eproto__INCLUDED
#define PROTOBUF_fsp_2dsc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fsp-common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class BillInfo;
class BillInfoDefaultTypeInternal;
extern BillInfoDefaultTypeInternal _BillInfo_default_instance_;
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class CommonInfo;
class CommonInfoDefaultTypeInternal;
extern CommonInfoDefaultTypeInternal _CommonInfo_default_instance_;
class CommonInvokeInfo;
class CommonInvokeInfoDefaultTypeInternal;
extern CommonInvokeInfoDefaultTypeInternal _CommonInvokeInfo_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupServer;
class GroupServerDefaultTypeInternal;
extern GroupServerDefaultTypeInternal _GroupServer_default_instance_;
class NotifyStreamDestroied;
class NotifyStreamDestroiedDefaultTypeInternal;
extern NotifyStreamDestroiedDefaultTypeInternal _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRsp;
class NotifyStreamDestroiedRspDefaultTypeInternal;
extern NotifyStreamDestroiedRspDefaultTypeInternal _NotifyStreamDestroiedRsp_default_instance_;
class Proxy;
class ProxyDefaultTypeInternal;
extern ProxyDefaultTypeInternal _Proxy_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamServer;
class StreamServerDefaultTypeInternal;
extern StreamServerDefaultTypeInternal _StreamServer_default_instance_;
class StreamSourceChanged;
class StreamSourceChangedDefaultTypeInternal;
extern StreamSourceChangedDefaultTypeInternal _StreamSourceChanged_default_instance_;
class StreamSourceChangedRsp;
class StreamSourceChangedRspDefaultTypeInternal;
extern StreamSourceChangedRspDefaultTypeInternal _StreamSourceChangedRsp_default_instance_;
}  // namespace common
namespace sc {
class ChannelConnected;
class ChannelConnectedDefaultTypeInternal;
extern ChannelConnectedDefaultTypeInternal _ChannelConnected_default_instance_;
class ChannelConnected2Rsp;
class ChannelConnected2RspDefaultTypeInternal;
extern ChannelConnected2RspDefaultTypeInternal _ChannelConnected2Rsp_default_instance_;
class ChannelConnectedRsp;
class ChannelConnectedRspDefaultTypeInternal;
extern ChannelConnectedRspDefaultTypeInternal _ChannelConnectedRsp_default_instance_;
class ChannelDisconnected;
class ChannelDisconnectedDefaultTypeInternal;
extern ChannelDisconnectedDefaultTypeInternal _ChannelDisconnected_default_instance_;
class ChannelDisconnectedRsp;
class ChannelDisconnectedRspDefaultTypeInternal;
extern ChannelDisconnectedRspDefaultTypeInternal _ChannelDisconnectedRsp_default_instance_;
class CheckStreamPublishToken;
class CheckStreamPublishTokenDefaultTypeInternal;
extern CheckStreamPublishTokenDefaultTypeInternal _CheckStreamPublishToken_default_instance_;
class CheckStreamPublishTokenRsp;
class CheckStreamPublishTokenRspDefaultTypeInternal;
extern CheckStreamPublishTokenRspDefaultTypeInternal _CheckStreamPublishTokenRsp_default_instance_;
class CheckStreamSubscribeToken;
class CheckStreamSubscribeTokenDefaultTypeInternal;
extern CheckStreamSubscribeTokenDefaultTypeInternal _CheckStreamSubscribeToken_default_instance_;
class CheckStreamSubscribeTokenRsp;
class CheckStreamSubscribeTokenRspDefaultTypeInternal;
extern CheckStreamSubscribeTokenRspDefaultTypeInternal _CheckStreamSubscribeTokenRsp_default_instance_;
class CleanStreamSourceServer;
class CleanStreamSourceServerDefaultTypeInternal;
extern CleanStreamSourceServerDefaultTypeInternal _CleanStreamSourceServer_default_instance_;
class ClientConnected;
class ClientConnectedDefaultTypeInternal;
extern ClientConnectedDefaultTypeInternal _ClientConnected_default_instance_;
class ClientConnectedRsp;
class ClientConnectedRspDefaultTypeInternal;
extern ClientConnectedRspDefaultTypeInternal _ClientConnectedRsp_default_instance_;
class ClientDisconnected;
class ClientDisconnectedDefaultTypeInternal;
extern ClientDisconnectedDefaultTypeInternal _ClientDisconnected_default_instance_;
class ClientDisconnectedRsp;
class ClientDisconnectedRspDefaultTypeInternal;
extern ClientDisconnectedRspDefaultTypeInternal _ClientDisconnectedRsp_default_instance_;
class CreateStream;
class CreateStreamDefaultTypeInternal;
extern CreateStreamDefaultTypeInternal _CreateStream_default_instance_;
class CreateStreamRsp;
class CreateStreamRspDefaultTypeInternal;
extern CreateStreamRspDefaultTypeInternal _CreateStreamRsp_default_instance_;
class DestroyStream;
class DestroyStreamDefaultTypeInternal;
extern DestroyStreamDefaultTypeInternal _DestroyStream_default_instance_;
class DestroyStreamRsp;
class DestroyStreamRspDefaultTypeInternal;
extern DestroyStreamRspDefaultTypeInternal _DestroyStreamRsp_default_instance_;
class GetStreamProperty;
class GetStreamPropertyDefaultTypeInternal;
extern GetStreamPropertyDefaultTypeInternal _GetStreamProperty_default_instance_;
class GetStreamPropertyRsp;
class GetStreamPropertyRspDefaultTypeInternal;
extern GetStreamPropertyRspDefaultTypeInternal _GetStreamPropertyRsp_default_instance_;
class GetStreamServers;
class GetStreamServersDefaultTypeInternal;
extern GetStreamServersDefaultTypeInternal _GetStreamServers_default_instance_;
class GetStreamServersRsp;
class GetStreamServersRspDefaultTypeInternal;
extern GetStreamServersRspDefaultTypeInternal _GetStreamServersRsp_default_instance_;
class GetStreamType;
class GetStreamTypeDefaultTypeInternal;
extern GetStreamTypeDefaultTypeInternal _GetStreamType_default_instance_;
class GetStreamTypeRsp;
class GetStreamTypeRspDefaultTypeInternal;
extern GetStreamTypeRspDefaultTypeInternal _GetStreamTypeRsp_default_instance_;
class GetSuperiorStreamServer;
class GetSuperiorStreamServerDefaultTypeInternal;
extern GetSuperiorStreamServerDefaultTypeInternal _GetSuperiorStreamServer_default_instance_;
class GetSuperiorStreamServerRsp;
class GetSuperiorStreamServerRspDefaultTypeInternal;
extern GetSuperiorStreamServerRspDefaultTypeInternal _GetSuperiorStreamServerRsp_default_instance_;
class PublishStream;
class PublishStreamDefaultTypeInternal;
extern PublishStreamDefaultTypeInternal _PublishStream_default_instance_;
class PublishStreamRsp;
class PublishStreamRspDefaultTypeInternal;
extern PublishStreamRspDefaultTypeInternal _PublishStreamRsp_default_instance_;
class SetStreamSourceServer;
class SetStreamSourceServerDefaultTypeInternal;
extern SetStreamSourceServerDefaultTypeInternal _SetStreamSourceServer_default_instance_;
class SetStreamSourceServerRsp;
class SetStreamSourceServerRspDefaultTypeInternal;
extern SetStreamSourceServerRspDefaultTypeInternal _SetStreamSourceServerRsp_default_instance_;
class StreamSendingStart;
class StreamSendingStartDefaultTypeInternal;
extern StreamSendingStartDefaultTypeInternal _StreamSendingStart_default_instance_;
class StreamSendingStartRsp;
class StreamSendingStartRspDefaultTypeInternal;
extern StreamSendingStartRspDefaultTypeInternal _StreamSendingStartRsp_default_instance_;
class StreamSendingStop;
class StreamSendingStopDefaultTypeInternal;
extern StreamSendingStopDefaultTypeInternal _StreamSendingStop_default_instance_;
class StreamSendingStopRsp;
class StreamSendingStopRspDefaultTypeInternal;
extern StreamSendingStopRspDefaultTypeInternal _StreamSendingStopRsp_default_instance_;
class UnpublishStream;
class UnpublishStreamDefaultTypeInternal;
extern UnpublishStreamDefaultTypeInternal _UnpublishStream_default_instance_;
class UnpublishStreamRsp;
class UnpublishStreamRspDefaultTypeInternal;
extern UnpublishStreamRspDefaultTypeInternal _UnpublishStreamRsp_default_instance_;
}  // namespace sc
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace sc {

namespace protobuf_fsp_2dsc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fsp_2dsc_2eproto

enum ProtoDictionary {
  Enum2UnknownInterface = 0,
  Enum2CreateStream = 6000,
  Enum2CreateStreamRsp = 6001,
  Enum2DestroyStream = 6002,
  Enum2DestroyStreamRsp = 6003,
  Enum2ClientConnected = 6004,
  Enum2ClientConnectedRsp = 6005,
  Enum2ClientDisconnected = 6006,
  Enum2ClientDisconnectedRsp = 6007,
  Enum2GetStreamServers = 6008,
  Enum2GetStreamServersRsp = 6009,
  Enum2StreamSendingStart = 6010,
  Enum2StreamSendingStartRsp = 6011,
  Enum2StreamSendingStop = 6012,
  Enum2StreamSendingStopRsp = 6013,
  Enum2PublishStream = 6014,
  Enum2PublishStreamRsp = 6015,
  Enum2UnpublishStream = 6016,
  Enum2UnpublishStreamRsp = 6017,
  Enum2SetStreamSourceServer = 6018,
  Enum2SetStreamSourceServerRsp = 6019,
  Enum2GetSuperiorStreamServer = 6020,
  Enum2GetSuperiorStreamServerRsp = 6021,
  Enum2ChannelConnected = 6023,
  Enum2ChannelConnectedRsp = 6024,
  Enum2ChannelDisconnected = 6025,
  Enum2ChannelDisconnectedRsp = 6026,
  Enum2CheckStreamPublishToken = 6027,
  Enum2CheckStreamPublishTokenRsp = 6028,
  Enum2CheckStreamSubscribeToken = 6029,
  Enum2CheckStreamSubscribeTokenRsp = 6030,
  Enum2GetStreamType = 6031,
  Enum2GetStreamTypeRsp = 6032,
  Enum2GetStreamProperty = 6033,
  Enum2GetStreamPropertyRsp = 6034,
  Enum2NotifyStreamSendingStart = 6035,
  Enum2NotifyStreamSendingStartRsp = 6036,
  Enum2CleanStreamSourceServer = 6037,
  Enum2CleanStreamSourceServerRsp = 6038,
  Enum2ChannelConnected2 = 6039,
  Enum2ChannelConnected2Rsp = 6040,
  ProtoDictionary_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoDictionary_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoDictionary_IsValid(int value);
const ProtoDictionary ProtoDictionary_MIN = Enum2UnknownInterface;
const ProtoDictionary ProtoDictionary_MAX = Enum2ChannelConnected2Rsp;
const int ProtoDictionary_ARRAYSIZE = ProtoDictionary_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor();
inline const ::std::string& ProtoDictionary_Name(ProtoDictionary value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDictionary_descriptor(), value);
}
inline bool ProtoDictionary_Parse(
    const ::std::string& name, ProtoDictionary* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDictionary>(
    ProtoDictionary_descriptor(), name, value);
}
// ===================================================================

class CreateStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.CreateStream) */ {
 public:
  CreateStream();
  virtual ~CreateStream();

  CreateStream(const CreateStream& from);

  inline CreateStream& operator=(const CreateStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateStream& default_instance();

  static inline const CreateStream* internal_default_instance() {
    return reinterpret_cast<const CreateStream*>(
               &_CreateStream_default_instance_);
  }

  void UnsafeArenaSwap(CreateStream* other);
  void Swap(CreateStream* other);

  // implements Message ----------------------------------------------

  inline CreateStream* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateStream& from);
  void MergeFrom(const CreateStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateStream* other);
  protected:
  explicit CreateStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 4;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  void clear_stream_type();
  static const int kStreamTypeFieldNumber = 2;
  ::com::fsmeeting::fsp::proto::common::StreamType stream_type() const;
  void set_stream_type(::com::fsmeeting::fsp::proto::common::StreamType value);

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
  void clear_stream_property();
  static const int kStreamPropertyFieldNumber = 3;
  ::com::fsmeeting::fsp::proto::common::StreamProperty stream_property() const;
  void set_stream_property(::com::fsmeeting::fsp::proto::common::StreamProperty value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.CreateStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  int stream_type_;
  int stream_property_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.CreateStreamRsp) */ {
 public:
  CreateStreamRsp();
  virtual ~CreateStreamRsp();

  CreateStreamRsp(const CreateStreamRsp& from);

  inline CreateStreamRsp& operator=(const CreateStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateStreamRsp& default_instance();

  static inline const CreateStreamRsp* internal_default_instance() {
    return reinterpret_cast<const CreateStreamRsp*>(
               &_CreateStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(CreateStreamRsp* other);
  void Swap(CreateStreamRsp* other);

  // implements Message ----------------------------------------------

  inline CreateStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateStreamRsp& from);
  void MergeFrom(const CreateStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateStreamRsp* other);
  protected:
  explicit CreateStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  bool has_stream() const;
  void clear_stream();
  static const int kStreamFieldNumber = 2;
  private:
  void _slow_mutable_stream();
  void _slow_set_allocated_stream(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::Stream** stream);
  ::com::fsmeeting::fsp::proto::common::Stream* _slow_release_stream();
  public:
  const ::com::fsmeeting::fsp::proto::common::Stream& stream() const;
  ::com::fsmeeting::fsp::proto::common::Stream* mutable_stream();
  ::com::fsmeeting::fsp::proto::common::Stream* release_stream();
  void set_allocated_stream(::com::fsmeeting::fsp::proto::common::Stream* stream);
  ::com::fsmeeting::fsp::proto::common::Stream* unsafe_arena_release_stream();
  void unsafe_arena_set_allocated_stream(
      ::com::fsmeeting::fsp::proto::common::Stream* stream);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 3;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.CreateStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  ::com::fsmeeting::fsp::proto::common::Stream* stream_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DestroyStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.DestroyStream) */ {
 public:
  DestroyStream();
  virtual ~DestroyStream();

  DestroyStream(const DestroyStream& from);

  inline DestroyStream& operator=(const DestroyStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyStream& default_instance();

  static inline const DestroyStream* internal_default_instance() {
    return reinterpret_cast<const DestroyStream*>(
               &_DestroyStream_default_instance_);
  }

  void UnsafeArenaSwap(DestroyStream* other);
  void Swap(DestroyStream* other);

  // implements Message ----------------------------------------------

  inline DestroyStream* New() const PROTOBUF_FINAL { return New(NULL); }

  DestroyStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DestroyStream& from);
  void MergeFrom(const DestroyStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DestroyStream* other);
  protected:
  explicit DestroyStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string app_token = 2;
  void clear_app_token();
  static const int kAppTokenFieldNumber = 2;
  const ::std::string& app_token() const;
  void set_app_token(const ::std::string& value);
  void set_app_token(const char* value);
  void set_app_token(const char* value, size_t size);
  ::std::string* mutable_app_token();
  ::std::string* release_app_token();
  void set_allocated_app_token(::std::string* app_token);
  ::std::string* unsafe_arena_release_app_token();
  void unsafe_arena_set_allocated_app_token(
      ::std::string* app_token);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.DestroyStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr app_token_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DestroyStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp) */ {
 public:
  DestroyStreamRsp();
  virtual ~DestroyStreamRsp();

  DestroyStreamRsp(const DestroyStreamRsp& from);

  inline DestroyStreamRsp& operator=(const DestroyStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyStreamRsp& default_instance();

  static inline const DestroyStreamRsp* internal_default_instance() {
    return reinterpret_cast<const DestroyStreamRsp*>(
               &_DestroyStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(DestroyStreamRsp* other);
  void Swap(DestroyStreamRsp* other);

  // implements Message ----------------------------------------------

  inline DestroyStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DestroyStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DestroyStreamRsp& from);
  void MergeFrom(const DestroyStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DestroyStreamRsp* other);
  protected:
  explicit DestroyStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.ClientConnected) */ {
 public:
  ClientConnected();
  virtual ~ClientConnected();

  ClientConnected(const ClientConnected& from);

  inline ClientConnected& operator=(const ClientConnected& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientConnected& default_instance();

  static inline const ClientConnected* internal_default_instance() {
    return reinterpret_cast<const ClientConnected*>(
               &_ClientConnected_default_instance_);
  }

  void UnsafeArenaSwap(ClientConnected* other);
  void Swap(ClientConnected* other);

  // implements Message ----------------------------------------------

  inline ClientConnected* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientConnected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientConnected& from);
  void MergeFrom(const ClientConnected& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientConnected* other);
  protected:
  explicit ClientConnected(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string service_instance_id = 2;
  void clear_service_instance_id();
  static const int kServiceInstanceIdFieldNumber = 2;
  const ::std::string& service_instance_id() const;
  void set_service_instance_id(const ::std::string& value);
  void set_service_instance_id(const char* value);
  void set_service_instance_id(const char* value, size_t size);
  ::std::string* mutable_service_instance_id();
  ::std::string* release_service_instance_id();
  void set_allocated_service_instance_id(::std::string* service_instance_id);
  ::std::string* unsafe_arena_release_service_instance_id();
  void unsafe_arena_set_allocated_service_instance_id(
      ::std::string* service_instance_id);

  // string app_id = 3;
  void clear_app_id();
  static const int kAppIdFieldNumber = 3;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // string client_name = 4;
  void clear_client_name();
  static const int kClientNameFieldNumber = 4;
  const ::std::string& client_name() const;
  void set_client_name(const ::std::string& value);
  void set_client_name(const char* value);
  void set_client_name(const char* value, size_t size);
  ::std::string* mutable_client_name();
  ::std::string* release_client_name();
  void set_allocated_client_name(::std::string* client_name);
  ::std::string* unsafe_arena_release_client_name();
  void unsafe_arena_set_allocated_client_name(
      ::std::string* client_name);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 5;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.ClientConnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr service_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr client_name_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientConnectedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp) */ {
 public:
  ClientConnectedRsp();
  virtual ~ClientConnectedRsp();

  ClientConnectedRsp(const ClientConnectedRsp& from);

  inline ClientConnectedRsp& operator=(const ClientConnectedRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientConnectedRsp& default_instance();

  static inline const ClientConnectedRsp* internal_default_instance() {
    return reinterpret_cast<const ClientConnectedRsp*>(
               &_ClientConnectedRsp_default_instance_);
  }

  void UnsafeArenaSwap(ClientConnectedRsp* other);
  void Swap(ClientConnectedRsp* other);

  // implements Message ----------------------------------------------

  inline ClientConnectedRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientConnectedRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientConnectedRsp& from);
  void MergeFrom(const ClientConnectedRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientConnectedRsp* other);
  protected:
  explicit ClientConnectedRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientDisconnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.ClientDisconnected) */ {
 public:
  ClientDisconnected();
  virtual ~ClientDisconnected();

  ClientDisconnected(const ClientDisconnected& from);

  inline ClientDisconnected& operator=(const ClientDisconnected& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientDisconnected& default_instance();

  static inline const ClientDisconnected* internal_default_instance() {
    return reinterpret_cast<const ClientDisconnected*>(
               &_ClientDisconnected_default_instance_);
  }

  void UnsafeArenaSwap(ClientDisconnected* other);
  void Swap(ClientDisconnected* other);

  // implements Message ----------------------------------------------

  inline ClientDisconnected* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientDisconnected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientDisconnected& from);
  void MergeFrom(const ClientDisconnected& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientDisconnected* other);
  protected:
  explicit ClientDisconnected(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string service_instance_id = 2;
  void clear_service_instance_id();
  static const int kServiceInstanceIdFieldNumber = 2;
  const ::std::string& service_instance_id() const;
  void set_service_instance_id(const ::std::string& value);
  void set_service_instance_id(const char* value);
  void set_service_instance_id(const char* value, size_t size);
  ::std::string* mutable_service_instance_id();
  ::std::string* release_service_instance_id();
  void set_allocated_service_instance_id(::std::string* service_instance_id);
  ::std::string* unsafe_arena_release_service_instance_id();
  void unsafe_arena_set_allocated_service_instance_id(
      ::std::string* service_instance_id);

  // string app_id = 3;
  void clear_app_id();
  static const int kAppIdFieldNumber = 3;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.ClientDisconnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr service_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientDisconnectedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp) */ {
 public:
  ClientDisconnectedRsp();
  virtual ~ClientDisconnectedRsp();

  ClientDisconnectedRsp(const ClientDisconnectedRsp& from);

  inline ClientDisconnectedRsp& operator=(const ClientDisconnectedRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientDisconnectedRsp& default_instance();

  static inline const ClientDisconnectedRsp* internal_default_instance() {
    return reinterpret_cast<const ClientDisconnectedRsp*>(
               &_ClientDisconnectedRsp_default_instance_);
  }

  void UnsafeArenaSwap(ClientDisconnectedRsp* other);
  void Swap(ClientDisconnectedRsp* other);

  // implements Message ----------------------------------------------

  inline ClientDisconnectedRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientDisconnectedRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientDisconnectedRsp& from);
  void MergeFrom(const ClientDisconnectedRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientDisconnectedRsp* other);
  protected:
  explicit ClientDisconnectedRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublishStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.PublishStream) */ {
 public:
  PublishStream();
  virtual ~PublishStream();

  PublishStream(const PublishStream& from);

  inline PublishStream& operator=(const PublishStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishStream& default_instance();

  static inline const PublishStream* internal_default_instance() {
    return reinterpret_cast<const PublishStream*>(
               &_PublishStream_default_instance_);
  }

  void UnsafeArenaSwap(PublishStream* other);
  void Swap(PublishStream* other);

  // implements Message ----------------------------------------------

  inline PublishStream* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishStream& from);
  void MergeFrom(const PublishStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishStream* other);
  protected:
  explicit PublishStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string client_ip = 3;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 3;
  const ::std::string& client_ip() const;
  void set_client_ip(const ::std::string& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  ::std::string* mutable_client_ip();
  ::std::string* release_client_ip();
  void set_allocated_client_ip(::std::string* client_ip);
  ::std::string* unsafe_arena_release_client_ip();
  void unsafe_arena_set_allocated_client_ip(
      ::std::string* client_ip);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 4;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // bool set_stream_source = 5;
  void clear_set_stream_source();
  static const int kSetStreamSourceFieldNumber = 5;
  bool set_stream_source() const;
  void set_set_stream_source(bool value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.PublishStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr client_ip_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  bool set_stream_source_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublishStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.PublishStreamRsp) */ {
 public:
  PublishStreamRsp();
  virtual ~PublishStreamRsp();

  PublishStreamRsp(const PublishStreamRsp& from);

  inline PublishStreamRsp& operator=(const PublishStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishStreamRsp& default_instance();

  static inline const PublishStreamRsp* internal_default_instance() {
    return reinterpret_cast<const PublishStreamRsp*>(
               &_PublishStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(PublishStreamRsp* other);
  void Swap(PublishStreamRsp* other);

  // implements Message ----------------------------------------------

  inline PublishStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishStreamRsp& from);
  void MergeFrom(const PublishStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishStreamRsp* other);
  protected:
  explicit PublishStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.PublishStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnpublishStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.UnpublishStream) */ {
 public:
  UnpublishStream();
  virtual ~UnpublishStream();

  UnpublishStream(const UnpublishStream& from);

  inline UnpublishStream& operator=(const UnpublishStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnpublishStream& default_instance();

  static inline const UnpublishStream* internal_default_instance() {
    return reinterpret_cast<const UnpublishStream*>(
               &_UnpublishStream_default_instance_);
  }

  void UnsafeArenaSwap(UnpublishStream* other);
  void Swap(UnpublishStream* other);

  // implements Message ----------------------------------------------

  inline UnpublishStream* New() const PROTOBUF_FINAL { return New(NULL); }

  UnpublishStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnpublishStream& from);
  void MergeFrom(const UnpublishStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnpublishStream* other);
  protected:
  explicit UnpublishStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.UnpublishStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnpublishStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp) */ {
 public:
  UnpublishStreamRsp();
  virtual ~UnpublishStreamRsp();

  UnpublishStreamRsp(const UnpublishStreamRsp& from);

  inline UnpublishStreamRsp& operator=(const UnpublishStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnpublishStreamRsp& default_instance();

  static inline const UnpublishStreamRsp* internal_default_instance() {
    return reinterpret_cast<const UnpublishStreamRsp*>(
               &_UnpublishStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(UnpublishStreamRsp* other);
  void Swap(UnpublishStreamRsp* other);

  // implements Message ----------------------------------------------

  inline UnpublishStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  UnpublishStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnpublishStreamRsp& from);
  void MergeFrom(const UnpublishStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnpublishStreamRsp* other);
  protected:
  explicit UnpublishStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamServers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.GetStreamServers) */ {
 public:
  GetStreamServers();
  virtual ~GetStreamServers();

  GetStreamServers(const GetStreamServers& from);

  inline GetStreamServers& operator=(const GetStreamServers& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamServers& default_instance();

  static inline const GetStreamServers* internal_default_instance() {
    return reinterpret_cast<const GetStreamServers*>(
               &_GetStreamServers_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamServers* other);
  void Swap(GetStreamServers* other);

  // implements Message ----------------------------------------------

  inline GetStreamServers* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamServers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamServers& from);
  void MergeFrom(const GetStreamServers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamServers* other);
  protected:
  explicit GetStreamServers(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string client_ip = 3;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 3;
  const ::std::string& client_ip() const;
  void set_client_ip(const ::std::string& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  ::std::string* mutable_client_ip();
  ::std::string* release_client_ip();
  void set_allocated_client_ip(::std::string* client_ip);
  ::std::string* unsafe_arena_release_client_ip();
  void unsafe_arena_set_allocated_client_ip(
      ::std::string* client_ip);

  // string group_id = 4;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 5;
  void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string app_id = 6;
  void clear_app_id();
  static const int kAppIdFieldNumber = 6;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // string company_id = 7;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 7;
  const ::std::string& company_id() const;
  void set_company_id(const ::std::string& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  ::std::string* mutable_company_id();
  ::std::string* release_company_id();
  void set_allocated_company_id(::std::string* company_id);
  ::std::string* unsafe_arena_release_company_id();
  void unsafe_arena_set_allocated_company_id(
      ::std::string* company_id);

  // string room_id = 8;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 8;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);
  ::std::string* unsafe_arena_release_room_id();
  void unsafe_arena_set_allocated_room_id(
      ::std::string* room_id);

  // int32 media_type = 9;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 9;
  ::google::protobuf::int32 media_type() const;
  void set_media_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.GetStreamServers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr client_ip_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr company_id_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::int32 media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamServersRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp) */ {
 public:
  GetStreamServersRsp();
  virtual ~GetStreamServersRsp();

  GetStreamServersRsp(const GetStreamServersRsp& from);

  inline GetStreamServersRsp& operator=(const GetStreamServersRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamServersRsp& default_instance();

  static inline const GetStreamServersRsp* internal_default_instance() {
    return reinterpret_cast<const GetStreamServersRsp*>(
               &_GetStreamServersRsp_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamServersRsp* other);
  void Swap(GetStreamServersRsp* other);

  // implements Message ----------------------------------------------

  inline GetStreamServersRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamServersRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamServersRsp& from);
  void MergeFrom(const GetStreamServersRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamServersRsp* other);
  protected:
  explicit GetStreamServersRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
  int streamservers_size() const;
  void clear_streamservers();
  static const int kStreamServersFieldNumber = 2;
  const ::com::fsmeeting::fsp::proto::common::StreamServer& streamservers(int index) const;
  ::com::fsmeeting::fsp::proto::common::StreamServer* mutable_streamservers(int index);
  ::com::fsmeeting::fsp::proto::common::StreamServer* add_streamservers();
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
      mutable_streamservers();
  const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
      streamservers() const;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer > streamservers_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamSendingStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.StreamSendingStart) */ {
 public:
  StreamSendingStart();
  virtual ~StreamSendingStart();

  StreamSendingStart(const StreamSendingStart& from);

  inline StreamSendingStart& operator=(const StreamSendingStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSendingStart& default_instance();

  static inline const StreamSendingStart* internal_default_instance() {
    return reinterpret_cast<const StreamSendingStart*>(
               &_StreamSendingStart_default_instance_);
  }

  void UnsafeArenaSwap(StreamSendingStart* other);
  void Swap(StreamSendingStart* other);

  // implements Message ----------------------------------------------

  inline StreamSendingStart* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSendingStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSendingStart& from);
  void MergeFrom(const StreamSendingStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSendingStart* other);
  protected:
  explicit StreamSendingStart(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string recv_client_id = 2;
  void clear_recv_client_id();
  static const int kRecvClientIdFieldNumber = 2;
  const ::std::string& recv_client_id() const;
  void set_recv_client_id(const ::std::string& value);
  void set_recv_client_id(const char* value);
  void set_recv_client_id(const char* value, size_t size);
  ::std::string* mutable_recv_client_id();
  ::std::string* release_recv_client_id();
  void set_allocated_recv_client_id(::std::string* recv_client_id);
  ::std::string* unsafe_arena_release_recv_client_id();
  void unsafe_arena_set_allocated_recv_client_id(
      ::std::string* recv_client_id);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 3;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.StreamSendingStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr recv_client_id_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamSendingStartRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp) */ {
 public:
  StreamSendingStartRsp();
  virtual ~StreamSendingStartRsp();

  StreamSendingStartRsp(const StreamSendingStartRsp& from);

  inline StreamSendingStartRsp& operator=(const StreamSendingStartRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSendingStartRsp& default_instance();

  static inline const StreamSendingStartRsp* internal_default_instance() {
    return reinterpret_cast<const StreamSendingStartRsp*>(
               &_StreamSendingStartRsp_default_instance_);
  }

  void UnsafeArenaSwap(StreamSendingStartRsp* other);
  void Swap(StreamSendingStartRsp* other);

  // implements Message ----------------------------------------------

  inline StreamSendingStartRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSendingStartRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSendingStartRsp& from);
  void MergeFrom(const StreamSendingStartRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSendingStartRsp* other);
  protected:
  explicit StreamSendingStartRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamSendingStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.StreamSendingStop) */ {
 public:
  StreamSendingStop();
  virtual ~StreamSendingStop();

  StreamSendingStop(const StreamSendingStop& from);

  inline StreamSendingStop& operator=(const StreamSendingStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSendingStop& default_instance();

  static inline const StreamSendingStop* internal_default_instance() {
    return reinterpret_cast<const StreamSendingStop*>(
               &_StreamSendingStop_default_instance_);
  }

  void UnsafeArenaSwap(StreamSendingStop* other);
  void Swap(StreamSendingStop* other);

  // implements Message ----------------------------------------------

  inline StreamSendingStop* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSendingStop* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSendingStop& from);
  void MergeFrom(const StreamSendingStop& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSendingStop* other);
  protected:
  explicit StreamSendingStop(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string recv_client_id = 2;
  void clear_recv_client_id();
  static const int kRecvClientIdFieldNumber = 2;
  const ::std::string& recv_client_id() const;
  void set_recv_client_id(const ::std::string& value);
  void set_recv_client_id(const char* value);
  void set_recv_client_id(const char* value, size_t size);
  ::std::string* mutable_recv_client_id();
  ::std::string* release_recv_client_id();
  void set_allocated_recv_client_id(::std::string* recv_client_id);
  ::std::string* unsafe_arena_release_recv_client_id();
  void unsafe_arena_set_allocated_recv_client_id(
      ::std::string* recv_client_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.StreamSendingStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr recv_client_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamSendingStopRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp) */ {
 public:
  StreamSendingStopRsp();
  virtual ~StreamSendingStopRsp();

  StreamSendingStopRsp(const StreamSendingStopRsp& from);

  inline StreamSendingStopRsp& operator=(const StreamSendingStopRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSendingStopRsp& default_instance();

  static inline const StreamSendingStopRsp* internal_default_instance() {
    return reinterpret_cast<const StreamSendingStopRsp*>(
               &_StreamSendingStopRsp_default_instance_);
  }

  void UnsafeArenaSwap(StreamSendingStopRsp* other);
  void Swap(StreamSendingStopRsp* other);

  // implements Message ----------------------------------------------

  inline StreamSendingStopRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSendingStopRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSendingStopRsp& from);
  void MergeFrom(const StreamSendingStopRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSendingStopRsp* other);
  protected:
  explicit StreamSendingStopRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckStreamPublishToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken) */ {
 public:
  CheckStreamPublishToken();
  virtual ~CheckStreamPublishToken();

  CheckStreamPublishToken(const CheckStreamPublishToken& from);

  inline CheckStreamPublishToken& operator=(const CheckStreamPublishToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckStreamPublishToken& default_instance();

  static inline const CheckStreamPublishToken* internal_default_instance() {
    return reinterpret_cast<const CheckStreamPublishToken*>(
               &_CheckStreamPublishToken_default_instance_);
  }

  void UnsafeArenaSwap(CheckStreamPublishToken* other);
  void Swap(CheckStreamPublishToken* other);

  // implements Message ----------------------------------------------

  inline CheckStreamPublishToken* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckStreamPublishToken* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckStreamPublishToken& from);
  void MergeFrom(const CheckStreamPublishToken& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckStreamPublishToken* other);
  protected:
  explicit CheckStreamPublishToken(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string stream_publish_token = 2;
  void clear_stream_publish_token();
  static const int kStreamPublishTokenFieldNumber = 2;
  const ::std::string& stream_publish_token() const;
  void set_stream_publish_token(const ::std::string& value);
  void set_stream_publish_token(const char* value);
  void set_stream_publish_token(const char* value, size_t size);
  ::std::string* mutable_stream_publish_token();
  ::std::string* release_stream_publish_token();
  void set_allocated_stream_publish_token(::std::string* stream_publish_token);
  ::std::string* unsafe_arena_release_stream_publish_token();
  void unsafe_arena_set_allocated_stream_publish_token(
      ::std::string* stream_publish_token);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_publish_token_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckStreamPublishTokenRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp) */ {
 public:
  CheckStreamPublishTokenRsp();
  virtual ~CheckStreamPublishTokenRsp();

  CheckStreamPublishTokenRsp(const CheckStreamPublishTokenRsp& from);

  inline CheckStreamPublishTokenRsp& operator=(const CheckStreamPublishTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckStreamPublishTokenRsp& default_instance();

  static inline const CheckStreamPublishTokenRsp* internal_default_instance() {
    return reinterpret_cast<const CheckStreamPublishTokenRsp*>(
               &_CheckStreamPublishTokenRsp_default_instance_);
  }

  void UnsafeArenaSwap(CheckStreamPublishTokenRsp* other);
  void Swap(CheckStreamPublishTokenRsp* other);

  // implements Message ----------------------------------------------

  inline CheckStreamPublishTokenRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckStreamPublishTokenRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckStreamPublishTokenRsp& from);
  void MergeFrom(const CheckStreamPublishTokenRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckStreamPublishTokenRsp* other);
  protected:
  explicit CheckStreamPublishTokenRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // bool valid = 2;
  void clear_valid();
  static const int kValidFieldNumber = 2;
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  bool valid_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckStreamSubscribeToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken) */ {
 public:
  CheckStreamSubscribeToken();
  virtual ~CheckStreamSubscribeToken();

  CheckStreamSubscribeToken(const CheckStreamSubscribeToken& from);

  inline CheckStreamSubscribeToken& operator=(const CheckStreamSubscribeToken& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckStreamSubscribeToken& default_instance();

  static inline const CheckStreamSubscribeToken* internal_default_instance() {
    return reinterpret_cast<const CheckStreamSubscribeToken*>(
               &_CheckStreamSubscribeToken_default_instance_);
  }

  void UnsafeArenaSwap(CheckStreamSubscribeToken* other);
  void Swap(CheckStreamSubscribeToken* other);

  // implements Message ----------------------------------------------

  inline CheckStreamSubscribeToken* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckStreamSubscribeToken* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckStreamSubscribeToken& from);
  void MergeFrom(const CheckStreamSubscribeToken& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckStreamSubscribeToken* other);
  protected:
  explicit CheckStreamSubscribeToken(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string stream_subscribe_token = 2;
  void clear_stream_subscribe_token();
  static const int kStreamSubscribeTokenFieldNumber = 2;
  const ::std::string& stream_subscribe_token() const;
  void set_stream_subscribe_token(const ::std::string& value);
  void set_stream_subscribe_token(const char* value);
  void set_stream_subscribe_token(const char* value, size_t size);
  ::std::string* mutable_stream_subscribe_token();
  ::std::string* release_stream_subscribe_token();
  void set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token);
  ::std::string* unsafe_arena_release_stream_subscribe_token();
  void unsafe_arena_set_allocated_stream_subscribe_token(
      ::std::string* stream_subscribe_token);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_subscribe_token_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckStreamSubscribeTokenRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp) */ {
 public:
  CheckStreamSubscribeTokenRsp();
  virtual ~CheckStreamSubscribeTokenRsp();

  CheckStreamSubscribeTokenRsp(const CheckStreamSubscribeTokenRsp& from);

  inline CheckStreamSubscribeTokenRsp& operator=(const CheckStreamSubscribeTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckStreamSubscribeTokenRsp& default_instance();

  static inline const CheckStreamSubscribeTokenRsp* internal_default_instance() {
    return reinterpret_cast<const CheckStreamSubscribeTokenRsp*>(
               &_CheckStreamSubscribeTokenRsp_default_instance_);
  }

  void UnsafeArenaSwap(CheckStreamSubscribeTokenRsp* other);
  void Swap(CheckStreamSubscribeTokenRsp* other);

  // implements Message ----------------------------------------------

  inline CheckStreamSubscribeTokenRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CheckStreamSubscribeTokenRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CheckStreamSubscribeTokenRsp& from);
  void MergeFrom(const CheckStreamSubscribeTokenRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CheckStreamSubscribeTokenRsp* other);
  protected:
  explicit CheckStreamSubscribeTokenRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // bool valid = 2;
  void clear_valid();
  static const int kValidFieldNumber = 2;
  bool valid() const;
  void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  bool valid_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetStreamSourceServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer) */ {
 public:
  SetStreamSourceServer();
  virtual ~SetStreamSourceServer();

  SetStreamSourceServer(const SetStreamSourceServer& from);

  inline SetStreamSourceServer& operator=(const SetStreamSourceServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetStreamSourceServer& default_instance();

  static inline const SetStreamSourceServer* internal_default_instance() {
    return reinterpret_cast<const SetStreamSourceServer*>(
               &_SetStreamSourceServer_default_instance_);
  }

  void UnsafeArenaSwap(SetStreamSourceServer* other);
  void Swap(SetStreamSourceServer* other);

  // implements Message ----------------------------------------------

  inline SetStreamSourceServer* New() const PROTOBUF_FINAL { return New(NULL); }

  SetStreamSourceServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetStreamSourceServer& from);
  void MergeFrom(const SetStreamSourceServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetStreamSourceServer* other);
  protected:
  explicit SetStreamSourceServer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string service_instance_id = 2;
  void clear_service_instance_id();
  static const int kServiceInstanceIdFieldNumber = 2;
  const ::std::string& service_instance_id() const;
  void set_service_instance_id(const ::std::string& value);
  void set_service_instance_id(const char* value);
  void set_service_instance_id(const char* value, size_t size);
  ::std::string* mutable_service_instance_id();
  ::std::string* release_service_instance_id();
  void set_allocated_service_instance_id(::std::string* service_instance_id);
  ::std::string* unsafe_arena_release_service_instance_id();
  void unsafe_arena_set_allocated_service_instance_id(
      ::std::string* service_instance_id);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 3;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr service_instance_id_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetStreamSourceServerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp) */ {
 public:
  SetStreamSourceServerRsp();
  virtual ~SetStreamSourceServerRsp();

  SetStreamSourceServerRsp(const SetStreamSourceServerRsp& from);

  inline SetStreamSourceServerRsp& operator=(const SetStreamSourceServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetStreamSourceServerRsp& default_instance();

  static inline const SetStreamSourceServerRsp* internal_default_instance() {
    return reinterpret_cast<const SetStreamSourceServerRsp*>(
               &_SetStreamSourceServerRsp_default_instance_);
  }

  void UnsafeArenaSwap(SetStreamSourceServerRsp* other);
  void Swap(SetStreamSourceServerRsp* other);

  // implements Message ----------------------------------------------

  inline SetStreamSourceServerRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SetStreamSourceServerRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetStreamSourceServerRsp& from);
  void MergeFrom(const SetStreamSourceServerRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetStreamSourceServerRsp* other);
  protected:
  explicit SetStreamSourceServerRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CleanStreamSourceServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer) */ {
 public:
  CleanStreamSourceServer();
  virtual ~CleanStreamSourceServer();

  CleanStreamSourceServer(const CleanStreamSourceServer& from);

  inline CleanStreamSourceServer& operator=(const CleanStreamSourceServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CleanStreamSourceServer& default_instance();

  static inline const CleanStreamSourceServer* internal_default_instance() {
    return reinterpret_cast<const CleanStreamSourceServer*>(
               &_CleanStreamSourceServer_default_instance_);
  }

  void UnsafeArenaSwap(CleanStreamSourceServer* other);
  void Swap(CleanStreamSourceServer* other);

  // implements Message ----------------------------------------------

  inline CleanStreamSourceServer* New() const PROTOBUF_FINAL { return New(NULL); }

  CleanStreamSourceServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CleanStreamSourceServer& from);
  void MergeFrom(const CleanStreamSourceServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CleanStreamSourceServer* other);
  protected:
  explicit CleanStreamSourceServer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string service_instance_id = 2;
  void clear_service_instance_id();
  static const int kServiceInstanceIdFieldNumber = 2;
  const ::std::string& service_instance_id() const;
  void set_service_instance_id(const ::std::string& value);
  void set_service_instance_id(const char* value);
  void set_service_instance_id(const char* value, size_t size);
  ::std::string* mutable_service_instance_id();
  ::std::string* release_service_instance_id();
  void set_allocated_service_instance_id(::std::string* service_instance_id);
  ::std::string* unsafe_arena_release_service_instance_id();
  void unsafe_arena_set_allocated_service_instance_id(
      ::std::string* service_instance_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr service_instance_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSuperiorStreamServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer) */ {
 public:
  GetSuperiorStreamServer();
  virtual ~GetSuperiorStreamServer();

  GetSuperiorStreamServer(const GetSuperiorStreamServer& from);

  inline GetSuperiorStreamServer& operator=(const GetSuperiorStreamServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSuperiorStreamServer& default_instance();

  static inline const GetSuperiorStreamServer* internal_default_instance() {
    return reinterpret_cast<const GetSuperiorStreamServer*>(
               &_GetSuperiorStreamServer_default_instance_);
  }

  void UnsafeArenaSwap(GetSuperiorStreamServer* other);
  void Swap(GetSuperiorStreamServer* other);

  // implements Message ----------------------------------------------

  inline GetSuperiorStreamServer* New() const PROTOBUF_FINAL { return New(NULL); }

  GetSuperiorStreamServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetSuperiorStreamServer& from);
  void MergeFrom(const GetSuperiorStreamServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetSuperiorStreamServer* other);
  protected:
  explicit GetSuperiorStreamServer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string service_instance_id = 2;
  void clear_service_instance_id();
  static const int kServiceInstanceIdFieldNumber = 2;
  const ::std::string& service_instance_id() const;
  void set_service_instance_id(const ::std::string& value);
  void set_service_instance_id(const char* value);
  void set_service_instance_id(const char* value, size_t size);
  ::std::string* mutable_service_instance_id();
  ::std::string* release_service_instance_id();
  void set_allocated_service_instance_id(::std::string* service_instance_id);
  ::std::string* unsafe_arena_release_service_instance_id();
  void unsafe_arena_set_allocated_service_instance_id(
      ::std::string* service_instance_id);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 3;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // bool unexpected_disconnect = 4;
  void clear_unexpected_disconnect();
  static const int kUnexpectedDisconnectFieldNumber = 4;
  bool unexpected_disconnect() const;
  void set_unexpected_disconnect(bool value);

  // int32 node_type = 5;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 5;
  ::google::protobuf::int32 node_type() const;
  void set_node_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr service_instance_id_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  bool unexpected_disconnect_;
  ::google::protobuf::int32 node_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSuperiorStreamServerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp) */ {
 public:
  GetSuperiorStreamServerRsp();
  virtual ~GetSuperiorStreamServerRsp();

  GetSuperiorStreamServerRsp(const GetSuperiorStreamServerRsp& from);

  inline GetSuperiorStreamServerRsp& operator=(const GetSuperiorStreamServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSuperiorStreamServerRsp& default_instance();

  static inline const GetSuperiorStreamServerRsp* internal_default_instance() {
    return reinterpret_cast<const GetSuperiorStreamServerRsp*>(
               &_GetSuperiorStreamServerRsp_default_instance_);
  }

  void UnsafeArenaSwap(GetSuperiorStreamServerRsp* other);
  void Swap(GetSuperiorStreamServerRsp* other);

  // implements Message ----------------------------------------------

  inline GetSuperiorStreamServerRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetSuperiorStreamServerRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetSuperiorStreamServerRsp& from);
  void MergeFrom(const GetSuperiorStreamServerRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetSuperiorStreamServerRsp* other);
  protected:
  explicit GetSuperiorStreamServerRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 2;
  bool has_stream_server() const;
  void clear_stream_server();
  static const int kStreamServerFieldNumber = 2;
  private:
  void _slow_mutable_stream_server();
  void _slow_set_allocated_stream_server(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::StreamServer** stream_server);
  ::com::fsmeeting::fsp::proto::common::StreamServer* _slow_release_stream_server();
  public:
  const ::com::fsmeeting::fsp::proto::common::StreamServer& stream_server() const;
  ::com::fsmeeting::fsp::proto::common::StreamServer* mutable_stream_server();
  ::com::fsmeeting::fsp::proto::common::StreamServer* release_stream_server();
  void set_allocated_stream_server(::com::fsmeeting::fsp::proto::common::StreamServer* stream_server);
  ::com::fsmeeting::fsp::proto::common::StreamServer* unsafe_arena_release_stream_server();
  void unsafe_arena_set_allocated_stream_server(
      ::com::fsmeeting::fsp::proto::common::StreamServer* stream_server);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 3;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  ::com::fsmeeting::fsp::proto::common::StreamServer* stream_server_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelConnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.ChannelConnected) */ {
 public:
  ChannelConnected();
  virtual ~ChannelConnected();

  ChannelConnected(const ChannelConnected& from);

  inline ChannelConnected& operator=(const ChannelConnected& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelConnected& default_instance();

  static inline const ChannelConnected* internal_default_instance() {
    return reinterpret_cast<const ChannelConnected*>(
               &_ChannelConnected_default_instance_);
  }

  void UnsafeArenaSwap(ChannelConnected* other);
  void Swap(ChannelConnected* other);

  // implements Message ----------------------------------------------

  inline ChannelConnected* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelConnected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelConnected& from);
  void MergeFrom(const ChannelConnected& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelConnected* other);
  protected:
  explicit ChannelConnected(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string service_instance_id = 2;
  void clear_service_instance_id();
  static const int kServiceInstanceIdFieldNumber = 2;
  const ::std::string& service_instance_id() const;
  void set_service_instance_id(const ::std::string& value);
  void set_service_instance_id(const char* value);
  void set_service_instance_id(const char* value, size_t size);
  ::std::string* mutable_service_instance_id();
  ::std::string* release_service_instance_id();
  void set_allocated_service_instance_id(::std::string* service_instance_id);
  ::std::string* unsafe_arena_release_service_instance_id();
  void unsafe_arena_set_allocated_service_instance_id(
      ::std::string* service_instance_id);

  // string stream_id = 3;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 3;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 5;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // .com.fsmeeting.fsp.proto.common.DataDirection direction = 4;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  ::com::fsmeeting::fsp::proto::common::DataDirection direction() const;
  void set_direction(::com::fsmeeting::fsp::proto::common::DataDirection value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.ChannelConnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr service_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  int direction_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelConnectedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp) */ {
 public:
  ChannelConnectedRsp();
  virtual ~ChannelConnectedRsp();

  ChannelConnectedRsp(const ChannelConnectedRsp& from);

  inline ChannelConnectedRsp& operator=(const ChannelConnectedRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelConnectedRsp& default_instance();

  static inline const ChannelConnectedRsp* internal_default_instance() {
    return reinterpret_cast<const ChannelConnectedRsp*>(
               &_ChannelConnectedRsp_default_instance_);
  }

  void UnsafeArenaSwap(ChannelConnectedRsp* other);
  void Swap(ChannelConnectedRsp* other);

  // implements Message ----------------------------------------------

  inline ChannelConnectedRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelConnectedRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelConnectedRsp& from);
  void MergeFrom(const ChannelConnectedRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelConnectedRsp* other);
  protected:
  explicit ChannelConnectedRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 2;
  ::com::fsmeeting::fsp::proto::common::ChannelType channel_type() const;
  void set_channel_type(::com::fsmeeting::fsp::proto::common::ChannelType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  int channel_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelConnected2Rsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp) */ {
 public:
  ChannelConnected2Rsp();
  virtual ~ChannelConnected2Rsp();

  ChannelConnected2Rsp(const ChannelConnected2Rsp& from);

  inline ChannelConnected2Rsp& operator=(const ChannelConnected2Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelConnected2Rsp& default_instance();

  static inline const ChannelConnected2Rsp* internal_default_instance() {
    return reinterpret_cast<const ChannelConnected2Rsp*>(
               &_ChannelConnected2Rsp_default_instance_);
  }

  void UnsafeArenaSwap(ChannelConnected2Rsp* other);
  void Swap(ChannelConnected2Rsp* other);

  // implements Message ----------------------------------------------

  inline ChannelConnected2Rsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelConnected2Rsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelConnected2Rsp& from);
  void MergeFrom(const ChannelConnected2Rsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelConnected2Rsp* other);
  protected:
  explicit ChannelConnected2Rsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // .com.fsmeeting.fsp.proto.common.Stream stream = 3;
  bool has_stream() const;
  void clear_stream();
  static const int kStreamFieldNumber = 3;
  private:
  void _slow_mutable_stream();
  void _slow_set_allocated_stream(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::Stream** stream);
  ::com::fsmeeting::fsp::proto::common::Stream* _slow_release_stream();
  public:
  const ::com::fsmeeting::fsp::proto::common::Stream& stream() const;
  ::com::fsmeeting::fsp::proto::common::Stream* mutable_stream();
  ::com::fsmeeting::fsp::proto::common::Stream* release_stream();
  void set_allocated_stream(::com::fsmeeting::fsp::proto::common::Stream* stream);
  ::com::fsmeeting::fsp::proto::common::Stream* unsafe_arena_release_stream();
  void unsafe_arena_set_allocated_stream(
      ::com::fsmeeting::fsp::proto::common::Stream* stream);

  // .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
  void clear_channel_type();
  static const int kChannelTypeFieldNumber = 2;
  ::com::fsmeeting::fsp::proto::common::ChannelType channel_type() const;
  void set_channel_type(::com::fsmeeting::fsp::proto::common::ChannelType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  ::com::fsmeeting::fsp::proto::common::Stream* stream_;
  int channel_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelDisconnected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.ChannelDisconnected) */ {
 public:
  ChannelDisconnected();
  virtual ~ChannelDisconnected();

  ChannelDisconnected(const ChannelDisconnected& from);

  inline ChannelDisconnected& operator=(const ChannelDisconnected& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelDisconnected& default_instance();

  static inline const ChannelDisconnected* internal_default_instance() {
    return reinterpret_cast<const ChannelDisconnected*>(
               &_ChannelDisconnected_default_instance_);
  }

  void UnsafeArenaSwap(ChannelDisconnected* other);
  void Swap(ChannelDisconnected* other);

  // implements Message ----------------------------------------------

  inline ChannelDisconnected* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelDisconnected* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelDisconnected& from);
  void MergeFrom(const ChannelDisconnected& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelDisconnected* other);
  protected:
  explicit ChannelDisconnected(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string service_instance_id = 2;
  void clear_service_instance_id();
  static const int kServiceInstanceIdFieldNumber = 2;
  const ::std::string& service_instance_id() const;
  void set_service_instance_id(const ::std::string& value);
  void set_service_instance_id(const char* value);
  void set_service_instance_id(const char* value, size_t size);
  ::std::string* mutable_service_instance_id();
  ::std::string* release_service_instance_id();
  void set_allocated_service_instance_id(::std::string* service_instance_id);
  ::std::string* unsafe_arena_release_service_instance_id();
  void unsafe_arena_set_allocated_service_instance_id(
      ::std::string* service_instance_id);

  // string stream_id = 3;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 3;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.ChannelDisconnected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr service_instance_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelDisconnectedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp) */ {
 public:
  ChannelDisconnectedRsp();
  virtual ~ChannelDisconnectedRsp();

  ChannelDisconnectedRsp(const ChannelDisconnectedRsp& from);

  inline ChannelDisconnectedRsp& operator=(const ChannelDisconnectedRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelDisconnectedRsp& default_instance();

  static inline const ChannelDisconnectedRsp* internal_default_instance() {
    return reinterpret_cast<const ChannelDisconnectedRsp*>(
               &_ChannelDisconnectedRsp_default_instance_);
  }

  void UnsafeArenaSwap(ChannelDisconnectedRsp* other);
  void Swap(ChannelDisconnectedRsp* other);

  // implements Message ----------------------------------------------

  inline ChannelDisconnectedRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelDisconnectedRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelDisconnectedRsp& from);
  void MergeFrom(const ChannelDisconnectedRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelDisconnectedRsp* other);
  protected:
  explicit ChannelDisconnectedRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.GetStreamType) */ {
 public:
  GetStreamType();
  virtual ~GetStreamType();

  GetStreamType(const GetStreamType& from);

  inline GetStreamType& operator=(const GetStreamType& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamType& default_instance();

  static inline const GetStreamType* internal_default_instance() {
    return reinterpret_cast<const GetStreamType*>(
               &_GetStreamType_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamType* other);
  void Swap(GetStreamType* other);

  // implements Message ----------------------------------------------

  inline GetStreamType* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamType& from);
  void MergeFrom(const GetStreamType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamType* other);
  protected:
  explicit GetStreamType(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.GetStreamType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamTypeRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp) */ {
 public:
  GetStreamTypeRsp();
  virtual ~GetStreamTypeRsp();

  GetStreamTypeRsp(const GetStreamTypeRsp& from);

  inline GetStreamTypeRsp& operator=(const GetStreamTypeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamTypeRsp& default_instance();

  static inline const GetStreamTypeRsp* internal_default_instance() {
    return reinterpret_cast<const GetStreamTypeRsp*>(
               &_GetStreamTypeRsp_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamTypeRsp* other);
  void Swap(GetStreamTypeRsp* other);

  // implements Message ----------------------------------------------

  inline GetStreamTypeRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamTypeRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamTypeRsp& from);
  void MergeFrom(const GetStreamTypeRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamTypeRsp* other);
  protected:
  explicit GetStreamTypeRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  void clear_stream_type();
  static const int kStreamTypeFieldNumber = 2;
  ::com::fsmeeting::fsp::proto::common::StreamType stream_type() const;
  void set_stream_type(::com::fsmeeting::fsp::proto::common::StreamType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  int stream_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.GetStreamProperty) */ {
 public:
  GetStreamProperty();
  virtual ~GetStreamProperty();

  GetStreamProperty(const GetStreamProperty& from);

  inline GetStreamProperty& operator=(const GetStreamProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamProperty& default_instance();

  static inline const GetStreamProperty* internal_default_instance() {
    return reinterpret_cast<const GetStreamProperty*>(
               &_GetStreamProperty_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamProperty* other);
  void Swap(GetStreamProperty* other);

  // implements Message ----------------------------------------------

  inline GetStreamProperty* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamProperty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamProperty& from);
  void MergeFrom(const GetStreamProperty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamProperty* other);
  protected:
  explicit GetStreamProperty(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.GetStreamProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamPropertyRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp) */ {
 public:
  GetStreamPropertyRsp();
  virtual ~GetStreamPropertyRsp();

  GetStreamPropertyRsp(const GetStreamPropertyRsp& from);

  inline GetStreamPropertyRsp& operator=(const GetStreamPropertyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamPropertyRsp& default_instance();

  static inline const GetStreamPropertyRsp* internal_default_instance() {
    return reinterpret_cast<const GetStreamPropertyRsp*>(
               &_GetStreamPropertyRsp_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamPropertyRsp* other);
  void Swap(GetStreamPropertyRsp* other);

  // implements Message ----------------------------------------------

  inline GetStreamPropertyRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamPropertyRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamPropertyRsp& from);
  void MergeFrom(const GetStreamPropertyRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamPropertyRsp* other);
  protected:
  explicit GetStreamPropertyRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 2;
  void clear_stream_property();
  static const int kStreamPropertyFieldNumber = 2;
  ::com::fsmeeting::fsp::proto::common::StreamProperty stream_property() const;
  void set_stream_property(::com::fsmeeting::fsp::proto::common::StreamProperty value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  int stream_property_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateStream

// string app_id = 1;
inline void CreateStream::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateStream::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
  return app_id_.Get();
}
inline void CreateStream::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}
inline void CreateStream::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}
inline void CreateStream::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}
inline ::std::string* CreateStream::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateStream::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateStream::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateStream::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}
inline void CreateStream::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStream.app_id)
}

// .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
inline void CreateStream::clear_stream_type() {
  stream_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::StreamType CreateStream::stream_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStream.stream_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamType >(stream_type_);
}
inline void CreateStream::set_stream_type(::com::fsmeeting::fsp::proto::common::StreamType value) {
  
  stream_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CreateStream.stream_type)
}

// .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
inline void CreateStream::clear_stream_property() {
  stream_property_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::StreamProperty CreateStream::stream_property() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStream.stream_property)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamProperty >(stream_property_);
}
inline void CreateStream::set_stream_property(::com::fsmeeting::fsp::proto::common::StreamProperty value) {
  
  stream_property_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CreateStream.stream_property)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
inline bool CreateStream::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void CreateStream::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& CreateStream::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStream::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStream::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void CreateStream::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStream.commonInvokeInfo)
}

// -------------------------------------------------------------------

// CreateStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool CreateStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void CreateStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& CreateStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CreateStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CreateStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void CreateStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.response)
}

// .com.fsmeeting.fsp.proto.common.Stream stream = 2;
inline bool CreateStreamRsp::has_stream() const {
  return this != internal_default_instance() && stream_ != NULL;
}
inline void CreateStreamRsp::clear_stream() {
  if (GetArenaNoVirtual() == NULL && stream_ != NULL) delete stream_;
  stream_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::Stream& CreateStreamRsp::stream() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
  return stream_ != NULL ? *stream_
                         : *::com::fsmeeting::fsp::proto::common::Stream::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::Stream* CreateStreamRsp::mutable_stream() {
  
  if (stream_ == NULL) {
    _slow_mutable_stream();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
  return stream_;
}
inline ::com::fsmeeting::fsp::proto::common::Stream* CreateStreamRsp::release_stream() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stream();
  } else {
    ::com::fsmeeting::fsp::proto::common::Stream* temp = stream_;
    stream_ = NULL;
    return temp;
  }
}
inline  void CreateStreamRsp::set_allocated_stream(::com::fsmeeting::fsp::proto::common::Stream* stream) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stream_;
  }
  if (stream != NULL) {
    _slow_set_allocated_stream(message_arena, &stream);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.stream)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
inline bool CreateStreamRsp::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void CreateStreamRsp::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& CreateStreamRsp::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStreamRsp::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* CreateStreamRsp::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void CreateStreamRsp::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CreateStreamRsp.commonInvokeInfo)
}

// -------------------------------------------------------------------

// DestroyStream

// string stream_id = 1;
inline void DestroyStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DestroyStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
  return stream_id_.Get();
}
inline void DestroyStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}
inline void DestroyStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}
inline void DestroyStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}
inline ::std::string* DestroyStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DestroyStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DestroyStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DestroyStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}
inline void DestroyStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStream.stream_id)
}

// string app_token = 2;
inline void DestroyStream::clear_app_token() {
  app_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DestroyStream::app_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
  return app_token_.Get();
}
inline void DestroyStream::set_app_token(const ::std::string& value) {
  
  app_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}
inline void DestroyStream::set_app_token(const char* value) {
  
  app_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}
inline void DestroyStream::set_app_token(const char* value,
    size_t size) {
  
  app_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}
inline ::std::string* DestroyStream::mutable_app_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
  return app_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DestroyStream::release_app_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
  
  return app_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DestroyStream::unsafe_arena_release_app_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DestroyStream::set_allocated_app_token(::std::string* app_token) {
  if (app_token != NULL) {
    
  } else {
    
  }
  app_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}
inline void DestroyStream::unsafe_arena_set_allocated_app_token(
    ::std::string* app_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_token != NULL) {
    
  } else {
    
  }
  app_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStream.app_token)
}

// -------------------------------------------------------------------

// DestroyStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool DestroyStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void DestroyStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& DestroyStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void DestroyStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.DestroyStreamRsp.response)
}

// -------------------------------------------------------------------

// ClientConnected

// string client_id = 1;
inline void ClientConnected::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ClientConnected::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
  return client_id_.Get();
}
inline void ClientConnected::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}
inline void ClientConnected::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}
inline void ClientConnected::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}
inline ::std::string* ClientConnected::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientConnected::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientConnected::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClientConnected::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}
inline void ClientConnected::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.client_id)
}

// string service_instance_id = 2;
inline void ClientConnected::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ClientConnected::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
  return service_instance_id_.Get();
}
inline void ClientConnected::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}
inline void ClientConnected::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}
inline void ClientConnected::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}
inline ::std::string* ClientConnected::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientConnected::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientConnected::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClientConnected::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}
inline void ClientConnected::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.service_instance_id)
}

// string app_id = 3;
inline void ClientConnected::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ClientConnected::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
  return app_id_.Get();
}
inline void ClientConnected::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}
inline void ClientConnected::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}
inline void ClientConnected::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}
inline ::std::string* ClientConnected::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientConnected::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientConnected::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClientConnected::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}
inline void ClientConnected::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.app_id)
}

// string client_name = 4;
inline void ClientConnected::clear_client_name() {
  client_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ClientConnected::client_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
  return client_name_.Get();
}
inline void ClientConnected::set_client_name(const ::std::string& value) {
  
  client_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}
inline void ClientConnected::set_client_name(const char* value) {
  
  client_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}
inline void ClientConnected::set_client_name(const char* value,
    size_t size) {
  
  client_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}
inline ::std::string* ClientConnected::mutable_client_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
  return client_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientConnected::release_client_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
  
  return client_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientConnected::unsafe_arena_release_client_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClientConnected::set_allocated_client_name(::std::string* client_name) {
  if (client_name != NULL) {
    
  } else {
    
  }
  client_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}
inline void ClientConnected::unsafe_arena_set_allocated_client_name(
    ::std::string* client_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_name != NULL) {
    
  } else {
    
  }
  client_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.client_name)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
inline bool ClientConnected::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void ClientConnected::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& ClientConnected::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ClientConnected::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ClientConnected::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void ClientConnected::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnected.commonInvokeInfo)
}

// -------------------------------------------------------------------

// ClientConnectedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool ClientConnectedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void ClientConnectedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& ClientConnectedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ClientConnectedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ClientConnectedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void ClientConnectedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientConnectedRsp.response)
}

// -------------------------------------------------------------------

// ClientDisconnected

// string client_id = 1;
inline void ClientDisconnected::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ClientDisconnected::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
  return client_id_.Get();
}
inline void ClientDisconnected::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}
inline void ClientDisconnected::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}
inline void ClientDisconnected::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}
inline ::std::string* ClientDisconnected::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientDisconnected::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientDisconnected::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClientDisconnected::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}
inline void ClientDisconnected::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.client_id)
}

// string service_instance_id = 2;
inline void ClientDisconnected::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ClientDisconnected::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
  return service_instance_id_.Get();
}
inline void ClientDisconnected::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}
inline void ClientDisconnected::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}
inline void ClientDisconnected::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}
inline ::std::string* ClientDisconnected::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientDisconnected::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientDisconnected::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClientDisconnected::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}
inline void ClientDisconnected::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.service_instance_id)
}

// string app_id = 3;
inline void ClientDisconnected::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ClientDisconnected::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
  return app_id_.Get();
}
inline void ClientDisconnected::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}
inline void ClientDisconnected::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}
inline void ClientDisconnected::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}
inline ::std::string* ClientDisconnected::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientDisconnected::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ClientDisconnected::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ClientDisconnected::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}
inline void ClientDisconnected::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnected.app_id)
}

// -------------------------------------------------------------------

// ClientDisconnectedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool ClientDisconnectedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void ClientDisconnectedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& ClientDisconnectedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ClientDisconnectedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ClientDisconnectedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void ClientDisconnectedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ClientDisconnectedRsp.response)
}

// -------------------------------------------------------------------

// PublishStream

// string stream_id = 1;
inline void PublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
  return stream_id_.Get();
}
inline void PublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}
inline void PublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}
inline void PublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}
inline ::std::string* PublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}
inline void PublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.stream_id)
}

// string client_id = 2;
inline void PublishStream::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PublishStream::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
  return client_id_.Get();
}
inline void PublishStream::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}
inline void PublishStream::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}
inline void PublishStream::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}
inline ::std::string* PublishStream::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PublishStream::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}
inline void PublishStream::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.client_id)
}

// string client_ip = 3;
inline void PublishStream::clear_client_ip() {
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PublishStream::client_ip() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
  return client_ip_.Get();
}
inline void PublishStream::set_client_ip(const ::std::string& value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}
inline void PublishStream::set_client_ip(const char* value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}
inline void PublishStream::set_client_ip(const char* value,
    size_t size) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}
inline ::std::string* PublishStream::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
  return client_ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::release_client_ip() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
  
  return client_ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::unsafe_arena_release_client_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PublishStream::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}
inline void PublishStream::unsafe_arena_set_allocated_client_ip(
    ::std::string* client_ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.client_ip)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
inline bool PublishStream::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void PublishStream::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& PublishStream::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* PublishStream::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* PublishStream::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void PublishStream::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStream.commonInvokeInfo)
}

// bool set_stream_source = 5;
inline void PublishStream::clear_set_stream_source() {
  set_stream_source_ = false;
}
inline bool PublishStream::set_stream_source() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStream.set_stream_source)
  return set_stream_source_;
}
inline void PublishStream::set_set_stream_source(bool value) {
  
  set_stream_source_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.PublishStream.set_stream_source)
}

// -------------------------------------------------------------------

// PublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool PublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void PublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& PublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void PublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.PublishStreamRsp.response)
}

// -------------------------------------------------------------------

// UnpublishStream

// string stream_id = 1;
inline void UnpublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UnpublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
  return stream_id_.Get();
}
inline void UnpublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}
inline void UnpublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}
inline void UnpublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}
inline ::std::string* UnpublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UnpublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UnpublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UnpublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}
inline void UnpublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStream.stream_id)
}

// string client_id = 2;
inline void UnpublishStream::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UnpublishStream::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
  return client_id_.Get();
}
inline void UnpublishStream::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}
inline void UnpublishStream::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}
inline void UnpublishStream::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}
inline ::std::string* UnpublishStream::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UnpublishStream::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UnpublishStream::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UnpublishStream::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}
inline void UnpublishStream::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStream.client_id)
}

// -------------------------------------------------------------------

// UnpublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool UnpublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void UnpublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& UnpublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* UnpublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* UnpublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void UnpublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.UnpublishStreamRsp.response)
}

// -------------------------------------------------------------------

// GetStreamServers

// string stream_id = 1;
inline void GetStreamServers::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
  return stream_id_.Get();
}
inline void GetStreamServers::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}
inline void GetStreamServers::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}
inline void GetStreamServers::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}
inline ::std::string* GetStreamServers::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}
inline void GetStreamServers::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.stream_id)
}

// string client_id = 2;
inline void GetStreamServers::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
  return client_id_.Get();
}
inline void GetStreamServers::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}
inline void GetStreamServers::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}
inline void GetStreamServers::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}
inline ::std::string* GetStreamServers::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}
inline void GetStreamServers::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_id)
}

// string client_ip = 3;
inline void GetStreamServers::clear_client_ip() {
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::client_ip() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
  return client_ip_.Get();
}
inline void GetStreamServers::set_client_ip(const ::std::string& value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}
inline void GetStreamServers::set_client_ip(const char* value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}
inline void GetStreamServers::set_client_ip(const char* value,
    size_t size) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}
inline ::std::string* GetStreamServers::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
  return client_ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_client_ip() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
  
  return client_ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_client_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}
inline void GetStreamServers::unsafe_arena_set_allocated_client_ip(
    ::std::string* client_ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.client_ip)
}

// string group_id = 4;
inline void GetStreamServers::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
  return group_id_.Get();
}
inline void GetStreamServers::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}
inline void GetStreamServers::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}
inline void GetStreamServers::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}
inline ::std::string* GetStreamServers::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}
inline void GetStreamServers::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.group_id)
}

// string user_id = 5;
inline void GetStreamServers::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
  return user_id_.Get();
}
inline void GetStreamServers::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}
inline void GetStreamServers::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}
inline void GetStreamServers::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}
inline ::std::string* GetStreamServers::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}
inline void GetStreamServers::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.user_id)
}

// string app_id = 6;
inline void GetStreamServers::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
  return app_id_.Get();
}
inline void GetStreamServers::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}
inline void GetStreamServers::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}
inline void GetStreamServers::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}
inline ::std::string* GetStreamServers::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}
inline void GetStreamServers::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.app_id)
}

// string company_id = 7;
inline void GetStreamServers::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
  return company_id_.Get();
}
inline void GetStreamServers::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}
inline void GetStreamServers::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}
inline void GetStreamServers::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}
inline ::std::string* GetStreamServers::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}
inline void GetStreamServers::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.company_id)
}

// string room_id = 8;
inline void GetStreamServers::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
  return room_id_.Get();
}
inline void GetStreamServers::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}
inline void GetStreamServers::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}
inline void GetStreamServers::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}
inline ::std::string* GetStreamServers::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}
inline void GetStreamServers::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServers.room_id)
}

// int32 media_type = 9;
inline void GetStreamServers::clear_media_type() {
  media_type_ = 0;
}
inline ::google::protobuf::int32 GetStreamServers::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServers.media_type)
  return media_type_;
}
inline void GetStreamServers::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamServers.media_type)
}

// -------------------------------------------------------------------

// GetStreamServersRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GetStreamServersRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GetStreamServersRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamServersRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GetStreamServersRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.response)
}

// repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
inline int GetStreamServersRsp::streamservers_size() const {
  return streamservers_.size();
}
inline void GetStreamServersRsp::clear_streamservers() {
  streamservers_.Clear();
}
inline const ::com::fsmeeting::fsp::proto::common::StreamServer& GetStreamServersRsp::streamservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return streamservers_.Get(index);
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* GetStreamServersRsp::mutable_streamservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return streamservers_.Mutable(index);
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* GetStreamServersRsp::add_streamservers() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return streamservers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
GetStreamServersRsp::mutable_streamservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return &streamservers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
GetStreamServersRsp::streamservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.sc.GetStreamServersRsp.streamServers)
  return streamservers_;
}

// -------------------------------------------------------------------

// StreamSendingStart

// string stream_id = 1;
inline void StreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
  return stream_id_.Get();
}
inline void StreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}
inline void StreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}
inline void StreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}
inline ::std::string* StreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}
inline void StreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.stream_id)
}

// string recv_client_id = 2;
inline void StreamSendingStart::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamSendingStart::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
  return recv_client_id_.Get();
}
inline void StreamSendingStart::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}
inline void StreamSendingStart::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}
inline void StreamSendingStart::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}
inline ::std::string* StreamSendingStart::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStart::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStart::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamSendingStart::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}
inline void StreamSendingStart::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.recv_client_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
inline bool StreamSendingStart::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void StreamSendingStart::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& StreamSendingStart::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void StreamSendingStart::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStart.commonInvokeInfo)
}

// -------------------------------------------------------------------

// StreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool StreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void StreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void StreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStartRsp.response)
}

// -------------------------------------------------------------------

// StreamSendingStop

// string stream_id = 1;
inline void StreamSendingStop::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamSendingStop::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
  return stream_id_.Get();
}
inline void StreamSendingStop::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}
inline void StreamSendingStop::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}
inline void StreamSendingStop::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}
inline ::std::string* StreamSendingStop::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStop::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStop::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamSendingStop::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}
inline void StreamSendingStop::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStop.stream_id)
}

// string recv_client_id = 2;
inline void StreamSendingStop::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamSendingStop::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
  return recv_client_id_.Get();
}
inline void StreamSendingStop::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}
inline void StreamSendingStop::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}
inline void StreamSendingStop::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}
inline ::std::string* StreamSendingStop::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStop::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStop::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamSendingStop::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}
inline void StreamSendingStop::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStop.recv_client_id)
}

// -------------------------------------------------------------------

// StreamSendingStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool StreamSendingStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void StreamSendingStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamSendingStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void StreamSendingStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.StreamSendingStopRsp.response)
}

// -------------------------------------------------------------------

// CheckStreamPublishToken

// string stream_id = 1;
inline void CheckStreamPublishToken::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckStreamPublishToken::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
  return stream_id_.Get();
}
inline void CheckStreamPublishToken::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}
inline void CheckStreamPublishToken::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}
inline void CheckStreamPublishToken::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}
inline ::std::string* CheckStreamPublishToken::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckStreamPublishToken::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckStreamPublishToken::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckStreamPublishToken::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}
inline void CheckStreamPublishToken::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_id)
}

// string stream_publish_token = 2;
inline void CheckStreamPublishToken::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckStreamPublishToken::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
  return stream_publish_token_.Get();
}
inline void CheckStreamPublishToken::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}
inline void CheckStreamPublishToken::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}
inline void CheckStreamPublishToken::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}
inline ::std::string* CheckStreamPublishToken::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckStreamPublishToken::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckStreamPublishToken::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckStreamPublishToken::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}
inline void CheckStreamPublishToken::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishToken.stream_publish_token)
}

// -------------------------------------------------------------------

// CheckStreamPublishTokenRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool CheckStreamPublishTokenRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void CheckStreamPublishTokenRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& CheckStreamPublishTokenRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamPublishTokenRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamPublishTokenRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void CheckStreamPublishTokenRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.response)
}

// bool valid = 2;
inline void CheckStreamPublishTokenRsp::clear_valid() {
  valid_ = false;
}
inline bool CheckStreamPublishTokenRsp::valid() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.valid)
  return valid_;
}
inline void CheckStreamPublishTokenRsp::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamPublishTokenRsp.valid)
}

// -------------------------------------------------------------------

// CheckStreamSubscribeToken

// string stream_id = 1;
inline void CheckStreamSubscribeToken::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckStreamSubscribeToken::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
  return stream_id_.Get();
}
inline void CheckStreamSubscribeToken::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}
inline void CheckStreamSubscribeToken::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}
inline void CheckStreamSubscribeToken::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}
inline ::std::string* CheckStreamSubscribeToken::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckStreamSubscribeToken::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckStreamSubscribeToken::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckStreamSubscribeToken::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}
inline void CheckStreamSubscribeToken::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_id)
}

// string stream_subscribe_token = 2;
inline void CheckStreamSubscribeToken::clear_stream_subscribe_token() {
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CheckStreamSubscribeToken::stream_subscribe_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
  return stream_subscribe_token_.Get();
}
inline void CheckStreamSubscribeToken::set_stream_subscribe_token(const ::std::string& value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}
inline void CheckStreamSubscribeToken::set_stream_subscribe_token(const char* value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}
inline void CheckStreamSubscribeToken::set_stream_subscribe_token(const char* value,
    size_t size) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}
inline ::std::string* CheckStreamSubscribeToken::mutable_stream_subscribe_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
  return stream_subscribe_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckStreamSubscribeToken::release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
  
  return stream_subscribe_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CheckStreamSubscribeToken::unsafe_arena_release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_subscribe_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckStreamSubscribeToken::set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token) {
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_subscribe_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}
inline void CheckStreamSubscribeToken::unsafe_arena_set_allocated_stream_subscribe_token(
    ::std::string* stream_subscribe_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_subscribe_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeToken.stream_subscribe_token)
}

// -------------------------------------------------------------------

// CheckStreamSubscribeTokenRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool CheckStreamSubscribeTokenRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void CheckStreamSubscribeTokenRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& CheckStreamSubscribeTokenRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamSubscribeTokenRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CheckStreamSubscribeTokenRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void CheckStreamSubscribeTokenRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.response)
}

// bool valid = 2;
inline void CheckStreamSubscribeTokenRsp::clear_valid() {
  valid_ = false;
}
inline bool CheckStreamSubscribeTokenRsp::valid() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.valid)
  return valid_;
}
inline void CheckStreamSubscribeTokenRsp::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CheckStreamSubscribeTokenRsp.valid)
}

// -------------------------------------------------------------------

// SetStreamSourceServer

// string stream_id = 1;
inline void SetStreamSourceServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SetStreamSourceServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
  return stream_id_.Get();
}
inline void SetStreamSourceServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}
inline void SetStreamSourceServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}
inline void SetStreamSourceServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}
inline ::std::string* SetStreamSourceServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SetStreamSourceServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SetStreamSourceServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SetStreamSourceServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}
inline void SetStreamSourceServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.stream_id)
}

// string service_instance_id = 2;
inline void SetStreamSourceServer::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SetStreamSourceServer::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
  return service_instance_id_.Get();
}
inline void SetStreamSourceServer::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}
inline void SetStreamSourceServer::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}
inline void SetStreamSourceServer::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}
inline ::std::string* SetStreamSourceServer::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SetStreamSourceServer::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SetStreamSourceServer::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SetStreamSourceServer::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}
inline void SetStreamSourceServer::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.service_instance_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
inline bool SetStreamSourceServer::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void SetStreamSourceServer::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& SetStreamSourceServer::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* SetStreamSourceServer::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* SetStreamSourceServer::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void SetStreamSourceServer::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServer.commonInvokeInfo)
}

// -------------------------------------------------------------------

// SetStreamSourceServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool SetStreamSourceServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void SetStreamSourceServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& SetStreamSourceServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SetStreamSourceServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SetStreamSourceServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void SetStreamSourceServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.SetStreamSourceServerRsp.response)
}

// -------------------------------------------------------------------

// CleanStreamSourceServer

// string stream_id = 1;
inline void CleanStreamSourceServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CleanStreamSourceServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
  return stream_id_.Get();
}
inline void CleanStreamSourceServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}
inline void CleanStreamSourceServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}
inline void CleanStreamSourceServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}
inline ::std::string* CleanStreamSourceServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CleanStreamSourceServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CleanStreamSourceServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CleanStreamSourceServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}
inline void CleanStreamSourceServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.stream_id)
}

// string service_instance_id = 2;
inline void CleanStreamSourceServer::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CleanStreamSourceServer::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
  return service_instance_id_.Get();
}
inline void CleanStreamSourceServer::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}
inline void CleanStreamSourceServer::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}
inline void CleanStreamSourceServer::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}
inline ::std::string* CleanStreamSourceServer::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CleanStreamSourceServer::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CleanStreamSourceServer::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CleanStreamSourceServer::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}
inline void CleanStreamSourceServer::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.CleanStreamSourceServer.service_instance_id)
}

// -------------------------------------------------------------------

// GetSuperiorStreamServer

// string stream_id = 1;
inline void GetSuperiorStreamServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetSuperiorStreamServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
  return stream_id_.Get();
}
inline void GetSuperiorStreamServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}
inline void GetSuperiorStreamServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}
inline void GetSuperiorStreamServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}
inline ::std::string* GetSuperiorStreamServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetSuperiorStreamServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetSuperiorStreamServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetSuperiorStreamServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}
inline void GetSuperiorStreamServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.stream_id)
}

// string service_instance_id = 2;
inline void GetSuperiorStreamServer::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetSuperiorStreamServer::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
  return service_instance_id_.Get();
}
inline void GetSuperiorStreamServer::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}
inline void GetSuperiorStreamServer::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}
inline void GetSuperiorStreamServer::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}
inline ::std::string* GetSuperiorStreamServer::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetSuperiorStreamServer::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetSuperiorStreamServer::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetSuperiorStreamServer::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}
inline void GetSuperiorStreamServer::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.service_instance_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
inline bool GetSuperiorStreamServer::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void GetSuperiorStreamServer::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& GetSuperiorStreamServer::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServer::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServer::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void GetSuperiorStreamServer::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.commonInvokeInfo)
}

// bool unexpected_disconnect = 4;
inline void GetSuperiorStreamServer::clear_unexpected_disconnect() {
  unexpected_disconnect_ = false;
}
inline bool GetSuperiorStreamServer::unexpected_disconnect() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.unexpected_disconnect)
  return unexpected_disconnect_;
}
inline void GetSuperiorStreamServer::set_unexpected_disconnect(bool value) {
  
  unexpected_disconnect_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.unexpected_disconnect)
}

// int32 node_type = 5;
inline void GetSuperiorStreamServer::clear_node_type() {
  node_type_ = 0;
}
inline ::google::protobuf::int32 GetSuperiorStreamServer::node_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.node_type)
  return node_type_;
}
inline void GetSuperiorStreamServer::set_node_type(::google::protobuf::int32 value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServer.node_type)
}

// -------------------------------------------------------------------

// GetSuperiorStreamServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GetSuperiorStreamServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GetSuperiorStreamServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetSuperiorStreamServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetSuperiorStreamServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetSuperiorStreamServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GetSuperiorStreamServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.response)
}

// .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 2;
inline bool GetSuperiorStreamServerRsp::has_stream_server() const {
  return this != internal_default_instance() && stream_server_ != NULL;
}
inline void GetSuperiorStreamServerRsp::clear_stream_server() {
  if (GetArenaNoVirtual() == NULL && stream_server_ != NULL) delete stream_server_;
  stream_server_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::StreamServer& GetSuperiorStreamServerRsp::stream_server() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
  return stream_server_ != NULL ? *stream_server_
                         : *::com::fsmeeting::fsp::proto::common::StreamServer::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* GetSuperiorStreamServerRsp::mutable_stream_server() {
  
  if (stream_server_ == NULL) {
    _slow_mutable_stream_server();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
  return stream_server_;
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* GetSuperiorStreamServerRsp::release_stream_server() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stream_server();
  } else {
    ::com::fsmeeting::fsp::proto::common::StreamServer* temp = stream_server_;
    stream_server_ = NULL;
    return temp;
  }
}
inline  void GetSuperiorStreamServerRsp::set_allocated_stream_server(::com::fsmeeting::fsp::proto::common::StreamServer* stream_server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stream_server_;
  }
  if (stream_server != NULL) {
    _slow_set_allocated_stream_server(message_arena, &stream_server);
  }
  stream_server_ = stream_server;
  if (stream_server) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.stream_server)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
inline bool GetSuperiorStreamServerRsp::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void GetSuperiorStreamServerRsp::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& GetSuperiorStreamServerRsp::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServerRsp::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetSuperiorStreamServerRsp::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void GetSuperiorStreamServerRsp::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetSuperiorStreamServerRsp.commonInvokeInfo)
}

// -------------------------------------------------------------------

// ChannelConnected

// string client_id = 1;
inline void ChannelConnected::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ChannelConnected::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
  return client_id_.Get();
}
inline void ChannelConnected::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}
inline void ChannelConnected::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}
inline void ChannelConnected::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}
inline ::std::string* ChannelConnected::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelConnected::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelConnected::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ChannelConnected::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}
inline void ChannelConnected::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.client_id)
}

// string service_instance_id = 2;
inline void ChannelConnected::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ChannelConnected::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
  return service_instance_id_.Get();
}
inline void ChannelConnected::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}
inline void ChannelConnected::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}
inline void ChannelConnected::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}
inline ::std::string* ChannelConnected::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelConnected::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelConnected::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ChannelConnected::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}
inline void ChannelConnected::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.service_instance_id)
}

// string stream_id = 3;
inline void ChannelConnected::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ChannelConnected::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
  return stream_id_.Get();
}
inline void ChannelConnected::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}
inline void ChannelConnected::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}
inline void ChannelConnected::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}
inline ::std::string* ChannelConnected::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelConnected::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelConnected::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ChannelConnected::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}
inline void ChannelConnected::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.stream_id)
}

// .com.fsmeeting.fsp.proto.common.DataDirection direction = 4;
inline void ChannelConnected::clear_direction() {
  direction_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::DataDirection ChannelConnected::direction() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.direction)
  return static_cast< ::com::fsmeeting::fsp::proto::common::DataDirection >(direction_);
}
inline void ChannelConnected::set_direction(::com::fsmeeting::fsp::proto::common::DataDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected.direction)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
inline bool ChannelConnected::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void ChannelConnected::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& ChannelConnected::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ChannelConnected::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* ChannelConnected::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void ChannelConnected::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected.commonInvokeInfo)
}

// -------------------------------------------------------------------

// ChannelConnectedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool ChannelConnectedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void ChannelConnectedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& ChannelConnectedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnectedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnectedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void ChannelConnectedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.response)
}

// .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
inline void ChannelConnectedRsp::clear_channel_type() {
  channel_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::ChannelType ChannelConnectedRsp::channel_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.channel_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ChannelType >(channel_type_);
}
inline void ChannelConnectedRsp::set_channel_type(::com::fsmeeting::fsp::proto::common::ChannelType value) {
  
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnectedRsp.channel_type)
}

// -------------------------------------------------------------------

// ChannelConnected2Rsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool ChannelConnected2Rsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void ChannelConnected2Rsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& ChannelConnected2Rsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnected2Rsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelConnected2Rsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void ChannelConnected2Rsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.response)
}

// .com.fsmeeting.fsp.proto.common.ChannelType channel_type = 2;
inline void ChannelConnected2Rsp::clear_channel_type() {
  channel_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::ChannelType ChannelConnected2Rsp::channel_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.channel_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ChannelType >(channel_type_);
}
inline void ChannelConnected2Rsp::set_channel_type(::com::fsmeeting::fsp::proto::common::ChannelType value) {
  
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.channel_type)
}

// .com.fsmeeting.fsp.proto.common.Stream stream = 3;
inline bool ChannelConnected2Rsp::has_stream() const {
  return this != internal_default_instance() && stream_ != NULL;
}
inline void ChannelConnected2Rsp::clear_stream() {
  if (GetArenaNoVirtual() == NULL && stream_ != NULL) delete stream_;
  stream_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::Stream& ChannelConnected2Rsp::stream() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
  return stream_ != NULL ? *stream_
                         : *::com::fsmeeting::fsp::proto::common::Stream::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::Stream* ChannelConnected2Rsp::mutable_stream() {
  
  if (stream_ == NULL) {
    _slow_mutable_stream();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
  return stream_;
}
inline ::com::fsmeeting::fsp::proto::common::Stream* ChannelConnected2Rsp::release_stream() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stream();
  } else {
    ::com::fsmeeting::fsp::proto::common::Stream* temp = stream_;
    stream_ = NULL;
    return temp;
  }
}
inline  void ChannelConnected2Rsp::set_allocated_stream(::com::fsmeeting::fsp::proto::common::Stream* stream) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stream_;
  }
  if (stream != NULL) {
    _slow_set_allocated_stream(message_arena, &stream);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelConnected2Rsp.stream)
}

// -------------------------------------------------------------------

// ChannelDisconnected

// string client_id = 1;
inline void ChannelDisconnected::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ChannelDisconnected::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
  return client_id_.Get();
}
inline void ChannelDisconnected::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}
inline void ChannelDisconnected::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}
inline void ChannelDisconnected::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}
inline ::std::string* ChannelDisconnected::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelDisconnected::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelDisconnected::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ChannelDisconnected::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}
inline void ChannelDisconnected::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.client_id)
}

// string service_instance_id = 2;
inline void ChannelDisconnected::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ChannelDisconnected::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
  return service_instance_id_.Get();
}
inline void ChannelDisconnected::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}
inline void ChannelDisconnected::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}
inline void ChannelDisconnected::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}
inline ::std::string* ChannelDisconnected::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelDisconnected::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelDisconnected::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ChannelDisconnected::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}
inline void ChannelDisconnected::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.service_instance_id)
}

// string stream_id = 3;
inline void ChannelDisconnected::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ChannelDisconnected::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
  return stream_id_.Get();
}
inline void ChannelDisconnected::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}
inline void ChannelDisconnected::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}
inline void ChannelDisconnected::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}
inline ::std::string* ChannelDisconnected::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelDisconnected::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ChannelDisconnected::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ChannelDisconnected::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}
inline void ChannelDisconnected::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnected.stream_id)
}

// -------------------------------------------------------------------

// ChannelDisconnectedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool ChannelDisconnectedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void ChannelDisconnectedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& ChannelDisconnectedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelDisconnectedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ChannelDisconnectedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void ChannelDisconnectedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.ChannelDisconnectedRsp.response)
}

// -------------------------------------------------------------------

// GetStreamType

// string stream_id = 1;
inline void GetStreamType::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamType::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
  return stream_id_.Get();
}
inline void GetStreamType::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}
inline void GetStreamType::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}
inline void GetStreamType::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}
inline ::std::string* GetStreamType::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamType::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamType::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamType::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}
inline void GetStreamType::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamType.stream_id)
}

// -------------------------------------------------------------------

// GetStreamTypeRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GetStreamTypeRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GetStreamTypeRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamTypeRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamTypeRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamTypeRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GetStreamTypeRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.response)
}

// .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
inline void GetStreamTypeRsp::clear_stream_type() {
  stream_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::StreamType GetStreamTypeRsp::stream_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.stream_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamType >(stream_type_);
}
inline void GetStreamTypeRsp::set_stream_type(::com::fsmeeting::fsp::proto::common::StreamType value) {
  
  stream_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamTypeRsp.stream_type)
}

// -------------------------------------------------------------------

// GetStreamProperty

// string stream_id = 1;
inline void GetStreamProperty::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamProperty::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
  return stream_id_.Get();
}
inline void GetStreamProperty::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}
inline void GetStreamProperty::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}
inline void GetStreamProperty::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}
inline ::std::string* GetStreamProperty::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamProperty::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamProperty::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamProperty::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}
inline void GetStreamProperty::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamProperty.stream_id)
}

// -------------------------------------------------------------------

// GetStreamPropertyRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GetStreamPropertyRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GetStreamPropertyRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamPropertyRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamPropertyRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamPropertyRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GetStreamPropertyRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.response)
}

// .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 2;
inline void GetStreamPropertyRsp::clear_stream_property() {
  stream_property_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::StreamProperty GetStreamPropertyRsp::stream_property() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.stream_property)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamProperty >(stream_property_);
}
inline void GetStreamPropertyRsp::set_stream_property(::com::fsmeeting::fsp::proto::common::StreamProperty value) {
  
  stream_property_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.sc.GetStreamPropertyRsp.stream_property)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace sc
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::sc::ProtoDictionary> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::sc::ProtoDictionary>() {
  return ::com::fsmeeting::fsp::proto::sc::ProtoDictionary_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fsp_2dsc_2eproto__INCLUDED
