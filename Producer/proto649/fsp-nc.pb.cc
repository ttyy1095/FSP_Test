// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-nc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fsp-nc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace nc {
class SelectStreamServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SelectStreamServer> {
} _SelectStreamServer_default_instance_;
class SelectStreamServerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SelectStreamServerRsp> {
} _SelectStreamServerRsp_default_instance_;
class NotifyStreamSendingStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStart> {
} _NotifyStreamSendingStart_default_instance_;
class NotifyStreamSendingStartRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStartRsp> {
} _NotifyStreamSendingStartRsp_default_instance_;
class NotifyStreamSendingStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStop> {
} _NotifyStreamSendingStop_default_instance_;
class NotifyStreamSendingStopRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStopRsp> {
} _NotifyStreamSendingStopRsp_default_instance_;
class NotifyPublishStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyPublishStream> {
} _NotifyPublishStream_default_instance_;
class NotifyPublishStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyPublishStreamRsp> {
} _NotifyPublishStreamRsp_default_instance_;

namespace protobuf_fsp_2dnc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServer, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServer, streamserver_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServerRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, recv_client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStartRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStartRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, recv_client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStopRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStopRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, stream_publish_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, media_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, media_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStreamRsp, response_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SelectStreamServer)},
  { 6, -1, sizeof(SelectStreamServerRsp)},
  { 11, -1, sizeof(NotifyStreamSendingStart)},
  { 17, -1, sizeof(NotifyStreamSendingStartRsp)},
  { 22, -1, sizeof(NotifyStreamSendingStop)},
  { 28, -1, sizeof(NotifyStreamSendingStopRsp)},
  { 33, -1, sizeof(NotifyPublishStream)},
  { 43, -1, sizeof(NotifyPublishStreamRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectStreamServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectStreamServerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStartRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStopRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyPublishStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyPublishStreamRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fsp-nc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _SelectStreamServer_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SelectStreamServerRsp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NotifyStreamSendingStart_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _NotifyStreamSendingStartRsp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _NotifyStreamSendingStop_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _NotifyStreamSendingStopRsp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _NotifyPublishStream_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _NotifyPublishStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::InitDefaults();
  _SelectStreamServer_default_instance_.DefaultConstruct();
  _SelectStreamServerRsp_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStart_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStartRsp_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStop_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStopRsp_default_instance_.DefaultConstruct();
  _NotifyPublishStream_default_instance_.DefaultConstruct();
  _NotifyPublishStreamRsp_default_instance_.DefaultConstruct();
  _SelectStreamServerRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyStreamSendingStartRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyStreamSendingStopRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyPublishStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014fsp-nc.proto\022\032com.fsmeeting.fsp.proto."
      "nc\032\020fsp-common.proto\"k\n\022SelectStreamServ"
      "er\022\021\n\tstream_id\030\001 \001(\t\022B\n\014streamServer\030\002 "
      "\003(\0132,.com.fsmeeting.fsp.proto.common.Str"
      "eamServer\"Y\n\025SelectStreamServerRsp\022@\n\010re"
      "sponse\030\001 \001(\0132..com.fsmeeting.fsp.proto.c"
      "ommon.CommonResponse\"E\n\030NotifyStreamSend"
      "ingStart\022\021\n\tstream_id\030\001 \001(\t\022\026\n\016recv_clie"
      "nt_id\030\002 \001(\t\"_\n\033NotifyStreamSendingStartR"
      "sp\022@\n\010response\030\001 \001(\0132..com.fsmeeting.fsp"
      ".proto.common.CommonResponse\"D\n\027NotifySt"
      "reamSendingStop\022\021\n\tstream_id\030\001 \001(\t\022\026\n\016re"
      "cv_client_id\030\002 \001(\t\"^\n\032NotifyStreamSendin"
      "gStopRsp\022@\n\010response\030\001 \001(\0132..com.fsmeeti"
      "ng.fsp.proto.common.CommonResponse\"\272\001\n\023N"
      "otifyPublishStream\022\021\n\tstream_id\030\001 \001(\t\022\034\n"
      "\024stream_publish_token\030\002 \001(\t\022\020\n\010group_id\030"
      "\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\022\020\n\010media_id\030\005 \001(\t"
      "\022=\n\nmedia_type\030\006 \001(\0162).com.fsmeeting.fsp"
      ".proto.common.MediaType\"Z\n\026NotifyPublish"
      "StreamRsp\022@\n\010response\030\001 \001(\0132..com.fsmeet"
      "ing.fsp.proto.common.CommonResponse*\377\002\n\017"
      "ProtoDictionary\022\031\n\025Enum2UnknownInterface"
      "\020\000\022\034\n\027Enum2SelectStreamServer\020\210\'\022\037\n\032Enum"
      "2SelectStreamServerRsp\020\211\'\022\"\n\035Enum2Notify"
      "StreamSendingStart\020\212\'\022%\n Enum2NotifyStre"
      "amSendingStartRsp\020\213\'\022!\n\034Enum2NotifyStrea"
      "mSendingStop\020\214\'\022$\n\037Enum2NotifyStreamSend"
      "ingStopRsp\020\215\'\022\035\n\030Enum2NotifyPublishStrea"
      "m\020\216\'\022 \n\033Enum2NotifyPublishStreamRsp\020\217\'\022\034"
      "\n\027Enum2StreamSendingStart\020\220\'\022\037\n\032Enum2Str"
      "eamSendingStartRsp\020\221\'B\'\n\032com.fsmeeting.f"
      "sp.proto.ncP\001\370\001\001\242\002\003GPBb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsp-nc.proto", &protobuf_RegisterTypes);
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fsp_2dnc_2eproto

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor() {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_enum_descriptors[0];
}
bool ProtoDictionary_IsValid(int value) {
  switch (value) {
    case 0:
    case 5000:
    case 5001:
    case 5002:
    case 5003:
    case 5004:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5009:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectStreamServer::kStreamIdFieldNumber;
const int SelectStreamServer::kStreamServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectStreamServer::SelectStreamServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dnc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
}
SelectStreamServer::SelectStreamServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  streamserver_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dnc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
}
SelectStreamServer::SelectStreamServer(const SelectStreamServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      streamserver_(from.streamserver_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
}

void SelectStreamServer::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SelectStreamServer::~SelectStreamServer() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  SharedDtor();
}

void SelectStreamServer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SelectStreamServer::ArenaDtor(void* object) {
  SelectStreamServer* _this = reinterpret_cast< SelectStreamServer* >(object);
  (void)_this;
}
void SelectStreamServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SelectStreamServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectStreamServer::descriptor() {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[0].descriptor;
}

const SelectStreamServer& SelectStreamServer::default_instance() {
  protobuf_fsp_2dnc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectStreamServer* SelectStreamServer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SelectStreamServer>(arena);
}

void SelectStreamServer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  streamserver_.Clear();
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SelectStreamServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServer = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_streamserver()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  return false;
#undef DO_
}

void SelectStreamServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServer = 2;
  for (unsigned int i = 0, n = this->streamserver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->streamserver(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
}

::google::protobuf::uint8* SelectStreamServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServer = 2;
  for (unsigned int i = 0, n = this->streamserver_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->streamserver(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  return target;
}

size_t SelectStreamServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  size_t total_size = 0;

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServer = 2;
  {
    unsigned int count = this->streamserver_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streamserver(i));
    }
  }

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectStreamServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectStreamServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectStreamServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
    MergeFrom(*source);
  }
}

void SelectStreamServer::MergeFrom(const SelectStreamServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  streamserver_.MergeFrom(from.streamserver_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
}

void SelectStreamServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectStreamServer::CopyFrom(const SelectStreamServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectStreamServer::IsInitialized() const {
  return true;
}

void SelectStreamServer::Swap(SelectStreamServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SelectStreamServer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SelectStreamServer::UnsafeArenaSwap(SelectStreamServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SelectStreamServer::InternalSwap(SelectStreamServer* other) {
  streamserver_.UnsafeArenaSwap(&other->streamserver_);
  stream_id_.Swap(&other->stream_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectStreamServer::GetMetadata() const {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectStreamServer

// string stream_id = 1;
void SelectStreamServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SelectStreamServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
  return stream_id_.Get();
}
void SelectStreamServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}
void SelectStreamServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}
void SelectStreamServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}
::std::string* SelectStreamServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SelectStreamServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SelectStreamServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SelectStreamServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}
void SelectStreamServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}

// repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServer = 2;
int SelectStreamServer::streamserver_size() const {
  return streamserver_.size();
}
void SelectStreamServer::clear_streamserver() {
  streamserver_.Clear();
}
const ::com::fsmeeting::fsp::proto::common::StreamServer& SelectStreamServer::streamserver(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return streamserver_.Get(index);
}
::com::fsmeeting::fsp::proto::common::StreamServer* SelectStreamServer::mutable_streamserver(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return streamserver_.Mutable(index);
}
::com::fsmeeting::fsp::proto::common::StreamServer* SelectStreamServer::add_streamserver() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return streamserver_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
SelectStreamServer::mutable_streamserver() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return &streamserver_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
SelectStreamServer::streamserver() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return streamserver_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SelectStreamServerRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void SelectStreamServerRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void SelectStreamServerRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectStreamServerRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectStreamServerRsp::SelectStreamServerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dnc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
}
SelectStreamServerRsp::SelectStreamServerRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dnc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
}
SelectStreamServerRsp::SelectStreamServerRsp(const SelectStreamServerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
}

void SelectStreamServerRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

SelectStreamServerRsp::~SelectStreamServerRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  SharedDtor();
}

void SelectStreamServerRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void SelectStreamServerRsp::ArenaDtor(void* object) {
  SelectStreamServerRsp* _this = reinterpret_cast< SelectStreamServerRsp* >(object);
  (void)_this;
}
void SelectStreamServerRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SelectStreamServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectStreamServerRsp::descriptor() {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[1].descriptor;
}

const SelectStreamServerRsp& SelectStreamServerRsp::default_instance() {
  protobuf_fsp_2dnc_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectStreamServerRsp* SelectStreamServerRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SelectStreamServerRsp>(arena);
}

void SelectStreamServerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool SelectStreamServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  return false;
#undef DO_
}

void SelectStreamServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
}

::google::protobuf::uint8* SelectStreamServerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  return target;
}

size_t SelectStreamServerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectStreamServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectStreamServerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectStreamServerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
    MergeFrom(*source);
  }
}

void SelectStreamServerRsp::MergeFrom(const SelectStreamServerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void SelectStreamServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectStreamServerRsp::CopyFrom(const SelectStreamServerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectStreamServerRsp::IsInitialized() const {
  return true;
}

void SelectStreamServerRsp::Swap(SelectStreamServerRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SelectStreamServerRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SelectStreamServerRsp::UnsafeArenaSwap(SelectStreamServerRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SelectStreamServerRsp::InternalSwap(SelectStreamServerRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectStreamServerRsp::GetMetadata() const {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectStreamServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool SelectStreamServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void SelectStreamServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& SelectStreamServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void SelectStreamServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStart::kStreamIdFieldNumber;
const int NotifyStreamSendingStart::kRecvClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStart::NotifyStreamSendingStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dnc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
}
NotifyStreamSendingStart::NotifyStreamSendingStart(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dnc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
}
NotifyStreamSendingStart::NotifyStreamSendingStart(const NotifyStreamSendingStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_client_id().size() > 0) {
    recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_client_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
}

void NotifyStreamSendingStart::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NotifyStreamSendingStart::~NotifyStreamSendingStart() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  SharedDtor();
}

void NotifyStreamSendingStart::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  recv_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NotifyStreamSendingStart::ArenaDtor(void* object) {
  NotifyStreamSendingStart* _this = reinterpret_cast< NotifyStreamSendingStart* >(object);
  (void)_this;
}
void NotifyStreamSendingStart::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStart::descriptor() {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[2].descriptor;
}

const NotifyStreamSendingStart& NotifyStreamSendingStart::default_instance() {
  protobuf_fsp_2dnc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStart* NotifyStreamSendingStart::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStart>(arena);
}

void NotifyStreamSendingStart::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool NotifyStreamSendingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recv_client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_client_id().data(), this->recv_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  return false;
#undef DO_
}

void NotifyStreamSendingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recv_client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
}

::google::protobuf::uint8* NotifyStreamSendingStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recv_client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  return target;
}

size_t NotifyStreamSendingStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStart::MergeFrom(const NotifyStreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.recv_client_id().size() > 0) {
    set_recv_client_id(from.recv_client_id());
  }
}

void NotifyStreamSendingStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStart::CopyFrom(const NotifyStreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStart::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStart::Swap(NotifyStreamSendingStart* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStart* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStart::UnsafeArenaSwap(NotifyStreamSendingStart* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStart::InternalSwap(NotifyStreamSendingStart* other) {
  stream_id_.Swap(&other->stream_id_);
  recv_client_id_.Swap(&other->recv_client_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStart::GetMetadata() const {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStart

// string stream_id = 1;
void NotifyStreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
  return stream_id_.Get();
}
void NotifyStreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}
void NotifyStreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}
void NotifyStreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}
::std::string* NotifyStreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}
void NotifyStreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}

// string recv_client_id = 2;
void NotifyStreamSendingStart::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStart::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Get();
}
void NotifyStreamSendingStart::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}
void NotifyStreamSendingStart::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}
void NotifyStreamSendingStart::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}
::std::string* NotifyStreamSendingStart::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStart::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}
void NotifyStreamSendingStart::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamSendingStartRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyStreamSendingStartRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyStreamSendingStartRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStartRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStartRsp::NotifyStreamSendingStartRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dnc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
}
NotifyStreamSendingStartRsp::NotifyStreamSendingStartRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dnc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
}
NotifyStreamSendingStartRsp::NotifyStreamSendingStartRsp(const NotifyStreamSendingStartRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
}

void NotifyStreamSendingStartRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamSendingStartRsp::~NotifyStreamSendingStartRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  SharedDtor();
}

void NotifyStreamSendingStartRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyStreamSendingStartRsp::ArenaDtor(void* object) {
  NotifyStreamSendingStartRsp* _this = reinterpret_cast< NotifyStreamSendingStartRsp* >(object);
  (void)_this;
}
void NotifyStreamSendingStartRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStartRsp::descriptor() {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[3].descriptor;
}

const NotifyStreamSendingStartRsp& NotifyStreamSendingStartRsp::default_instance() {
  protobuf_fsp_2dnc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStartRsp* NotifyStreamSendingStartRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStartRsp>(arena);
}

void NotifyStreamSendingStartRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyStreamSendingStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  return false;
#undef DO_
}

void NotifyStreamSendingStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
}

::google::protobuf::uint8* NotifyStreamSendingStartRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  return target;
}

size_t NotifyStreamSendingStartRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStartRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStartRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStartRsp::MergeFrom(const NotifyStreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyStreamSendingStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStartRsp::CopyFrom(const NotifyStreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStartRsp::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStartRsp::Swap(NotifyStreamSendingStartRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStartRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStartRsp::UnsafeArenaSwap(NotifyStreamSendingStartRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStartRsp::InternalSwap(NotifyStreamSendingStartRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStartRsp::GetMetadata() const {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyStreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyStreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyStreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStop::kStreamIdFieldNumber;
const int NotifyStreamSendingStop::kRecvClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStop::NotifyStreamSendingStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dnc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
}
NotifyStreamSendingStop::NotifyStreamSendingStop(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dnc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
}
NotifyStreamSendingStop::NotifyStreamSendingStop(const NotifyStreamSendingStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_client_id().size() > 0) {
    recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_client_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
}

void NotifyStreamSendingStop::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NotifyStreamSendingStop::~NotifyStreamSendingStop() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  SharedDtor();
}

void NotifyStreamSendingStop::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  recv_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NotifyStreamSendingStop::ArenaDtor(void* object) {
  NotifyStreamSendingStop* _this = reinterpret_cast< NotifyStreamSendingStop* >(object);
  (void)_this;
}
void NotifyStreamSendingStop::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStop::descriptor() {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[4].descriptor;
}

const NotifyStreamSendingStop& NotifyStreamSendingStop::default_instance() {
  protobuf_fsp_2dnc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStop* NotifyStreamSendingStop::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStop>(arena);
}

void NotifyStreamSendingStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool NotifyStreamSendingStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recv_client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_client_id().data(), this->recv_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  return false;
#undef DO_
}

void NotifyStreamSendingStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recv_client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
}

::google::protobuf::uint8* NotifyStreamSendingStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recv_client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  return target;
}

size_t NotifyStreamSendingStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStop::MergeFrom(const NotifyStreamSendingStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.recv_client_id().size() > 0) {
    set_recv_client_id(from.recv_client_id());
  }
}

void NotifyStreamSendingStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStop::CopyFrom(const NotifyStreamSendingStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStop::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStop::Swap(NotifyStreamSendingStop* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStop* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStop::UnsafeArenaSwap(NotifyStreamSendingStop* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStop::InternalSwap(NotifyStreamSendingStop* other) {
  stream_id_.Swap(&other->stream_id_);
  recv_client_id_.Swap(&other->recv_client_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStop::GetMetadata() const {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStop

// string stream_id = 1;
void NotifyStreamSendingStop::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStop::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
  return stream_id_.Get();
}
void NotifyStreamSendingStop::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}
void NotifyStreamSendingStop::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}
void NotifyStreamSendingStop::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}
::std::string* NotifyStreamSendingStop::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStop::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}
void NotifyStreamSendingStop::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}

// string recv_client_id = 2;
void NotifyStreamSendingStop::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStop::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Get();
}
void NotifyStreamSendingStop::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}
void NotifyStreamSendingStop::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}
void NotifyStreamSendingStop::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}
::std::string* NotifyStreamSendingStop::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStop::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}
void NotifyStreamSendingStop::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamSendingStopRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyStreamSendingStopRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyStreamSendingStopRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStopRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStopRsp::NotifyStreamSendingStopRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dnc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
}
NotifyStreamSendingStopRsp::NotifyStreamSendingStopRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dnc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
}
NotifyStreamSendingStopRsp::NotifyStreamSendingStopRsp(const NotifyStreamSendingStopRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
}

void NotifyStreamSendingStopRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamSendingStopRsp::~NotifyStreamSendingStopRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  SharedDtor();
}

void NotifyStreamSendingStopRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyStreamSendingStopRsp::ArenaDtor(void* object) {
  NotifyStreamSendingStopRsp* _this = reinterpret_cast< NotifyStreamSendingStopRsp* >(object);
  (void)_this;
}
void NotifyStreamSendingStopRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStopRsp::descriptor() {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[5].descriptor;
}

const NotifyStreamSendingStopRsp& NotifyStreamSendingStopRsp::default_instance() {
  protobuf_fsp_2dnc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStopRsp* NotifyStreamSendingStopRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStopRsp>(arena);
}

void NotifyStreamSendingStopRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyStreamSendingStopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  return false;
#undef DO_
}

void NotifyStreamSendingStopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
}

::google::protobuf::uint8* NotifyStreamSendingStopRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  return target;
}

size_t NotifyStreamSendingStopRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStopRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStopRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStopRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStopRsp::MergeFrom(const NotifyStreamSendingStopRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyStreamSendingStopRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStopRsp::CopyFrom(const NotifyStreamSendingStopRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStopRsp::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStopRsp::Swap(NotifyStreamSendingStopRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStopRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStopRsp::UnsafeArenaSwap(NotifyStreamSendingStopRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStopRsp::InternalSwap(NotifyStreamSendingStopRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStopRsp::GetMetadata() const {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyStreamSendingStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyStreamSendingStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyStreamSendingStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyPublishStream::kStreamIdFieldNumber;
const int NotifyPublishStream::kStreamPublishTokenFieldNumber;
const int NotifyPublishStream::kGroupIdFieldNumber;
const int NotifyPublishStream::kUserIdFieldNumber;
const int NotifyPublishStream::kMediaIdFieldNumber;
const int NotifyPublishStream::kMediaTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyPublishStream::NotifyPublishStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dnc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
}
NotifyPublishStream::NotifyPublishStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dnc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
}
NotifyPublishStream::NotifyPublishStream(const NotifyPublishStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_publish_token().size() > 0) {
    stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_publish_token(),
      GetArenaNoVirtual());
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.media_id().size() > 0) {
    media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_id(),
      GetArenaNoVirtual());
  }
  media_type_ = from.media_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
}

void NotifyPublishStream::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  _cached_size_ = 0;
}

NotifyPublishStream::~NotifyPublishStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  SharedDtor();
}

void NotifyPublishStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_publish_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  media_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NotifyPublishStream::ArenaDtor(void* object) {
  NotifyPublishStream* _this = reinterpret_cast< NotifyPublishStream* >(object);
  (void)_this;
}
void NotifyPublishStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyPublishStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPublishStream::descriptor() {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[6].descriptor;
}

const NotifyPublishStream& NotifyPublishStream::default_instance() {
  protobuf_fsp_2dnc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyPublishStream* NotifyPublishStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyPublishStream>(arena);
}

void NotifyPublishStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_type_ = 0;
}

bool NotifyPublishStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_publish_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_publish_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_publish_token().data(), this->stream_publish_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_media_type(static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  return false;
#undef DO_
}

void NotifyPublishStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_publish_token(), output);
  }

  // string group_id = 3;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_id(), output);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // string media_id = 5;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->media_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->media_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
}

::google::protobuf::uint8* NotifyPublishStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_publish_token(), target);
  }

  // string group_id = 3;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_id(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // string media_id = 5;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->media_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->media_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  return target;
}

size_t NotifyPublishStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_publish_token());
  }

  // string group_id = 3;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string media_id = 5;
  if (this->media_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_id());
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPublishStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyPublishStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyPublishStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
    MergeFrom(*source);
  }
}

void NotifyPublishStream::MergeFrom(const NotifyPublishStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.stream_publish_token().size() > 0) {
    set_stream_publish_token(from.stream_publish_token());
  }
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.media_id().size() > 0) {
    set_media_id(from.media_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void NotifyPublishStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPublishStream::CopyFrom(const NotifyPublishStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPublishStream::IsInitialized() const {
  return true;
}

void NotifyPublishStream::Swap(NotifyPublishStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyPublishStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyPublishStream::UnsafeArenaSwap(NotifyPublishStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyPublishStream::InternalSwap(NotifyPublishStream* other) {
  stream_id_.Swap(&other->stream_id_);
  stream_publish_token_.Swap(&other->stream_publish_token_);
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  media_id_.Swap(&other->media_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyPublishStream::GetMetadata() const {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyPublishStream

// string stream_id = 1;
void NotifyPublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
  return stream_id_.Get();
}
void NotifyPublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}
void NotifyPublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}
void NotifyPublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}
::std::string* NotifyPublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}
void NotifyPublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}

// string stream_publish_token = 2;
void NotifyPublishStream::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
  return stream_publish_token_.Get();
}
void NotifyPublishStream::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}
void NotifyPublishStream::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}
void NotifyPublishStream::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}
::std::string* NotifyPublishStream::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}
void NotifyPublishStream::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}

// string group_id = 3;
void NotifyPublishStream::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
  return group_id_.Get();
}
void NotifyPublishStream::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}
void NotifyPublishStream::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}
void NotifyPublishStream::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}
::std::string* NotifyPublishStream::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}
void NotifyPublishStream::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}

// string user_id = 4;
void NotifyPublishStream::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
  return user_id_.Get();
}
void NotifyPublishStream::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}
void NotifyPublishStream::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}
void NotifyPublishStream::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}
::std::string* NotifyPublishStream::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}
void NotifyPublishStream::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}

// string media_id = 5;
void NotifyPublishStream::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
  return media_id_.Get();
}
void NotifyPublishStream::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}
void NotifyPublishStream::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}
void NotifyPublishStream::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}
::std::string* NotifyPublishStream::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}
void NotifyPublishStream::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
void NotifyPublishStream::clear_media_type() {
  media_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::MediaType NotifyPublishStream::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
void NotifyPublishStream::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyPublishStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyPublishStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyPublishStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyPublishStreamRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyPublishStreamRsp::NotifyPublishStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dnc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
}
NotifyPublishStreamRsp::NotifyPublishStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dnc_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
}
NotifyPublishStreamRsp::NotifyPublishStreamRsp(const NotifyPublishStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
}

void NotifyPublishStreamRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyPublishStreamRsp::~NotifyPublishStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  SharedDtor();
}

void NotifyPublishStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyPublishStreamRsp::ArenaDtor(void* object) {
  NotifyPublishStreamRsp* _this = reinterpret_cast< NotifyPublishStreamRsp* >(object);
  (void)_this;
}
void NotifyPublishStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyPublishStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPublishStreamRsp::descriptor() {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[7].descriptor;
}

const NotifyPublishStreamRsp& NotifyPublishStreamRsp::default_instance() {
  protobuf_fsp_2dnc_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyPublishStreamRsp* NotifyPublishStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyPublishStreamRsp>(arena);
}

void NotifyPublishStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyPublishStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  return false;
#undef DO_
}

void NotifyPublishStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
}

::google::protobuf::uint8* NotifyPublishStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  return target;
}

size_t NotifyPublishStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPublishStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyPublishStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyPublishStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
    MergeFrom(*source);
  }
}

void NotifyPublishStreamRsp::MergeFrom(const NotifyPublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyPublishStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPublishStreamRsp::CopyFrom(const NotifyPublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPublishStreamRsp::IsInitialized() const {
  return true;
}

void NotifyPublishStreamRsp::Swap(NotifyPublishStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyPublishStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyPublishStreamRsp::UnsafeArenaSwap(NotifyPublishStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyPublishStreamRsp::InternalSwap(NotifyPublishStreamRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyPublishStreamRsp::GetMetadata() const {
  protobuf_fsp_2dnc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dnc_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyPublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyPublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyPublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyPublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyPublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace nc
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

// @@protoc_insertion_point(global_scope)
