// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-rule.proto

#ifndef PROTOBUF_fsp_2drule_2eproto__INCLUDED
#define PROTOBUF_fsp_2drule_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fsp-common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class BillInfo;
class BillInfoDefaultTypeInternal;
extern BillInfoDefaultTypeInternal _BillInfo_default_instance_;
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class CommonInfo;
class CommonInfoDefaultTypeInternal;
extern CommonInfoDefaultTypeInternal _CommonInfo_default_instance_;
class CommonInvokeInfo;
class CommonInvokeInfoDefaultTypeInternal;
extern CommonInvokeInfoDefaultTypeInternal _CommonInvokeInfo_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupServer;
class GroupServerDefaultTypeInternal;
extern GroupServerDefaultTypeInternal _GroupServer_default_instance_;
class NotifyStreamDestroied;
class NotifyStreamDestroiedDefaultTypeInternal;
extern NotifyStreamDestroiedDefaultTypeInternal _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRsp;
class NotifyStreamDestroiedRspDefaultTypeInternal;
extern NotifyStreamDestroiedRspDefaultTypeInternal _NotifyStreamDestroiedRsp_default_instance_;
class Proxy;
class ProxyDefaultTypeInternal;
extern ProxyDefaultTypeInternal _Proxy_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamServer;
class StreamServerDefaultTypeInternal;
extern StreamServerDefaultTypeInternal _StreamServer_default_instance_;
class StreamSourceChanged;
class StreamSourceChangedDefaultTypeInternal;
extern StreamSourceChangedDefaultTypeInternal _StreamSourceChanged_default_instance_;
class StreamSourceChangedRsp;
class StreamSourceChangedRspDefaultTypeInternal;
extern StreamSourceChangedRspDefaultTypeInternal _StreamSourceChangedRsp_default_instance_;
}  // namespace common
namespace rule {
class GetMediaServer;
class GetMediaServerDefaultTypeInternal;
extern GetMediaServerDefaultTypeInternal _GetMediaServer_default_instance_;
class GetMediaServerRsp;
class GetMediaServerRspDefaultTypeInternal;
extern GetMediaServerRspDefaultTypeInternal _GetMediaServerRsp_default_instance_;
class RuleSelect;
class RuleSelectDefaultTypeInternal;
extern RuleSelectDefaultTypeInternal _RuleSelect_default_instance_;
class RuleSelectRsp;
class RuleSelectRspDefaultTypeInternal;
extern RuleSelectRspDefaultTypeInternal _RuleSelectRsp_default_instance_;
}  // namespace rule
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace rule {

namespace protobuf_fsp_2drule_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fsp_2drule_2eproto

enum ProtoDictionary {
  Enum2UnknownInterface = 0,
  Enum2GetMediaServer = 9000,
  Enum2GetMediaServerRsp = 9001,
  Enum2RuleSelection = 9002,
  Enum2RuleSelectionRsp = 9003,
  Enum2GetVNCServer = 9004,
  Enum2GetVNCServerRsp = 9005,
  ProtoDictionary_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoDictionary_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoDictionary_IsValid(int value);
const ProtoDictionary ProtoDictionary_MIN = Enum2UnknownInterface;
const ProtoDictionary ProtoDictionary_MAX = Enum2GetVNCServerRsp;
const int ProtoDictionary_ARRAYSIZE = ProtoDictionary_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor();
inline const ::std::string& ProtoDictionary_Name(ProtoDictionary value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDictionary_descriptor(), value);
}
inline bool ProtoDictionary_Parse(
    const ::std::string& name, ProtoDictionary* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDictionary>(
    ProtoDictionary_descriptor(), name, value);
}
// ===================================================================

class GetMediaServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.rule.GetMediaServer) */ {
 public:
  GetMediaServer();
  virtual ~GetMediaServer();

  GetMediaServer(const GetMediaServer& from);

  inline GetMediaServer& operator=(const GetMediaServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMediaServer& default_instance();

  static inline const GetMediaServer* internal_default_instance() {
    return reinterpret_cast<const GetMediaServer*>(
               &_GetMediaServer_default_instance_);
  }

  void UnsafeArenaSwap(GetMediaServer* other);
  void Swap(GetMediaServer* other);

  // implements Message ----------------------------------------------

  inline GetMediaServer* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMediaServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMediaServer& from);
  void MergeFrom(const GetMediaServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMediaServer* other);
  protected:
  explicit GetMediaServer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_ip = 1;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 1;
  const ::std::string& client_ip() const;
  void set_client_ip(const ::std::string& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  ::std::string* mutable_client_ip();
  ::std::string* release_client_ip();
  void set_allocated_client_ip(::std::string* client_ip);
  ::std::string* unsafe_arena_release_client_ip();
  void unsafe_arena_set_allocated_client_ip(
      ::std::string* client_ip);

  // string server_type = 2;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 2;
  const ::std::string& server_type() const;
  void set_server_type(const ::std::string& value);
  void set_server_type(const char* value);
  void set_server_type(const char* value, size_t size);
  ::std::string* mutable_server_type();
  ::std::string* release_server_type();
  void set_allocated_server_type(::std::string* server_type);
  ::std::string* unsafe_arena_release_server_type();
  void unsafe_arena_set_allocated_server_type(
      ::std::string* server_type);

  // string group_id = 3;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string app_id = 5;
  void clear_app_id();
  static const int kAppIdFieldNumber = 5;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // string company_id = 6;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 6;
  const ::std::string& company_id() const;
  void set_company_id(const ::std::string& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  ::std::string* mutable_company_id();
  ::std::string* release_company_id();
  void set_allocated_company_id(::std::string* company_id);
  ::std::string* unsafe_arena_release_company_id();
  void unsafe_arena_set_allocated_company_id(
      ::std::string* company_id);

  // string room_id = 7;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 7;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);
  ::std::string* unsafe_arena_release_room_id();
  void unsafe_arena_set_allocated_room_id(
      ::std::string* room_id);

  // int32 media_type = 8;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 8;
  ::google::protobuf::int32 media_type() const;
  void set_media_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.rule.GetMediaServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_ip_;
  ::google::protobuf::internal::ArenaStringPtr server_type_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr company_id_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::int32 media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2drule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMediaServerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp) */ {
 public:
  GetMediaServerRsp();
  virtual ~GetMediaServerRsp();

  GetMediaServerRsp(const GetMediaServerRsp& from);

  inline GetMediaServerRsp& operator=(const GetMediaServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMediaServerRsp& default_instance();

  static inline const GetMediaServerRsp* internal_default_instance() {
    return reinterpret_cast<const GetMediaServerRsp*>(
               &_GetMediaServerRsp_default_instance_);
  }

  void UnsafeArenaSwap(GetMediaServerRsp* other);
  void Swap(GetMediaServerRsp* other);

  // implements Message ----------------------------------------------

  inline GetMediaServerRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetMediaServerRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetMediaServerRsp& from);
  void MergeFrom(const GetMediaServerRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetMediaServerRsp* other);
  protected:
  explicit GetMediaServerRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string mediaServers = 2;
  int mediaservers_size() const;
  void clear_mediaservers();
  static const int kMediaServersFieldNumber = 2;
  const ::std::string& mediaservers(int index) const;
  ::std::string* mutable_mediaservers(int index);
  void set_mediaservers(int index, const ::std::string& value);
  void set_mediaservers(int index, const char* value);
  void set_mediaservers(int index, const char* value, size_t size);
  ::std::string* add_mediaservers();
  void add_mediaservers(const ::std::string& value);
  void add_mediaservers(const char* value);
  void add_mediaservers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mediaservers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mediaservers();

  // repeated string mediaServerAddrs = 3;
  int mediaserveraddrs_size() const;
  void clear_mediaserveraddrs();
  static const int kMediaServerAddrsFieldNumber = 3;
  const ::std::string& mediaserveraddrs(int index) const;
  ::std::string* mutable_mediaserveraddrs(int index);
  void set_mediaserveraddrs(int index, const ::std::string& value);
  void set_mediaserveraddrs(int index, const char* value);
  void set_mediaserveraddrs(int index, const char* value, size_t size);
  ::std::string* add_mediaserveraddrs();
  void add_mediaserveraddrs(const ::std::string& value);
  void add_mediaserveraddrs(const char* value);
  void add_mediaserveraddrs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mediaserveraddrs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mediaserveraddrs();

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mediaservers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mediaserveraddrs_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2drule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuleSelect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.rule.RuleSelect) */ {
 public:
  RuleSelect();
  virtual ~RuleSelect();

  RuleSelect(const RuleSelect& from);

  inline RuleSelect& operator=(const RuleSelect& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RuleSelect& default_instance();

  static inline const RuleSelect* internal_default_instance() {
    return reinterpret_cast<const RuleSelect*>(
               &_RuleSelect_default_instance_);
  }

  void UnsafeArenaSwap(RuleSelect* other);
  void Swap(RuleSelect* other);

  // implements Message ----------------------------------------------

  inline RuleSelect* New() const PROTOBUF_FINAL { return New(NULL); }

  RuleSelect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuleSelect& from);
  void MergeFrom(const RuleSelect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuleSelect* other);
  protected:
  explicit RuleSelect(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string sourceInstance = 2;
  void clear_sourceinstance();
  static const int kSourceInstanceFieldNumber = 2;
  const ::std::string& sourceinstance() const;
  void set_sourceinstance(const ::std::string& value);
  void set_sourceinstance(const char* value);
  void set_sourceinstance(const char* value, size_t size);
  ::std::string* mutable_sourceinstance();
  ::std::string* release_sourceinstance();
  void set_allocated_sourceinstance(::std::string* sourceinstance);
  ::std::string* unsafe_arena_release_sourceinstance();
  void unsafe_arena_set_allocated_sourceinstance(
      ::std::string* sourceinstance);

  // string instance = 3;
  void clear_instance();
  static const int kInstanceFieldNumber = 3;
  const ::std::string& instance() const;
  void set_instance(const ::std::string& value);
  void set_instance(const char* value);
  void set_instance(const char* value, size_t size);
  ::std::string* mutable_instance();
  ::std::string* release_instance();
  void set_allocated_instance(::std::string* instance);
  ::std::string* unsafe_arena_release_instance();
  void unsafe_arena_set_allocated_instance(
      ::std::string* instance);

  // string type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);
  ::std::string* unsafe_arena_release_type();
  void unsafe_arena_set_allocated_type(
      ::std::string* type);

  // string room_id = 5;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 5;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);
  ::std::string* unsafe_arena_release_room_id();
  void unsafe_arena_set_allocated_room_id(
      ::std::string* room_id);

  // string company_id = 6;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 6;
  const ::std::string& company_id() const;
  void set_company_id(const ::std::string& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  ::std::string* mutable_company_id();
  ::std::string* release_company_id();
  void set_allocated_company_id(::std::string* company_id);
  ::std::string* unsafe_arena_release_company_id();
  void unsafe_arena_set_allocated_company_id(
      ::std::string* company_id);

  // string app_id = 7;
  void clear_app_id();
  static const int kAppIdFieldNumber = 7;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // int32 media_type = 8;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 8;
  ::google::protobuf::int32 media_type() const;
  void set_media_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.rule.RuleSelect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr sourceinstance_;
  ::google::protobuf::internal::ArenaStringPtr instance_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::internal::ArenaStringPtr company_id_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::int32 media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2drule_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuleSelectRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.rule.RuleSelectRsp) */ {
 public:
  RuleSelectRsp();
  virtual ~RuleSelectRsp();

  RuleSelectRsp(const RuleSelectRsp& from);

  inline RuleSelectRsp& operator=(const RuleSelectRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RuleSelectRsp& default_instance();

  static inline const RuleSelectRsp* internal_default_instance() {
    return reinterpret_cast<const RuleSelectRsp*>(
               &_RuleSelectRsp_default_instance_);
  }

  void UnsafeArenaSwap(RuleSelectRsp* other);
  void Swap(RuleSelectRsp* other);

  // implements Message ----------------------------------------------

  inline RuleSelectRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  RuleSelectRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuleSelectRsp& from);
  void MergeFrom(const RuleSelectRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuleSelectRsp* other);
  protected:
  explicit RuleSelectRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string instance = 2;
  void clear_instance();
  static const int kInstanceFieldNumber = 2;
  const ::std::string& instance() const;
  void set_instance(const ::std::string& value);
  void set_instance(const char* value);
  void set_instance(const char* value, size_t size);
  ::std::string* mutable_instance();
  ::std::string* release_instance();
  void set_allocated_instance(::std::string* instance);
  ::std::string* unsafe_arena_release_instance();
  void unsafe_arena_set_allocated_instance(
      ::std::string* instance);

  // string connectStr = 3;
  void clear_connectstr();
  static const int kConnectStrFieldNumber = 3;
  const ::std::string& connectstr() const;
  void set_connectstr(const ::std::string& value);
  void set_connectstr(const char* value);
  void set_connectstr(const char* value, size_t size);
  ::std::string* mutable_connectstr();
  ::std::string* release_connectstr();
  void set_allocated_connectstr(::std::string* connectstr);
  ::std::string* unsafe_arena_release_connectstr();
  void unsafe_arena_set_allocated_connectstr(
      ::std::string* connectstr);

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr instance_;
  ::google::protobuf::internal::ArenaStringPtr connectstr_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2drule_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMediaServer

// string client_ip = 1;
inline void GetMediaServer::clear_client_ip() {
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetMediaServer::client_ip() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
  return client_ip_.Get();
}
inline void GetMediaServer::set_client_ip(const ::std::string& value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}
inline void GetMediaServer::set_client_ip(const char* value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}
inline void GetMediaServer::set_client_ip(const char* value,
    size_t size) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}
inline ::std::string* GetMediaServer::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
  return client_ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::release_client_ip() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
  
  return client_ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::unsafe_arena_release_client_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetMediaServer::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}
inline void GetMediaServer::unsafe_arena_set_allocated_client_ip(
    ::std::string* client_ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}

// string server_type = 2;
inline void GetMediaServer::clear_server_type() {
  server_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetMediaServer::server_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
  return server_type_.Get();
}
inline void GetMediaServer::set_server_type(const ::std::string& value) {
  
  server_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}
inline void GetMediaServer::set_server_type(const char* value) {
  
  server_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}
inline void GetMediaServer::set_server_type(const char* value,
    size_t size) {
  
  server_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}
inline ::std::string* GetMediaServer::mutable_server_type() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
  return server_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::release_server_type() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
  
  return server_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::unsafe_arena_release_server_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return server_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetMediaServer::set_allocated_server_type(::std::string* server_type) {
  if (server_type != NULL) {
    
  } else {
    
  }
  server_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}
inline void GetMediaServer::unsafe_arena_set_allocated_server_type(
    ::std::string* server_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (server_type != NULL) {
    
  } else {
    
  }
  server_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      server_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}

// string group_id = 3;
inline void GetMediaServer::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetMediaServer::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
  return group_id_.Get();
}
inline void GetMediaServer::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}
inline void GetMediaServer::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}
inline void GetMediaServer::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}
inline ::std::string* GetMediaServer::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetMediaServer::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}
inline void GetMediaServer::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}

// string user_id = 4;
inline void GetMediaServer::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetMediaServer::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
  return user_id_.Get();
}
inline void GetMediaServer::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}
inline void GetMediaServer::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}
inline void GetMediaServer::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}
inline ::std::string* GetMediaServer::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetMediaServer::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}
inline void GetMediaServer::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}

// string app_id = 5;
inline void GetMediaServer::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetMediaServer::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
  return app_id_.Get();
}
inline void GetMediaServer::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}
inline void GetMediaServer::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}
inline void GetMediaServer::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}
inline ::std::string* GetMediaServer::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetMediaServer::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}
inline void GetMediaServer::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}

// string company_id = 6;
inline void GetMediaServer::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetMediaServer::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
  return company_id_.Get();
}
inline void GetMediaServer::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}
inline void GetMediaServer::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}
inline void GetMediaServer::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}
inline ::std::string* GetMediaServer::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetMediaServer::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}
inline void GetMediaServer::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}

// string room_id = 7;
inline void GetMediaServer::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetMediaServer::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
  return room_id_.Get();
}
inline void GetMediaServer::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}
inline void GetMediaServer::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}
inline void GetMediaServer::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}
inline ::std::string* GetMediaServer::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetMediaServer::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetMediaServer::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}
inline void GetMediaServer::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}

// int32 media_type = 8;
inline void GetMediaServer::clear_media_type() {
  media_type_ = 0;
}
inline ::google::protobuf::int32 GetMediaServer::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.media_type)
  return media_type_;
}
inline void GetMediaServer::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.media_type)
}

// -------------------------------------------------------------------

// GetMediaServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GetMediaServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GetMediaServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetMediaServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetMediaServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetMediaServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GetMediaServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
}

// repeated string mediaServers = 2;
inline int GetMediaServerRsp::mediaservers_size() const {
  return mediaservers_.size();
}
inline void GetMediaServerRsp::clear_mediaservers() {
  mediaservers_.Clear();
}
inline const ::std::string& GetMediaServerRsp::mediaservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return mediaservers_.Get(index);
}
inline ::std::string* GetMediaServerRsp::mutable_mediaservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return mediaservers_.Mutable(index);
}
inline void GetMediaServerRsp::set_mediaservers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  mediaservers_.Mutable(index)->assign(value);
}
inline void GetMediaServerRsp::set_mediaservers(int index, const char* value) {
  mediaservers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
inline void GetMediaServerRsp::set_mediaservers(int index, const char* value, size_t size) {
  mediaservers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
inline ::std::string* GetMediaServerRsp::add_mediaservers() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return mediaservers_.Add();
}
inline void GetMediaServerRsp::add_mediaservers(const ::std::string& value) {
  mediaservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
inline void GetMediaServerRsp::add_mediaservers(const char* value) {
  mediaservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
inline void GetMediaServerRsp::add_mediaservers(const char* value, size_t size) {
  mediaservers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetMediaServerRsp::mediaservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return mediaservers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetMediaServerRsp::mutable_mediaservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return &mediaservers_;
}

// repeated string mediaServerAddrs = 3;
inline int GetMediaServerRsp::mediaserveraddrs_size() const {
  return mediaserveraddrs_.size();
}
inline void GetMediaServerRsp::clear_mediaserveraddrs() {
  mediaserveraddrs_.Clear();
}
inline const ::std::string& GetMediaServerRsp::mediaserveraddrs(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return mediaserveraddrs_.Get(index);
}
inline ::std::string* GetMediaServerRsp::mutable_mediaserveraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return mediaserveraddrs_.Mutable(index);
}
inline void GetMediaServerRsp::set_mediaserveraddrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  mediaserveraddrs_.Mutable(index)->assign(value);
}
inline void GetMediaServerRsp::set_mediaserveraddrs(int index, const char* value) {
  mediaserveraddrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
inline void GetMediaServerRsp::set_mediaserveraddrs(int index, const char* value, size_t size) {
  mediaserveraddrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
inline ::std::string* GetMediaServerRsp::add_mediaserveraddrs() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return mediaserveraddrs_.Add();
}
inline void GetMediaServerRsp::add_mediaserveraddrs(const ::std::string& value) {
  mediaserveraddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
inline void GetMediaServerRsp::add_mediaserveraddrs(const char* value) {
  mediaserveraddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
inline void GetMediaServerRsp::add_mediaserveraddrs(const char* value, size_t size) {
  mediaserveraddrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetMediaServerRsp::mediaserveraddrs() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return mediaserveraddrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetMediaServerRsp::mutable_mediaserveraddrs() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return &mediaserveraddrs_;
}

// -------------------------------------------------------------------

// RuleSelect

// string stream_id = 1;
inline void RuleSelect::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleSelect::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
  return stream_id_.Get();
}
inline void RuleSelect::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}
inline void RuleSelect::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}
inline void RuleSelect::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}
inline ::std::string* RuleSelect::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleSelect::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}
inline void RuleSelect::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}

// string sourceInstance = 2;
inline void RuleSelect::clear_sourceinstance() {
  sourceinstance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleSelect::sourceinstance() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
  return sourceinstance_.Get();
}
inline void RuleSelect::set_sourceinstance(const ::std::string& value) {
  
  sourceinstance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}
inline void RuleSelect::set_sourceinstance(const char* value) {
  
  sourceinstance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}
inline void RuleSelect::set_sourceinstance(const char* value,
    size_t size) {
  
  sourceinstance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}
inline ::std::string* RuleSelect::mutable_sourceinstance() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
  return sourceinstance_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::release_sourceinstance() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
  
  return sourceinstance_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::unsafe_arena_release_sourceinstance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sourceinstance_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleSelect::set_allocated_sourceinstance(::std::string* sourceinstance) {
  if (sourceinstance != NULL) {
    
  } else {
    
  }
  sourceinstance_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceinstance,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}
inline void RuleSelect::unsafe_arena_set_allocated_sourceinstance(
    ::std::string* sourceinstance) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sourceinstance != NULL) {
    
  } else {
    
  }
  sourceinstance_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sourceinstance, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}

// string instance = 3;
inline void RuleSelect::clear_instance() {
  instance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleSelect::instance() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
  return instance_.Get();
}
inline void RuleSelect::set_instance(const ::std::string& value) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}
inline void RuleSelect::set_instance(const char* value) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}
inline void RuleSelect::set_instance(const char* value,
    size_t size) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}
inline ::std::string* RuleSelect::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
  return instance_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::release_instance() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
  
  return instance_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleSelect::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}
inline void RuleSelect::unsafe_arena_set_allocated_instance(
    ::std::string* instance) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}

// string type = 4;
inline void RuleSelect::clear_type() {
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleSelect::type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
  return type_.Get();
}
inline void RuleSelect::set_type(const ::std::string& value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}
inline void RuleSelect::set_type(const char* value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}
inline void RuleSelect::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}
inline ::std::string* RuleSelect::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
  return type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::release_type() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
  
  return type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleSelect::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}
inline void RuleSelect::unsafe_arena_set_allocated_type(
    ::std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type != NULL) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}

// string room_id = 5;
inline void RuleSelect::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleSelect::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
  return room_id_.Get();
}
inline void RuleSelect::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}
inline void RuleSelect::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}
inline void RuleSelect::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}
inline ::std::string* RuleSelect::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleSelect::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}
inline void RuleSelect::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}

// string company_id = 6;
inline void RuleSelect::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleSelect::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
  return company_id_.Get();
}
inline void RuleSelect::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}
inline void RuleSelect::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}
inline void RuleSelect::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}
inline ::std::string* RuleSelect::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleSelect::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}
inline void RuleSelect::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}

// string app_id = 7;
inline void RuleSelect::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleSelect::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
  return app_id_.Get();
}
inline void RuleSelect::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}
inline void RuleSelect::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}
inline void RuleSelect::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}
inline ::std::string* RuleSelect::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelect::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleSelect::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}
inline void RuleSelect::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}

// int32 media_type = 8;
inline void RuleSelect::clear_media_type() {
  media_type_ = 0;
}
inline ::google::protobuf::int32 RuleSelect::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.media_type)
  return media_type_;
}
inline void RuleSelect::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.media_type)
}

// -------------------------------------------------------------------

// RuleSelectRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool RuleSelectRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void RuleSelectRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& RuleSelectRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* RuleSelectRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* RuleSelectRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void RuleSelectRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
}

// string instance = 2;
inline void RuleSelectRsp::clear_instance() {
  instance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleSelectRsp::instance() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
  return instance_.Get();
}
inline void RuleSelectRsp::set_instance(const ::std::string& value) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}
inline void RuleSelectRsp::set_instance(const char* value) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}
inline void RuleSelectRsp::set_instance(const char* value,
    size_t size) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}
inline ::std::string* RuleSelectRsp::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
  return instance_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelectRsp::release_instance() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
  
  return instance_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelectRsp::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleSelectRsp::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}
inline void RuleSelectRsp::unsafe_arena_set_allocated_instance(
    ::std::string* instance) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}

// string connectStr = 3;
inline void RuleSelectRsp::clear_connectstr() {
  connectstr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleSelectRsp::connectstr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
  return connectstr_.Get();
}
inline void RuleSelectRsp::set_connectstr(const ::std::string& value) {
  
  connectstr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}
inline void RuleSelectRsp::set_connectstr(const char* value) {
  
  connectstr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}
inline void RuleSelectRsp::set_connectstr(const char* value,
    size_t size) {
  
  connectstr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}
inline ::std::string* RuleSelectRsp::mutable_connectstr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
  return connectstr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelectRsp::release_connectstr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
  
  return connectstr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleSelectRsp::unsafe_arena_release_connectstr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return connectstr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleSelectRsp::set_allocated_connectstr(::std::string* connectstr) {
  if (connectstr != NULL) {
    
  } else {
    
  }
  connectstr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectstr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}
inline void RuleSelectRsp::unsafe_arena_set_allocated_connectstr(
    ::std::string* connectstr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (connectstr != NULL) {
    
  } else {
    
  }
  connectstr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      connectstr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace rule
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::rule::ProtoDictionary> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::rule::ProtoDictionary>() {
  return ::com::fsmeeting::fsp::proto::rule::ProtoDictionary_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fsp_2drule_2eproto__INCLUDED
