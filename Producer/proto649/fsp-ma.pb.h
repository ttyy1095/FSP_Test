// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-ma.proto

#ifndef PROTOBUF_fsp_2dma_2eproto__INCLUDED
#define PROTOBUF_fsp_2dma_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fsp-common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class BillInfo;
class BillInfoDefaultTypeInternal;
extern BillInfoDefaultTypeInternal _BillInfo_default_instance_;
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class CommonInfo;
class CommonInfoDefaultTypeInternal;
extern CommonInfoDefaultTypeInternal _CommonInfo_default_instance_;
class CommonInvokeInfo;
class CommonInvokeInfoDefaultTypeInternal;
extern CommonInvokeInfoDefaultTypeInternal _CommonInvokeInfo_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupServer;
class GroupServerDefaultTypeInternal;
extern GroupServerDefaultTypeInternal _GroupServer_default_instance_;
class NotifyStreamDestroied;
class NotifyStreamDestroiedDefaultTypeInternal;
extern NotifyStreamDestroiedDefaultTypeInternal _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRsp;
class NotifyStreamDestroiedRspDefaultTypeInternal;
extern NotifyStreamDestroiedRspDefaultTypeInternal _NotifyStreamDestroiedRsp_default_instance_;
class Proxy;
class ProxyDefaultTypeInternal;
extern ProxyDefaultTypeInternal _Proxy_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamServer;
class StreamServerDefaultTypeInternal;
extern StreamServerDefaultTypeInternal _StreamServer_default_instance_;
class StreamSourceChanged;
class StreamSourceChangedDefaultTypeInternal;
extern StreamSourceChangedDefaultTypeInternal _StreamSourceChanged_default_instance_;
class StreamSourceChangedRsp;
class StreamSourceChangedRspDefaultTypeInternal;
extern StreamSourceChangedRspDefaultTypeInternal _StreamSourceChangedRsp_default_instance_;
}  // namespace common
namespace ma {
class SendingSimpleTask;
class SendingSimpleTaskDefaultTypeInternal;
extern SendingSimpleTaskDefaultTypeInternal _SendingSimpleTask_default_instance_;
class SendingSimpleTaskRsp;
class SendingSimpleTaskRspDefaultTypeInternal;
extern SendingSimpleTaskRspDefaultTypeInternal _SendingSimpleTaskRsp_default_instance_;
class SendingTask;
class SendingTaskDefaultTypeInternal;
extern SendingTaskDefaultTypeInternal _SendingTask_default_instance_;
class SendingTaskRsp;
class SendingTaskRspDefaultTypeInternal;
extern SendingTaskRspDefaultTypeInternal _SendingTaskRsp_default_instance_;
}  // namespace ma
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace ma {

namespace protobuf_fsp_2dma_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fsp_2dma_2eproto

enum ProtoDictionary {
  Enum2UnknownInterface = 0,
  Enum2SendingTask = 10000,
  Enum2SendingTaskRsp = 10001,
  Enum2SendingSimpleTask = 10002,
  Enum2SendingSimpleTaskRsp = 10003,
  ProtoDictionary_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoDictionary_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoDictionary_IsValid(int value);
const ProtoDictionary ProtoDictionary_MIN = Enum2UnknownInterface;
const ProtoDictionary ProtoDictionary_MAX = Enum2SendingSimpleTaskRsp;
const int ProtoDictionary_ARRAYSIZE = ProtoDictionary_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor();
inline const ::std::string& ProtoDictionary_Name(ProtoDictionary value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDictionary_descriptor(), value);
}
inline bool ProtoDictionary_Parse(
    const ::std::string& name, ProtoDictionary* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDictionary>(
    ProtoDictionary_descriptor(), name, value);
}
// ===================================================================

class SendingTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ma.SendingTask) */ {
 public:
  SendingTask();
  virtual ~SendingTask();

  SendingTask(const SendingTask& from);

  inline SendingTask& operator=(const SendingTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendingTask& default_instance();

  static inline const SendingTask* internal_default_instance() {
    return reinterpret_cast<const SendingTask*>(
               &_SendingTask_default_instance_);
  }

  void UnsafeArenaSwap(SendingTask* other);
  void Swap(SendingTask* other);

  // implements Message ----------------------------------------------

  inline SendingTask* New() const PROTOBUF_FINAL { return New(NULL); }

  SendingTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendingTask& from);
  void MergeFrom(const SendingTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendingTask* other);
  protected:
  explicit SendingTask(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string agentServers = 2;
  int agentservers_size() const;
  void clear_agentservers();
  static const int kAgentServersFieldNumber = 2;
  const ::std::string& agentservers(int index) const;
  ::std::string* mutable_agentservers(int index);
  void set_agentservers(int index, const ::std::string& value);
  void set_agentservers(int index, const char* value);
  void set_agentservers(int index, const char* value, size_t size);
  ::std::string* add_agentservers();
  void add_agentservers(const ::std::string& value);
  void add_agentservers(const char* value);
  void add_agentservers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& agentservers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_agentservers();

  // repeated string ipLists = 3;
  int iplists_size() const;
  void clear_iplists();
  static const int kIpListsFieldNumber = 3;
  const ::std::string& iplists(int index) const;
  ::std::string* mutable_iplists(int index);
  void set_iplists(int index, const ::std::string& value);
  void set_iplists(int index, const char* value);
  void set_iplists(int index, const char* value, size_t size);
  ::std::string* add_iplists();
  void add_iplists(const ::std::string& value);
  void add_iplists(const char* value);
  void add_iplists(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& iplists() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_iplists();

  // string seq = 1;
  void clear_seq();
  static const int kSeqFieldNumber = 1;
  const ::std::string& seq() const;
  void set_seq(const ::std::string& value);
  void set_seq(const char* value);
  void set_seq(const char* value, size_t size);
  ::std::string* mutable_seq();
  ::std::string* release_seq();
  void set_allocated_seq(::std::string* seq);
  ::std::string* unsafe_arena_release_seq();
  void unsafe_arena_set_allocated_seq(
      ::std::string* seq);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ma.SendingTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> agentservers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> iplists_;
  ::google::protobuf::internal::ArenaStringPtr seq_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dma_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendingTaskRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ma.SendingTaskRsp) */ {
 public:
  SendingTaskRsp();
  virtual ~SendingTaskRsp();

  SendingTaskRsp(const SendingTaskRsp& from);

  inline SendingTaskRsp& operator=(const SendingTaskRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendingTaskRsp& default_instance();

  static inline const SendingTaskRsp* internal_default_instance() {
    return reinterpret_cast<const SendingTaskRsp*>(
               &_SendingTaskRsp_default_instance_);
  }

  void UnsafeArenaSwap(SendingTaskRsp* other);
  void Swap(SendingTaskRsp* other);

  // implements Message ----------------------------------------------

  inline SendingTaskRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SendingTaskRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendingTaskRsp& from);
  void MergeFrom(const SendingTaskRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendingTaskRsp* other);
  protected:
  explicit SendingTaskRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string seq = 1;
  void clear_seq();
  static const int kSeqFieldNumber = 1;
  const ::std::string& seq() const;
  void set_seq(const ::std::string& value);
  void set_seq(const char* value);
  void set_seq(const char* value, size_t size);
  ::std::string* mutable_seq();
  ::std::string* release_seq();
  void set_allocated_seq(::std::string* seq);
  ::std::string* unsafe_arena_release_seq();
  void unsafe_arena_set_allocated_seq(
      ::std::string* seq);

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr seq_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dma_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendingSimpleTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ma.SendingSimpleTask) */ {
 public:
  SendingSimpleTask();
  virtual ~SendingSimpleTask();

  SendingSimpleTask(const SendingSimpleTask& from);

  inline SendingSimpleTask& operator=(const SendingSimpleTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendingSimpleTask& default_instance();

  static inline const SendingSimpleTask* internal_default_instance() {
    return reinterpret_cast<const SendingSimpleTask*>(
               &_SendingSimpleTask_default_instance_);
  }

  void UnsafeArenaSwap(SendingSimpleTask* other);
  void Swap(SendingSimpleTask* other);

  // implements Message ----------------------------------------------

  inline SendingSimpleTask* New() const PROTOBUF_FINAL { return New(NULL); }

  SendingSimpleTask* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendingSimpleTask& from);
  void MergeFrom(const SendingSimpleTask& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendingSimpleTask* other);
  protected:
  explicit SendingSimpleTask(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string agentServers = 2;
  int agentservers_size() const;
  void clear_agentservers();
  static const int kAgentServersFieldNumber = 2;
  const ::std::string& agentservers(int index) const;
  ::std::string* mutable_agentservers(int index);
  void set_agentservers(int index, const ::std::string& value);
  void set_agentservers(int index, const char* value);
  void set_agentservers(int index, const char* value, size_t size);
  ::std::string* add_agentservers();
  void add_agentservers(const ::std::string& value);
  void add_agentservers(const char* value);
  void add_agentservers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& agentservers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_agentservers();

  // repeated string ipLists = 3;
  int iplists_size() const;
  void clear_iplists();
  static const int kIpListsFieldNumber = 3;
  const ::std::string& iplists(int index) const;
  ::std::string* mutable_iplists(int index);
  void set_iplists(int index, const ::std::string& value);
  void set_iplists(int index, const char* value);
  void set_iplists(int index, const char* value, size_t size);
  ::std::string* add_iplists();
  void add_iplists(const ::std::string& value);
  void add_iplists(const char* value);
  void add_iplists(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& iplists() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_iplists();

  // string seq = 1;
  void clear_seq();
  static const int kSeqFieldNumber = 1;
  const ::std::string& seq() const;
  void set_seq(const ::std::string& value);
  void set_seq(const char* value);
  void set_seq(const char* value, size_t size);
  ::std::string* mutable_seq();
  ::std::string* release_seq();
  void set_allocated_seq(::std::string* seq);
  ::std::string* unsafe_arena_release_seq();
  void unsafe_arena_set_allocated_seq(
      ::std::string* seq);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> agentservers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> iplists_;
  ::google::protobuf::internal::ArenaStringPtr seq_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dma_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendingSimpleTaskRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp) */ {
 public:
  SendingSimpleTaskRsp();
  virtual ~SendingSimpleTaskRsp();

  SendingSimpleTaskRsp(const SendingSimpleTaskRsp& from);

  inline SendingSimpleTaskRsp& operator=(const SendingSimpleTaskRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendingSimpleTaskRsp& default_instance();

  static inline const SendingSimpleTaskRsp* internal_default_instance() {
    return reinterpret_cast<const SendingSimpleTaskRsp*>(
               &_SendingSimpleTaskRsp_default_instance_);
  }

  void UnsafeArenaSwap(SendingSimpleTaskRsp* other);
  void Swap(SendingSimpleTaskRsp* other);

  // implements Message ----------------------------------------------

  inline SendingSimpleTaskRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SendingSimpleTaskRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendingSimpleTaskRsp& from);
  void MergeFrom(const SendingSimpleTaskRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendingSimpleTaskRsp* other);
  protected:
  explicit SendingSimpleTaskRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string seq = 1;
  void clear_seq();
  static const int kSeqFieldNumber = 1;
  const ::std::string& seq() const;
  void set_seq(const ::std::string& value);
  void set_seq(const char* value);
  void set_seq(const char* value, size_t size);
  ::std::string* mutable_seq();
  ::std::string* release_seq();
  void set_allocated_seq(::std::string* seq);
  ::std::string* unsafe_arena_release_seq();
  void unsafe_arena_set_allocated_seq(
      ::std::string* seq);

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr seq_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dma_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SendingTask

// string seq = 1;
inline void SendingTask::clear_seq() {
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SendingTask::seq() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
  return seq_.Get();
}
inline void SendingTask::set_seq(const ::std::string& value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}
inline void SendingTask::set_seq(const char* value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}
inline void SendingTask::set_seq(const char* value,
    size_t size) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}
inline ::std::string* SendingTask::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
  return seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SendingTask::release_seq() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
  
  return seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SendingTask::unsafe_arena_release_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SendingTask::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}
inline void SendingTask::unsafe_arena_set_allocated_seq(
    ::std::string* seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}

// repeated string agentServers = 2;
inline int SendingTask::agentservers_size() const {
  return agentservers_.size();
}
inline void SendingTask::clear_agentservers() {
  agentservers_.Clear();
}
inline const ::std::string& SendingTask::agentservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return agentservers_.Get(index);
}
inline ::std::string* SendingTask::mutable_agentservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return agentservers_.Mutable(index);
}
inline void SendingTask::set_agentservers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  agentservers_.Mutable(index)->assign(value);
}
inline void SendingTask::set_agentservers(int index, const char* value) {
  agentservers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
inline void SendingTask::set_agentservers(int index, const char* value, size_t size) {
  agentservers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
inline ::std::string* SendingTask::add_agentservers() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return agentservers_.Add();
}
inline void SendingTask::add_agentservers(const ::std::string& value) {
  agentservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
inline void SendingTask::add_agentservers(const char* value) {
  agentservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
inline void SendingTask::add_agentservers(const char* value, size_t size) {
  agentservers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendingTask::agentservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return agentservers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SendingTask::mutable_agentservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return &agentservers_;
}

// repeated string ipLists = 3;
inline int SendingTask::iplists_size() const {
  return iplists_.size();
}
inline void SendingTask::clear_iplists() {
  iplists_.Clear();
}
inline const ::std::string& SendingTask::iplists(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return iplists_.Get(index);
}
inline ::std::string* SendingTask::mutable_iplists(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return iplists_.Mutable(index);
}
inline void SendingTask::set_iplists(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  iplists_.Mutable(index)->assign(value);
}
inline void SendingTask::set_iplists(int index, const char* value) {
  iplists_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
inline void SendingTask::set_iplists(int index, const char* value, size_t size) {
  iplists_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
inline ::std::string* SendingTask::add_iplists() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return iplists_.Add();
}
inline void SendingTask::add_iplists(const ::std::string& value) {
  iplists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
inline void SendingTask::add_iplists(const char* value) {
  iplists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
inline void SendingTask::add_iplists(const char* value, size_t size) {
  iplists_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendingTask::iplists() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return iplists_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SendingTask::mutable_iplists() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return &iplists_;
}

// -------------------------------------------------------------------

// SendingTaskRsp

// string seq = 1;
inline void SendingTaskRsp::clear_seq() {
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SendingTaskRsp::seq() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
  return seq_.Get();
}
inline void SendingTaskRsp::set_seq(const ::std::string& value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}
inline void SendingTaskRsp::set_seq(const char* value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}
inline void SendingTaskRsp::set_seq(const char* value,
    size_t size) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}
inline ::std::string* SendingTaskRsp::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
  return seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SendingTaskRsp::release_seq() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
  
  return seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SendingTaskRsp::unsafe_arena_release_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SendingTaskRsp::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}
inline void SendingTaskRsp::unsafe_arena_set_allocated_seq(
    ::std::string* seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
inline bool SendingTaskRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void SendingTaskRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& SendingTaskRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SendingTaskRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SendingTaskRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void SendingTaskRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
}

// -------------------------------------------------------------------

// SendingSimpleTask

// string seq = 1;
inline void SendingSimpleTask::clear_seq() {
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SendingSimpleTask::seq() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
  return seq_.Get();
}
inline void SendingSimpleTask::set_seq(const ::std::string& value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}
inline void SendingSimpleTask::set_seq(const char* value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}
inline void SendingSimpleTask::set_seq(const char* value,
    size_t size) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}
inline ::std::string* SendingSimpleTask::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
  return seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SendingSimpleTask::release_seq() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
  
  return seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SendingSimpleTask::unsafe_arena_release_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SendingSimpleTask::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}
inline void SendingSimpleTask::unsafe_arena_set_allocated_seq(
    ::std::string* seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}

// repeated string agentServers = 2;
inline int SendingSimpleTask::agentservers_size() const {
  return agentservers_.size();
}
inline void SendingSimpleTask::clear_agentservers() {
  agentservers_.Clear();
}
inline const ::std::string& SendingSimpleTask::agentservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return agentservers_.Get(index);
}
inline ::std::string* SendingSimpleTask::mutable_agentservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return agentservers_.Mutable(index);
}
inline void SendingSimpleTask::set_agentservers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  agentservers_.Mutable(index)->assign(value);
}
inline void SendingSimpleTask::set_agentservers(int index, const char* value) {
  agentservers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
inline void SendingSimpleTask::set_agentservers(int index, const char* value, size_t size) {
  agentservers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
inline ::std::string* SendingSimpleTask::add_agentservers() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return agentservers_.Add();
}
inline void SendingSimpleTask::add_agentservers(const ::std::string& value) {
  agentservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
inline void SendingSimpleTask::add_agentservers(const char* value) {
  agentservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
inline void SendingSimpleTask::add_agentservers(const char* value, size_t size) {
  agentservers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendingSimpleTask::agentservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return agentservers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SendingSimpleTask::mutable_agentservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return &agentservers_;
}

// repeated string ipLists = 3;
inline int SendingSimpleTask::iplists_size() const {
  return iplists_.size();
}
inline void SendingSimpleTask::clear_iplists() {
  iplists_.Clear();
}
inline const ::std::string& SendingSimpleTask::iplists(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return iplists_.Get(index);
}
inline ::std::string* SendingSimpleTask::mutable_iplists(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return iplists_.Mutable(index);
}
inline void SendingSimpleTask::set_iplists(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  iplists_.Mutable(index)->assign(value);
}
inline void SendingSimpleTask::set_iplists(int index, const char* value) {
  iplists_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
inline void SendingSimpleTask::set_iplists(int index, const char* value, size_t size) {
  iplists_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
inline ::std::string* SendingSimpleTask::add_iplists() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return iplists_.Add();
}
inline void SendingSimpleTask::add_iplists(const ::std::string& value) {
  iplists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
inline void SendingSimpleTask::add_iplists(const char* value) {
  iplists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
inline void SendingSimpleTask::add_iplists(const char* value, size_t size) {
  iplists_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendingSimpleTask::iplists() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return iplists_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SendingSimpleTask::mutable_iplists() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return &iplists_;
}

// -------------------------------------------------------------------

// SendingSimpleTaskRsp

// string seq = 1;
inline void SendingSimpleTaskRsp::clear_seq() {
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SendingSimpleTaskRsp::seq() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
  return seq_.Get();
}
inline void SendingSimpleTaskRsp::set_seq(const ::std::string& value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}
inline void SendingSimpleTaskRsp::set_seq(const char* value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}
inline void SendingSimpleTaskRsp::set_seq(const char* value,
    size_t size) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}
inline ::std::string* SendingSimpleTaskRsp::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
  return seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SendingSimpleTaskRsp::release_seq() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
  
  return seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SendingSimpleTaskRsp::unsafe_arena_release_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SendingSimpleTaskRsp::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}
inline void SendingSimpleTaskRsp::unsafe_arena_set_allocated_seq(
    ::std::string* seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
inline bool SendingSimpleTaskRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void SendingSimpleTaskRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& SendingSimpleTaskRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SendingSimpleTaskRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SendingSimpleTaskRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void SendingSimpleTaskRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ma
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::ma::ProtoDictionary> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::ma::ProtoDictionary>() {
  return ::com::fsmeeting::fsp::proto::ma::ProtoDictionary_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fsp_2dma_2eproto__INCLUDED
