// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-ss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fsp-ss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace ss {
class LoginReceivingChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginReceivingChannel> {
} _LoginReceivingChannel_default_instance_;
class LogoutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Logout> {
} _Logout_default_instance_;
class LogoutRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogoutRsp> {
} _LogoutRsp_default_instance_;
class LoginReceivingChannelRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginReceivingChannelRsp> {
} _LoginReceivingChannelRsp_default_instance_;
class LoginSendingChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginSendingChannel> {
} _LoginSendingChannel_default_instance_;
class LoginSendingChannelRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginSendingChannelRsp> {
} _LoginSendingChannelRsp_default_instance_;
class NotifyStreamSendingStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStart> {
} _NotifyStreamSendingStart_default_instance_;
class NotifyStreamSendingStartRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStartRsp> {
} _NotifyStreamSendingStartRsp_default_instance_;
class NotifyStreamSendingStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStop> {
} _NotifyStreamSendingStop_default_instance_;
class NotifyStreamSendingStopRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStopRsp> {
} _NotifyStreamSendingStopRsp_default_instance_;

namespace protobuf_fsp_2dss_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannel, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannel, stream_subscribe_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannel, client_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannel, commoninvokeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannel, next_instance_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannel, next_address_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannel, stream_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannel, stream_property_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReceivingChannelRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendingChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendingChannel, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendingChannel, stream_publish_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendingChannel, client_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendingChannelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendingChannelRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSendingChannelRsp, client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, recv_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStartRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStartRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, recv_client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStopRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStopRsp, response_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LoginReceivingChannel)},
  { 12, -1, sizeof(Logout)},
  { 16, -1, sizeof(LogoutRsp)},
  { 21, -1, sizeof(LoginReceivingChannelRsp)},
  { 26, -1, sizeof(LoginSendingChannel)},
  { 33, -1, sizeof(LoginSendingChannelRsp)},
  { 39, -1, sizeof(NotifyStreamSendingStart)},
  { 46, -1, sizeof(NotifyStreamSendingStartRsp)},
  { 51, -1, sizeof(NotifyStreamSendingStop)},
  { 57, -1, sizeof(NotifyStreamSendingStopRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginReceivingChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Logout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogoutRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginReceivingChannelRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginSendingChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginSendingChannelRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStartRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStopRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fsp-ss.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _LoginReceivingChannel_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Logout_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LogoutRsp_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LoginReceivingChannelRsp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _LoginSendingChannel_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _LoginSendingChannelRsp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _NotifyStreamSendingStart_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _NotifyStreamSendingStartRsp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _NotifyStreamSendingStop_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _NotifyStreamSendingStopRsp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::InitDefaults();
  _LoginReceivingChannel_default_instance_.DefaultConstruct();
  _Logout_default_instance_.DefaultConstruct();
  _LogoutRsp_default_instance_.DefaultConstruct();
  _LoginReceivingChannelRsp_default_instance_.DefaultConstruct();
  _LoginSendingChannel_default_instance_.DefaultConstruct();
  _LoginSendingChannelRsp_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStart_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStartRsp_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStop_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStopRsp_default_instance_.DefaultConstruct();
  _LoginReceivingChannel_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _LogoutRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _LoginReceivingChannelRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _LoginSendingChannelRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyStreamSendingStart_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _NotifyStreamSendingStartRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyStreamSendingStopRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014fsp-ss.proto\022\032com.fsmeeting.fsp.proto."
      "ss\032\020fsp-common.proto\"\221\002\n\025LoginReceivingC"
      "hannel\022\021\n\tstream_id\030\001 \001(\t\022\036\n\026stream_subs"
      "cribe_token\030\002 \001(\t\022\024\n\014client_token\030\003 \001(\t\022"
      "J\n\020commonInvokeInfo\030\004 \001(\01320.com.fsmeetin"
      "g.fsp.proto.common.CommonInvokeInfo\022\032\n\022n"
      "ext_instance_list\030\005 \001(\t\022\031\n\021next_address_"
      "list\030\006 \001(\t\022\023\n\013stream_type\030\007 \001(\005\022\027\n\017strea"
      "m_property\030\010 \001(\005\"\010\n\006Logout\"M\n\tLogoutRsp\022"
      "@\n\010response\030\001 \001(\0132..com.fsmeeting.fsp.pr"
      "oto.common.CommonResponse\"\\\n\030LoginReceiv"
      "ingChannelRsp\022@\n\010response\030\001 \001(\0132..com.fs"
      "meeting.fsp.proto.common.CommonResponse\""
      "\\\n\023LoginSendingChannel\022\021\n\tstream_id\030\001 \001("
      "\t\022\034\n\024stream_publish_token\030\002 \001(\t\022\024\n\014clien"
      "t_token\030\003 \001(\t\"m\n\026LoginSendingChannelRsp\022"
      "@\n\010response\030\001 \001(\0132..com.fsmeeting.fsp.pr"
      "oto.common.CommonResponse\022\021\n\tclient_id\030\002"
      " \001(\t\"\221\001\n\030NotifyStreamSendingStart\022\026\n\016rec"
      "v_client_id\030\001 \001(\t\022\021\n\tstream_id\030\002 \001(\t\022J\n\020"
      "commonInvokeInfo\030\003 \001(\01320.com.fsmeeting.f"
      "sp.proto.common.CommonInvokeInfo\"_\n\033Noti"
      "fyStreamSendingStartRsp\022@\n\010response\030\001 \001("
      "\0132..com.fsmeeting.fsp.proto.common.Commo"
      "nResponse\"D\n\027NotifyStreamSendingStop\022\021\n\t"
      "stream_id\030\001 \001(\t\022\026\n\016recv_client_id\030\002 \001(\t\""
      "^\n\032NotifyStreamSendingStopRsp\022@\n\010respons"
      "e\030\001 \001(\0132..com.fsmeeting.fsp.proto.common"
      ".CommonResponse*\355\002\n\017ProtoDictionary\022\031\n\025E"
      "num2UnknownInterface\020\000\022\037\n\032Enum2LoginRece"
      "ivingChannel\020\3306\022\"\n\035Enum2LoginReceivingCh"
      "annelRsp\020\3316\022\035\n\030Enum2LoginSendingChannel\020"
      "\3336\022 \n\033Enum2LoginSendingChannelRsp\020\3346\022\"\n\035"
      "Enum2NotifyStreamSendingStart\020\3356\022%\n Enum"
      "2NotifyStreamSendingStartRsp\020\3366\022!\n\034Enum2"
      "NotifyStreamSendingStop\020\3376\022$\n\037Enum2Notif"
      "yStreamSendingStopRsp\020\3406\022\020\n\013Enum2Logout\020"
      "\3416\022\023\n\016Enum2LogoutRsp\020\3426B\'\n\032com.fsmeeting"
      ".fsp.proto.ssP\001\370\001\001\242\002\003GPBb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsp-ss.proto", &protobuf_RegisterTypes);
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fsp_2dss_2eproto

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_enum_descriptors[0];
}
bool ProtoDictionary_IsValid(int value) {
  switch (value) {
    case 0:
    case 7000:
    case 7001:
    case 7003:
    case 7004:
    case 7005:
    case 7006:
    case 7007:
    case 7008:
    case 7009:
    case 7010:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LoginReceivingChannel::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* LoginReceivingChannel::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* LoginReceivingChannel::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void LoginReceivingChannel::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void LoginReceivingChannel::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReceivingChannel::kStreamIdFieldNumber;
const int LoginReceivingChannel::kStreamSubscribeTokenFieldNumber;
const int LoginReceivingChannel::kClientTokenFieldNumber;
const int LoginReceivingChannel::kCommonInvokeInfoFieldNumber;
const int LoginReceivingChannel::kNextInstanceListFieldNumber;
const int LoginReceivingChannel::kNextAddressListFieldNumber;
const int LoginReceivingChannel::kStreamTypeFieldNumber;
const int LoginReceivingChannel::kStreamPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReceivingChannel::LoginReceivingChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
}
LoginReceivingChannel::LoginReceivingChannel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
}
LoginReceivingChannel::LoginReceivingChannel(const LoginReceivingChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  stream_subscribe_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_subscribe_token().size() > 0) {
    stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_subscribe_token(),
      GetArenaNoVirtual());
  }
  client_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_token().size() > 0) {
    client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_token(),
      GetArenaNoVirtual());
  }
  next_instance_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_instance_list().size() > 0) {
    next_instance_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_instance_list(),
      GetArenaNoVirtual());
  }
  next_address_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_address_list().size() > 0) {
    next_address_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_address_list(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  ::memcpy(&stream_type_, &from.stream_type_,
    reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&stream_type_) + sizeof(stream_property_));
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
}

void LoginReceivingChannel::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_subscribe_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_instance_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  next_address_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&commoninvokeinfo_, 0, reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&commoninvokeinfo_) + sizeof(stream_property_));
  _cached_size_ = 0;
}

LoginReceivingChannel::~LoginReceivingChannel() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  SharedDtor();
}

void LoginReceivingChannel::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_subscribe_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  next_instance_list_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  next_address_list_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void LoginReceivingChannel::ArenaDtor(void* object) {
  LoginReceivingChannel* _this = reinterpret_cast< LoginReceivingChannel* >(object);
  (void)_this;
}
void LoginReceivingChannel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoginReceivingChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReceivingChannel::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[0].descriptor;
}

const LoginReceivingChannel& LoginReceivingChannel::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginReceivingChannel* LoginReceivingChannel::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoginReceivingChannel>(arena);
}

void LoginReceivingChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  next_instance_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  next_address_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
  ::memset(&stream_type_, 0, reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&stream_type_) + sizeof(stream_property_));
}

bool LoginReceivingChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_subscribe_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_subscribe_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_token = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_token().data(), this->client_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_instance_list = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_instance_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_instance_list().data(), this->next_instance_list().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_address_list = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_address_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_address_list().data(), this->next_address_list().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stream_type = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stream_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stream_property = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stream_property_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  return false;
#undef DO_
}

void LoginReceivingChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string stream_subscribe_token = 2;
  if (this->stream_subscribe_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_subscribe_token(), output);
  }

  // string client_token = 3;
  if (this->client_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_token(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->commoninvokeinfo_, output);
  }

  // string next_instance_list = 5;
  if (this->next_instance_list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_instance_list().data(), this->next_instance_list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->next_instance_list(), output);
  }

  // string next_address_list = 6;
  if (this->next_address_list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_address_list().data(), this->next_address_list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->next_address_list(), output);
  }

  // int32 stream_type = 7;
  if (this->stream_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stream_type(), output);
  }

  // int32 stream_property = 8;
  if (this->stream_property() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->stream_property(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
}

::google::protobuf::uint8* LoginReceivingChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string stream_subscribe_token = 2;
  if (this->stream_subscribe_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_subscribe_token(), target);
  }

  // string client_token = 3;
  if (this->client_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_token(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->commoninvokeinfo_, false, target);
  }

  // string next_instance_list = 5;
  if (this->next_instance_list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_instance_list().data(), this->next_instance_list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->next_instance_list(), target);
  }

  // string next_address_list = 6;
  if (this->next_address_list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_address_list().data(), this->next_address_list().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->next_address_list(), target);
  }

  // int32 stream_type = 7;
  if (this->stream_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stream_type(), target);
  }

  // int32 stream_property = 8;
  if (this->stream_property() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->stream_property(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  return target;
}

size_t LoginReceivingChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string stream_subscribe_token = 2;
  if (this->stream_subscribe_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_subscribe_token());
  }

  // string client_token = 3;
  if (this->client_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_token());
  }

  // string next_instance_list = 5;
  if (this->next_instance_list().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_instance_list());
  }

  // string next_address_list = 6;
  if (this->next_address_list().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_address_list());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  // int32 stream_type = 7;
  if (this->stream_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stream_type());
  }

  // int32 stream_property = 8;
  if (this->stream_property() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stream_property());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReceivingChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReceivingChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReceivingChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
    MergeFrom(*source);
  }
}

void LoginReceivingChannel::MergeFrom(const LoginReceivingChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.stream_subscribe_token().size() > 0) {
    set_stream_subscribe_token(from.stream_subscribe_token());
  }
  if (from.client_token().size() > 0) {
    set_client_token(from.client_token());
  }
  if (from.next_instance_list().size() > 0) {
    set_next_instance_list(from.next_instance_list());
  }
  if (from.next_address_list().size() > 0) {
    set_next_address_list(from.next_address_list());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
  if (from.stream_type() != 0) {
    set_stream_type(from.stream_type());
  }
  if (from.stream_property() != 0) {
    set_stream_property(from.stream_property());
  }
}

void LoginReceivingChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReceivingChannel::CopyFrom(const LoginReceivingChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReceivingChannel::IsInitialized() const {
  return true;
}

void LoginReceivingChannel::Swap(LoginReceivingChannel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoginReceivingChannel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LoginReceivingChannel::UnsafeArenaSwap(LoginReceivingChannel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoginReceivingChannel::InternalSwap(LoginReceivingChannel* other) {
  stream_id_.Swap(&other->stream_id_);
  stream_subscribe_token_.Swap(&other->stream_subscribe_token_);
  client_token_.Swap(&other->client_token_);
  next_instance_list_.Swap(&other->next_instance_list_);
  next_address_list_.Swap(&other->next_address_list_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(stream_type_, other->stream_type_);
  std::swap(stream_property_, other->stream_property_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReceivingChannel::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReceivingChannel

// string stream_id = 1;
void LoginReceivingChannel::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoginReceivingChannel::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
  return stream_id_.Get();
}
void LoginReceivingChannel::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}
void LoginReceivingChannel::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}
void LoginReceivingChannel::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}
::std::string* LoginReceivingChannel::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoginReceivingChannel::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}
void LoginReceivingChannel::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_id)
}

// string stream_subscribe_token = 2;
void LoginReceivingChannel::clear_stream_subscribe_token() {
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoginReceivingChannel::stream_subscribe_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
  return stream_subscribe_token_.Get();
}
void LoginReceivingChannel::set_stream_subscribe_token(const ::std::string& value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}
void LoginReceivingChannel::set_stream_subscribe_token(const char* value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}
void LoginReceivingChannel::set_stream_subscribe_token(const char* value,
    size_t size) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}
::std::string* LoginReceivingChannel::mutable_stream_subscribe_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
  return stream_subscribe_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
  
  return stream_subscribe_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::unsafe_arena_release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_subscribe_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoginReceivingChannel::set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token) {
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_subscribe_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}
void LoginReceivingChannel::unsafe_arena_set_allocated_stream_subscribe_token(
    ::std::string* stream_subscribe_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_subscribe_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_subscribe_token)
}

// string client_token = 3;
void LoginReceivingChannel::clear_client_token() {
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoginReceivingChannel::client_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
  return client_token_.Get();
}
void LoginReceivingChannel::set_client_token(const ::std::string& value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}
void LoginReceivingChannel::set_client_token(const char* value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}
void LoginReceivingChannel::set_client_token(const char* value,
    size_t size) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}
::std::string* LoginReceivingChannel::mutable_client_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
  return client_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::release_client_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
  
  return client_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::unsafe_arena_release_client_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoginReceivingChannel::set_allocated_client_token(::std::string* client_token) {
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}
void LoginReceivingChannel::unsafe_arena_set_allocated_client_token(
    ::std::string* client_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.client_token)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
bool LoginReceivingChannel::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void LoginReceivingChannel::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& LoginReceivingChannel::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* LoginReceivingChannel::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* LoginReceivingChannel::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void LoginReceivingChannel::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.commonInvokeInfo)
}

// string next_instance_list = 5;
void LoginReceivingChannel::clear_next_instance_list() {
  next_instance_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoginReceivingChannel::next_instance_list() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
  return next_instance_list_.Get();
}
void LoginReceivingChannel::set_next_instance_list(const ::std::string& value) {
  
  next_instance_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}
void LoginReceivingChannel::set_next_instance_list(const char* value) {
  
  next_instance_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}
void LoginReceivingChannel::set_next_instance_list(const char* value,
    size_t size) {
  
  next_instance_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}
::std::string* LoginReceivingChannel::mutable_next_instance_list() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
  return next_instance_list_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::release_next_instance_list() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
  
  return next_instance_list_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::unsafe_arena_release_next_instance_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_instance_list_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoginReceivingChannel::set_allocated_next_instance_list(::std::string* next_instance_list) {
  if (next_instance_list != NULL) {
    
  } else {
    
  }
  next_instance_list_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_instance_list,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}
void LoginReceivingChannel::unsafe_arena_set_allocated_next_instance_list(
    ::std::string* next_instance_list) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_instance_list != NULL) {
    
  } else {
    
  }
  next_instance_list_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_instance_list, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_instance_list)
}

// string next_address_list = 6;
void LoginReceivingChannel::clear_next_address_list() {
  next_address_list_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoginReceivingChannel::next_address_list() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
  return next_address_list_.Get();
}
void LoginReceivingChannel::set_next_address_list(const ::std::string& value) {
  
  next_address_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}
void LoginReceivingChannel::set_next_address_list(const char* value) {
  
  next_address_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}
void LoginReceivingChannel::set_next_address_list(const char* value,
    size_t size) {
  
  next_address_list_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}
::std::string* LoginReceivingChannel::mutable_next_address_list() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
  return next_address_list_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::release_next_address_list() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
  
  return next_address_list_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginReceivingChannel::unsafe_arena_release_next_address_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_address_list_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoginReceivingChannel::set_allocated_next_address_list(::std::string* next_address_list) {
  if (next_address_list != NULL) {
    
  } else {
    
  }
  next_address_list_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_address_list,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}
void LoginReceivingChannel::unsafe_arena_set_allocated_next_address_list(
    ::std::string* next_address_list) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_address_list != NULL) {
    
  } else {
    
  }
  next_address_list_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_address_list, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.next_address_list)
}

// int32 stream_type = 7;
void LoginReceivingChannel::clear_stream_type() {
  stream_type_ = 0;
}
::google::protobuf::int32 LoginReceivingChannel::stream_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_type)
  return stream_type_;
}
void LoginReceivingChannel::set_stream_type(::google::protobuf::int32 value) {
  
  stream_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_type)
}

// int32 stream_property = 8;
void LoginReceivingChannel::clear_stream_property() {
  stream_property_ = 0;
}
::google::protobuf::int32 LoginReceivingChannel::stream_property() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_property)
  return stream_property_;
}
void LoginReceivingChannel::set_stream_property(::google::protobuf::int32 value) {
  
  stream_property_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginReceivingChannel.stream_property)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logout::Logout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.Logout)
}
Logout::Logout(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.Logout)
}
Logout::Logout(const Logout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.Logout)
}

void Logout::SharedCtor() {
  _cached_size_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.Logout)
  SharedDtor();
}

void Logout::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Logout::ArenaDtor(void* object) {
  Logout* _this = reinterpret_cast< Logout* >(object);
  (void)_this;
}
void Logout::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[1].descriptor;
}

const Logout& Logout::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

Logout* Logout::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Logout>(arena);
}

void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.Logout)
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.Logout)
  return false;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.Logout)
  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.Logout)
}

::google::protobuf::uint8* Logout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.Logout)
  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.Logout)
  return target;
}

size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.Logout)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.Logout)
  GOOGLE_DCHECK_NE(&from, this);
  const Logout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.Logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.Logout)
    MergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.Logout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logout::IsInitialized() const {
  return true;
}

void Logout::Swap(Logout* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Logout* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Logout::UnsafeArenaSwap(Logout* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Logout::InternalSwap(Logout* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Logout

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void LogoutRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void LogoutRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void LogoutRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRsp::LogoutRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.LogoutRsp)
}
LogoutRsp::LogoutRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.LogoutRsp)
}
LogoutRsp::LogoutRsp(const LogoutRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.LogoutRsp)
}

void LogoutRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

LogoutRsp::~LogoutRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  SharedDtor();
}

void LogoutRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void LogoutRsp::ArenaDtor(void* object) {
  LogoutRsp* _this = reinterpret_cast< LogoutRsp* >(object);
  (void)_this;
}
void LogoutRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRsp::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[2].descriptor;
}

const LogoutRsp& LogoutRsp::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogoutRsp* LogoutRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LogoutRsp>(arena);
}

void LogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool LogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  return false;
#undef DO_
}

void LogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.LogoutRsp)
}

::google::protobuf::uint8* LogoutRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  return target;
}

size_t LogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.LogoutRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.LogoutRsp)
    MergeFrom(*source);
  }
}

void LogoutRsp::MergeFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void LogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRsp::CopyFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRsp::IsInitialized() const {
  return true;
}

void LogoutRsp::Swap(LogoutRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogoutRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LogoutRsp::UnsafeArenaSwap(LogoutRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogoutRsp::InternalSwap(LogoutRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutRsp::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool LogoutRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void LogoutRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& LogoutRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void LogoutRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LogoutRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void LoginReceivingChannelRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginReceivingChannelRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginReceivingChannelRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void LoginReceivingChannelRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void LoginReceivingChannelRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginReceivingChannelRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginReceivingChannelRsp::LoginReceivingChannelRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
}
LoginReceivingChannelRsp::LoginReceivingChannelRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
}
LoginReceivingChannelRsp::LoginReceivingChannelRsp(const LoginReceivingChannelRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
}

void LoginReceivingChannelRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

LoginReceivingChannelRsp::~LoginReceivingChannelRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  SharedDtor();
}

void LoginReceivingChannelRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void LoginReceivingChannelRsp::ArenaDtor(void* object) {
  LoginReceivingChannelRsp* _this = reinterpret_cast< LoginReceivingChannelRsp* >(object);
  (void)_this;
}
void LoginReceivingChannelRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoginReceivingChannelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReceivingChannelRsp::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[3].descriptor;
}

const LoginReceivingChannelRsp& LoginReceivingChannelRsp::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginReceivingChannelRsp* LoginReceivingChannelRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoginReceivingChannelRsp>(arena);
}

void LoginReceivingChannelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool LoginReceivingChannelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  return false;
#undef DO_
}

void LoginReceivingChannelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
}

::google::protobuf::uint8* LoginReceivingChannelRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  return target;
}

size_t LoginReceivingChannelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReceivingChannelRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReceivingChannelRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginReceivingChannelRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
    MergeFrom(*source);
  }
}

void LoginReceivingChannelRsp::MergeFrom(const LoginReceivingChannelRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void LoginReceivingChannelRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReceivingChannelRsp::CopyFrom(const LoginReceivingChannelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReceivingChannelRsp::IsInitialized() const {
  return true;
}

void LoginReceivingChannelRsp::Swap(LoginReceivingChannelRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoginReceivingChannelRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LoginReceivingChannelRsp::UnsafeArenaSwap(LoginReceivingChannelRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoginReceivingChannelRsp::InternalSwap(LoginReceivingChannelRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginReceivingChannelRsp::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginReceivingChannelRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool LoginReceivingChannelRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void LoginReceivingChannelRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& LoginReceivingChannelRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginReceivingChannelRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginReceivingChannelRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void LoginReceivingChannelRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginReceivingChannelRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginSendingChannel::kStreamIdFieldNumber;
const int LoginSendingChannel::kStreamPublishTokenFieldNumber;
const int LoginSendingChannel::kClientTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginSendingChannel::LoginSendingChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
}
LoginSendingChannel::LoginSendingChannel(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
}
LoginSendingChannel::LoginSendingChannel(const LoginSendingChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_publish_token().size() > 0) {
    stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_publish_token(),
      GetArenaNoVirtual());
  }
  client_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_token().size() > 0) {
    client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
}

void LoginSendingChannel::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LoginSendingChannel::~LoginSendingChannel() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  SharedDtor();
}

void LoginSendingChannel::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_publish_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void LoginSendingChannel::ArenaDtor(void* object) {
  LoginSendingChannel* _this = reinterpret_cast< LoginSendingChannel* >(object);
  (void)_this;
}
void LoginSendingChannel::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoginSendingChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSendingChannel::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[4].descriptor;
}

const LoginSendingChannel& LoginSendingChannel::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginSendingChannel* LoginSendingChannel::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoginSendingChannel>(arena);
}

void LoginSendingChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool LoginSendingChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_publish_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_publish_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_publish_token().data(), this->stream_publish_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_token = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_token().data(), this->client_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  return false;
#undef DO_
}

void LoginSendingChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_publish_token(), output);
  }

  // string client_token = 3;
  if (this->client_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
}

::google::protobuf::uint8* LoginSendingChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_publish_token(), target);
  }

  // string client_token = 3;
  if (this->client_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  return target;
}

size_t LoginSendingChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_publish_token());
  }

  // string client_token = 3;
  if (this->client_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSendingChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginSendingChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginSendingChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
    MergeFrom(*source);
  }
}

void LoginSendingChannel::MergeFrom(const LoginSendingChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.stream_publish_token().size() > 0) {
    set_stream_publish_token(from.stream_publish_token());
  }
  if (from.client_token().size() > 0) {
    set_client_token(from.client_token());
  }
}

void LoginSendingChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSendingChannel::CopyFrom(const LoginSendingChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSendingChannel::IsInitialized() const {
  return true;
}

void LoginSendingChannel::Swap(LoginSendingChannel* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoginSendingChannel* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LoginSendingChannel::UnsafeArenaSwap(LoginSendingChannel* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoginSendingChannel::InternalSwap(LoginSendingChannel* other) {
  stream_id_.Swap(&other->stream_id_);
  stream_publish_token_.Swap(&other->stream_publish_token_);
  client_token_.Swap(&other->client_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginSendingChannel::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginSendingChannel

// string stream_id = 1;
void LoginSendingChannel::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoginSendingChannel::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
  return stream_id_.Get();
}
void LoginSendingChannel::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}
void LoginSendingChannel::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}
void LoginSendingChannel::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}
::std::string* LoginSendingChannel::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginSendingChannel::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginSendingChannel::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoginSendingChannel::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}
void LoginSendingChannel::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_id)
}

// string stream_publish_token = 2;
void LoginSendingChannel::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoginSendingChannel::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
  return stream_publish_token_.Get();
}
void LoginSendingChannel::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}
void LoginSendingChannel::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}
void LoginSendingChannel::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}
::std::string* LoginSendingChannel::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginSendingChannel::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginSendingChannel::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoginSendingChannel::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}
void LoginSendingChannel::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.stream_publish_token)
}

// string client_token = 3;
void LoginSendingChannel::clear_client_token() {
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoginSendingChannel::client_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
  return client_token_.Get();
}
void LoginSendingChannel::set_client_token(const ::std::string& value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}
void LoginSendingChannel::set_client_token(const char* value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}
void LoginSendingChannel::set_client_token(const char* value,
    size_t size) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}
::std::string* LoginSendingChannel::mutable_client_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
  return client_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginSendingChannel::release_client_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
  
  return client_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginSendingChannel::unsafe_arena_release_client_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoginSendingChannel::set_allocated_client_token(::std::string* client_token) {
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}
void LoginSendingChannel::unsafe_arena_set_allocated_client_token(
    ::std::string* client_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannel.client_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void LoginSendingChannelRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginSendingChannelRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginSendingChannelRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void LoginSendingChannelRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void LoginSendingChannelRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginSendingChannelRsp::kResponseFieldNumber;
const int LoginSendingChannelRsp::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginSendingChannelRsp::LoginSendingChannelRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
}
LoginSendingChannelRsp::LoginSendingChannelRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
}
LoginSendingChannelRsp::LoginSendingChannelRsp(const LoginSendingChannelRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
}

void LoginSendingChannelRsp::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = NULL;
  _cached_size_ = 0;
}

LoginSendingChannelRsp::~LoginSendingChannelRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  SharedDtor();
}

void LoginSendingChannelRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete response_;
  }
}

void LoginSendingChannelRsp::ArenaDtor(void* object) {
  LoginSendingChannelRsp* _this = reinterpret_cast< LoginSendingChannelRsp* >(object);
  (void)_this;
}
void LoginSendingChannelRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoginSendingChannelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSendingChannelRsp::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[5].descriptor;
}

const LoginSendingChannelRsp& LoginSendingChannelRsp::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginSendingChannelRsp* LoginSendingChannelRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoginSendingChannelRsp>(arena);
}

void LoginSendingChannelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool LoginSendingChannelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  return false;
#undef DO_
}

void LoginSendingChannelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
}

::google::protobuf::uint8* LoginSendingChannelRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  return target;
}

size_t LoginSendingChannelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  size_t total_size = 0;

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSendingChannelRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginSendingChannelRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginSendingChannelRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
    MergeFrom(*source);
  }
}

void LoginSendingChannelRsp::MergeFrom(const LoginSendingChannelRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void LoginSendingChannelRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSendingChannelRsp::CopyFrom(const LoginSendingChannelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSendingChannelRsp::IsInitialized() const {
  return true;
}

void LoginSendingChannelRsp::Swap(LoginSendingChannelRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoginSendingChannelRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LoginSendingChannelRsp::UnsafeArenaSwap(LoginSendingChannelRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoginSendingChannelRsp::InternalSwap(LoginSendingChannelRsp* other) {
  client_id_.Swap(&other->client_id_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginSendingChannelRsp::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginSendingChannelRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool LoginSendingChannelRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void LoginSendingChannelRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& LoginSendingChannelRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginSendingChannelRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginSendingChannelRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void LoginSendingChannelRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.response)
}

// string client_id = 2;
void LoginSendingChannelRsp::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& LoginSendingChannelRsp::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
  return client_id_.Get();
}
void LoginSendingChannelRsp::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}
void LoginSendingChannelRsp::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}
void LoginSendingChannelRsp::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}
::std::string* LoginSendingChannelRsp::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginSendingChannelRsp::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* LoginSendingChannelRsp::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void LoginSendingChannelRsp::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}
void LoginSendingChannelRsp::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.LoginSendingChannelRsp.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamSendingStart::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void NotifyStreamSendingStart::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void NotifyStreamSendingStart::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStart::kRecvClientIdFieldNumber;
const int NotifyStreamSendingStart::kStreamIdFieldNumber;
const int NotifyStreamSendingStart::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStart::NotifyStreamSendingStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
}
NotifyStreamSendingStart::NotifyStreamSendingStart(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
}
NotifyStreamSendingStart::NotifyStreamSendingStart(const NotifyStreamSendingStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_client_id().size() > 0) {
    recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_client_id(),
      GetArenaNoVirtual());
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
}

void NotifyStreamSendingStart::SharedCtor() {
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commoninvokeinfo_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamSendingStart::~NotifyStreamSendingStart() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  SharedDtor();
}

void NotifyStreamSendingStart::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  recv_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void NotifyStreamSendingStart::ArenaDtor(void* object) {
  NotifyStreamSendingStart* _this = reinterpret_cast< NotifyStreamSendingStart* >(object);
  (void)_this;
}
void NotifyStreamSendingStart::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStart::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[6].descriptor;
}

const NotifyStreamSendingStart& NotifyStreamSendingStart::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStart* NotifyStreamSendingStart::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStart>(arena);
}

void NotifyStreamSendingStart::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
}

bool NotifyStreamSendingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string recv_client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_client_id().data(), this->recv_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  return false;
#undef DO_
}

void NotifyStreamSendingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  // string recv_client_id = 1;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->recv_client_id(), output);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
}

::google::protobuf::uint8* NotifyStreamSendingStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  // string recv_client_id = 1;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->recv_client_id(), target);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  return target;
}

size_t NotifyStreamSendingStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  size_t total_size = 0;

  // string recv_client_id = 1;
  if (this->recv_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_client_id());
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStart::MergeFrom(const NotifyStreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.recv_client_id().size() > 0) {
    set_recv_client_id(from.recv_client_id());
  }
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
}

void NotifyStreamSendingStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStart::CopyFrom(const NotifyStreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStart::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStart::Swap(NotifyStreamSendingStart* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStart* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStart::UnsafeArenaSwap(NotifyStreamSendingStart* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStart::InternalSwap(NotifyStreamSendingStart* other) {
  recv_client_id_.Swap(&other->recv_client_id_);
  stream_id_.Swap(&other->stream_id_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStart::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStart

// string recv_client_id = 1;
void NotifyStreamSendingStart::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStart::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Get();
}
void NotifyStreamSendingStart::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}
void NotifyStreamSendingStart::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}
void NotifyStreamSendingStart::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}
::std::string* NotifyStreamSendingStart::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStart::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}
void NotifyStreamSendingStart::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.recv_client_id)
}

// string stream_id = 2;
void NotifyStreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
  return stream_id_.Get();
}
void NotifyStreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}
void NotifyStreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}
void NotifyStreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}
::std::string* NotifyStreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}
void NotifyStreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.stream_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 3;
bool NotifyStreamSendingStart::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void NotifyStreamSendingStart::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& NotifyStreamSendingStart::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void NotifyStreamSendingStart::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStart.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamSendingStartRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyStreamSendingStartRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyStreamSendingStartRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStartRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStartRsp::NotifyStreamSendingStartRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
}
NotifyStreamSendingStartRsp::NotifyStreamSendingStartRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
}
NotifyStreamSendingStartRsp::NotifyStreamSendingStartRsp(const NotifyStreamSendingStartRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
}

void NotifyStreamSendingStartRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamSendingStartRsp::~NotifyStreamSendingStartRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  SharedDtor();
}

void NotifyStreamSendingStartRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyStreamSendingStartRsp::ArenaDtor(void* object) {
  NotifyStreamSendingStartRsp* _this = reinterpret_cast< NotifyStreamSendingStartRsp* >(object);
  (void)_this;
}
void NotifyStreamSendingStartRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStartRsp::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[7].descriptor;
}

const NotifyStreamSendingStartRsp& NotifyStreamSendingStartRsp::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStartRsp* NotifyStreamSendingStartRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStartRsp>(arena);
}

void NotifyStreamSendingStartRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyStreamSendingStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  return false;
#undef DO_
}

void NotifyStreamSendingStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
}

::google::protobuf::uint8* NotifyStreamSendingStartRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  return target;
}

size_t NotifyStreamSendingStartRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStartRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStartRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStartRsp::MergeFrom(const NotifyStreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyStreamSendingStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStartRsp::CopyFrom(const NotifyStreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStartRsp::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStartRsp::Swap(NotifyStreamSendingStartRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStartRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStartRsp::UnsafeArenaSwap(NotifyStreamSendingStartRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStartRsp::InternalSwap(NotifyStreamSendingStartRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStartRsp::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyStreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyStreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyStreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStartRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStop::kStreamIdFieldNumber;
const int NotifyStreamSendingStop::kRecvClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStop::NotifyStreamSendingStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
}
NotifyStreamSendingStop::NotifyStreamSendingStop(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
}
NotifyStreamSendingStop::NotifyStreamSendingStop(const NotifyStreamSendingStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_client_id().size() > 0) {
    recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_client_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
}

void NotifyStreamSendingStop::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NotifyStreamSendingStop::~NotifyStreamSendingStop() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  SharedDtor();
}

void NotifyStreamSendingStop::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  recv_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NotifyStreamSendingStop::ArenaDtor(void* object) {
  NotifyStreamSendingStop* _this = reinterpret_cast< NotifyStreamSendingStop* >(object);
  (void)_this;
}
void NotifyStreamSendingStop::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStop::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[8].descriptor;
}

const NotifyStreamSendingStop& NotifyStreamSendingStop::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStop* NotifyStreamSendingStop::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStop>(arena);
}

void NotifyStreamSendingStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool NotifyStreamSendingStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recv_client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_client_id().data(), this->recv_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  return false;
#undef DO_
}

void NotifyStreamSendingStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recv_client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
}

::google::protobuf::uint8* NotifyStreamSendingStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recv_client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  return target;
}

size_t NotifyStreamSendingStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStop::MergeFrom(const NotifyStreamSendingStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.recv_client_id().size() > 0) {
    set_recv_client_id(from.recv_client_id());
  }
}

void NotifyStreamSendingStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStop::CopyFrom(const NotifyStreamSendingStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStop::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStop::Swap(NotifyStreamSendingStop* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStop* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStop::UnsafeArenaSwap(NotifyStreamSendingStop* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStop::InternalSwap(NotifyStreamSendingStop* other) {
  stream_id_.Swap(&other->stream_id_);
  recv_client_id_.Swap(&other->recv_client_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStop::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStop

// string stream_id = 1;
void NotifyStreamSendingStop::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStop::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
  return stream_id_.Get();
}
void NotifyStreamSendingStop::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}
void NotifyStreamSendingStop::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}
void NotifyStreamSendingStop::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}
::std::string* NotifyStreamSendingStop::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStop::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}
void NotifyStreamSendingStop::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.stream_id)
}

// string recv_client_id = 2;
void NotifyStreamSendingStop::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStop::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Get();
}
void NotifyStreamSendingStop::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}
void NotifyStreamSendingStop::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}
void NotifyStreamSendingStop::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}
::std::string* NotifyStreamSendingStop::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStop::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}
void NotifyStreamSendingStop::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStop.recv_client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamSendingStopRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyStreamSendingStopRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyStreamSendingStopRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStopRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStopRsp::NotifyStreamSendingStopRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dss_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
}
NotifyStreamSendingStopRsp::NotifyStreamSendingStopRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dss_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
}
NotifyStreamSendingStopRsp::NotifyStreamSendingStopRsp(const NotifyStreamSendingStopRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
}

void NotifyStreamSendingStopRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamSendingStopRsp::~NotifyStreamSendingStopRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  SharedDtor();
}

void NotifyStreamSendingStopRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyStreamSendingStopRsp::ArenaDtor(void* object) {
  NotifyStreamSendingStopRsp* _this = reinterpret_cast< NotifyStreamSendingStopRsp* >(object);
  (void)_this;
}
void NotifyStreamSendingStopRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStopRsp::descriptor() {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[9].descriptor;
}

const NotifyStreamSendingStopRsp& NotifyStreamSendingStopRsp::default_instance() {
  protobuf_fsp_2dss_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStopRsp* NotifyStreamSendingStopRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStopRsp>(arena);
}

void NotifyStreamSendingStopRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyStreamSendingStopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  return false;
#undef DO_
}

void NotifyStreamSendingStopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
}

::google::protobuf::uint8* NotifyStreamSendingStopRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  return target;
}

size_t NotifyStreamSendingStopRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStopRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStopRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStopRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStopRsp::MergeFrom(const NotifyStreamSendingStopRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyStreamSendingStopRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStopRsp::CopyFrom(const NotifyStreamSendingStopRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStopRsp::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStopRsp::Swap(NotifyStreamSendingStopRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStopRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStopRsp::UnsafeArenaSwap(NotifyStreamSendingStopRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStopRsp::InternalSwap(NotifyStreamSendingStopRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStopRsp::GetMetadata() const {
  protobuf_fsp_2dss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dss_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyStreamSendingStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyStreamSendingStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyStreamSendingStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ss.NotifyStreamSendingStopRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ss
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

// @@protoc_insertion_point(global_scope)
