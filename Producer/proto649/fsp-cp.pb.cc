// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-cp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fsp-cp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace cp {
class LoginDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Login> {
} _Login_default_instance_;
class LoginRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginRsp> {
} _LoginRsp_default_instance_;
class LogoutDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Logout> {
} _Logout_default_instance_;
class LogoutRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogoutRsp> {
} _LogoutRsp_default_instance_;
class PublishStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishStream> {
} _PublishStream_default_instance_;
class PublishStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishStreamRsp> {
} _PublishStreamRsp_default_instance_;
class UnPublishStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnPublishStream> {
} _UnPublishStream_default_instance_;
class UnPublishStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnPublishStreamRsp> {
} _UnPublishStreamRsp_default_instance_;
class GetStreamServersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamServers> {
} _GetStreamServers_default_instance_;
class GetStreamServersRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamServersRsp> {
} _GetStreamServersRsp_default_instance_;
class StreamSendingStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamSendingStart> {
} _StreamSendingStart_default_instance_;
class StreamSendingStartRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamSendingStartRsp> {
} _StreamSendingStartRsp_default_instance_;
class JoinGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoinGroup> {
} _JoinGroup_default_instance_;
class JoinGroupRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoinGroupRsp> {
} _JoinGroupRsp_default_instance_;
class QuitGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitGroup> {
} _QuitGroup_default_instance_;
class QuitGroupRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QuitGroupRsp> {
} _QuitGroupRsp_default_instance_;
class GetStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStream> {
} _GetStream_default_instance_;
class GetStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetStreamRsp> {
} _GetStreamRsp_default_instance_;
class NotifyStreamPublishedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamPublished> {
} _NotifyStreamPublished_default_instance_;
class NotifyStreamPublishedRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamPublishedRsp> {
} _NotifyStreamPublishedRsp_default_instance_;
class SelectStreamServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SelectStreamServer> {
} _SelectStreamServer_default_instance_;
class SelectStreamServerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SelectStreamServerRsp> {
} _SelectStreamServerRsp_default_instance_;
class NotifyStreamSendingStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStart> {
} _NotifyStreamSendingStart_default_instance_;
class NotifyStreamSendingStartRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStartRsp> {
} _NotifyStreamSendingStartRsp_default_instance_;
class NotifyStreamSendingStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStop> {
} _NotifyStreamSendingStop_default_instance_;
class NotifyStreamSendingStopRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamSendingStopRsp> {
} _NotifyStreamSendingStopRsp_default_instance_;
class NotifyPublishStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyPublishStream> {
} _NotifyPublishStream_default_instance_;
class NotifyPublishStreamRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyPublishStreamRsp> {
} _NotifyPublishStreamRsp_default_instance_;

namespace protobuf_fsp_2dcp_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[28];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, client_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, client_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStream, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStream, stream_publish_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishStreamRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnPublishStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnPublishStream, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnPublishStream, client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnPublishStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnPublishStreamRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, stream_subscribe_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServers, exception_servers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServersRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServersRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamServersRsp, streamservers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStart, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStart, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStartRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSendingStartRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, group_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroup, group_check_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinGroupRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroup, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroupRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuitGroupRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, media_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStream, media_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamRsp, stream_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublished, stream_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublishedRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamPublishedRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServer, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServer, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServer, stream_server_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectStreamServerRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, recv_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStart, commoninvokeinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStartRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStartRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, recv_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStop, client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStopRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamSendingStopRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, stream_publish_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, media_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStream, media_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStreamRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPublishStreamRsp, response_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Login)},
  { 5, -1, sizeof(LoginRsp)},
  { 10, -1, sizeof(Logout)},
  { 15, -1, sizeof(LogoutRsp)},
  { 20, -1, sizeof(PublishStream)},
  { 26, -1, sizeof(PublishStreamRsp)},
  { 31, -1, sizeof(UnPublishStream)},
  { 37, -1, sizeof(UnPublishStreamRsp)},
  { 42, -1, sizeof(GetStreamServers)},
  { 49, -1, sizeof(GetStreamServersRsp)},
  { 55, -1, sizeof(StreamSendingStart)},
  { 61, -1, sizeof(StreamSendingStartRsp)},
  { 66, -1, sizeof(JoinGroup)},
  { 74, -1, sizeof(JoinGroupRsp)},
  { 79, -1, sizeof(QuitGroup)},
  { 85, -1, sizeof(QuitGroupRsp)},
  { 90, -1, sizeof(GetStream)},
  { 98, -1, sizeof(GetStreamRsp)},
  { 104, -1, sizeof(NotifyStreamPublished)},
  { 109, -1, sizeof(NotifyStreamPublishedRsp)},
  { 114, -1, sizeof(SelectStreamServer)},
  { 121, -1, sizeof(SelectStreamServerRsp)},
  { 126, -1, sizeof(NotifyStreamSendingStart)},
  { 134, -1, sizeof(NotifyStreamSendingStartRsp)},
  { 139, -1, sizeof(NotifyStreamSendingStop)},
  { 146, -1, sizeof(NotifyStreamSendingStopRsp)},
  { 151, -1, sizeof(NotifyPublishStream)},
  { 162, -1, sizeof(NotifyPublishStreamRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Login_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Logout_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogoutRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishStreamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnPublishStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnPublishStreamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamServers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamServersRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamSendingStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamSendingStartRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoinGroupRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QuitGroupRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetStreamRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamPublished_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamPublishedRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectStreamServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SelectStreamServerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStartRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamSendingStopRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyPublishStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyPublishStreamRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fsp-cp.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

}  // namespace

void TableStruct::Shutdown() {
  _Login_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LoginRsp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Logout_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _LogoutRsp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PublishStream_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _PublishStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _UnPublishStream_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _UnPublishStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _GetStreamServers_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _GetStreamServersRsp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _StreamSendingStart_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _StreamSendingStartRsp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _JoinGroup_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _JoinGroupRsp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _QuitGroup_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _QuitGroupRsp_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GetStream_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GetStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _NotifyStreamPublished_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _NotifyStreamPublishedRsp_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _SelectStreamServer_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _SelectStreamServerRsp_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _NotifyStreamSendingStart_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _NotifyStreamSendingStartRsp_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _NotifyStreamSendingStop_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _NotifyStreamSendingStopRsp_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _NotifyPublishStream_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _NotifyPublishStreamRsp_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::InitDefaults();
  _Login_default_instance_.DefaultConstruct();
  _LoginRsp_default_instance_.DefaultConstruct();
  _Logout_default_instance_.DefaultConstruct();
  _LogoutRsp_default_instance_.DefaultConstruct();
  _PublishStream_default_instance_.DefaultConstruct();
  _PublishStreamRsp_default_instance_.DefaultConstruct();
  _UnPublishStream_default_instance_.DefaultConstruct();
  _UnPublishStreamRsp_default_instance_.DefaultConstruct();
  _GetStreamServers_default_instance_.DefaultConstruct();
  _GetStreamServersRsp_default_instance_.DefaultConstruct();
  _StreamSendingStart_default_instance_.DefaultConstruct();
  _StreamSendingStartRsp_default_instance_.DefaultConstruct();
  _JoinGroup_default_instance_.DefaultConstruct();
  _JoinGroupRsp_default_instance_.DefaultConstruct();
  _QuitGroup_default_instance_.DefaultConstruct();
  _QuitGroupRsp_default_instance_.DefaultConstruct();
  _GetStream_default_instance_.DefaultConstruct();
  _GetStreamRsp_default_instance_.DefaultConstruct();
  _NotifyStreamPublished_default_instance_.DefaultConstruct();
  _NotifyStreamPublishedRsp_default_instance_.DefaultConstruct();
  _SelectStreamServer_default_instance_.DefaultConstruct();
  _SelectStreamServerRsp_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStart_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStartRsp_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStop_default_instance_.DefaultConstruct();
  _NotifyStreamSendingStopRsp_default_instance_.DefaultConstruct();
  _NotifyPublishStream_default_instance_.DefaultConstruct();
  _NotifyPublishStreamRsp_default_instance_.DefaultConstruct();
  _LoginRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _LogoutRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _PublishStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _UnPublishStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetStreamServersRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _StreamSendingStart_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _StreamSendingStartRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _JoinGroupRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _QuitGroupRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GetStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyStreamPublishedRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _SelectStreamServerRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyStreamSendingStart_default_instance_.get_mutable()->commoninvokeinfo_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo*>(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance());
  _NotifyStreamSendingStartRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyStreamSendingStopRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _NotifyPublishStreamRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014fsp-cp.proto\022\032com.fsmeeting.fsp.proto."
      "cp\032\020fsp-common.proto\"\035\n\005Login\022\024\n\014client_"
      "token\030\001 \001(\t\"L\n\010LoginRsp\022@\n\010response\030\001 \001("
      "\0132..com.fsmeeting.fsp.proto.common.Commo"
      "nResponse\"\036\n\006Logout\022\024\n\014client_token\030\001 \001("
      "\t\"M\n\tLogoutRsp\022@\n\010response\030\001 \001(\0132..com.f"
      "smeeting.fsp.proto.common.CommonResponse"
      "\"@\n\rPublishStream\022\021\n\tstream_id\030\001 \001(\t\022\034\n\024"
      "stream_publish_token\030\002 \001(\t\"T\n\020PublishStr"
      "eamRsp\022@\n\010response\030\001 \001(\0132..com.fsmeeting"
      ".fsp.proto.common.CommonResponse\"7\n\017UnPu"
      "blishStream\022\021\n\tstream_id\030\001 \001(\t\022\021\n\tclient"
      "_id\030\002 \001(\t\"V\n\022UnPublishStreamRsp\022@\n\010respo"
      "nse\030\001 \001(\0132..com.fsmeeting.fsp.proto.comm"
      "on.CommonResponse\"`\n\020GetStreamServers\022\021\n"
      "\tstream_id\030\001 \001(\t\022\036\n\026stream_subscribe_tok"
      "en\030\002 \001(\t\022\031\n\021exception_servers\030\003 \003(\t\"\234\001\n\023"
      "GetStreamServersRsp\022@\n\010response\030\001 \001(\0132.."
      "com.fsmeeting.fsp.proto.common.CommonRes"
      "ponse\022C\n\rstreamServers\030\002 \003(\0132,.com.fsmee"
      "ting.fsp.proto.common.StreamServer\"s\n\022St"
      "reamSendingStart\022\021\n\tstream_id\030\001 \001(\t\022J\n\020c"
      "ommonInvokeInfo\030\002 \001(\01320.com.fsmeeting.fs"
      "p.proto.common.CommonInvokeInfo\"Y\n\025Strea"
      "mSendingStartRsp\022@\n\010response\030\001 \001(\0132..com"
      ".fsmeeting.fsp.proto.common.CommonRespon"
      "se\"]\n\tJoinGroup\022\020\n\010group_id\030\001 \001(\t\022\017\n\007use"
      "r_id\030\002 \001(\t\022\023\n\013group_token\030\003 \001(\t\022\030\n\020group"
      "_check_code\030\004 \001(\t\"P\n\014JoinGroupRsp\022@\n\010res"
      "ponse\030\001 \001(\0132..com.fsmeeting.fsp.proto.co"
      "mmon.CommonResponse\".\n\tQuitGroup\022\020\n\010grou"
      "p_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\"P\n\014QuitGroup"
      "Rsp\022@\n\010response\030\001 \001(\0132..com.fsmeeting.fs"
      "p.proto.common.CommonResponse\"\177\n\tGetStre"
      "am\022\020\n\010group_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\020\n"
      "\010media_id\030\003 \001(\t\022=\n\nmedia_type\030\004 \001(\0162).co"
      "m.fsmeeting.fsp.proto.common.MediaType\"\210"
      "\001\n\014GetStreamRsp\022@\n\010response\030\001 \001(\0132..com."
      "fsmeeting.fsp.proto.common.CommonRespons"
      "e\0226\n\006stream\030\002 \003(\0132&.com.fsmeeting.fsp.pr"
      "oto.common.Stream\"*\n\025NotifyStreamPublish"
      "ed\022\021\n\tstream_id\030\001 \001(\t\"\\\n\030NotifyStreamPub"
      "lishedRsp\022@\n\010response\030\001 \001(\0132..com.fsmeet"
      "ing.fsp.proto.common.CommonResponse\"\177\n\022S"
      "electStreamServer\022\021\n\tclient_id\030\001 \001(\t\022\021\n\t"
      "stream_id\030\002 \001(\t\022C\n\rstream_server\030\003 \003(\0132,"
      ".com.fsmeeting.fsp.proto.common.StreamSe"
      "rver\"Y\n\025SelectStreamServerRsp\022@\n\010respons"
      "e\030\001 \001(\0132..com.fsmeeting.fsp.proto.common"
      ".CommonResponse\"\244\001\n\030NotifyStreamSendingS"
      "tart\022\026\n\016recv_client_id\030\001 \001(\t\022\021\n\tstream_i"
      "d\030\002 \001(\t\022\021\n\tclient_id\030\003 \001(\t\022J\n\020commonInvo"
      "keInfo\030\004 \001(\01320.com.fsmeeting.fsp.proto.c"
      "ommon.CommonInvokeInfo\"_\n\033NotifyStreamSe"
      "ndingStartRsp\022@\n\010response\030\001 \001(\0132..com.fs"
      "meeting.fsp.proto.common.CommonResponse\""
      "W\n\027NotifyStreamSendingStop\022\021\n\tstream_id\030"
      "\001 \001(\t\022\026\n\016recv_client_id\030\002 \001(\t\022\021\n\tclient_"
      "id\030\003 \001(\t\"^\n\032NotifyStreamSendingStopRsp\022@"
      "\n\010response\030\001 \001(\0132..com.fsmeeting.fsp.pro"
      "to.common.CommonResponse\"\315\001\n\023NotifyPubli"
      "shStream\022\021\n\tclient_id\030\001 \001(\t\022\021\n\tstream_id"
      "\030\002 \001(\t\022\034\n\024stream_publish_token\030\003 \001(\t\022\020\n\010"
      "group_id\030\004 \001(\t\022\017\n\007user_id\030\005 \001(\t\022\020\n\010media"
      "_id\030\006 \001(\t\022=\n\nmedia_type\030\007 \001(\0162).com.fsme"
      "eting.fsp.proto.common.MediaType\"Z\n\026Noti"
      "fyPublishStreamRsp\022@\n\010response\030\001 \001(\0132..c"
      "om.fsmeeting.fsp.proto.common.CommonResp"
      "onse*\300\006\n\017ProtoDictionary\022\031\n\025Enum2Unknown"
      "Interface\020\000\022\017\n\nEnum2Login\020\320\017\022\022\n\rEnum2Log"
      "inRsp\020\321\017\022\020\n\013Enum2Logout\020\322\017\022\023\n\016Enum2Logou"
      "tRsp\020\323\017\022\027\n\022Enum2PublishStream\020\324\017\022\032\n\025Enum"
      "2PublishStreamRsp\020\325\017\022\031\n\024Enum2UnPublishSt"
      "ream\020\326\017\022\034\n\027Enum2UnPublishStreamRsp\020\327\017\022\032\n"
      "\025Enum2GetStreamServers\020\330\017\022\035\n\030Enum2GetStr"
      "eamServersRsp\020\331\017\022\034\n\027Enum2StreamSendingSt"
      "art\020\332\017\022\037\n\032Enum2StreamSendingStartRsp\020\333\017\022"
      "\023\n\016Enum2JoinGroup\020\334\017\022\026\n\021Enum2JoinGroupRs"
      "p\020\335\017\022\023\n\016Enum2QuitGroup\020\336\017\022\026\n\021Enum2QuitGr"
      "oupRsp\020\337\017\022\023\n\016Enum2GetStream\020\340\017\022\026\n\021Enum2G"
      "etStreamRsp\020\341\017\022\037\n\032Enum2NotifyStreamPubli"
      "shed\020\342\017\022\"\n\035Enum2NotifyStreamPublishedRsp"
      "\020\343\017\022\034\n\027Enum2SelectStreamServer\020\344\017\022\037\n\032Enu"
      "m2SelectStreamServerRsp\020\345\017\022\"\n\035Enum2Notif"
      "yStreamSendingStart\020\346\017\022%\n Enum2NotifyStr"
      "eamSendingStartRsp\020\347\017\022!\n\034Enum2NotifyStre"
      "amSendingStop\020\350\017\022$\n\037Enum2NotifyStreamSen"
      "dingStopRsp\020\351\017\022\035\n\030Enum2NotifyPublishStre"
      "am\020\352\017\022 \n\033Enum2NotifyPublishStreamRsp\020\353\017B"
      "\'\n\032com.fsmeeting.fsp.proto.cpP\001\370\001\001\242\002\003GPB"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsp-cp.proto", &protobuf_RegisterTypes);
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fsp_2dcp_2eproto

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_enum_descriptors[0];
}
bool ProtoDictionary_IsValid(int value) {
  switch (value) {
    case 0:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login::kClientTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.Login)
}
Login::Login(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.Login)
}
Login::Login(const Login& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_token().size() > 0) {
    client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.Login)
}

void Login::SharedCtor() {
  client_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Login::ArenaDtor(void* object) {
  Login* _this = reinterpret_cast< Login* >(object);
  (void)_this;
}
void Login::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[0].descriptor;
}

const Login& Login::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Login* Login::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Login>(arena);
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.Login)
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_token = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_token().data(), this->client_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.Login.client_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.Login)
  // string client_token = 1;
  if (this->client_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.Login.client_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.Login)
}

::google::protobuf::uint8* Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.Login)
  // string client_token = 1;
  if (this->client_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.Login.client_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.Login)
  size_t total_size = 0;

  // string client_token = 1;
  if (this->client_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.Login)
  GOOGLE_DCHECK_NE(&from, this);
  const Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.Login)
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.Login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_token().size() > 0) {
    set_client_token(from.client_token());
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Login* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Login::UnsafeArenaSwap(Login* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  client_token_.Swap(&other->client_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Login

// string client_token = 1;
void Login::clear_client_token() {
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Login::client_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.Login.client_token)
  return client_token_.Get();
}
void Login::set_client_token(const ::std::string& value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.Login.client_token)
}
void Login::set_client_token(const char* value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.Login.client_token)
}
void Login::set_client_token(const char* value,
    size_t size) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.Login.client_token)
}
::std::string* Login::mutable_client_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.Login.client_token)
  return client_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Login::release_client_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.Login.client_token)
  
  return client_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Login::unsafe_arena_release_client_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.Login.client_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Login::set_allocated_client_token(::std::string* client_token) {
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.Login.client_token)
}
void Login::unsafe_arena_set_allocated_client_token(
    ::std::string* client_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.Login.client_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void LoginRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void LoginRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void LoginRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRsp::LoginRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.LoginRsp)
}
LoginRsp::LoginRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.LoginRsp)
}
LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.LoginRsp)
}

void LoginRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

LoginRsp::~LoginRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.LoginRsp)
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void LoginRsp::ArenaDtor(void* object) {
  LoginRsp* _this = reinterpret_cast< LoginRsp* >(object);
  (void)_this;
}
void LoginRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[1].descriptor;
}

const LoginRsp& LoginRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRsp* LoginRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LoginRsp>(arena);
}

void LoginRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.LoginRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.LoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.LoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.LoginRsp)
  return false;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.LoginRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.LoginRsp)
}

::google::protobuf::uint8* LoginRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.LoginRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.LoginRsp)
  return target;
}

size_t LoginRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.LoginRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.LoginRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.LoginRsp)
    MergeFrom(*source);
  }
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.LoginRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void LoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.LoginRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LoginRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LoginRsp::UnsafeArenaSwap(LoginRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LoginRsp::InternalSwap(LoginRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool LoginRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void LoginRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& LoginRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LoginRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void LoginRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Logout::kClientTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logout::Logout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.Logout)
}
Logout::Logout(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.Logout)
}
Logout::Logout(const Logout& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_token().size() > 0) {
    client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.Logout)
}

void Logout::SharedCtor() {
  client_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.Logout)
  SharedDtor();
}

void Logout::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Logout::ArenaDtor(void* object) {
  Logout* _this = reinterpret_cast< Logout* >(object);
  (void)_this;
}
void Logout::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[2].descriptor;
}

const Logout& Logout::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

Logout* Logout::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Logout>(arena);
}

void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.Logout)
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_token = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_token().data(), this->client_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.Logout.client_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.Logout)
  return false;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.Logout)
  // string client_token = 1;
  if (this->client_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.Logout.client_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.Logout)
}

::google::protobuf::uint8* Logout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.Logout)
  // string client_token = 1;
  if (this->client_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_token().data(), this->client_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.Logout.client_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.Logout)
  return target;
}

size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.Logout)
  size_t total_size = 0;

  // string client_token = 1;
  if (this->client_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.Logout)
  GOOGLE_DCHECK_NE(&from, this);
  const Logout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.Logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.Logout)
    MergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.Logout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_token().size() > 0) {
    set_client_token(from.client_token());
  }
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logout::IsInitialized() const {
  return true;
}

void Logout::Swap(Logout* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Logout* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Logout::UnsafeArenaSwap(Logout* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Logout::InternalSwap(Logout* other) {
  client_token_.Swap(&other->client_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Logout

// string client_token = 1;
void Logout::clear_client_token() {
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Logout::client_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.Logout.client_token)
  return client_token_.Get();
}
void Logout::set_client_token(const ::std::string& value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}
void Logout::set_client_token(const char* value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}
void Logout::set_client_token(const char* value,
    size_t size) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}
::std::string* Logout::mutable_client_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.Logout.client_token)
  return client_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Logout::release_client_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.Logout.client_token)
  
  return client_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Logout::unsafe_arena_release_client_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.Logout.client_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Logout::set_allocated_client_token(::std::string* client_token) {
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}
void Logout::unsafe_arena_set_allocated_client_token(
    ::std::string* client_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void LogoutRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void LogoutRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void LogoutRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRsp::LogoutRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.LogoutRsp)
}
LogoutRsp::LogoutRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.LogoutRsp)
}
LogoutRsp::LogoutRsp(const LogoutRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.LogoutRsp)
}

void LogoutRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

LogoutRsp::~LogoutRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  SharedDtor();
}

void LogoutRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void LogoutRsp::ArenaDtor(void* object) {
  LogoutRsp* _this = reinterpret_cast< LogoutRsp* >(object);
  (void)_this;
}
void LogoutRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void LogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[3].descriptor;
}

const LogoutRsp& LogoutRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogoutRsp* LogoutRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<LogoutRsp>(arena);
}

void LogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool LogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  return false;
#undef DO_
}

void LogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.LogoutRsp)
}

::google::protobuf::uint8* LogoutRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  return target;
}

size_t LogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.LogoutRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.LogoutRsp)
    MergeFrom(*source);
  }
}

void LogoutRsp::MergeFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void LogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRsp::CopyFrom(const LogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.LogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRsp::IsInitialized() const {
  return true;
}

void LogoutRsp::Swap(LogoutRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    LogoutRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void LogoutRsp::UnsafeArenaSwap(LogoutRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void LogoutRsp::InternalSwap(LogoutRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool LogoutRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void LogoutRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& LogoutRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void LogoutRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishStream::kStreamIdFieldNumber;
const int PublishStream::kStreamPublishTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishStream::PublishStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.PublishStream)
}
PublishStream::PublishStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.PublishStream)
}
PublishStream::PublishStream(const PublishStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_publish_token().size() > 0) {
    stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_publish_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.PublishStream)
}

void PublishStream::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PublishStream::~PublishStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.PublishStream)
  SharedDtor();
}

void PublishStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_publish_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void PublishStream::ArenaDtor(void* object) {
  PublishStream* _this = reinterpret_cast< PublishStream* >(object);
  (void)_this;
}
void PublishStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PublishStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishStream::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[4].descriptor;
}

const PublishStream& PublishStream::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishStream* PublishStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PublishStream>(arena);
}

void PublishStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.PublishStream)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool PublishStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.PublishStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.PublishStream.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_publish_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_publish_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_publish_token().data(), this->stream_publish_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.PublishStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.PublishStream)
  return false;
#undef DO_
}

void PublishStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.PublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.PublishStream.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_publish_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.PublishStream)
}

::google::protobuf::uint8* PublishStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.PublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.PublishStream.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_publish_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.PublishStream)
  return target;
}

size_t PublishStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.PublishStream)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string stream_publish_token = 2;
  if (this->stream_publish_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_publish_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.PublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.PublishStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.PublishStream)
    MergeFrom(*source);
  }
}

void PublishStream::MergeFrom(const PublishStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.PublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.stream_publish_token().size() > 0) {
    set_stream_publish_token(from.stream_publish_token());
  }
}

void PublishStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.PublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishStream::CopyFrom(const PublishStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.PublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishStream::IsInitialized() const {
  return true;
}

void PublishStream::Swap(PublishStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PublishStream::UnsafeArenaSwap(PublishStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishStream::InternalSwap(PublishStream* other) {
  stream_id_.Swap(&other->stream_id_);
  stream_publish_token_.Swap(&other->stream_publish_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishStream::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishStream

// string stream_id = 1;
void PublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
  return stream_id_.Get();
}
void PublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}
void PublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}
void PublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}
::std::string* PublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}
void PublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}

// string stream_publish_token = 2;
void PublishStream::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& PublishStream::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
  return stream_publish_token_.Get();
}
void PublishStream::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}
void PublishStream::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}
void PublishStream::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}
::std::string* PublishStream::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* PublishStream::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void PublishStream::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}
void PublishStream::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void PublishStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void PublishStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void PublishStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishStreamRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishStreamRsp::PublishStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
}
PublishStreamRsp::PublishStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
}
PublishStreamRsp::PublishStreamRsp(const PublishStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
}

void PublishStreamRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

PublishStreamRsp::~PublishStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  SharedDtor();
}

void PublishStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void PublishStreamRsp::ArenaDtor(void* object) {
  PublishStreamRsp* _this = reinterpret_cast< PublishStreamRsp* >(object);
  (void)_this;
}
void PublishStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PublishStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishStreamRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[5].descriptor;
}

const PublishStreamRsp& PublishStreamRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishStreamRsp* PublishStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PublishStreamRsp>(arena);
}

void PublishStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool PublishStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  return false;
#undef DO_
}

void PublishStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
}

::google::protobuf::uint8* PublishStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  return target;
}

size_t PublishStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
    MergeFrom(*source);
  }
}

void PublishStreamRsp::MergeFrom(const PublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void PublishStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishStreamRsp::CopyFrom(const PublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishStreamRsp::IsInitialized() const {
  return true;
}

void PublishStreamRsp::Swap(PublishStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PublishStreamRsp::UnsafeArenaSwap(PublishStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishStreamRsp::InternalSwap(PublishStreamRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishStreamRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool PublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void PublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& PublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void PublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnPublishStream::kStreamIdFieldNumber;
const int UnPublishStream::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnPublishStream::UnPublishStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.UnPublishStream)
}
UnPublishStream::UnPublishStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.UnPublishStream)
}
UnPublishStream::UnPublishStream(const UnPublishStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.UnPublishStream)
}

void UnPublishStream::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UnPublishStream::~UnPublishStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  SharedDtor();
}

void UnPublishStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void UnPublishStream::ArenaDtor(void* object) {
  UnPublishStream* _this = reinterpret_cast< UnPublishStream* >(object);
  (void)_this;
}
void UnPublishStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UnPublishStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnPublishStream::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[6].descriptor;
}

const UnPublishStream& UnPublishStream::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnPublishStream* UnPublishStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UnPublishStream>(arena);
}

void UnPublishStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool UnPublishStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  return false;
#undef DO_
}

void UnPublishStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.UnPublishStream)
}

::google::protobuf::uint8* UnPublishStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  return target;
}

size_t UnPublishStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnPublishStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  const UnPublishStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnPublishStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.UnPublishStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.UnPublishStream)
    MergeFrom(*source);
  }
}

void UnPublishStream::MergeFrom(const UnPublishStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
}

void UnPublishStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnPublishStream::CopyFrom(const UnPublishStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.UnPublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnPublishStream::IsInitialized() const {
  return true;
}

void UnPublishStream::Swap(UnPublishStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UnPublishStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UnPublishStream::UnsafeArenaSwap(UnPublishStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UnPublishStream::InternalSwap(UnPublishStream* other) {
  stream_id_.Swap(&other->stream_id_);
  client_id_.Swap(&other->client_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnPublishStream::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnPublishStream

// string stream_id = 1;
void UnPublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UnPublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
  return stream_id_.Get();
}
void UnPublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}
void UnPublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}
void UnPublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}
::std::string* UnPublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UnPublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UnPublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UnPublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}
void UnPublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}

// string client_id = 2;
void UnPublishStream::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& UnPublishStream::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
  return client_id_.Get();
}
void UnPublishStream::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}
void UnPublishStream::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}
void UnPublishStream::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}
::std::string* UnPublishStream::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UnPublishStream::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* UnPublishStream::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void UnPublishStream::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}
void UnPublishStream::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void UnPublishStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* UnPublishStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* UnPublishStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void UnPublishStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void UnPublishStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnPublishStreamRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnPublishStreamRsp::UnPublishStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
}
UnPublishStreamRsp::UnPublishStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
}
UnPublishStreamRsp::UnPublishStreamRsp(const UnPublishStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
}

void UnPublishStreamRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

UnPublishStreamRsp::~UnPublishStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  SharedDtor();
}

void UnPublishStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void UnPublishStreamRsp::ArenaDtor(void* object) {
  UnPublishStreamRsp* _this = reinterpret_cast< UnPublishStreamRsp* >(object);
  (void)_this;
}
void UnPublishStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UnPublishStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnPublishStreamRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[7].descriptor;
}

const UnPublishStreamRsp& UnPublishStreamRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnPublishStreamRsp* UnPublishStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UnPublishStreamRsp>(arena);
}

void UnPublishStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool UnPublishStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  return false;
#undef DO_
}

void UnPublishStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
}

::google::protobuf::uint8* UnPublishStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  return target;
}

size_t UnPublishStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnPublishStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const UnPublishStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnPublishStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
    MergeFrom(*source);
  }
}

void UnPublishStreamRsp::MergeFrom(const UnPublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void UnPublishStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnPublishStreamRsp::CopyFrom(const UnPublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnPublishStreamRsp::IsInitialized() const {
  return true;
}

void UnPublishStreamRsp::Swap(UnPublishStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UnPublishStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UnPublishStreamRsp::UnsafeArenaSwap(UnPublishStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UnPublishStreamRsp::InternalSwap(UnPublishStreamRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnPublishStreamRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnPublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool UnPublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void UnPublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& UnPublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* UnPublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* UnPublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void UnPublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamServers::kStreamIdFieldNumber;
const int GetStreamServers::kStreamSubscribeTokenFieldNumber;
const int GetStreamServers::kExceptionServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamServers::GetStreamServers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.GetStreamServers)
}
GetStreamServers::GetStreamServers(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  exception_servers_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.GetStreamServers)
}
GetStreamServers::GetStreamServers(const GetStreamServers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      exception_servers_(from.exception_servers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  stream_subscribe_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_subscribe_token().size() > 0) {
    stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_subscribe_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.GetStreamServers)
}

void GetStreamServers::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_subscribe_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetStreamServers::~GetStreamServers() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  SharedDtor();
}

void GetStreamServers::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_subscribe_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetStreamServers::ArenaDtor(void* object) {
  GetStreamServers* _this = reinterpret_cast< GetStreamServers* >(object);
  (void)_this;
}
void GetStreamServers::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamServers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamServers::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[8].descriptor;
}

const GetStreamServers& GetStreamServers::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamServers* GetStreamServers::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamServers>(arena);
}

void GetStreamServers::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  exception_servers_.Clear();
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GetStreamServers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_subscribe_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_subscribe_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string exception_servers = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exception_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exception_servers(this->exception_servers_size() - 1).data(),
            this->exception_servers(this->exception_servers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  return false;
#undef DO_
}

void GetStreamServers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string stream_subscribe_token = 2;
  if (this->stream_subscribe_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_subscribe_token(), output);
  }

  // repeated string exception_servers = 3;
  for (int i = 0; i < this->exception_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exception_servers(i).data(), this->exception_servers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exception_servers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.GetStreamServers)
}

::google::protobuf::uint8* GetStreamServers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string stream_subscribe_token = 2;
  if (this->stream_subscribe_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_subscribe_token(), target);
  }

  // repeated string exception_servers = 3;
  for (int i = 0; i < this->exception_servers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exception_servers(i).data(), this->exception_servers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->exception_servers(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  return target;
}

size_t GetStreamServers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  size_t total_size = 0;

  // repeated string exception_servers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->exception_servers_size());
  for (int i = 0; i < this->exception_servers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exception_servers(i));
  }

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string stream_subscribe_token = 2;
  if (this->stream_subscribe_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_subscribe_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamServers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamServers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamServers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.GetStreamServers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.GetStreamServers)
    MergeFrom(*source);
  }
}

void GetStreamServers::MergeFrom(const GetStreamServers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exception_servers_.MergeFrom(from.exception_servers_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.stream_subscribe_token().size() > 0) {
    set_stream_subscribe_token(from.stream_subscribe_token());
  }
}

void GetStreamServers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamServers::CopyFrom(const GetStreamServers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.GetStreamServers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamServers::IsInitialized() const {
  return true;
}

void GetStreamServers::Swap(GetStreamServers* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamServers* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamServers::UnsafeArenaSwap(GetStreamServers* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamServers::InternalSwap(GetStreamServers* other) {
  exception_servers_.UnsafeArenaSwap(&other->exception_servers_);
  stream_id_.Swap(&other->stream_id_);
  stream_subscribe_token_.Swap(&other->stream_subscribe_token_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamServers::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamServers

// string stream_id = 1;
void GetStreamServers::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
  return stream_id_.Get();
}
void GetStreamServers::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}
void GetStreamServers::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}
void GetStreamServers::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}
::std::string* GetStreamServers::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}
void GetStreamServers::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}

// string stream_subscribe_token = 2;
void GetStreamServers::clear_stream_subscribe_token() {
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStreamServers::stream_subscribe_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
  return stream_subscribe_token_.Get();
}
void GetStreamServers::set_stream_subscribe_token(const ::std::string& value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}
void GetStreamServers::set_stream_subscribe_token(const char* value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}
void GetStreamServers::set_stream_subscribe_token(const char* value,
    size_t size) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}
::std::string* GetStreamServers::mutable_stream_subscribe_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
  return stream_subscribe_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
  
  return stream_subscribe_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStreamServers::unsafe_arena_release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_subscribe_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStreamServers::set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token) {
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_subscribe_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}
void GetStreamServers::unsafe_arena_set_allocated_stream_subscribe_token(
    ::std::string* stream_subscribe_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_subscribe_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}

// repeated string exception_servers = 3;
int GetStreamServers::exception_servers_size() const {
  return exception_servers_.size();
}
void GetStreamServers::clear_exception_servers() {
  exception_servers_.Clear();
}
const ::std::string& GetStreamServers::exception_servers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return exception_servers_.Get(index);
}
::std::string* GetStreamServers::mutable_exception_servers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return exception_servers_.Mutable(index);
}
void GetStreamServers::set_exception_servers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  exception_servers_.Mutable(index)->assign(value);
}
void GetStreamServers::set_exception_servers(int index, const char* value) {
  exception_servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
void GetStreamServers::set_exception_servers(int index, const char* value, size_t size) {
  exception_servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
::std::string* GetStreamServers::add_exception_servers() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return exception_servers_.Add();
}
void GetStreamServers::add_exception_servers(const ::std::string& value) {
  exception_servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
void GetStreamServers::add_exception_servers(const char* value) {
  exception_servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
void GetStreamServers::add_exception_servers(const char* value, size_t size) {
  exception_servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetStreamServers::exception_servers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return exception_servers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GetStreamServers::mutable_exception_servers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return &exception_servers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetStreamServersRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GetStreamServersRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GetStreamServersRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamServersRsp::kResponseFieldNumber;
const int GetStreamServersRsp::kStreamServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamServersRsp::GetStreamServersRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
}
GetStreamServersRsp::GetStreamServersRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  streamservers_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
}
GetStreamServersRsp::GetStreamServersRsp(const GetStreamServersRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      streamservers_(from.streamservers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
}

void GetStreamServersRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

GetStreamServersRsp::~GetStreamServersRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  SharedDtor();
}

void GetStreamServersRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GetStreamServersRsp::ArenaDtor(void* object) {
  GetStreamServersRsp* _this = reinterpret_cast< GetStreamServersRsp* >(object);
  (void)_this;
}
void GetStreamServersRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamServersRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamServersRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[9].descriptor;
}

const GetStreamServersRsp& GetStreamServersRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamServersRsp* GetStreamServersRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamServersRsp>(arena);
}

void GetStreamServersRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  streamservers_.Clear();
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool GetStreamServersRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_streamservers()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  return false;
#undef DO_
}

void GetStreamServersRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
  for (unsigned int i = 0, n = this->streamservers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->streamservers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
}

::google::protobuf::uint8* GetStreamServersRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
  for (unsigned int i = 0, n = this->streamservers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->streamservers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  return target;
}

size_t GetStreamServersRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  size_t total_size = 0;

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
  {
    unsigned int count = this->streamservers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streamservers(i));
    }
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamServersRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamServersRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamServersRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
    MergeFrom(*source);
  }
}

void GetStreamServersRsp::MergeFrom(const GetStreamServersRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  streamservers_.MergeFrom(from.streamservers_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void GetStreamServersRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamServersRsp::CopyFrom(const GetStreamServersRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamServersRsp::IsInitialized() const {
  return true;
}

void GetStreamServersRsp::Swap(GetStreamServersRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamServersRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamServersRsp::UnsafeArenaSwap(GetStreamServersRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamServersRsp::InternalSwap(GetStreamServersRsp* other) {
  streamservers_.UnsafeArenaSwap(&other->streamservers_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamServersRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamServersRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GetStreamServersRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GetStreamServersRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamServersRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GetStreamServersRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
}

// repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
int GetStreamServersRsp::streamservers_size() const {
  return streamservers_.size();
}
void GetStreamServersRsp::clear_streamservers() {
  streamservers_.Clear();
}
const ::com::fsmeeting::fsp::proto::common::StreamServer& GetStreamServersRsp::streamservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return streamservers_.Get(index);
}
::com::fsmeeting::fsp::proto::common::StreamServer* GetStreamServersRsp::mutable_streamservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return streamservers_.Mutable(index);
}
::com::fsmeeting::fsp::proto::common::StreamServer* GetStreamServersRsp::add_streamservers() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return streamservers_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
GetStreamServersRsp::mutable_streamservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return &streamservers_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
GetStreamServersRsp::streamservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return streamservers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StreamSendingStart::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void StreamSendingStart::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void StreamSendingStart::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSendingStart::kStreamIdFieldNumber;
const int StreamSendingStart::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSendingStart::StreamSendingStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
}
StreamSendingStart::StreamSendingStart(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
}
StreamSendingStart::StreamSendingStart(const StreamSendingStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
}

void StreamSendingStart::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commoninvokeinfo_ = NULL;
  _cached_size_ = 0;
}

StreamSendingStart::~StreamSendingStart() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  SharedDtor();
}

void StreamSendingStart::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void StreamSendingStart::ArenaDtor(void* object) {
  StreamSendingStart* _this = reinterpret_cast< StreamSendingStart* >(object);
  (void)_this;
}
void StreamSendingStart::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamSendingStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSendingStart::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[10].descriptor;
}

const StreamSendingStart& StreamSendingStart::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamSendingStart* StreamSendingStart::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamSendingStart>(arena);
}

void StreamSendingStart::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
}

bool StreamSendingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  return false;
#undef DO_
}

void StreamSendingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 2;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
}

::google::protobuf::uint8* StreamSendingStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 2;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  return target;
}

size_t StreamSendingStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 2;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSendingStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSendingStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSendingStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
    MergeFrom(*source);
  }
}

void StreamSendingStart::MergeFrom(const StreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
}

void StreamSendingStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSendingStart::CopyFrom(const StreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSendingStart::IsInitialized() const {
  return true;
}

void StreamSendingStart::Swap(StreamSendingStart* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamSendingStart* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamSendingStart::UnsafeArenaSwap(StreamSendingStart* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamSendingStart::InternalSwap(StreamSendingStart* other) {
  stream_id_.Swap(&other->stream_id_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSendingStart::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSendingStart

// string stream_id = 1;
void StreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
  return stream_id_.Get();
}
void StreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}
void StreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}
void StreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}
::std::string* StreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}
void StreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 2;
bool StreamSendingStart::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void StreamSendingStart::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& StreamSendingStart::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void StreamSendingStart::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StreamSendingStartRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void StreamSendingStartRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void StreamSendingStartRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSendingStartRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSendingStartRsp::StreamSendingStartRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
}
StreamSendingStartRsp::StreamSendingStartRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
}
StreamSendingStartRsp::StreamSendingStartRsp(const StreamSendingStartRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
}

void StreamSendingStartRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

StreamSendingStartRsp::~StreamSendingStartRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  SharedDtor();
}

void StreamSendingStartRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void StreamSendingStartRsp::ArenaDtor(void* object) {
  StreamSendingStartRsp* _this = reinterpret_cast< StreamSendingStartRsp* >(object);
  (void)_this;
}
void StreamSendingStartRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamSendingStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSendingStartRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[11].descriptor;
}

const StreamSendingStartRsp& StreamSendingStartRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamSendingStartRsp* StreamSendingStartRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamSendingStartRsp>(arena);
}

void StreamSendingStartRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool StreamSendingStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  return false;
#undef DO_
}

void StreamSendingStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
}

::google::protobuf::uint8* StreamSendingStartRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  return target;
}

size_t StreamSendingStartRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSendingStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSendingStartRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSendingStartRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
    MergeFrom(*source);
  }
}

void StreamSendingStartRsp::MergeFrom(const StreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void StreamSendingStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSendingStartRsp::CopyFrom(const StreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSendingStartRsp::IsInitialized() const {
  return true;
}

void StreamSendingStartRsp::Swap(StreamSendingStartRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamSendingStartRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamSendingStartRsp::UnsafeArenaSwap(StreamSendingStartRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamSendingStartRsp::InternalSwap(StreamSendingStartRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSendingStartRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool StreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void StreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void StreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGroup::kGroupIdFieldNumber;
const int JoinGroup::kUserIdFieldNumber;
const int JoinGroup::kGroupTokenFieldNumber;
const int JoinGroup::kGroupCheckCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGroup::JoinGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.JoinGroup)
}
JoinGroup::JoinGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.JoinGroup)
}
JoinGroup::JoinGroup(const JoinGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  group_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_token().size() > 0) {
    group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_token(),
      GetArenaNoVirtual());
  }
  group_check_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_check_code().size() > 0) {
    group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_check_code(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.JoinGroup)
}

void JoinGroup::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_check_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

JoinGroup::~JoinGroup() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.JoinGroup)
  SharedDtor();
}

void JoinGroup::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_check_code_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void JoinGroup::ArenaDtor(void* object) {
  JoinGroup* _this = reinterpret_cast< JoinGroup* >(object);
  (void)_this;
}
void JoinGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void JoinGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroup::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[12].descriptor;
}

const JoinGroup& JoinGroup::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinGroup* JoinGroup::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<JoinGroup>(arena);
}

void JoinGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.JoinGroup)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_check_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool JoinGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.JoinGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.JoinGroup.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.JoinGroup.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_token = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_token().data(), this->group_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.JoinGroup.group_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_check_code = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_check_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_check_code().data(), this->group_check_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.JoinGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.JoinGroup)
  return false;
#undef DO_
}

void JoinGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.JoinGroup)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.JoinGroup.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.JoinGroup.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string group_token = 3;
  if (this->group_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_token().data(), this->group_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.JoinGroup.group_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_token(), output);
  }

  // string group_check_code = 4;
  if (this->group_check_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_check_code().data(), this->group_check_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_check_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.JoinGroup)
}

::google::protobuf::uint8* JoinGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.JoinGroup)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.JoinGroup.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.JoinGroup.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string group_token = 3;
  if (this->group_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_token().data(), this->group_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.JoinGroup.group_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_token(), target);
  }

  // string group_check_code = 4;
  if (this->group_check_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_check_code().data(), this->group_check_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_check_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.JoinGroup)
  return target;
}

size_t JoinGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.JoinGroup)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string group_token = 3;
  if (this->group_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_token());
  }

  // string group_check_code = 4;
  if (this->group_check_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_check_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.JoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.JoinGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.JoinGroup)
    MergeFrom(*source);
  }
}

void JoinGroup::MergeFrom(const JoinGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.JoinGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.group_token().size() > 0) {
    set_group_token(from.group_token());
  }
  if (from.group_check_code().size() > 0) {
    set_group_check_code(from.group_check_code());
  }
}

void JoinGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.JoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroup::CopyFrom(const JoinGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.JoinGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroup::IsInitialized() const {
  return true;
}

void JoinGroup::Swap(JoinGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    JoinGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void JoinGroup::UnsafeArenaSwap(JoinGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void JoinGroup::InternalSwap(JoinGroup* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  group_token_.Swap(&other->group_token_);
  group_check_code_.Swap(&other->group_check_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinGroup::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGroup

// string group_id = 1;
void JoinGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
  return group_id_.Get();
}
void JoinGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}
void JoinGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}
void JoinGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}
::std::string* JoinGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}
void JoinGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}

// string user_id = 2;
void JoinGroup::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroup::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
  return user_id_.Get();
}
void JoinGroup::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}
void JoinGroup::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}
void JoinGroup::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}
::std::string* JoinGroup::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroup::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}
void JoinGroup::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}

// string group_token = 3;
void JoinGroup::clear_group_token() {
  group_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroup::group_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
  return group_token_.Get();
}
void JoinGroup::set_group_token(const ::std::string& value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}
void JoinGroup::set_group_token(const char* value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}
void JoinGroup::set_group_token(const char* value,
    size_t size) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}
::std::string* JoinGroup::mutable_group_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
  return group_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::release_group_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
  
  return group_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::unsafe_arena_release_group_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroup::set_allocated_group_token(::std::string* group_token) {
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}
void JoinGroup::unsafe_arena_set_allocated_group_token(
    ::std::string* group_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}

// string group_check_code = 4;
void JoinGroup::clear_group_check_code() {
  group_check_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& JoinGroup::group_check_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
  return group_check_code_.Get();
}
void JoinGroup::set_group_check_code(const ::std::string& value) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}
void JoinGroup::set_group_check_code(const char* value) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}
void JoinGroup::set_group_check_code(const char* value,
    size_t size) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}
::std::string* JoinGroup::mutable_group_check_code() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
  return group_check_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::release_group_check_code() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
  
  return group_check_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* JoinGroup::unsafe_arena_release_group_check_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_check_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void JoinGroup::set_allocated_group_check_code(::std::string* group_check_code) {
  if (group_check_code != NULL) {
    
  } else {
    
  }
  group_check_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_check_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}
void JoinGroup::unsafe_arena_set_allocated_group_check_code(
    ::std::string* group_check_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_check_code != NULL) {
    
  } else {
    
  }
  group_check_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_check_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void JoinGroupRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void JoinGroupRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void JoinGroupRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoinGroupRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoinGroupRsp::JoinGroupRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
}
JoinGroupRsp::JoinGroupRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
}
JoinGroupRsp::JoinGroupRsp(const JoinGroupRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
}

void JoinGroupRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

JoinGroupRsp::~JoinGroupRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  SharedDtor();
}

void JoinGroupRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void JoinGroupRsp::ArenaDtor(void* object) {
  JoinGroupRsp* _this = reinterpret_cast< JoinGroupRsp* >(object);
  (void)_this;
}
void JoinGroupRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void JoinGroupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinGroupRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[13].descriptor;
}

const JoinGroupRsp& JoinGroupRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoinGroupRsp* JoinGroupRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<JoinGroupRsp>(arena);
}

void JoinGroupRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool JoinGroupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  return false;
#undef DO_
}

void JoinGroupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
}

::google::protobuf::uint8* JoinGroupRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  return target;
}

size_t JoinGroupRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinGroupRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGroupRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoinGroupRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
    MergeFrom(*source);
  }
}

void JoinGroupRsp::MergeFrom(const JoinGroupRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void JoinGroupRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGroupRsp::CopyFrom(const JoinGroupRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGroupRsp::IsInitialized() const {
  return true;
}

void JoinGroupRsp::Swap(JoinGroupRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    JoinGroupRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void JoinGroupRsp::UnsafeArenaSwap(JoinGroupRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void JoinGroupRsp::InternalSwap(JoinGroupRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoinGroupRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool JoinGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void JoinGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& JoinGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void JoinGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitGroup::kGroupIdFieldNumber;
const int QuitGroup::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitGroup::QuitGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.QuitGroup)
}
QuitGroup::QuitGroup(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.QuitGroup)
}
QuitGroup::QuitGroup(const QuitGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.QuitGroup)
}

void QuitGroup::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QuitGroup::~QuitGroup() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.QuitGroup)
  SharedDtor();
}

void QuitGroup::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void QuitGroup::ArenaDtor(void* object) {
  QuitGroup* _this = reinterpret_cast< QuitGroup* >(object);
  (void)_this;
}
void QuitGroup::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QuitGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitGroup::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[14].descriptor;
}

const QuitGroup& QuitGroup::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitGroup* QuitGroup::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QuitGroup>(arena);
}

void QuitGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.QuitGroup)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool QuitGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.QuitGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.QuitGroup.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.QuitGroup.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.QuitGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.QuitGroup)
  return false;
#undef DO_
}

void QuitGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.QuitGroup)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.QuitGroup.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.QuitGroup.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.QuitGroup)
}

::google::protobuf::uint8* QuitGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.QuitGroup)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.QuitGroup.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.QuitGroup.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.QuitGroup)
  return target;
}

size_t QuitGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.QuitGroup)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.QuitGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.QuitGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.QuitGroup)
    MergeFrom(*source);
  }
}

void QuitGroup::MergeFrom(const QuitGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.QuitGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
}

void QuitGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.QuitGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGroup::CopyFrom(const QuitGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.QuitGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroup::IsInitialized() const {
  return true;
}

void QuitGroup::Swap(QuitGroup* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QuitGroup* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void QuitGroup::UnsafeArenaSwap(QuitGroup* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QuitGroup::InternalSwap(QuitGroup* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitGroup::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitGroup

// string group_id = 1;
void QuitGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& QuitGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
  return group_id_.Get();
}
void QuitGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}
void QuitGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}
void QuitGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}
::std::string* QuitGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void QuitGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}
void QuitGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}

// string user_id = 2;
void QuitGroup::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& QuitGroup::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
  return user_id_.Get();
}
void QuitGroup::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}
void QuitGroup::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}
void QuitGroup::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}
::std::string* QuitGroup::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* QuitGroup::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void QuitGroup::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}
void QuitGroup::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void QuitGroupRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void QuitGroupRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void QuitGroupRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuitGroupRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuitGroupRsp::QuitGroupRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
}
QuitGroupRsp::QuitGroupRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
}
QuitGroupRsp::QuitGroupRsp(const QuitGroupRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
}

void QuitGroupRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

QuitGroupRsp::~QuitGroupRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  SharedDtor();
}

void QuitGroupRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void QuitGroupRsp::ArenaDtor(void* object) {
  QuitGroupRsp* _this = reinterpret_cast< QuitGroupRsp* >(object);
  (void)_this;
}
void QuitGroupRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QuitGroupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuitGroupRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[15].descriptor;
}

const QuitGroupRsp& QuitGroupRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

QuitGroupRsp* QuitGroupRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QuitGroupRsp>(arena);
}

void QuitGroupRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool QuitGroupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  return false;
#undef DO_
}

void QuitGroupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
}

::google::protobuf::uint8* QuitGroupRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  return target;
}

size_t QuitGroupRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuitGroupRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const QuitGroupRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QuitGroupRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
    MergeFrom(*source);
  }
}

void QuitGroupRsp::MergeFrom(const QuitGroupRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void QuitGroupRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuitGroupRsp::CopyFrom(const QuitGroupRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuitGroupRsp::IsInitialized() const {
  return true;
}

void QuitGroupRsp::Swap(QuitGroupRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QuitGroupRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void QuitGroupRsp::UnsafeArenaSwap(QuitGroupRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QuitGroupRsp::InternalSwap(QuitGroupRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QuitGroupRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuitGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool QuitGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void QuitGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& QuitGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void QuitGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStream::kGroupIdFieldNumber;
const int GetStream::kUserIdFieldNumber;
const int GetStream::kMediaIdFieldNumber;
const int GetStream::kMediaTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStream::GetStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.GetStream)
}
GetStream::GetStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.GetStream)
}
GetStream::GetStream(const GetStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.media_id().size() > 0) {
    media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_id(),
      GetArenaNoVirtual());
  }
  media_type_ = from.media_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.GetStream)
}

void GetStream::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  _cached_size_ = 0;
}

GetStream::~GetStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.GetStream)
  SharedDtor();
}

void GetStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  media_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetStream::ArenaDtor(void* object) {
  GetStream* _this = reinterpret_cast< GetStream* >(object);
  (void)_this;
}
void GetStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStream::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[16].descriptor;
}

const GetStream& GetStream::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStream* GetStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStream>(arena);
}

void GetStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.GetStream)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_type_ = 0;
}

bool GetStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.GetStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.GetStream.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.GetStream.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.GetStream.media_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_media_type(static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.GetStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.GetStream)
  return false;
#undef DO_
}

void GetStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.GetStream)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStream.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStream.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // string media_id = 3;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStream.media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->media_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->media_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.GetStream)
}

::google::protobuf::uint8* GetStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.GetStream)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStream.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStream.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // string media_id = 3;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.GetStream.media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->media_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->media_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.GetStream)
  return target;
}

size_t GetStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.GetStream)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string media_id = 3;
  if (this->media_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_id());
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.GetStream)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.GetStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.GetStream)
    MergeFrom(*source);
  }
}

void GetStream::MergeFrom(const GetStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.GetStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.media_id().size() > 0) {
    set_media_id(from.media_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void GetStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.GetStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStream::CopyFrom(const GetStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.GetStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStream::IsInitialized() const {
  return true;
}

void GetStream::Swap(GetStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStream::UnsafeArenaSwap(GetStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStream::InternalSwap(GetStream* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  media_id_.Swap(&other->media_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStream::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStream

// string group_id = 1;
void GetStream::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStream::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
  return group_id_.Get();
}
void GetStream::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}
void GetStream::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}
void GetStream::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}
::std::string* GetStream::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStream::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}
void GetStream::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}

// string user_id = 2;
void GetStream::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStream::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
  return user_id_.Get();
}
void GetStream::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}
void GetStream::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}
void GetStream::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}
::std::string* GetStream::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStream::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}
void GetStream::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}

// string media_id = 3;
void GetStream::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetStream::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
  return media_id_.Get();
}
void GetStream::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}
void GetStream::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}
void GetStream::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}
::std::string* GetStream::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetStream::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetStream::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}
void GetStream::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
void GetStream::clear_media_type() {
  media_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::MediaType GetStream::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStream.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
void GetStream::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStream.media_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GetStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GetStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamRsp::kResponseFieldNumber;
const int GetStreamRsp::kStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamRsp::GetStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
}
GetStreamRsp::GetStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  stream_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
}
GetStreamRsp::GetStreamRsp(const GetStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stream_(from.stream_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
}

void GetStreamRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

GetStreamRsp::~GetStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  SharedDtor();
}

void GetStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GetStreamRsp::ArenaDtor(void* object) {
  GetStreamRsp* _this = reinterpret_cast< GetStreamRsp* >(object);
  (void)_this;
}
void GetStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[17].descriptor;
}

const GetStreamRsp& GetStreamRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetStreamRsp* GetStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetStreamRsp>(arena);
}

void GetStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  stream_.Clear();
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool GetStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.fsmeeting.fsp.proto.common.Stream stream = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stream()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  return false;
#undef DO_
}

void GetStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // repeated .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  for (unsigned int i = 0, n = this->stream_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stream(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
}

::google::protobuf::uint8* GetStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // repeated .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  for (unsigned int i = 0, n = this->stream_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stream(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  return target;
}

size_t GetStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  size_t total_size = 0;

  // repeated .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  {
    unsigned int count = this->stream_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream(i));
    }
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
    MergeFrom(*source);
  }
}

void GetStreamRsp::MergeFrom(const GetStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_.MergeFrom(from.stream_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void GetStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamRsp::CopyFrom(const GetStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamRsp::IsInitialized() const {
  return true;
}

void GetStreamRsp::Swap(GetStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetStreamRsp::UnsafeArenaSwap(GetStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetStreamRsp::InternalSwap(GetStreamRsp* other) {
  stream_.UnsafeArenaSwap(&other->stream_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GetStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GetStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GetStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
}

// repeated .com.fsmeeting.fsp.proto.common.Stream stream = 2;
int GetStreamRsp::stream_size() const {
  return stream_.size();
}
void GetStreamRsp::clear_stream() {
  stream_.Clear();
}
const ::com::fsmeeting::fsp::proto::common::Stream& GetStreamRsp::stream(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return stream_.Get(index);
}
::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return stream_.Mutable(index);
}
::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::add_stream() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return stream_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::Stream >*
GetStreamRsp::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return &stream_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::Stream >&
GetStreamRsp::stream() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return stream_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamPublished::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamPublished::NotifyStreamPublished()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
}
NotifyStreamPublished::NotifyStreamPublished(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
}
NotifyStreamPublished::NotifyStreamPublished(const NotifyStreamPublished& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
}

void NotifyStreamPublished::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NotifyStreamPublished::~NotifyStreamPublished() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  SharedDtor();
}

void NotifyStreamPublished::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NotifyStreamPublished::ArenaDtor(void* object) {
  NotifyStreamPublished* _this = reinterpret_cast< NotifyStreamPublished* >(object);
  (void)_this;
}
void NotifyStreamPublished::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamPublished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamPublished::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[18].descriptor;
}

const NotifyStreamPublished& NotifyStreamPublished::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamPublished* NotifyStreamPublished::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamPublished>(arena);
}

void NotifyStreamPublished::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool NotifyStreamPublished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  return false;
#undef DO_
}

void NotifyStreamPublished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
}

::google::protobuf::uint8* NotifyStreamPublished::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  return target;
}

size_t NotifyStreamPublished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamPublished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamPublished* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamPublished>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
    MergeFrom(*source);
  }
}

void NotifyStreamPublished::MergeFrom(const NotifyStreamPublished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
}

void NotifyStreamPublished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamPublished::CopyFrom(const NotifyStreamPublished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamPublished::IsInitialized() const {
  return true;
}

void NotifyStreamPublished::Swap(NotifyStreamPublished* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamPublished* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamPublished::UnsafeArenaSwap(NotifyStreamPublished* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamPublished::InternalSwap(NotifyStreamPublished* other) {
  stream_id_.Swap(&other->stream_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamPublished::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamPublished

// string stream_id = 1;
void NotifyStreamPublished::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamPublished::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
  return stream_id_.Get();
}
void NotifyStreamPublished::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}
void NotifyStreamPublished::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}
void NotifyStreamPublished::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}
::std::string* NotifyStreamPublished::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamPublished::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamPublished::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}
void NotifyStreamPublished::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamPublishedRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyStreamPublishedRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyStreamPublishedRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamPublishedRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamPublishedRsp::NotifyStreamPublishedRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
}
NotifyStreamPublishedRsp::NotifyStreamPublishedRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
}
NotifyStreamPublishedRsp::NotifyStreamPublishedRsp(const NotifyStreamPublishedRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
}

void NotifyStreamPublishedRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamPublishedRsp::~NotifyStreamPublishedRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  SharedDtor();
}

void NotifyStreamPublishedRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyStreamPublishedRsp::ArenaDtor(void* object) {
  NotifyStreamPublishedRsp* _this = reinterpret_cast< NotifyStreamPublishedRsp* >(object);
  (void)_this;
}
void NotifyStreamPublishedRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamPublishedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamPublishedRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[19].descriptor;
}

const NotifyStreamPublishedRsp& NotifyStreamPublishedRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamPublishedRsp* NotifyStreamPublishedRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamPublishedRsp>(arena);
}

void NotifyStreamPublishedRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyStreamPublishedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  return false;
#undef DO_
}

void NotifyStreamPublishedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
}

::google::protobuf::uint8* NotifyStreamPublishedRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  return target;
}

size_t NotifyStreamPublishedRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamPublishedRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamPublishedRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamPublishedRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
    MergeFrom(*source);
  }
}

void NotifyStreamPublishedRsp::MergeFrom(const NotifyStreamPublishedRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyStreamPublishedRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamPublishedRsp::CopyFrom(const NotifyStreamPublishedRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamPublishedRsp::IsInitialized() const {
  return true;
}

void NotifyStreamPublishedRsp::Swap(NotifyStreamPublishedRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamPublishedRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamPublishedRsp::UnsafeArenaSwap(NotifyStreamPublishedRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamPublishedRsp::InternalSwap(NotifyStreamPublishedRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamPublishedRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamPublishedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyStreamPublishedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyStreamPublishedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamPublishedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyStreamPublishedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectStreamServer::kClientIdFieldNumber;
const int SelectStreamServer::kStreamIdFieldNumber;
const int SelectStreamServer::kStreamServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectStreamServer::SelectStreamServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
}
SelectStreamServer::SelectStreamServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  stream_server_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
}
SelectStreamServer::SelectStreamServer(const SelectStreamServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stream_server_(from.stream_server_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
}

void SelectStreamServer::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SelectStreamServer::~SelectStreamServer() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  SharedDtor();
}

void SelectStreamServer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SelectStreamServer::ArenaDtor(void* object) {
  SelectStreamServer* _this = reinterpret_cast< SelectStreamServer* >(object);
  (void)_this;
}
void SelectStreamServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SelectStreamServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectStreamServer::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[20].descriptor;
}

const SelectStreamServer& SelectStreamServer::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectStreamServer* SelectStreamServer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SelectStreamServer>(arena);
}

void SelectStreamServer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  stream_server_.Clear();
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SelectStreamServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stream_server()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  return false;
#undef DO_
}

void SelectStreamServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_id(), output);
  }

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 3;
  for (unsigned int i = 0, n = this->stream_server_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stream_server(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
}

::google::protobuf::uint8* SelectStreamServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_id(), target);
  }

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 3;
  for (unsigned int i = 0, n = this->stream_server_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stream_server(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  return target;
}

size_t SelectStreamServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  size_t total_size = 0;

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 3;
  {
    unsigned int count = this->stream_server_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stream_server(i));
    }
  }

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectStreamServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectStreamServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectStreamServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
    MergeFrom(*source);
  }
}

void SelectStreamServer::MergeFrom(const SelectStreamServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_server_.MergeFrom(from.stream_server_);
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
}

void SelectStreamServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectStreamServer::CopyFrom(const SelectStreamServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectStreamServer::IsInitialized() const {
  return true;
}

void SelectStreamServer::Swap(SelectStreamServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SelectStreamServer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SelectStreamServer::UnsafeArenaSwap(SelectStreamServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SelectStreamServer::InternalSwap(SelectStreamServer* other) {
  stream_server_.UnsafeArenaSwap(&other->stream_server_);
  client_id_.Swap(&other->client_id_);
  stream_id_.Swap(&other->stream_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectStreamServer::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectStreamServer

// string client_id = 1;
void SelectStreamServer::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SelectStreamServer::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
  return client_id_.Get();
}
void SelectStreamServer::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}
void SelectStreamServer::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}
void SelectStreamServer::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}
::std::string* SelectStreamServer::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SelectStreamServer::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SelectStreamServer::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SelectStreamServer::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}
void SelectStreamServer::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}

// string stream_id = 2;
void SelectStreamServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SelectStreamServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
  return stream_id_.Get();
}
void SelectStreamServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}
void SelectStreamServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}
void SelectStreamServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}
::std::string* SelectStreamServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SelectStreamServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SelectStreamServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SelectStreamServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}
void SelectStreamServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}

// repeated .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 3;
int SelectStreamServer::stream_server_size() const {
  return stream_server_.size();
}
void SelectStreamServer::clear_stream_server() {
  stream_server_.Clear();
}
const ::com::fsmeeting::fsp::proto::common::StreamServer& SelectStreamServer::stream_server(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return stream_server_.Get(index);
}
::com::fsmeeting::fsp::proto::common::StreamServer* SelectStreamServer::mutable_stream_server(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return stream_server_.Mutable(index);
}
::com::fsmeeting::fsp::proto::common::StreamServer* SelectStreamServer::add_stream_server() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return stream_server_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
SelectStreamServer::mutable_stream_server() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return &stream_server_;
}
const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
SelectStreamServer::stream_server() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return stream_server_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SelectStreamServerRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void SelectStreamServerRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void SelectStreamServerRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectStreamServerRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectStreamServerRsp::SelectStreamServerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
}
SelectStreamServerRsp::SelectStreamServerRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
}
SelectStreamServerRsp::SelectStreamServerRsp(const SelectStreamServerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
}

void SelectStreamServerRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

SelectStreamServerRsp::~SelectStreamServerRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  SharedDtor();
}

void SelectStreamServerRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void SelectStreamServerRsp::ArenaDtor(void* object) {
  SelectStreamServerRsp* _this = reinterpret_cast< SelectStreamServerRsp* >(object);
  (void)_this;
}
void SelectStreamServerRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SelectStreamServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectStreamServerRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[21].descriptor;
}

const SelectStreamServerRsp& SelectStreamServerRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectStreamServerRsp* SelectStreamServerRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SelectStreamServerRsp>(arena);
}

void SelectStreamServerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool SelectStreamServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  return false;
#undef DO_
}

void SelectStreamServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
}

::google::protobuf::uint8* SelectStreamServerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  return target;
}

size_t SelectStreamServerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectStreamServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SelectStreamServerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SelectStreamServerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
    MergeFrom(*source);
  }
}

void SelectStreamServerRsp::MergeFrom(const SelectStreamServerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void SelectStreamServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectStreamServerRsp::CopyFrom(const SelectStreamServerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectStreamServerRsp::IsInitialized() const {
  return true;
}

void SelectStreamServerRsp::Swap(SelectStreamServerRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SelectStreamServerRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SelectStreamServerRsp::UnsafeArenaSwap(SelectStreamServerRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SelectStreamServerRsp::InternalSwap(SelectStreamServerRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SelectStreamServerRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectStreamServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool SelectStreamServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void SelectStreamServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& SelectStreamServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void SelectStreamServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamSendingStart::_slow_mutable_commoninvokeinfo() {
  commoninvokeinfo_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::_slow_release_commoninvokeinfo() {
  if (commoninvokeinfo_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*commoninvokeinfo_);
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::unsafe_arena_release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
  
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
  return temp;
}
void NotifyStreamSendingStart::_slow_set_allocated_commoninvokeinfo(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*commoninvokeinfo) == NULL) {
      message_arena->Own(*commoninvokeinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*commoninvokeinfo)) {
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* new_commoninvokeinfo = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo >(
            message_arena);
      new_commoninvokeinfo->CopyFrom(**commoninvokeinfo);
      *commoninvokeinfo = new_commoninvokeinfo;
    }
}
void NotifyStreamSendingStart::unsafe_arena_set_allocated_commoninvokeinfo(
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStart::kRecvClientIdFieldNumber;
const int NotifyStreamSendingStart::kStreamIdFieldNumber;
const int NotifyStreamSendingStart::kClientIdFieldNumber;
const int NotifyStreamSendingStart::kCommonInvokeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStart::NotifyStreamSendingStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
}
NotifyStreamSendingStart::NotifyStreamSendingStart(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
}
NotifyStreamSendingStart::NotifyStreamSendingStart(const NotifyStreamSendingStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_client_id().size() > 0) {
    recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_client_id(),
      GetArenaNoVirtual());
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  if (from.has_commoninvokeinfo()) {
    commoninvokeinfo_ = new ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo(*from.commoninvokeinfo_);
  } else {
    commoninvokeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
}

void NotifyStreamSendingStart::SharedCtor() {
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commoninvokeinfo_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamSendingStart::~NotifyStreamSendingStart() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  SharedDtor();
}

void NotifyStreamSendingStart::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  recv_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete commoninvokeinfo_;
  }
}

void NotifyStreamSendingStart::ArenaDtor(void* object) {
  NotifyStreamSendingStart* _this = reinterpret_cast< NotifyStreamSendingStart* >(object);
  (void)_this;
}
void NotifyStreamSendingStart::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStart::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[22].descriptor;
}

const NotifyStreamSendingStart& NotifyStreamSendingStart::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStart* NotifyStreamSendingStart::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStart>(arena);
}

void NotifyStreamSendingStart::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) {
    delete commoninvokeinfo_;
  }
  commoninvokeinfo_ = NULL;
}

bool NotifyStreamSendingStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string recv_client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_client_id().data(), this->recv_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commoninvokeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  return false;
#undef DO_
}

void NotifyStreamSendingStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  // string recv_client_id = 1;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->recv_client_id(), output);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_id(), output);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->commoninvokeinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
}

::google::protobuf::uint8* NotifyStreamSendingStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  // string recv_client_id = 1;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->recv_client_id(), target);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_id(), target);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->commoninvokeinfo_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  return target;
}

size_t NotifyStreamSendingStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  size_t total_size = 0;

  // string recv_client_id = 1;
  if (this->recv_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_client_id());
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  if (this->has_commoninvokeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->commoninvokeinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStart::MergeFrom(const NotifyStreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.recv_client_id().size() > 0) {
    set_recv_client_id(from.recv_client_id());
  }
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.has_commoninvokeinfo()) {
    mutable_commoninvokeinfo()->::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::MergeFrom(from.commoninvokeinfo());
  }
}

void NotifyStreamSendingStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStart::CopyFrom(const NotifyStreamSendingStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStart::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStart::Swap(NotifyStreamSendingStart* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStart* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStart::UnsafeArenaSwap(NotifyStreamSendingStart* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStart::InternalSwap(NotifyStreamSendingStart* other) {
  recv_client_id_.Swap(&other->recv_client_id_);
  stream_id_.Swap(&other->stream_id_);
  client_id_.Swap(&other->client_id_);
  std::swap(commoninvokeinfo_, other->commoninvokeinfo_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStart::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStart

// string recv_client_id = 1;
void NotifyStreamSendingStart::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStart::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Get();
}
void NotifyStreamSendingStart::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}
void NotifyStreamSendingStart::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}
void NotifyStreamSendingStart::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}
::std::string* NotifyStreamSendingStart::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStart::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}
void NotifyStreamSendingStart::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}

// string stream_id = 2;
void NotifyStreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
  return stream_id_.Get();
}
void NotifyStreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}
void NotifyStreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}
void NotifyStreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}
::std::string* NotifyStreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}
void NotifyStreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}

// string client_id = 3;
void NotifyStreamSendingStart::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStart::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
  return client_id_.Get();
}
void NotifyStreamSendingStart::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}
void NotifyStreamSendingStart::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}
void NotifyStreamSendingStart::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}
::std::string* NotifyStreamSendingStart::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStart::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStart::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}
void NotifyStreamSendingStart::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
bool NotifyStreamSendingStart::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
void NotifyStreamSendingStart::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& NotifyStreamSendingStart::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_;
}
::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
 void NotifyStreamSendingStart::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamSendingStartRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyStreamSendingStartRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyStreamSendingStartRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStartRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStartRsp::NotifyStreamSendingStartRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
}
NotifyStreamSendingStartRsp::NotifyStreamSendingStartRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
}
NotifyStreamSendingStartRsp::NotifyStreamSendingStartRsp(const NotifyStreamSendingStartRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
}

void NotifyStreamSendingStartRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamSendingStartRsp::~NotifyStreamSendingStartRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  SharedDtor();
}

void NotifyStreamSendingStartRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyStreamSendingStartRsp::ArenaDtor(void* object) {
  NotifyStreamSendingStartRsp* _this = reinterpret_cast< NotifyStreamSendingStartRsp* >(object);
  (void)_this;
}
void NotifyStreamSendingStartRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStartRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[23].descriptor;
}

const NotifyStreamSendingStartRsp& NotifyStreamSendingStartRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStartRsp* NotifyStreamSendingStartRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStartRsp>(arena);
}

void NotifyStreamSendingStartRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyStreamSendingStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  return false;
#undef DO_
}

void NotifyStreamSendingStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
}

::google::protobuf::uint8* NotifyStreamSendingStartRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  return target;
}

size_t NotifyStreamSendingStartRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStartRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStartRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStartRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStartRsp::MergeFrom(const NotifyStreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyStreamSendingStartRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStartRsp::CopyFrom(const NotifyStreamSendingStartRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStartRsp::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStartRsp::Swap(NotifyStreamSendingStartRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStartRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStartRsp::UnsafeArenaSwap(NotifyStreamSendingStartRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStartRsp::InternalSwap(NotifyStreamSendingStartRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStartRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyStreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyStreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyStreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStop::kStreamIdFieldNumber;
const int NotifyStreamSendingStop::kRecvClientIdFieldNumber;
const int NotifyStreamSendingStop::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStop::NotifyStreamSendingStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
}
NotifyStreamSendingStop::NotifyStreamSendingStop(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
}
NotifyStreamSendingStop::NotifyStreamSendingStop(const NotifyStreamSendingStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recv_client_id().size() > 0) {
    recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recv_client_id(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
}

void NotifyStreamSendingStop::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recv_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NotifyStreamSendingStop::~NotifyStreamSendingStop() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  SharedDtor();
}

void NotifyStreamSendingStop::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  recv_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NotifyStreamSendingStop::ArenaDtor(void* object) {
  NotifyStreamSendingStop* _this = reinterpret_cast< NotifyStreamSendingStop* >(object);
  (void)_this;
}
void NotifyStreamSendingStop::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStop::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[24].descriptor;
}

const NotifyStreamSendingStop& NotifyStreamSendingStop::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStop* NotifyStreamSendingStop::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStop>(arena);
}

void NotifyStreamSendingStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool NotifyStreamSendingStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recv_client_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recv_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recv_client_id().data(), this->recv_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  return false;
#undef DO_
}

void NotifyStreamSendingStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recv_client_id(), output);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
}

::google::protobuf::uint8* NotifyStreamSendingStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recv_client_id().data(), this->recv_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recv_client_id(), target);
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  return target;
}

size_t NotifyStreamSendingStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string recv_client_id = 2;
  if (this->recv_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recv_client_id());
  }

  // string client_id = 3;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStop::MergeFrom(const NotifyStreamSendingStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.recv_client_id().size() > 0) {
    set_recv_client_id(from.recv_client_id());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
}

void NotifyStreamSendingStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStop::CopyFrom(const NotifyStreamSendingStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStop::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStop::Swap(NotifyStreamSendingStop* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStop* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStop::UnsafeArenaSwap(NotifyStreamSendingStop* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStop::InternalSwap(NotifyStreamSendingStop* other) {
  stream_id_.Swap(&other->stream_id_);
  recv_client_id_.Swap(&other->recv_client_id_);
  client_id_.Swap(&other->client_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStop::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStop

// string stream_id = 1;
void NotifyStreamSendingStop::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStop::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
  return stream_id_.Get();
}
void NotifyStreamSendingStop::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}
void NotifyStreamSendingStop::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}
void NotifyStreamSendingStop::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}
::std::string* NotifyStreamSendingStop::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStop::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}
void NotifyStreamSendingStop::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}

// string recv_client_id = 2;
void NotifyStreamSendingStop::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStop::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Get();
}
void NotifyStreamSendingStop::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}
void NotifyStreamSendingStop::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}
void NotifyStreamSendingStop::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}
::std::string* NotifyStreamSendingStop::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStop::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}
void NotifyStreamSendingStop::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}

// string client_id = 3;
void NotifyStreamSendingStop::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamSendingStop::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
  return client_id_.Get();
}
void NotifyStreamSendingStop::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}
void NotifyStreamSendingStop::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}
void NotifyStreamSendingStop::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}
::std::string* NotifyStreamSendingStop::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamSendingStop::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamSendingStop::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}
void NotifyStreamSendingStop::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamSendingStopRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyStreamSendingStopRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyStreamSendingStopRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamSendingStopRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamSendingStopRsp::NotifyStreamSendingStopRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
}
NotifyStreamSendingStopRsp::NotifyStreamSendingStopRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
}
NotifyStreamSendingStopRsp::NotifyStreamSendingStopRsp(const NotifyStreamSendingStopRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
}

void NotifyStreamSendingStopRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamSendingStopRsp::~NotifyStreamSendingStopRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  SharedDtor();
}

void NotifyStreamSendingStopRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyStreamSendingStopRsp::ArenaDtor(void* object) {
  NotifyStreamSendingStopRsp* _this = reinterpret_cast< NotifyStreamSendingStopRsp* >(object);
  (void)_this;
}
void NotifyStreamSendingStopRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamSendingStopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamSendingStopRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[25].descriptor;
}

const NotifyStreamSendingStopRsp& NotifyStreamSendingStopRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamSendingStopRsp* NotifyStreamSendingStopRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamSendingStopRsp>(arena);
}

void NotifyStreamSendingStopRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyStreamSendingStopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  return false;
#undef DO_
}

void NotifyStreamSendingStopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
}

::google::protobuf::uint8* NotifyStreamSendingStopRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  return target;
}

size_t NotifyStreamSendingStopRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamSendingStopRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamSendingStopRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamSendingStopRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
    MergeFrom(*source);
  }
}

void NotifyStreamSendingStopRsp::MergeFrom(const NotifyStreamSendingStopRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyStreamSendingStopRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamSendingStopRsp::CopyFrom(const NotifyStreamSendingStopRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamSendingStopRsp::IsInitialized() const {
  return true;
}

void NotifyStreamSendingStopRsp::Swap(NotifyStreamSendingStopRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamSendingStopRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamSendingStopRsp::UnsafeArenaSwap(NotifyStreamSendingStopRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamSendingStopRsp::InternalSwap(NotifyStreamSendingStopRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamSendingStopRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamSendingStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyStreamSendingStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyStreamSendingStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyStreamSendingStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyPublishStream::kClientIdFieldNumber;
const int NotifyPublishStream::kStreamIdFieldNumber;
const int NotifyPublishStream::kStreamPublishTokenFieldNumber;
const int NotifyPublishStream::kGroupIdFieldNumber;
const int NotifyPublishStream::kUserIdFieldNumber;
const int NotifyPublishStream::kMediaIdFieldNumber;
const int NotifyPublishStream::kMediaTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyPublishStream::NotifyPublishStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
}
NotifyPublishStream::NotifyPublishStream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
}
NotifyPublishStream::NotifyPublishStream(const NotifyPublishStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_publish_token().size() > 0) {
    stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_publish_token(),
      GetArenaNoVirtual());
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.media_id().size() > 0) {
    media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_id(),
      GetArenaNoVirtual());
  }
  media_type_ = from.media_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
}

void NotifyPublishStream::SharedCtor() {
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  _cached_size_ = 0;
}

NotifyPublishStream::~NotifyPublishStream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  SharedDtor();
}

void NotifyPublishStream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_publish_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  media_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NotifyPublishStream::ArenaDtor(void* object) {
  NotifyPublishStream* _this = reinterpret_cast< NotifyPublishStream* >(object);
  (void)_this;
}
void NotifyPublishStream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyPublishStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPublishStream::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[26].descriptor;
}

const NotifyPublishStream& NotifyPublishStream::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyPublishStream* NotifyPublishStream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyPublishStream>(arena);
}

void NotifyPublishStream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_type_ = 0;
}

bool NotifyPublishStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_publish_token = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_publish_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_publish_token().data(), this->stream_publish_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.MediaType media_type = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_media_type(static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  return false;
#undef DO_
}

void NotifyPublishStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stream_id(), output);
  }

  // string stream_publish_token = 3;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stream_publish_token(), output);
  }

  // string group_id = 4;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->group_id(), output);
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_id(), output);
  }

  // string media_id = 6;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->media_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 7;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->media_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
}

::google::protobuf::uint8* NotifyPublishStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stream_id(), target);
  }

  // string stream_publish_token = 3;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stream_publish_token(), target);
  }

  // string group_id = 4;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->group_id(), target);
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_id(), target);
  }

  // string media_id = 6;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->media_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 7;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->media_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  return target;
}

size_t NotifyPublishStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  size_t total_size = 0;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string stream_id = 2;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string stream_publish_token = 3;
  if (this->stream_publish_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_publish_token());
  }

  // string group_id = 4;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 5;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string media_id = 6;
  if (this->media_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_id());
  }

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 7;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPublishStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyPublishStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyPublishStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
    MergeFrom(*source);
  }
}

void NotifyPublishStream::MergeFrom(const NotifyPublishStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.stream_publish_token().size() > 0) {
    set_stream_publish_token(from.stream_publish_token());
  }
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.media_id().size() > 0) {
    set_media_id(from.media_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void NotifyPublishStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPublishStream::CopyFrom(const NotifyPublishStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPublishStream::IsInitialized() const {
  return true;
}

void NotifyPublishStream::Swap(NotifyPublishStream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyPublishStream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyPublishStream::UnsafeArenaSwap(NotifyPublishStream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyPublishStream::InternalSwap(NotifyPublishStream* other) {
  client_id_.Swap(&other->client_id_);
  stream_id_.Swap(&other->stream_id_);
  stream_publish_token_.Swap(&other->stream_publish_token_);
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  media_id_.Swap(&other->media_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyPublishStream::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyPublishStream

// string client_id = 1;
void NotifyPublishStream::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
  return client_id_.Get();
}
void NotifyPublishStream::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}
void NotifyPublishStream::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}
void NotifyPublishStream::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}
::std::string* NotifyPublishStream::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}
void NotifyPublishStream::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}

// string stream_id = 2;
void NotifyPublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
  return stream_id_.Get();
}
void NotifyPublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}
void NotifyPublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}
void NotifyPublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}
::std::string* NotifyPublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}
void NotifyPublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}

// string stream_publish_token = 3;
void NotifyPublishStream::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
  return stream_publish_token_.Get();
}
void NotifyPublishStream::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}
void NotifyPublishStream::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}
void NotifyPublishStream::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}
::std::string* NotifyPublishStream::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}
void NotifyPublishStream::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}

// string group_id = 4;
void NotifyPublishStream::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
  return group_id_.Get();
}
void NotifyPublishStream::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}
void NotifyPublishStream::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}
void NotifyPublishStream::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}
::std::string* NotifyPublishStream::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}
void NotifyPublishStream::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}

// string user_id = 5;
void NotifyPublishStream::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
  return user_id_.Get();
}
void NotifyPublishStream::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}
void NotifyPublishStream::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}
void NotifyPublishStream::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}
::std::string* NotifyPublishStream::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}
void NotifyPublishStream::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}

// string media_id = 6;
void NotifyPublishStream::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyPublishStream::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
  return media_id_.Get();
}
void NotifyPublishStream::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}
void NotifyPublishStream::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}
void NotifyPublishStream::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}
::std::string* NotifyPublishStream::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyPublishStream::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyPublishStream::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}
void NotifyPublishStream::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 7;
void NotifyPublishStream::clear_media_type() {
  media_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::MediaType NotifyPublishStream::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
void NotifyPublishStream::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyPublishStreamRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyPublishStreamRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyPublishStreamRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyPublishStreamRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyPublishStreamRsp::NotifyPublishStreamRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcp_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
}
NotifyPublishStreamRsp::NotifyPublishStreamRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcp_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
}
NotifyPublishStreamRsp::NotifyPublishStreamRsp(const NotifyPublishStreamRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
}

void NotifyPublishStreamRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyPublishStreamRsp::~NotifyPublishStreamRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  SharedDtor();
}

void NotifyPublishStreamRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyPublishStreamRsp::ArenaDtor(void* object) {
  NotifyPublishStreamRsp* _this = reinterpret_cast< NotifyPublishStreamRsp* >(object);
  (void)_this;
}
void NotifyPublishStreamRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyPublishStreamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPublishStreamRsp::descriptor() {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[27].descriptor;
}

const NotifyPublishStreamRsp& NotifyPublishStreamRsp::default_instance() {
  protobuf_fsp_2dcp_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyPublishStreamRsp* NotifyPublishStreamRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyPublishStreamRsp>(arena);
}

void NotifyPublishStreamRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyPublishStreamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  return false;
#undef DO_
}

void NotifyPublishStreamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
}

::google::protobuf::uint8* NotifyPublishStreamRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  return target;
}

size_t NotifyPublishStreamRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPublishStreamRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyPublishStreamRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyPublishStreamRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
    MergeFrom(*source);
  }
}

void NotifyPublishStreamRsp::MergeFrom(const NotifyPublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyPublishStreamRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPublishStreamRsp::CopyFrom(const NotifyPublishStreamRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPublishStreamRsp::IsInitialized() const {
  return true;
}

void NotifyPublishStreamRsp::Swap(NotifyPublishStreamRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyPublishStreamRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyPublishStreamRsp::UnsafeArenaSwap(NotifyPublishStreamRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyPublishStreamRsp::InternalSwap(NotifyPublishStreamRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyPublishStreamRsp::GetMetadata() const {
  protobuf_fsp_2dcp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcp_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyPublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyPublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyPublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyPublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyPublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cp
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

// @@protoc_insertion_point(global_scope)
