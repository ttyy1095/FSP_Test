// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-smd.proto

#ifndef PROTOBUF_fsp_2dsmd_2eproto__INCLUDED
#define PROTOBUF_fsp_2dsmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fsp-common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class BillInfo;
class BillInfoDefaultTypeInternal;
extern BillInfoDefaultTypeInternal _BillInfo_default_instance_;
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class CommonInfo;
class CommonInfoDefaultTypeInternal;
extern CommonInfoDefaultTypeInternal _CommonInfo_default_instance_;
class CommonInvokeInfo;
class CommonInvokeInfoDefaultTypeInternal;
extern CommonInvokeInfoDefaultTypeInternal _CommonInvokeInfo_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupServer;
class GroupServerDefaultTypeInternal;
extern GroupServerDefaultTypeInternal _GroupServer_default_instance_;
class NotifyStreamDestroied;
class NotifyStreamDestroiedDefaultTypeInternal;
extern NotifyStreamDestroiedDefaultTypeInternal _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRsp;
class NotifyStreamDestroiedRspDefaultTypeInternal;
extern NotifyStreamDestroiedRspDefaultTypeInternal _NotifyStreamDestroiedRsp_default_instance_;
class Proxy;
class ProxyDefaultTypeInternal;
extern ProxyDefaultTypeInternal _Proxy_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamServer;
class StreamServerDefaultTypeInternal;
extern StreamServerDefaultTypeInternal _StreamServer_default_instance_;
class StreamSourceChanged;
class StreamSourceChangedDefaultTypeInternal;
extern StreamSourceChangedDefaultTypeInternal _StreamSourceChanged_default_instance_;
class StreamSourceChangedRsp;
class StreamSourceChangedRspDefaultTypeInternal;
extern StreamSourceChangedRspDefaultTypeInternal _StreamSourceChangedRsp_default_instance_;
}  // namespace common
namespace smd {
class AccessConf;
class AccessConfDefaultTypeInternal;
extern AccessConfDefaultTypeInternal _AccessConf_default_instance_;
class AccessConfRsp;
class AccessConfRspDefaultTypeInternal;
extern AccessConfRspDefaultTypeInternal _AccessConfRsp_default_instance_;
class CpConf;
class CpConfDefaultTypeInternal;
extern CpConfDefaultTypeInternal _CpConf_default_instance_;
class CpConfRsp;
class CpConfRspDefaultTypeInternal;
extern CpConfRspDefaultTypeInternal _CpConfRsp_default_instance_;
class GcConf;
class GcConfDefaultTypeInternal;
extern GcConfDefaultTypeInternal _GcConf_default_instance_;
class GcConfRsp;
class GcConfRspDefaultTypeInternal;
extern GcConfRspDefaultTypeInternal _GcConfRsp_default_instance_;
class GroupAsConf;
class GroupAsConfDefaultTypeInternal;
extern GroupAsConfDefaultTypeInternal _GroupAsConf_default_instance_;
class GroupAsConfRsp;
class GroupAsConfRspDefaultTypeInternal;
extern GroupAsConfRspDefaultTypeInternal _GroupAsConfRsp_default_instance_;
class GsConf;
class GsConfDefaultTypeInternal;
extern GsConfDefaultTypeInternal _GsConf_default_instance_;
class GsConfRsp;
class GsConfRspDefaultTypeInternal;
extern GsConfRspDefaultTypeInternal _GsConfRsp_default_instance_;
class IceConf;
class IceConfDefaultTypeInternal;
extern IceConfDefaultTypeInternal _IceConf_default_instance_;
class IceConfRsp;
class IceConfRspDefaultTypeInternal;
extern IceConfRspDefaultTypeInternal _IceConfRsp_default_instance_;
class IpList;
class IpListDefaultTypeInternal;
extern IpListDefaultTypeInternal _IpList_default_instance_;
class MaConf;
class MaConfDefaultTypeInternal;
extern MaConfDefaultTypeInternal _MaConf_default_instance_;
class MaConfRsp;
class MaConfRspDefaultTypeInternal;
extern MaConfRspDefaultTypeInternal _MaConfRsp_default_instance_;
class MsConf;
class MsConfDefaultTypeInternal;
extern MsConfDefaultTypeInternal _MsConf_default_instance_;
class MsConfRsp;
class MsConfRspDefaultTypeInternal;
extern MsConfRspDefaultTypeInternal _MsConfRsp_default_instance_;
class RuleConf;
class RuleConfDefaultTypeInternal;
extern RuleConfDefaultTypeInternal _RuleConf_default_instance_;
class RuleConfRsp;
class RuleConfRspDefaultTypeInternal;
extern RuleConfRspDefaultTypeInternal _RuleConfRsp_default_instance_;
class SMDHeartbeat;
class SMDHeartbeatDefaultTypeInternal;
extern SMDHeartbeatDefaultTypeInternal _SMDHeartbeat_default_instance_;
class SMDHeartbeatRsp;
class SMDHeartbeatRspDefaultTypeInternal;
extern SMDHeartbeatRspDefaultTypeInternal _SMDHeartbeatRsp_default_instance_;
class ScConf;
class ScConfDefaultTypeInternal;
extern ScConfDefaultTypeInternal _ScConf_default_instance_;
class ScConfRsp;
class ScConfRspDefaultTypeInternal;
extern ScConfRspDefaultTypeInternal _ScConfRsp_default_instance_;
class ServiceConf;
class ServiceConfDefaultTypeInternal;
extern ServiceConfDefaultTypeInternal _ServiceConf_default_instance_;
class ServiceConfRsp;
class ServiceConfRspDefaultTypeInternal;
extern ServiceConfRspDefaultTypeInternal _ServiceConfRsp_default_instance_;
class ServiceOnline;
class ServiceOnlineDefaultTypeInternal;
extern ServiceOnlineDefaultTypeInternal _ServiceOnline_default_instance_;
class ServiceOnlineRsp;
class ServiceOnlineRspDefaultTypeInternal;
extern ServiceOnlineRspDefaultTypeInternal _ServiceOnlineRsp_default_instance_;
class ServiceQuery;
class ServiceQueryDefaultTypeInternal;
extern ServiceQueryDefaultTypeInternal _ServiceQuery_default_instance_;
class ServiceQueryRsp;
class ServiceQueryRspDefaultTypeInternal;
extern ServiceQueryRspDefaultTypeInternal _ServiceQueryRsp_default_instance_;
class ServiceStop;
class ServiceStopDefaultTypeInternal;
extern ServiceStopDefaultTypeInternal _ServiceStop_default_instance_;
class ServiceStopRsp;
class ServiceStopRspDefaultTypeInternal;
extern ServiceStopRspDefaultTypeInternal _ServiceStopRsp_default_instance_;
class SpConf;
class SpConfDefaultTypeInternal;
extern SpConfDefaultTypeInternal _SpConf_default_instance_;
class SpConfRsp;
class SpConfRspDefaultTypeInternal;
extern SpConfRspDefaultTypeInternal _SpConfRsp_default_instance_;
class SsConf;
class SsConfDefaultTypeInternal;
extern SsConfDefaultTypeInternal _SsConf_default_instance_;
class SsConfRsp;
class SsConfRspDefaultTypeInternal;
extern SsConfRspDefaultTypeInternal _SsConfRsp_default_instance_;
class StreamAsConf;
class StreamAsConfDefaultTypeInternal;
extern StreamAsConfDefaultTypeInternal _StreamAsConf_default_instance_;
class StreamAsConfRsp;
class StreamAsConfRspDefaultTypeInternal;
extern StreamAsConfRspDefaultTypeInternal _StreamAsConfRsp_default_instance_;
}  // namespace smd
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace smd {

namespace protobuf_fsp_2dsmd_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fsp_2dsmd_2eproto

enum ProtoDictionary {
  Enum2UnknownInterface = 0,
  Enum2SsConf = 8001,
  Enum2SsConfRsp = 8002,
  Enum2CpConf = 8003,
  Enum2CpConfRsp = 8004,
  Enum2StreamAsConf = 8005,
  Enum2StreamAsConfRsp = 8006,
  Enum2ScConf = 8007,
  Enum2ScConfRsp = 8008,
  Enum2AccessConf = 8009,
  Enum2AccessConfRsp = 8010,
  Enum2SpConf = 8011,
  Enum2SpConfRsp = 8012,
  Enum2IceConf = 8013,
  Enum2IceConfRsp = 8014,
  Enum2GsConf = 8015,
  Enum2GsConfRsp = 8016,
  Enum2GcConf = 8017,
  Enum2GcConfRsp = 8018,
  Enum2GroupAsConf = 8019,
  Enum2GroupAsConfRsp = 8020,
  Enum2ServiceConf = 8021,
  Enum2ServiceConfRsp = 8022,
  Enum2ServiceOnline = 8023,
  Enum2ServiceOnlineRsp = 8024,
  Enum2ServiceStop = 8025,
  Enum2ServiceStopRsp = 8026,
  Enum2SMDHeartbeat = 8027,
  Enum2SMDHeartbeatRsp = 8028,
  ProtoDictionary_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoDictionary_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoDictionary_IsValid(int value);
const ProtoDictionary ProtoDictionary_MIN = Enum2UnknownInterface;
const ProtoDictionary ProtoDictionary_MAX = Enum2SMDHeartbeatRsp;
const int ProtoDictionary_ARRAYSIZE = ProtoDictionary_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor();
inline const ::std::string& ProtoDictionary_Name(ProtoDictionary value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDictionary_descriptor(), value);
}
inline bool ProtoDictionary_Parse(
    const ::std::string& name, ProtoDictionary* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDictionary>(
    ProtoDictionary_descriptor(), name, value);
}
enum ServiceQueryType {
  EnumAvailableServices = 0,
  EnumInstalledServices = 1,
  EnumServiceDistribution = 2,
  EnumAllSmds = 3,
  EnumActiveSmds = 4,
  ServiceQueryType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceQueryType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceQueryType_IsValid(int value);
const ServiceQueryType ServiceQueryType_MIN = EnumAvailableServices;
const ServiceQueryType ServiceQueryType_MAX = EnumActiveSmds;
const int ServiceQueryType_ARRAYSIZE = ServiceQueryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceQueryType_descriptor();
inline const ::std::string& ServiceQueryType_Name(ServiceQueryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceQueryType_descriptor(), value);
}
inline bool ServiceQueryType_Parse(
    const ::std::string& name, ServiceQueryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceQueryType>(
    ServiceQueryType_descriptor(), name, value);
}
// ===================================================================

class SMDHeartbeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.SMDHeartbeat) */ {
 public:
  SMDHeartbeat();
  virtual ~SMDHeartbeat();

  SMDHeartbeat(const SMDHeartbeat& from);

  inline SMDHeartbeat& operator=(const SMDHeartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMDHeartbeat& default_instance();

  static inline const SMDHeartbeat* internal_default_instance() {
    return reinterpret_cast<const SMDHeartbeat*>(
               &_SMDHeartbeat_default_instance_);
  }

  void UnsafeArenaSwap(SMDHeartbeat* other);
  void Swap(SMDHeartbeat* other);

  // implements Message ----------------------------------------------

  inline SMDHeartbeat* New() const PROTOBUF_FINAL { return New(NULL); }

  SMDHeartbeat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SMDHeartbeat& from);
  void MergeFrom(const SMDHeartbeat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SMDHeartbeat* other);
  protected:
  explicit SMDHeartbeat(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMDHeartbeatRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp) */ {
 public:
  SMDHeartbeatRsp();
  virtual ~SMDHeartbeatRsp();

  SMDHeartbeatRsp(const SMDHeartbeatRsp& from);

  inline SMDHeartbeatRsp& operator=(const SMDHeartbeatRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMDHeartbeatRsp& default_instance();

  static inline const SMDHeartbeatRsp* internal_default_instance() {
    return reinterpret_cast<const SMDHeartbeatRsp*>(
               &_SMDHeartbeatRsp_default_instance_);
  }

  void UnsafeArenaSwap(SMDHeartbeatRsp* other);
  void Swap(SMDHeartbeatRsp* other);

  // implements Message ----------------------------------------------

  inline SMDHeartbeatRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SMDHeartbeatRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SMDHeartbeatRsp& from);
  void MergeFrom(const SMDHeartbeatRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SMDHeartbeatRsp* other);
  protected:
  explicit SMDHeartbeatRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceOnline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ServiceOnline) */ {
 public:
  ServiceOnline();
  virtual ~ServiceOnline();

  ServiceOnline(const ServiceOnline& from);

  inline ServiceOnline& operator=(const ServiceOnline& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceOnline& default_instance();

  static inline const ServiceOnline* internal_default_instance() {
    return reinterpret_cast<const ServiceOnline*>(
               &_ServiceOnline_default_instance_);
  }

  void UnsafeArenaSwap(ServiceOnline* other);
  void Swap(ServiceOnline* other);

  // implements Message ----------------------------------------------

  inline ServiceOnline* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceOnline* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceOnline& from);
  void MergeFrom(const ServiceOnline& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceOnline* other);
  protected:
  explicit ServiceOnline(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string available_services = 3;
  int available_services_size() const;
  void clear_available_services();
  static const int kAvailableServicesFieldNumber = 3;
  const ::std::string& available_services(int index) const;
  ::std::string* mutable_available_services(int index);
  void set_available_services(int index, const ::std::string& value);
  void set_available_services(int index, const char* value);
  void set_available_services(int index, const char* value, size_t size);
  ::std::string* add_available_services();
  void add_available_services(const ::std::string& value);
  void add_available_services(const char* value);
  void add_available_services(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& available_services() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_available_services();

  // string smd_name = 1;
  void clear_smd_name();
  static const int kSmdNameFieldNumber = 1;
  const ::std::string& smd_name() const;
  void set_smd_name(const ::std::string& value);
  void set_smd_name(const char* value);
  void set_smd_name(const char* value, size_t size);
  ::std::string* mutable_smd_name();
  ::std::string* release_smd_name();
  void set_allocated_smd_name(::std::string* smd_name);
  ::std::string* unsafe_arena_release_smd_name();
  void unsafe_arena_set_allocated_smd_name(
      ::std::string* smd_name);

  // string smd_report_addr = 2;
  void clear_smd_report_addr();
  static const int kSmdReportAddrFieldNumber = 2;
  const ::std::string& smd_report_addr() const;
  void set_smd_report_addr(const ::std::string& value);
  void set_smd_report_addr(const char* value);
  void set_smd_report_addr(const char* value, size_t size);
  ::std::string* mutable_smd_report_addr();
  ::std::string* release_smd_report_addr();
  void set_allocated_smd_report_addr(::std::string* smd_report_addr);
  ::std::string* unsafe_arena_release_smd_report_addr();
  void unsafe_arena_set_allocated_smd_report_addr(
      ::std::string* smd_report_addr);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ServiceOnline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> available_services_;
  ::google::protobuf::internal::ArenaStringPtr smd_name_;
  ::google::protobuf::internal::ArenaStringPtr smd_report_addr_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceOnlineRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp) */ {
 public:
  ServiceOnlineRsp();
  virtual ~ServiceOnlineRsp();

  ServiceOnlineRsp(const ServiceOnlineRsp& from);

  inline ServiceOnlineRsp& operator=(const ServiceOnlineRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceOnlineRsp& default_instance();

  static inline const ServiceOnlineRsp* internal_default_instance() {
    return reinterpret_cast<const ServiceOnlineRsp*>(
               &_ServiceOnlineRsp_default_instance_);
  }

  void UnsafeArenaSwap(ServiceOnlineRsp* other);
  void Swap(ServiceOnlineRsp* other);

  // implements Message ----------------------------------------------

  inline ServiceOnlineRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceOnlineRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceOnlineRsp& from);
  void MergeFrom(const ServiceOnlineRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceOnlineRsp* other);
  protected:
  explicit ServiceOnlineRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ServiceStop) */ {
 public:
  ServiceStop();
  virtual ~ServiceStop();

  ServiceStop(const ServiceStop& from);

  inline ServiceStop& operator=(const ServiceStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceStop& default_instance();

  static inline const ServiceStop* internal_default_instance() {
    return reinterpret_cast<const ServiceStop*>(
               &_ServiceStop_default_instance_);
  }

  void UnsafeArenaSwap(ServiceStop* other);
  void Swap(ServiceStop* other);

  // implements Message ----------------------------------------------

  inline ServiceStop* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceStop* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceStop& from);
  void MergeFrom(const ServiceStop& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceStop* other);
  protected:
  explicit ServiceStop(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string smd_name = 1;
  void clear_smd_name();
  static const int kSmdNameFieldNumber = 1;
  const ::std::string& smd_name() const;
  void set_smd_name(const ::std::string& value);
  void set_smd_name(const char* value);
  void set_smd_name(const char* value, size_t size);
  ::std::string* mutable_smd_name();
  ::std::string* release_smd_name();
  void set_allocated_smd_name(::std::string* smd_name);
  ::std::string* unsafe_arena_release_smd_name();
  void unsafe_arena_set_allocated_smd_name(
      ::std::string* smd_name);

  // string service_name = 2;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);
  ::std::string* unsafe_arena_release_service_name();
  void unsafe_arena_set_allocated_service_name(
      ::std::string* service_name);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ServiceStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr smd_name_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceStopRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ServiceStopRsp) */ {
 public:
  ServiceStopRsp();
  virtual ~ServiceStopRsp();

  ServiceStopRsp(const ServiceStopRsp& from);

  inline ServiceStopRsp& operator=(const ServiceStopRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceStopRsp& default_instance();

  static inline const ServiceStopRsp* internal_default_instance() {
    return reinterpret_cast<const ServiceStopRsp*>(
               &_ServiceStopRsp_default_instance_);
  }

  void UnsafeArenaSwap(ServiceStopRsp* other);
  void Swap(ServiceStopRsp* other);

  // implements Message ----------------------------------------------

  inline ServiceStopRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceStopRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceStopRsp& from);
  void MergeFrom(const ServiceStopRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceStopRsp* other);
  protected:
  explicit ServiceStopRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ServiceConf) */ {
 public:
  ServiceConf();
  virtual ~ServiceConf();

  ServiceConf(const ServiceConf& from);

  inline ServiceConf& operator=(const ServiceConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceConf& default_instance();

  static inline const ServiceConf* internal_default_instance() {
    return reinterpret_cast<const ServiceConf*>(
               &_ServiceConf_default_instance_);
  }

  void UnsafeArenaSwap(ServiceConf* other);
  void Swap(ServiceConf* other);

  // implements Message ----------------------------------------------

  inline ServiceConf* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceConf& from);
  void MergeFrom(const ServiceConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceConf* other);
  protected:
  explicit ServiceConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string smd_name = 1;
  void clear_smd_name();
  static const int kSmdNameFieldNumber = 1;
  const ::std::string& smd_name() const;
  void set_smd_name(const ::std::string& value);
  void set_smd_name(const char* value);
  void set_smd_name(const char* value, size_t size);
  ::std::string* mutable_smd_name();
  ::std::string* release_smd_name();
  void set_allocated_smd_name(::std::string* smd_name);
  ::std::string* unsafe_arena_release_smd_name();
  void unsafe_arena_set_allocated_smd_name(
      ::std::string* smd_name);

  // string service_name = 2;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 2;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);
  ::std::string* unsafe_arena_release_service_name();
  void unsafe_arena_set_allocated_service_name(
      ::std::string* service_name);

  // string download_url = 3;
  void clear_download_url();
  static const int kDownloadUrlFieldNumber = 3;
  const ::std::string& download_url() const;
  void set_download_url(const ::std::string& value);
  void set_download_url(const char* value);
  void set_download_url(const char* value, size_t size);
  ::std::string* mutable_download_url();
  ::std::string* release_download_url();
  void set_allocated_download_url(::std::string* download_url);
  ::std::string* unsafe_arena_release_download_url();
  void unsafe_arena_set_allocated_download_url(
      ::std::string* download_url);

  // bytes config = 4;
  void clear_config();
  static const int kConfigFieldNumber = 4;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  void set_config(const char* value);
  void set_config(const void* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);
  ::std::string* unsafe_arena_release_config();
  void unsafe_arena_set_allocated_config(
      ::std::string* config);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ServiceConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr smd_name_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr download_url_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ServiceConfRsp) */ {
 public:
  ServiceConfRsp();
  virtual ~ServiceConfRsp();

  ServiceConfRsp(const ServiceConfRsp& from);

  inline ServiceConfRsp& operator=(const ServiceConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceConfRsp& default_instance();

  static inline const ServiceConfRsp* internal_default_instance() {
    return reinterpret_cast<const ServiceConfRsp*>(
               &_ServiceConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(ServiceConfRsp* other);
  void Swap(ServiceConfRsp* other);

  // implements Message ----------------------------------------------

  inline ServiceConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceConfRsp& from);
  void MergeFrom(const ServiceConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceConfRsp* other);
  protected:
  explicit ServiceConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string service_name = 1;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);
  ::std::string* unsafe_arena_release_service_name();
  void unsafe_arena_set_allocated_service_name(
      ::std::string* service_name);

  // string service_report_addr = 2;
  void clear_service_report_addr();
  static const int kServiceReportAddrFieldNumber = 2;
  const ::std::string& service_report_addr() const;
  void set_service_report_addr(const ::std::string& value);
  void set_service_report_addr(const char* value);
  void set_service_report_addr(const char* value, size_t size);
  ::std::string* mutable_service_report_addr();
  ::std::string* release_service_report_addr();
  void set_allocated_service_report_addr(::std::string* service_report_addr);
  ::std::string* unsafe_arena_release_service_report_addr();
  void unsafe_arena_set_allocated_service_report_addr(
      ::std::string* service_report_addr);

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 3;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 3;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr service_report_addr_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ServiceQuery) */ {
 public:
  ServiceQuery();
  virtual ~ServiceQuery();

  ServiceQuery(const ServiceQuery& from);

  inline ServiceQuery& operator=(const ServiceQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceQuery& default_instance();

  static inline const ServiceQuery* internal_default_instance() {
    return reinterpret_cast<const ServiceQuery*>(
               &_ServiceQuery_default_instance_);
  }

  void UnsafeArenaSwap(ServiceQuery* other);
  void Swap(ServiceQuery* other);

  // implements Message ----------------------------------------------

  inline ServiceQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceQuery& from);
  void MergeFrom(const ServiceQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceQuery* other);
  protected:
  explicit ServiceQuery(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string query_argument = 2;
  void clear_query_argument();
  static const int kQueryArgumentFieldNumber = 2;
  const ::std::string& query_argument() const;
  void set_query_argument(const ::std::string& value);
  void set_query_argument(const char* value);
  void set_query_argument(const char* value, size_t size);
  ::std::string* mutable_query_argument();
  ::std::string* release_query_argument();
  void set_allocated_query_argument(::std::string* query_argument);
  ::std::string* unsafe_arena_release_query_argument();
  void unsafe_arena_set_allocated_query_argument(
      ::std::string* query_argument);

  // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
  void clear_query_type();
  static const int kQueryTypeFieldNumber = 1;
  ::com::fsmeeting::fsp::proto::smd::ServiceQueryType query_type() const;
  void set_query_type(::com::fsmeeting::fsp::proto::smd::ServiceQueryType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ServiceQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr query_argument_;
  int query_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServiceQueryRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp) */ {
 public:
  ServiceQueryRsp();
  virtual ~ServiceQueryRsp();

  ServiceQueryRsp(const ServiceQueryRsp& from);

  inline ServiceQueryRsp& operator=(const ServiceQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceQueryRsp& default_instance();

  static inline const ServiceQueryRsp* internal_default_instance() {
    return reinterpret_cast<const ServiceQueryRsp*>(
               &_ServiceQueryRsp_default_instance_);
  }

  void UnsafeArenaSwap(ServiceQueryRsp* other);
  void Swap(ServiceQueryRsp* other);

  // implements Message ----------------------------------------------

  inline ServiceQueryRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceQueryRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceQueryRsp& from);
  void MergeFrom(const ServiceQueryRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceQueryRsp* other);
  protected:
  explicit ServiceQueryRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string query_result = 3;
  int query_result_size() const;
  void clear_query_result();
  static const int kQueryResultFieldNumber = 3;
  const ::std::string& query_result(int index) const;
  ::std::string* mutable_query_result(int index);
  void set_query_result(int index, const ::std::string& value);
  void set_query_result(int index, const char* value);
  void set_query_result(int index, const char* value, size_t size);
  ::std::string* add_query_result();
  void add_query_result(const ::std::string& value);
  void add_query_result(const char* value);
  void add_query_result(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& query_result() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_query_result();

  // string query_argument = 2;
  void clear_query_argument();
  static const int kQueryArgumentFieldNumber = 2;
  const ::std::string& query_argument() const;
  void set_query_argument(const ::std::string& value);
  void set_query_argument(const char* value);
  void set_query_argument(const char* value, size_t size);
  ::std::string* mutable_query_argument();
  ::std::string* release_query_argument();
  void set_allocated_query_argument(::std::string* query_argument);
  ::std::string* unsafe_arena_release_query_argument();
  void unsafe_arena_set_allocated_query_argument(
      ::std::string* query_argument);

  // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
  void clear_query_type();
  static const int kQueryTypeFieldNumber = 1;
  ::com::fsmeeting::fsp::proto::smd::ServiceQueryType query_type() const;
  void set_query_type(::com::fsmeeting::fsp::proto::smd::ServiceQueryType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> query_result_;
  ::google::protobuf::internal::ArenaStringPtr query_argument_;
  int query_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SsConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.SsConf) */ {
 public:
  SsConf();
  virtual ~SsConf();

  SsConf(const SsConf& from);

  inline SsConf& operator=(const SsConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SsConf& default_instance();

  static inline const SsConf* internal_default_instance() {
    return reinterpret_cast<const SsConf*>(
               &_SsConf_default_instance_);
  }

  void UnsafeArenaSwap(SsConf* other);
  void Swap(SsConf* other);

  // implements Message ----------------------------------------------

  inline SsConf* New() const PROTOBUF_FINAL { return New(NULL); }

  SsConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SsConf& from);
  void MergeFrom(const SsConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SsConf* other);
  protected:
  explicit SsConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string kafka_brokers = 2;
  void clear_kafka_brokers();
  static const int kKafkaBrokersFieldNumber = 2;
  const ::std::string& kafka_brokers() const;
  void set_kafka_brokers(const ::std::string& value);
  void set_kafka_brokers(const char* value);
  void set_kafka_brokers(const char* value, size_t size);
  ::std::string* mutable_kafka_brokers();
  ::std::string* release_kafka_brokers();
  void set_allocated_kafka_brokers(::std::string* kafka_brokers);
  ::std::string* unsafe_arena_release_kafka_brokers();
  void unsafe_arena_set_allocated_kafka_brokers(
      ::std::string* kafka_brokers);

  // string sc_topic = 3;
  void clear_sc_topic();
  static const int kScTopicFieldNumber = 3;
  const ::std::string& sc_topic() const;
  void set_sc_topic(const ::std::string& value);
  void set_sc_topic(const char* value);
  void set_sc_topic(const char* value, size_t size);
  ::std::string* mutable_sc_topic();
  ::std::string* release_sc_topic();
  void set_allocated_sc_topic(::std::string* sc_topic);
  ::std::string* unsafe_arena_release_sc_topic();
  void unsafe_arena_set_allocated_sc_topic(
      ::std::string* sc_topic);

  // string instance_id = 4;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 4;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);
  ::std::string* unsafe_arena_release_instance_id();
  void unsafe_arena_set_allocated_instance_id(
      ::std::string* instance_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.SsConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr kafka_brokers_;
  ::google::protobuf::internal::ArenaStringPtr sc_topic_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SsConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.SsConfRsp) */ {
 public:
  SsConfRsp();
  virtual ~SsConfRsp();

  SsConfRsp(const SsConfRsp& from);

  inline SsConfRsp& operator=(const SsConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SsConfRsp& default_instance();

  static inline const SsConfRsp* internal_default_instance() {
    return reinterpret_cast<const SsConfRsp*>(
               &_SsConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(SsConfRsp* other);
  void Swap(SsConfRsp* other);

  // implements Message ----------------------------------------------

  inline SsConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SsConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SsConfRsp& from);
  void MergeFrom(const SsConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SsConfRsp* other);
  protected:
  explicit SsConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.SsConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CpConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.CpConf) */ {
 public:
  CpConf();
  virtual ~CpConf();

  CpConf(const CpConf& from);

  inline CpConf& operator=(const CpConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CpConf& default_instance();

  static inline const CpConf* internal_default_instance() {
    return reinterpret_cast<const CpConf*>(
               &_CpConf_default_instance_);
  }

  void UnsafeArenaSwap(CpConf* other);
  void Swap(CpConf* other);

  // implements Message ----------------------------------------------

  inline CpConf* New() const PROTOBUF_FINAL { return New(NULL); }

  CpConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CpConf& from);
  void MergeFrom(const CpConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CpConf* other);
  protected:
  explicit CpConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string kafka_brokers = 2;
  void clear_kafka_brokers();
  static const int kKafkaBrokersFieldNumber = 2;
  const ::std::string& kafka_brokers() const;
  void set_kafka_brokers(const ::std::string& value);
  void set_kafka_brokers(const char* value);
  void set_kafka_brokers(const char* value, size_t size);
  ::std::string* mutable_kafka_brokers();
  ::std::string* release_kafka_brokers();
  void set_allocated_kafka_brokers(::std::string* kafka_brokers);
  ::std::string* unsafe_arena_release_kafka_brokers();
  void unsafe_arena_set_allocated_kafka_brokers(
      ::std::string* kafka_brokers);

  // string sc_topic = 3;
  void clear_sc_topic();
  static const int kScTopicFieldNumber = 3;
  const ::std::string& sc_topic() const;
  void set_sc_topic(const ::std::string& value);
  void set_sc_topic(const char* value);
  void set_sc_topic(const char* value, size_t size);
  ::std::string* mutable_sc_topic();
  ::std::string* release_sc_topic();
  void set_allocated_sc_topic(::std::string* sc_topic);
  ::std::string* unsafe_arena_release_sc_topic();
  void unsafe_arena_set_allocated_sc_topic(
      ::std::string* sc_topic);

  // string instance_id = 4;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 4;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);
  ::std::string* unsafe_arena_release_instance_id();
  void unsafe_arena_set_allocated_instance_id(
      ::std::string* instance_id);

  // string session_app_id = 5;
  void clear_session_app_id();
  static const int kSessionAppIdFieldNumber = 5;
  const ::std::string& session_app_id() const;
  void set_session_app_id(const ::std::string& value);
  void set_session_app_id(const char* value);
  void set_session_app_id(const char* value, size_t size);
  ::std::string* mutable_session_app_id();
  ::std::string* release_session_app_id();
  void set_allocated_session_app_id(::std::string* session_app_id);
  ::std::string* unsafe_arena_release_session_app_id();
  void unsafe_arena_set_allocated_session_app_id(
      ::std::string* session_app_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.CpConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr kafka_brokers_;
  ::google::protobuf::internal::ArenaStringPtr sc_topic_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::protobuf::internal::ArenaStringPtr session_app_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CpConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.CpConfRsp) */ {
 public:
  CpConfRsp();
  virtual ~CpConfRsp();

  CpConfRsp(const CpConfRsp& from);

  inline CpConfRsp& operator=(const CpConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CpConfRsp& default_instance();

  static inline const CpConfRsp* internal_default_instance() {
    return reinterpret_cast<const CpConfRsp*>(
               &_CpConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(CpConfRsp* other);
  void Swap(CpConfRsp* other);

  // implements Message ----------------------------------------------

  inline CpConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CpConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CpConfRsp& from);
  void MergeFrom(const CpConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CpConfRsp* other);
  protected:
  explicit CpConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.CpConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamAsConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.StreamAsConf) */ {
 public:
  StreamAsConf();
  virtual ~StreamAsConf();

  StreamAsConf(const StreamAsConf& from);

  inline StreamAsConf& operator=(const StreamAsConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamAsConf& default_instance();

  static inline const StreamAsConf* internal_default_instance() {
    return reinterpret_cast<const StreamAsConf*>(
               &_StreamAsConf_default_instance_);
  }

  void UnsafeArenaSwap(StreamAsConf* other);
  void Swap(StreamAsConf* other);

  // implements Message ----------------------------------------------

  inline StreamAsConf* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamAsConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamAsConf& from);
  void MergeFrom(const StreamAsConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamAsConf* other);
  protected:
  explicit StreamAsConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string access_url = 1;
  void clear_access_url();
  static const int kAccessUrlFieldNumber = 1;
  const ::std::string& access_url() const;
  void set_access_url(const ::std::string& value);
  void set_access_url(const char* value);
  void set_access_url(const char* value, size_t size);
  ::std::string* mutable_access_url();
  ::std::string* release_access_url();
  void set_allocated_access_url(::std::string* access_url);
  ::std::string* unsafe_arena_release_access_url();
  void unsafe_arena_set_allocated_access_url(
      ::std::string* access_url);

  // string session_app_id = 2;
  void clear_session_app_id();
  static const int kSessionAppIdFieldNumber = 2;
  const ::std::string& session_app_id() const;
  void set_session_app_id(const ::std::string& value);
  void set_session_app_id(const char* value);
  void set_session_app_id(const char* value, size_t size);
  ::std::string* mutable_session_app_id();
  ::std::string* release_session_app_id();
  void set_allocated_session_app_id(::std::string* session_app_id);
  ::std::string* unsafe_arena_release_session_app_id();
  void unsafe_arena_set_allocated_session_app_id(
      ::std::string* session_app_id);

  // string debug_mode = 3;
  void clear_debug_mode();
  static const int kDebugModeFieldNumber = 3;
  const ::std::string& debug_mode() const;
  void set_debug_mode(const ::std::string& value);
  void set_debug_mode(const char* value);
  void set_debug_mode(const char* value, size_t size);
  ::std::string* mutable_debug_mode();
  ::std::string* release_debug_mode();
  void set_allocated_debug_mode(::std::string* debug_mode);
  ::std::string* unsafe_arena_release_debug_mode();
  void unsafe_arena_set_allocated_debug_mode(
      ::std::string* debug_mode);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.StreamAsConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr access_url_;
  ::google::protobuf::internal::ArenaStringPtr session_app_id_;
  ::google::protobuf::internal::ArenaStringPtr debug_mode_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamAsConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp) */ {
 public:
  StreamAsConfRsp();
  virtual ~StreamAsConfRsp();

  StreamAsConfRsp(const StreamAsConfRsp& from);

  inline StreamAsConfRsp& operator=(const StreamAsConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamAsConfRsp& default_instance();

  static inline const StreamAsConfRsp* internal_default_instance() {
    return reinterpret_cast<const StreamAsConfRsp*>(
               &_StreamAsConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(StreamAsConfRsp* other);
  void Swap(StreamAsConfRsp* other);

  // implements Message ----------------------------------------------

  inline StreamAsConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamAsConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamAsConfRsp& from);
  void MergeFrom(const StreamAsConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamAsConfRsp* other);
  protected:
  explicit StreamAsConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupAsConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.GroupAsConf) */ {
 public:
  GroupAsConf();
  virtual ~GroupAsConf();

  GroupAsConf(const GroupAsConf& from);

  inline GroupAsConf& operator=(const GroupAsConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupAsConf& default_instance();

  static inline const GroupAsConf* internal_default_instance() {
    return reinterpret_cast<const GroupAsConf*>(
               &_GroupAsConf_default_instance_);
  }

  void UnsafeArenaSwap(GroupAsConf* other);
  void Swap(GroupAsConf* other);

  // implements Message ----------------------------------------------

  inline GroupAsConf* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupAsConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupAsConf& from);
  void MergeFrom(const GroupAsConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupAsConf* other);
  protected:
  explicit GroupAsConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string access_url = 1;
  void clear_access_url();
  static const int kAccessUrlFieldNumber = 1;
  const ::std::string& access_url() const;
  void set_access_url(const ::std::string& value);
  void set_access_url(const char* value);
  void set_access_url(const char* value, size_t size);
  ::std::string* mutable_access_url();
  ::std::string* release_access_url();
  void set_allocated_access_url(::std::string* access_url);
  ::std::string* unsafe_arena_release_access_url();
  void unsafe_arena_set_allocated_access_url(
      ::std::string* access_url);

  // string ice_addr = 2;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 2;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string dev_id = 3;
  void clear_dev_id();
  static const int kDevIdFieldNumber = 3;
  const ::std::string& dev_id() const;
  void set_dev_id(const ::std::string& value);
  void set_dev_id(const char* value);
  void set_dev_id(const char* value, size_t size);
  ::std::string* mutable_dev_id();
  ::std::string* release_dev_id();
  void set_allocated_dev_id(::std::string* dev_id);
  ::std::string* unsafe_arena_release_dev_id();
  void unsafe_arena_set_allocated_dev_id(
      ::std::string* dev_id);

  // string dev_verify_code = 4;
  void clear_dev_verify_code();
  static const int kDevVerifyCodeFieldNumber = 4;
  const ::std::string& dev_verify_code() const;
  void set_dev_verify_code(const ::std::string& value);
  void set_dev_verify_code(const char* value);
  void set_dev_verify_code(const char* value, size_t size);
  ::std::string* mutable_dev_verify_code();
  ::std::string* release_dev_verify_code();
  void set_allocated_dev_verify_code(::std::string* dev_verify_code);
  ::std::string* unsafe_arena_release_dev_verify_code();
  void unsafe_arena_set_allocated_dev_verify_code(
      ::std::string* dev_verify_code);

  // string app_id = 5;
  void clear_app_id();
  static const int kAppIdFieldNumber = 5;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // string verification_code = 6;
  void clear_verification_code();
  static const int kVerificationCodeFieldNumber = 6;
  const ::std::string& verification_code() const;
  void set_verification_code(const ::std::string& value);
  void set_verification_code(const char* value);
  void set_verification_code(const char* value, size_t size);
  ::std::string* mutable_verification_code();
  ::std::string* release_verification_code();
  void set_allocated_verification_code(::std::string* verification_code);
  ::std::string* unsafe_arena_release_verification_code();
  void unsafe_arena_set_allocated_verification_code(
      ::std::string* verification_code);

  // string dev_group = 7;
  void clear_dev_group();
  static const int kDevGroupFieldNumber = 7;
  const ::std::string& dev_group() const;
  void set_dev_group(const ::std::string& value);
  void set_dev_group(const char* value);
  void set_dev_group(const char* value, size_t size);
  ::std::string* mutable_dev_group();
  ::std::string* release_dev_group();
  void set_allocated_dev_group(::std::string* dev_group);
  ::std::string* unsafe_arena_release_dev_group();
  void unsafe_arena_set_allocated_dev_group(
      ::std::string* dev_group);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.GroupAsConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr access_url_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr dev_id_;
  ::google::protobuf::internal::ArenaStringPtr dev_verify_code_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr verification_code_;
  ::google::protobuf::internal::ArenaStringPtr dev_group_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupAsConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp) */ {
 public:
  GroupAsConfRsp();
  virtual ~GroupAsConfRsp();

  GroupAsConfRsp(const GroupAsConfRsp& from);

  inline GroupAsConfRsp& operator=(const GroupAsConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupAsConfRsp& default_instance();

  static inline const GroupAsConfRsp* internal_default_instance() {
    return reinterpret_cast<const GroupAsConfRsp*>(
               &_GroupAsConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(GroupAsConfRsp* other);
  void Swap(GroupAsConfRsp* other);

  // implements Message ----------------------------------------------

  inline GroupAsConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupAsConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupAsConfRsp& from);
  void MergeFrom(const GroupAsConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupAsConfRsp* other);
  protected:
  explicit GroupAsConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ScConf) */ {
 public:
  ScConf();
  virtual ~ScConf();

  ScConf(const ScConf& from);

  inline ScConf& operator=(const ScConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScConf& default_instance();

  static inline const ScConf* internal_default_instance() {
    return reinterpret_cast<const ScConf*>(
               &_ScConf_default_instance_);
  }

  void UnsafeArenaSwap(ScConf* other);
  void Swap(ScConf* other);

  // implements Message ----------------------------------------------

  inline ScConf* New() const PROTOBUF_FINAL { return New(NULL); }

  ScConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScConf& from);
  void MergeFrom(const ScConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScConf* other);
  protected:
  explicit ScConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string kafka_brokers = 2;
  void clear_kafka_brokers();
  static const int kKafkaBrokersFieldNumber = 2;
  const ::std::string& kafka_brokers() const;
  void set_kafka_brokers(const ::std::string& value);
  void set_kafka_brokers(const char* value);
  void set_kafka_brokers(const char* value, size_t size);
  ::std::string* mutable_kafka_brokers();
  ::std::string* release_kafka_brokers();
  void set_allocated_kafka_brokers(::std::string* kafka_brokers);
  ::std::string* unsafe_arena_release_kafka_brokers();
  void unsafe_arena_set_allocated_kafka_brokers(
      ::std::string* kafka_brokers);

  // string zookeeper_servers = 3;
  void clear_zookeeper_servers();
  static const int kZookeeperServersFieldNumber = 3;
  const ::std::string& zookeeper_servers() const;
  void set_zookeeper_servers(const ::std::string& value);
  void set_zookeeper_servers(const char* value);
  void set_zookeeper_servers(const char* value, size_t size);
  ::std::string* mutable_zookeeper_servers();
  ::std::string* release_zookeeper_servers();
  void set_allocated_zookeeper_servers(::std::string* zookeeper_servers);
  ::std::string* unsafe_arena_release_zookeeper_servers();
  void unsafe_arena_set_allocated_zookeeper_servers(
      ::std::string* zookeeper_servers);

  // string sc_topic = 4;
  void clear_sc_topic();
  static const int kScTopicFieldNumber = 4;
  const ::std::string& sc_topic() const;
  void set_sc_topic(const ::std::string& value);
  void set_sc_topic(const char* value);
  void set_sc_topic(const char* value, size_t size);
  ::std::string* mutable_sc_topic();
  ::std::string* release_sc_topic();
  void set_allocated_sc_topic(::std::string* sc_topic);
  ::std::string* unsafe_arena_release_sc_topic();
  void unsafe_arena_set_allocated_sc_topic(
      ::std::string* sc_topic);

  // string sc_group_topic = 5;
  void clear_sc_group_topic();
  static const int kScGroupTopicFieldNumber = 5;
  const ::std::string& sc_group_topic() const;
  void set_sc_group_topic(const ::std::string& value);
  void set_sc_group_topic(const char* value);
  void set_sc_group_topic(const char* value, size_t size);
  ::std::string* mutable_sc_group_topic();
  ::std::string* release_sc_group_topic();
  void set_allocated_sc_group_topic(::std::string* sc_group_topic);
  ::std::string* unsafe_arena_release_sc_group_topic();
  void unsafe_arena_set_allocated_sc_group_topic(
      ::std::string* sc_group_topic);

  // string consumer_client_id = 6;
  void clear_consumer_client_id();
  static const int kConsumerClientIdFieldNumber = 6;
  const ::std::string& consumer_client_id() const;
  void set_consumer_client_id(const ::std::string& value);
  void set_consumer_client_id(const char* value);
  void set_consumer_client_id(const char* value, size_t size);
  ::std::string* mutable_consumer_client_id();
  ::std::string* release_consumer_client_id();
  void set_allocated_consumer_client_id(::std::string* consumer_client_id);
  ::std::string* unsafe_arena_release_consumer_client_id();
  void unsafe_arena_set_allocated_consumer_client_id(
      ::std::string* consumer_client_id);

  // string lock_timeout = 11;
  void clear_lock_timeout();
  static const int kLockTimeoutFieldNumber = 11;
  const ::std::string& lock_timeout() const;
  void set_lock_timeout(const ::std::string& value);
  void set_lock_timeout(const char* value);
  void set_lock_timeout(const char* value, size_t size);
  ::std::string* mutable_lock_timeout();
  ::std::string* release_lock_timeout();
  void set_allocated_lock_timeout(::std::string* lock_timeout);
  ::std::string* unsafe_arena_release_lock_timeout();
  void unsafe_arena_set_allocated_lock_timeout(
      ::std::string* lock_timeout);

  // string topic_partitions = 7;
  void clear_topic_partitions();
  static const int kTopicPartitionsFieldNumber = 7;
  const ::std::string& topic_partitions() const;
  void set_topic_partitions(const ::std::string& value);
  void set_topic_partitions(const char* value);
  void set_topic_partitions(const char* value, size_t size);
  ::std::string* mutable_topic_partitions();
  ::std::string* release_topic_partitions();
  void set_allocated_topic_partitions(::std::string* topic_partitions);
  ::std::string* unsafe_arena_release_topic_partitions();
  void unsafe_arena_set_allocated_topic_partitions(
      ::std::string* topic_partitions);

  // string topic_replication = 8;
  void clear_topic_replication();
  static const int kTopicReplicationFieldNumber = 8;
  const ::std::string& topic_replication() const;
  void set_topic_replication(const ::std::string& value);
  void set_topic_replication(const char* value);
  void set_topic_replication(const char* value, size_t size);
  ::std::string* mutable_topic_replication();
  ::std::string* release_topic_replication();
  void set_allocated_topic_replication(::std::string* topic_replication);
  ::std::string* unsafe_arena_release_topic_replication();
  void unsafe_arena_set_allocated_topic_replication(
      ::std::string* topic_replication);

  // string router_status_return_size = 9;
  void clear_router_status_return_size();
  static const int kRouterStatusReturnSizeFieldNumber = 9;
  const ::std::string& router_status_return_size() const;
  void set_router_status_return_size(const ::std::string& value);
  void set_router_status_return_size(const char* value);
  void set_router_status_return_size(const char* value, size_t size);
  ::std::string* mutable_router_status_return_size();
  ::std::string* release_router_status_return_size();
  void set_allocated_router_status_return_size(::std::string* router_status_return_size);
  ::std::string* unsafe_arena_release_router_status_return_size();
  void unsafe_arena_set_allocated_router_status_return_size(
      ::std::string* router_status_return_size);

  // string protocol_version = 10;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 10;
  const ::std::string& protocol_version() const;
  void set_protocol_version(const ::std::string& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  ::std::string* mutable_protocol_version();
  ::std::string* release_protocol_version();
  void set_allocated_protocol_version(::std::string* protocol_version);
  ::std::string* unsafe_arena_release_protocol_version();
  void unsafe_arena_set_allocated_protocol_version(
      ::std::string* protocol_version);

  // string retry_policy = 12;
  void clear_retry_policy();
  static const int kRetryPolicyFieldNumber = 12;
  const ::std::string& retry_policy() const;
  void set_retry_policy(const ::std::string& value);
  void set_retry_policy(const char* value);
  void set_retry_policy(const char* value, size_t size);
  ::std::string* mutable_retry_policy();
  ::std::string* release_retry_policy();
  void set_allocated_retry_policy(::std::string* retry_policy);
  ::std::string* unsafe_arena_release_retry_policy();
  void unsafe_arena_set_allocated_retry_policy(
      ::std::string* retry_policy);

  // string root_path = 13;
  void clear_root_path();
  static const int kRootPathFieldNumber = 13;
  const ::std::string& root_path() const;
  void set_root_path(const ::std::string& value);
  void set_root_path(const char* value);
  void set_root_path(const char* value, size_t size);
  ::std::string* mutable_root_path();
  ::std::string* release_root_path();
  void set_allocated_root_path(::std::string* root_path);
  ::std::string* unsafe_arena_release_root_path();
  void unsafe_arena_set_allocated_root_path(
      ::std::string* root_path);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ScConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr kafka_brokers_;
  ::google::protobuf::internal::ArenaStringPtr zookeeper_servers_;
  ::google::protobuf::internal::ArenaStringPtr sc_topic_;
  ::google::protobuf::internal::ArenaStringPtr sc_group_topic_;
  ::google::protobuf::internal::ArenaStringPtr consumer_client_id_;
  ::google::protobuf::internal::ArenaStringPtr lock_timeout_;
  ::google::protobuf::internal::ArenaStringPtr topic_partitions_;
  ::google::protobuf::internal::ArenaStringPtr topic_replication_;
  ::google::protobuf::internal::ArenaStringPtr router_status_return_size_;
  ::google::protobuf::internal::ArenaStringPtr protocol_version_;
  ::google::protobuf::internal::ArenaStringPtr retry_policy_;
  ::google::protobuf::internal::ArenaStringPtr root_path_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.ScConfRsp) */ {
 public:
  ScConfRsp();
  virtual ~ScConfRsp();

  ScConfRsp(const ScConfRsp& from);

  inline ScConfRsp& operator=(const ScConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScConfRsp& default_instance();

  static inline const ScConfRsp* internal_default_instance() {
    return reinterpret_cast<const ScConfRsp*>(
               &_ScConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(ScConfRsp* other);
  void Swap(ScConfRsp* other);

  // implements Message ----------------------------------------------

  inline ScConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ScConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScConfRsp& from);
  void MergeFrom(const ScConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScConfRsp* other);
  protected:
  explicit ScConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.ScConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.AccessConf) */ {
 public:
  AccessConf();
  virtual ~AccessConf();

  AccessConf(const AccessConf& from);

  inline AccessConf& operator=(const AccessConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessConf& default_instance();

  static inline const AccessConf* internal_default_instance() {
    return reinterpret_cast<const AccessConf*>(
               &_AccessConf_default_instance_);
  }

  void UnsafeArenaSwap(AccessConf* other);
  void Swap(AccessConf* other);

  // implements Message ----------------------------------------------

  inline AccessConf* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessConf& from);
  void MergeFrom(const AccessConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessConf* other);
  protected:
  explicit AccessConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.AccessConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccessConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.AccessConfRsp) */ {
 public:
  AccessConfRsp();
  virtual ~AccessConfRsp();

  AccessConfRsp(const AccessConfRsp& from);

  inline AccessConfRsp& operator=(const AccessConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccessConfRsp& default_instance();

  static inline const AccessConfRsp* internal_default_instance() {
    return reinterpret_cast<const AccessConfRsp*>(
               &_AccessConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(AccessConfRsp* other);
  void Swap(AccessConfRsp* other);

  // implements Message ----------------------------------------------

  inline AccessConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  AccessConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccessConfRsp& from);
  void MergeFrom(const AccessConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccessConfRsp* other);
  protected:
  explicit AccessConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.SpConf) */ {
 public:
  SpConf();
  virtual ~SpConf();

  SpConf(const SpConf& from);

  inline SpConf& operator=(const SpConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpConf& default_instance();

  static inline const SpConf* internal_default_instance() {
    return reinterpret_cast<const SpConf*>(
               &_SpConf_default_instance_);
  }

  void UnsafeArenaSwap(SpConf* other);
  void Swap(SpConf* other);

  // implements Message ----------------------------------------------

  inline SpConf* New() const PROTOBUF_FINAL { return New(NULL); }

  SpConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpConf& from);
  void MergeFrom(const SpConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpConf* other);
  protected:
  explicit SpConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string kafka_brokers = 2;
  void clear_kafka_brokers();
  static const int kKafkaBrokersFieldNumber = 2;
  const ::std::string& kafka_brokers() const;
  void set_kafka_brokers(const ::std::string& value);
  void set_kafka_brokers(const char* value);
  void set_kafka_brokers(const char* value, size_t size);
  ::std::string* mutable_kafka_brokers();
  ::std::string* release_kafka_brokers();
  void set_allocated_kafka_brokers(::std::string* kafka_brokers);
  ::std::string* unsafe_arena_release_kafka_brokers();
  void unsafe_arena_set_allocated_kafka_brokers(
      ::std::string* kafka_brokers);

  // string zookeeper_servers = 3;
  void clear_zookeeper_servers();
  static const int kZookeeperServersFieldNumber = 3;
  const ::std::string& zookeeper_servers() const;
  void set_zookeeper_servers(const ::std::string& value);
  void set_zookeeper_servers(const char* value);
  void set_zookeeper_servers(const char* value, size_t size);
  ::std::string* mutable_zookeeper_servers();
  ::std::string* release_zookeeper_servers();
  void set_allocated_zookeeper_servers(::std::string* zookeeper_servers);
  ::std::string* unsafe_arena_release_zookeeper_servers();
  void unsafe_arena_set_allocated_zookeeper_servers(
      ::std::string* zookeeper_servers);

  // string sp_topic = 4;
  void clear_sp_topic();
  static const int kSpTopicFieldNumber = 4;
  const ::std::string& sp_topic() const;
  void set_sp_topic(const ::std::string& value);
  void set_sp_topic(const char* value);
  void set_sp_topic(const char* value, size_t size);
  ::std::string* mutable_sp_topic();
  ::std::string* release_sp_topic();
  void set_allocated_sp_topic(::std::string* sp_topic);
  ::std::string* unsafe_arena_release_sp_topic();
  void unsafe_arena_set_allocated_sp_topic(
      ::std::string* sp_topic);

  // string sc_group_topic = 5;
  void clear_sc_group_topic();
  static const int kScGroupTopicFieldNumber = 5;
  const ::std::string& sc_group_topic() const;
  void set_sc_group_topic(const ::std::string& value);
  void set_sc_group_topic(const char* value);
  void set_sc_group_topic(const char* value, size_t size);
  ::std::string* mutable_sc_group_topic();
  ::std::string* release_sc_group_topic();
  void set_allocated_sc_group_topic(::std::string* sc_group_topic);
  ::std::string* unsafe_arena_release_sc_group_topic();
  void unsafe_arena_set_allocated_sc_group_topic(
      ::std::string* sc_group_topic);

  // string gc_group_topic = 6;
  void clear_gc_group_topic();
  static const int kGcGroupTopicFieldNumber = 6;
  const ::std::string& gc_group_topic() const;
  void set_gc_group_topic(const ::std::string& value);
  void set_gc_group_topic(const char* value);
  void set_gc_group_topic(const char* value, size_t size);
  ::std::string* mutable_gc_group_topic();
  ::std::string* release_gc_group_topic();
  void set_allocated_gc_group_topic(::std::string* gc_group_topic);
  ::std::string* unsafe_arena_release_gc_group_topic();
  void unsafe_arena_set_allocated_gc_group_topic(
      ::std::string* gc_group_topic);

  // string sp_server_id = 7;
  void clear_sp_server_id();
  static const int kSpServerIdFieldNumber = 7;
  const ::std::string& sp_server_id() const;
  void set_sp_server_id(const ::std::string& value);
  void set_sp_server_id(const char* value);
  void set_sp_server_id(const char* value, size_t size);
  ::std::string* mutable_sp_server_id();
  ::std::string* release_sp_server_id();
  void set_allocated_sp_server_id(::std::string* sp_server_id);
  ::std::string* unsafe_arena_release_sp_server_id();
  void unsafe_arena_set_allocated_sp_server_id(
      ::std::string* sp_server_id);

  // string topic_partitions = 8;
  void clear_topic_partitions();
  static const int kTopicPartitionsFieldNumber = 8;
  const ::std::string& topic_partitions() const;
  void set_topic_partitions(const ::std::string& value);
  void set_topic_partitions(const char* value);
  void set_topic_partitions(const char* value, size_t size);
  ::std::string* mutable_topic_partitions();
  ::std::string* release_topic_partitions();
  void set_allocated_topic_partitions(::std::string* topic_partitions);
  ::std::string* unsafe_arena_release_topic_partitions();
  void unsafe_arena_set_allocated_topic_partitions(
      ::std::string* topic_partitions);

  // string topic_replication = 9;
  void clear_topic_replication();
  static const int kTopicReplicationFieldNumber = 9;
  const ::std::string& topic_replication() const;
  void set_topic_replication(const ::std::string& value);
  void set_topic_replication(const char* value);
  void set_topic_replication(const char* value, size_t size);
  ::std::string* mutable_topic_replication();
  ::std::string* release_topic_replication();
  void set_allocated_topic_replication(::std::string* topic_replication);
  ::std::string* unsafe_arena_release_topic_replication();
  void unsafe_arena_set_allocated_topic_replication(
      ::std::string* topic_replication);

  // string protocol_version = 10;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 10;
  const ::std::string& protocol_version() const;
  void set_protocol_version(const ::std::string& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  ::std::string* mutable_protocol_version();
  ::std::string* release_protocol_version();
  void set_allocated_protocol_version(::std::string* protocol_version);
  ::std::string* unsafe_arena_release_protocol_version();
  void unsafe_arena_set_allocated_protocol_version(
      ::std::string* protocol_version);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.SpConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr kafka_brokers_;
  ::google::protobuf::internal::ArenaStringPtr zookeeper_servers_;
  ::google::protobuf::internal::ArenaStringPtr sp_topic_;
  ::google::protobuf::internal::ArenaStringPtr sc_group_topic_;
  ::google::protobuf::internal::ArenaStringPtr gc_group_topic_;
  ::google::protobuf::internal::ArenaStringPtr sp_server_id_;
  ::google::protobuf::internal::ArenaStringPtr topic_partitions_;
  ::google::protobuf::internal::ArenaStringPtr topic_replication_;
  ::google::protobuf::internal::ArenaStringPtr protocol_version_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.SpConfRsp) */ {
 public:
  SpConfRsp();
  virtual ~SpConfRsp();

  SpConfRsp(const SpConfRsp& from);

  inline SpConfRsp& operator=(const SpConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpConfRsp& default_instance();

  static inline const SpConfRsp* internal_default_instance() {
    return reinterpret_cast<const SpConfRsp*>(
               &_SpConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(SpConfRsp* other);
  void Swap(SpConfRsp* other);

  // implements Message ----------------------------------------------

  inline SpConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SpConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpConfRsp& from);
  void MergeFrom(const SpConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpConfRsp* other);
  protected:
  explicit SpConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.SpConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IceConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.IceConf) */ {
 public:
  IceConf();
  virtual ~IceConf();

  IceConf(const IceConf& from);

  inline IceConf& operator=(const IceConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const IceConf& default_instance();

  static inline const IceConf* internal_default_instance() {
    return reinterpret_cast<const IceConf*>(
               &_IceConf_default_instance_);
  }

  void UnsafeArenaSwap(IceConf* other);
  void Swap(IceConf* other);

  // implements Message ----------------------------------------------

  inline IceConf* New() const PROTOBUF_FINAL { return New(NULL); }

  IceConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IceConf& from);
  void MergeFrom(const IceConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IceConf* other);
  protected:
  explicit IceConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string redis_addr = 1;
  void clear_redis_addr();
  static const int kRedisAddrFieldNumber = 1;
  const ::std::string& redis_addr() const;
  void set_redis_addr(const ::std::string& value);
  void set_redis_addr(const char* value);
  void set_redis_addr(const char* value, size_t size);
  ::std::string* mutable_redis_addr();
  ::std::string* release_redis_addr();
  void set_allocated_redis_addr(::std::string* redis_addr);
  ::std::string* unsafe_arena_release_redis_addr();
  void unsafe_arena_set_allocated_redis_addr(
      ::std::string* redis_addr);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.IceConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr redis_addr_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IceConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.IceConfRsp) */ {
 public:
  IceConfRsp();
  virtual ~IceConfRsp();

  IceConfRsp(const IceConfRsp& from);

  inline IceConfRsp& operator=(const IceConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const IceConfRsp& default_instance();

  static inline const IceConfRsp* internal_default_instance() {
    return reinterpret_cast<const IceConfRsp*>(
               &_IceConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(IceConfRsp* other);
  void Swap(IceConfRsp* other);

  // implements Message ----------------------------------------------

  inline IceConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  IceConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IceConfRsp& from);
  void MergeFrom(const IceConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IceConfRsp* other);
  protected:
  explicit IceConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.IceConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IpList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.IpList) */ {
 public:
  IpList();
  virtual ~IpList();

  IpList(const IpList& from);

  inline IpList& operator=(const IpList& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const IpList& default_instance();

  static inline const IpList* internal_default_instance() {
    return reinterpret_cast<const IpList*>(
               &_IpList_default_instance_);
  }

  void UnsafeArenaSwap(IpList* other);
  void Swap(IpList* other);

  // implements Message ----------------------------------------------

  inline IpList* New() const PROTOBUF_FINAL { return New(NULL); }

  IpList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IpList& from);
  void MergeFrom(const IpList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IpList* other);
  protected:
  explicit IpList(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ip = 1;
  int ip_size() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip(int index) const;
  ::std::string* mutable_ip(int index);
  void set_ip(int index, const ::std::string& value);
  void set_ip(int index, const char* value);
  void set_ip(int index, const char* value, size_t size);
  ::std::string* add_ip();
  void add_ip(const ::std::string& value);
  void add_ip(const char* value);
  void add_ip(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ip() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ip();

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.IpList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ip_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GsConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.GsConf) */ {
 public:
  GsConf();
  virtual ~GsConf();

  GsConf(const GsConf& from);

  inline GsConf& operator=(const GsConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GsConf& default_instance();

  static inline const GsConf* internal_default_instance() {
    return reinterpret_cast<const GsConf*>(
               &_GsConf_default_instance_);
  }

  void UnsafeArenaSwap(GsConf* other);
  void Swap(GsConf* other);

  // implements Message ----------------------------------------------

  inline GsConf* New() const PROTOBUF_FINAL { return New(NULL); }

  GsConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GsConf& from);
  void MergeFrom(const GsConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GsConf* other);
  protected:
  explicit GsConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string kafka_brokers = 2;
  void clear_kafka_brokers();
  static const int kKafkaBrokersFieldNumber = 2;
  const ::std::string& kafka_brokers() const;
  void set_kafka_brokers(const ::std::string& value);
  void set_kafka_brokers(const char* value);
  void set_kafka_brokers(const char* value, size_t size);
  ::std::string* mutable_kafka_brokers();
  ::std::string* release_kafka_brokers();
  void set_allocated_kafka_brokers(::std::string* kafka_brokers);
  ::std::string* unsafe_arena_release_kafka_brokers();
  void unsafe_arena_set_allocated_kafka_brokers(
      ::std::string* kafka_brokers);

  // string sc_topic = 3;
  void clear_sc_topic();
  static const int kScTopicFieldNumber = 3;
  const ::std::string& sc_topic() const;
  void set_sc_topic(const ::std::string& value);
  void set_sc_topic(const char* value);
  void set_sc_topic(const char* value, size_t size);
  ::std::string* mutable_sc_topic();
  ::std::string* release_sc_topic();
  void set_allocated_sc_topic(::std::string* sc_topic);
  ::std::string* unsafe_arena_release_sc_topic();
  void unsafe_arena_set_allocated_sc_topic(
      ::std::string* sc_topic);

  // string gc_topic = 4;
  void clear_gc_topic();
  static const int kGcTopicFieldNumber = 4;
  const ::std::string& gc_topic() const;
  void set_gc_topic(const ::std::string& value);
  void set_gc_topic(const char* value);
  void set_gc_topic(const char* value, size_t size);
  ::std::string* mutable_gc_topic();
  ::std::string* release_gc_topic();
  void set_allocated_gc_topic(::std::string* gc_topic);
  ::std::string* unsafe_arena_release_gc_topic();
  void unsafe_arena_set_allocated_gc_topic(
      ::std::string* gc_topic);

  // string instance_id = 5;
  void clear_instance_id();
  static const int kInstanceIdFieldNumber = 5;
  const ::std::string& instance_id() const;
  void set_instance_id(const ::std::string& value);
  void set_instance_id(const char* value);
  void set_instance_id(const char* value, size_t size);
  ::std::string* mutable_instance_id();
  ::std::string* release_instance_id();
  void set_allocated_instance_id(::std::string* instance_id);
  ::std::string* unsafe_arena_release_instance_id();
  void unsafe_arena_set_allocated_instance_id(
      ::std::string* instance_id);

  // string group_id = 6;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 6;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string log_save_days = 8;
  void clear_log_save_days();
  static const int kLogSaveDaysFieldNumber = 8;
  const ::std::string& log_save_days() const;
  void set_log_save_days(const ::std::string& value);
  void set_log_save_days(const char* value);
  void set_log_save_days(const char* value, size_t size);
  ::std::string* mutable_log_save_days();
  ::std::string* release_log_save_days();
  void set_allocated_log_save_days(::std::string* log_save_days);
  ::std::string* unsafe_arena_release_log_save_days();
  void unsafe_arena_set_allocated_log_save_days(
      ::std::string* log_save_days);

  // string process_name = 9;
  void clear_process_name();
  static const int kProcessNameFieldNumber = 9;
  const ::std::string& process_name() const;
  void set_process_name(const ::std::string& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  ::std::string* mutable_process_name();
  ::std::string* release_process_name();
  void set_allocated_process_name(::std::string* process_name);
  ::std::string* unsafe_arena_release_process_name();
  void unsafe_arena_set_allocated_process_name(
      ::std::string* process_name);

  // string guid = 10;
  void clear_guid();
  static const int kGuidFieldNumber = 10;
  const ::std::string& guid() const;
  void set_guid(const ::std::string& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  ::std::string* mutable_guid();
  ::std::string* release_guid();
  void set_allocated_guid(::std::string* guid);
  ::std::string* unsafe_arena_release_guid();
  void unsafe_arena_set_allocated_guid(
      ::std::string* guid);

  // string service_name = 11;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 11;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);
  ::std::string* unsafe_arena_release_service_name();
  void unsafe_arena_set_allocated_service_name(
      ::std::string* service_name);

  // string priority = 12;
  void clear_priority();
  static const int kPriorityFieldNumber = 12;
  const ::std::string& priority() const;
  void set_priority(const ::std::string& value);
  void set_priority(const char* value);
  void set_priority(const char* value, size_t size);
  ::std::string* mutable_priority();
  ::std::string* release_priority();
  void set_allocated_priority(::std::string* priority);
  ::std::string* unsafe_arena_release_priority();
  void unsafe_arena_set_allocated_priority(
      ::std::string* priority);

  // string session_app_id = 13;
  void clear_session_app_id();
  static const int kSessionAppIdFieldNumber = 13;
  const ::std::string& session_app_id() const;
  void set_session_app_id(const ::std::string& value);
  void set_session_app_id(const char* value);
  void set_session_app_id(const char* value, size_t size);
  ::std::string* mutable_session_app_id();
  ::std::string* release_session_app_id();
  void set_allocated_session_app_id(::std::string* session_app_id);
  ::std::string* unsafe_arena_release_session_app_id();
  void unsafe_arena_set_allocated_session_app_id(
      ::std::string* session_app_id);

  // string debug_mode = 14;
  void clear_debug_mode();
  static const int kDebugModeFieldNumber = 14;
  const ::std::string& debug_mode() const;
  void set_debug_mode(const ::std::string& value);
  void set_debug_mode(const char* value);
  void set_debug_mode(const char* value, size_t size);
  ::std::string* mutable_debug_mode();
  ::std::string* release_debug_mode();
  void set_allocated_debug_mode(::std::string* debug_mode);
  ::std::string* unsafe_arena_release_debug_mode();
  void unsafe_arena_set_allocated_debug_mode(
      ::std::string* debug_mode);

  // string sys_log_interval = 15;
  void clear_sys_log_interval();
  static const int kSysLogIntervalFieldNumber = 15;
  const ::std::string& sys_log_interval() const;
  void set_sys_log_interval(const ::std::string& value);
  void set_sys_log_interval(const char* value);
  void set_sys_log_interval(const char* value, size_t size);
  ::std::string* mutable_sys_log_interval();
  ::std::string* release_sys_log_interval();
  void set_allocated_sys_log_interval(::std::string* sys_log_interval);
  ::std::string* unsafe_arena_release_sys_log_interval();
  void unsafe_arena_set_allocated_sys_log_interval(
      ::std::string* sys_log_interval);

  // .com.fsmeeting.fsp.proto.smd.IpList nat_ip_list = 7;
  bool has_nat_ip_list() const;
  void clear_nat_ip_list();
  static const int kNatIpListFieldNumber = 7;
  private:
  void _slow_mutable_nat_ip_list();
  void _slow_set_allocated_nat_ip_list(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::smd::IpList** nat_ip_list);
  ::com::fsmeeting::fsp::proto::smd::IpList* _slow_release_nat_ip_list();
  public:
  const ::com::fsmeeting::fsp::proto::smd::IpList& nat_ip_list() const;
  ::com::fsmeeting::fsp::proto::smd::IpList* mutable_nat_ip_list();
  ::com::fsmeeting::fsp::proto::smd::IpList* release_nat_ip_list();
  void set_allocated_nat_ip_list(::com::fsmeeting::fsp::proto::smd::IpList* nat_ip_list);
  ::com::fsmeeting::fsp::proto::smd::IpList* unsafe_arena_release_nat_ip_list();
  void unsafe_arena_set_allocated_nat_ip_list(
      ::com::fsmeeting::fsp::proto::smd::IpList* nat_ip_list);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.GsConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr kafka_brokers_;
  ::google::protobuf::internal::ArenaStringPtr sc_topic_;
  ::google::protobuf::internal::ArenaStringPtr gc_topic_;
  ::google::protobuf::internal::ArenaStringPtr instance_id_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr log_save_days_;
  ::google::protobuf::internal::ArenaStringPtr process_name_;
  ::google::protobuf::internal::ArenaStringPtr guid_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr priority_;
  ::google::protobuf::internal::ArenaStringPtr session_app_id_;
  ::google::protobuf::internal::ArenaStringPtr debug_mode_;
  ::google::protobuf::internal::ArenaStringPtr sys_log_interval_;
  ::com::fsmeeting::fsp::proto::smd::IpList* nat_ip_list_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GsConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.GsConfRsp) */ {
 public:
  GsConfRsp();
  virtual ~GsConfRsp();

  GsConfRsp(const GsConfRsp& from);

  inline GsConfRsp& operator=(const GsConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GsConfRsp& default_instance();

  static inline const GsConfRsp* internal_default_instance() {
    return reinterpret_cast<const GsConfRsp*>(
               &_GsConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(GsConfRsp* other);
  void Swap(GsConfRsp* other);

  // implements Message ----------------------------------------------

  inline GsConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GsConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GsConfRsp& from);
  void MergeFrom(const GsConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GsConfRsp* other);
  protected:
  explicit GsConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.GsConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.GcConf) */ {
 public:
  GcConf();
  virtual ~GcConf();

  GcConf(const GcConf& from);

  inline GcConf& operator=(const GcConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GcConf& default_instance();

  static inline const GcConf* internal_default_instance() {
    return reinterpret_cast<const GcConf*>(
               &_GcConf_default_instance_);
  }

  void UnsafeArenaSwap(GcConf* other);
  void Swap(GcConf* other);

  // implements Message ----------------------------------------------

  inline GcConf* New() const PROTOBUF_FINAL { return New(NULL); }

  GcConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GcConf& from);
  void MergeFrom(const GcConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GcConf* other);
  protected:
  explicit GcConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string kafka_brokers = 2;
  void clear_kafka_brokers();
  static const int kKafkaBrokersFieldNumber = 2;
  const ::std::string& kafka_brokers() const;
  void set_kafka_brokers(const ::std::string& value);
  void set_kafka_brokers(const char* value);
  void set_kafka_brokers(const char* value, size_t size);
  ::std::string* mutable_kafka_brokers();
  ::std::string* release_kafka_brokers();
  void set_allocated_kafka_brokers(::std::string* kafka_brokers);
  ::std::string* unsafe_arena_release_kafka_brokers();
  void unsafe_arena_set_allocated_kafka_brokers(
      ::std::string* kafka_brokers);

  // string zookeeper_servers = 3;
  void clear_zookeeper_servers();
  static const int kZookeeperServersFieldNumber = 3;
  const ::std::string& zookeeper_servers() const;
  void set_zookeeper_servers(const ::std::string& value);
  void set_zookeeper_servers(const char* value);
  void set_zookeeper_servers(const char* value, size_t size);
  ::std::string* mutable_zookeeper_servers();
  ::std::string* release_zookeeper_servers();
  void set_allocated_zookeeper_servers(::std::string* zookeeper_servers);
  ::std::string* unsafe_arena_release_zookeeper_servers();
  void unsafe_arena_set_allocated_zookeeper_servers(
      ::std::string* zookeeper_servers);

  // string gc_topic = 4;
  void clear_gc_topic();
  static const int kGcTopicFieldNumber = 4;
  const ::std::string& gc_topic() const;
  void set_gc_topic(const ::std::string& value);
  void set_gc_topic(const char* value);
  void set_gc_topic(const char* value, size_t size);
  ::std::string* mutable_gc_topic();
  ::std::string* release_gc_topic();
  void set_allocated_gc_topic(::std::string* gc_topic);
  ::std::string* unsafe_arena_release_gc_topic();
  void unsafe_arena_set_allocated_gc_topic(
      ::std::string* gc_topic);

  // string gc_group_topic = 5;
  void clear_gc_group_topic();
  static const int kGcGroupTopicFieldNumber = 5;
  const ::std::string& gc_group_topic() const;
  void set_gc_group_topic(const ::std::string& value);
  void set_gc_group_topic(const char* value);
  void set_gc_group_topic(const char* value, size_t size);
  ::std::string* mutable_gc_group_topic();
  ::std::string* release_gc_group_topic();
  void set_allocated_gc_group_topic(::std::string* gc_group_topic);
  ::std::string* unsafe_arena_release_gc_group_topic();
  void unsafe_arena_set_allocated_gc_group_topic(
      ::std::string* gc_group_topic);

  // string sc_group_topic = 6;
  void clear_sc_group_topic();
  static const int kScGroupTopicFieldNumber = 6;
  const ::std::string& sc_group_topic() const;
  void set_sc_group_topic(const ::std::string& value);
  void set_sc_group_topic(const char* value);
  void set_sc_group_topic(const char* value, size_t size);
  ::std::string* mutable_sc_group_topic();
  ::std::string* release_sc_group_topic();
  void set_allocated_sc_group_topic(::std::string* sc_group_topic);
  ::std::string* unsafe_arena_release_sc_group_topic();
  void unsafe_arena_set_allocated_sc_group_topic(
      ::std::string* sc_group_topic);

  // string consumer_client_id = 7;
  void clear_consumer_client_id();
  static const int kConsumerClientIdFieldNumber = 7;
  const ::std::string& consumer_client_id() const;
  void set_consumer_client_id(const ::std::string& value);
  void set_consumer_client_id(const char* value);
  void set_consumer_client_id(const char* value, size_t size);
  ::std::string* mutable_consumer_client_id();
  ::std::string* release_consumer_client_id();
  void set_allocated_consumer_client_id(::std::string* consumer_client_id);
  ::std::string* unsafe_arena_release_consumer_client_id();
  void unsafe_arena_set_allocated_consumer_client_id(
      ::std::string* consumer_client_id);

  // string lock_timeout = 11;
  void clear_lock_timeout();
  static const int kLockTimeoutFieldNumber = 11;
  const ::std::string& lock_timeout() const;
  void set_lock_timeout(const ::std::string& value);
  void set_lock_timeout(const char* value);
  void set_lock_timeout(const char* value, size_t size);
  ::std::string* mutable_lock_timeout();
  ::std::string* release_lock_timeout();
  void set_allocated_lock_timeout(::std::string* lock_timeout);
  ::std::string* unsafe_arena_release_lock_timeout();
  void unsafe_arena_set_allocated_lock_timeout(
      ::std::string* lock_timeout);

  // string topic_partitions = 8;
  void clear_topic_partitions();
  static const int kTopicPartitionsFieldNumber = 8;
  const ::std::string& topic_partitions() const;
  void set_topic_partitions(const ::std::string& value);
  void set_topic_partitions(const char* value);
  void set_topic_partitions(const char* value, size_t size);
  ::std::string* mutable_topic_partitions();
  ::std::string* release_topic_partitions();
  void set_allocated_topic_partitions(::std::string* topic_partitions);
  ::std::string* unsafe_arena_release_topic_partitions();
  void unsafe_arena_set_allocated_topic_partitions(
      ::std::string* topic_partitions);

  // string topic_replication = 9;
  void clear_topic_replication();
  static const int kTopicReplicationFieldNumber = 9;
  const ::std::string& topic_replication() const;
  void set_topic_replication(const ::std::string& value);
  void set_topic_replication(const char* value);
  void set_topic_replication(const char* value, size_t size);
  ::std::string* mutable_topic_replication();
  ::std::string* release_topic_replication();
  void set_allocated_topic_replication(::std::string* topic_replication);
  ::std::string* unsafe_arena_release_topic_replication();
  void unsafe_arena_set_allocated_topic_replication(
      ::std::string* topic_replication);

  // string protocol_version = 10;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 10;
  const ::std::string& protocol_version() const;
  void set_protocol_version(const ::std::string& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  ::std::string* mutable_protocol_version();
  ::std::string* release_protocol_version();
  void set_allocated_protocol_version(::std::string* protocol_version);
  ::std::string* unsafe_arena_release_protocol_version();
  void unsafe_arena_set_allocated_protocol_version(
      ::std::string* protocol_version);

  // string retry_policy = 12;
  void clear_retry_policy();
  static const int kRetryPolicyFieldNumber = 12;
  const ::std::string& retry_policy() const;
  void set_retry_policy(const ::std::string& value);
  void set_retry_policy(const char* value);
  void set_retry_policy(const char* value, size_t size);
  ::std::string* mutable_retry_policy();
  ::std::string* release_retry_policy();
  void set_allocated_retry_policy(::std::string* retry_policy);
  ::std::string* unsafe_arena_release_retry_policy();
  void unsafe_arena_set_allocated_retry_policy(
      ::std::string* retry_policy);

  // string root_path = 13;
  void clear_root_path();
  static const int kRootPathFieldNumber = 13;
  const ::std::string& root_path() const;
  void set_root_path(const ::std::string& value);
  void set_root_path(const char* value);
  void set_root_path(const char* value, size_t size);
  ::std::string* mutable_root_path();
  ::std::string* release_root_path();
  void set_allocated_root_path(::std::string* root_path);
  ::std::string* unsafe_arena_release_root_path();
  void unsafe_arena_set_allocated_root_path(
      ::std::string* root_path);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.GcConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr kafka_brokers_;
  ::google::protobuf::internal::ArenaStringPtr zookeeper_servers_;
  ::google::protobuf::internal::ArenaStringPtr gc_topic_;
  ::google::protobuf::internal::ArenaStringPtr gc_group_topic_;
  ::google::protobuf::internal::ArenaStringPtr sc_group_topic_;
  ::google::protobuf::internal::ArenaStringPtr consumer_client_id_;
  ::google::protobuf::internal::ArenaStringPtr lock_timeout_;
  ::google::protobuf::internal::ArenaStringPtr topic_partitions_;
  ::google::protobuf::internal::ArenaStringPtr topic_replication_;
  ::google::protobuf::internal::ArenaStringPtr protocol_version_;
  ::google::protobuf::internal::ArenaStringPtr retry_policy_;
  ::google::protobuf::internal::ArenaStringPtr root_path_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GcConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.GcConfRsp) */ {
 public:
  GcConfRsp();
  virtual ~GcConfRsp();

  GcConfRsp(const GcConfRsp& from);

  inline GcConfRsp& operator=(const GcConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GcConfRsp& default_instance();

  static inline const GcConfRsp* internal_default_instance() {
    return reinterpret_cast<const GcConfRsp*>(
               &_GcConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(GcConfRsp* other);
  void Swap(GcConfRsp* other);

  // implements Message ----------------------------------------------

  inline GcConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GcConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GcConfRsp& from);
  void MergeFrom(const GcConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GcConfRsp* other);
  protected:
  explicit GcConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.GcConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.MaConf) */ {
 public:
  MaConf();
  virtual ~MaConf();

  MaConf(const MaConf& from);

  inline MaConf& operator=(const MaConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaConf& default_instance();

  static inline const MaConf* internal_default_instance() {
    return reinterpret_cast<const MaConf*>(
               &_MaConf_default_instance_);
  }

  void UnsafeArenaSwap(MaConf* other);
  void Swap(MaConf* other);

  // implements Message ----------------------------------------------

  inline MaConf* New() const PROTOBUF_FINAL { return New(NULL); }

  MaConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MaConf& from);
  void MergeFrom(const MaConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MaConf* other);
  protected:
  explicit MaConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string kafka_brokers = 2;
  void clear_kafka_brokers();
  static const int kKafkaBrokersFieldNumber = 2;
  const ::std::string& kafka_brokers() const;
  void set_kafka_brokers(const ::std::string& value);
  void set_kafka_brokers(const char* value);
  void set_kafka_brokers(const char* value, size_t size);
  ::std::string* mutable_kafka_brokers();
  ::std::string* release_kafka_brokers();
  void set_allocated_kafka_brokers(::std::string* kafka_brokers);
  ::std::string* unsafe_arena_release_kafka_brokers();
  void unsafe_arena_set_allocated_kafka_brokers(
      ::std::string* kafka_brokers);

  // string zookeeper_servers = 3;
  void clear_zookeeper_servers();
  static const int kZookeeperServersFieldNumber = 3;
  const ::std::string& zookeeper_servers() const;
  void set_zookeeper_servers(const ::std::string& value);
  void set_zookeeper_servers(const char* value);
  void set_zookeeper_servers(const char* value, size_t size);
  ::std::string* mutable_zookeeper_servers();
  ::std::string* release_zookeeper_servers();
  void set_allocated_zookeeper_servers(::std::string* zookeeper_servers);
  ::std::string* unsafe_arena_release_zookeeper_servers();
  void unsafe_arena_set_allocated_zookeeper_servers(
      ::std::string* zookeeper_servers);

  // string ma_topic = 4;
  void clear_ma_topic();
  static const int kMaTopicFieldNumber = 4;
  const ::std::string& ma_topic() const;
  void set_ma_topic(const ::std::string& value);
  void set_ma_topic(const char* value);
  void set_ma_topic(const char* value, size_t size);
  ::std::string* mutable_ma_topic();
  ::std::string* release_ma_topic();
  void set_allocated_ma_topic(::std::string* ma_topic);
  ::std::string* unsafe_arena_release_ma_topic();
  void unsafe_arena_set_allocated_ma_topic(
      ::std::string* ma_topic);

  // string bandwidth = 5;
  void clear_bandwidth();
  static const int kBandwidthFieldNumber = 5;
  const ::std::string& bandwidth() const;
  void set_bandwidth(const ::std::string& value);
  void set_bandwidth(const char* value);
  void set_bandwidth(const char* value, size_t size);
  ::std::string* mutable_bandwidth();
  ::std::string* release_bandwidth();
  void set_allocated_bandwidth(::std::string* bandwidth);
  ::std::string* unsafe_arena_release_bandwidth();
  void unsafe_arena_set_allocated_bandwidth(
      ::std::string* bandwidth);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.MaConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr kafka_brokers_;
  ::google::protobuf::internal::ArenaStringPtr zookeeper_servers_;
  ::google::protobuf::internal::ArenaStringPtr ma_topic_;
  ::google::protobuf::internal::ArenaStringPtr bandwidth_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.MaConfRsp) */ {
 public:
  MaConfRsp();
  virtual ~MaConfRsp();

  MaConfRsp(const MaConfRsp& from);

  inline MaConfRsp& operator=(const MaConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaConfRsp& default_instance();

  static inline const MaConfRsp* internal_default_instance() {
    return reinterpret_cast<const MaConfRsp*>(
               &_MaConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(MaConfRsp* other);
  void Swap(MaConfRsp* other);

  // implements Message ----------------------------------------------

  inline MaConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  MaConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MaConfRsp& from);
  void MergeFrom(const MaConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MaConfRsp* other);
  protected:
  explicit MaConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.MaConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.MsConf) */ {
 public:
  MsConf();
  virtual ~MsConf();

  MsConf(const MsConf& from);

  inline MsConf& operator=(const MsConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsConf& default_instance();

  static inline const MsConf* internal_default_instance() {
    return reinterpret_cast<const MsConf*>(
               &_MsConf_default_instance_);
  }

  void UnsafeArenaSwap(MsConf* other);
  void Swap(MsConf* other);

  // implements Message ----------------------------------------------

  inline MsConf* New() const PROTOBUF_FINAL { return New(NULL); }

  MsConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsConf& from);
  void MergeFrom(const MsConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsConf* other);
  protected:
  explicit MsConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string kafka_brokers = 2;
  void clear_kafka_brokers();
  static const int kKafkaBrokersFieldNumber = 2;
  const ::std::string& kafka_brokers() const;
  void set_kafka_brokers(const ::std::string& value);
  void set_kafka_brokers(const char* value);
  void set_kafka_brokers(const char* value, size_t size);
  ::std::string* mutable_kafka_brokers();
  ::std::string* release_kafka_brokers();
  void set_allocated_kafka_brokers(::std::string* kafka_brokers);
  ::std::string* unsafe_arena_release_kafka_brokers();
  void unsafe_arena_set_allocated_kafka_brokers(
      ::std::string* kafka_brokers);

  // string zookeeper_servers = 3;
  void clear_zookeeper_servers();
  static const int kZookeeperServersFieldNumber = 3;
  const ::std::string& zookeeper_servers() const;
  void set_zookeeper_servers(const ::std::string& value);
  void set_zookeeper_servers(const char* value);
  void set_zookeeper_servers(const char* value, size_t size);
  ::std::string* mutable_zookeeper_servers();
  ::std::string* release_zookeeper_servers();
  void set_allocated_zookeeper_servers(::std::string* zookeeper_servers);
  ::std::string* unsafe_arena_release_zookeeper_servers();
  void unsafe_arena_set_allocated_zookeeper_servers(
      ::std::string* zookeeper_servers);

  // string ms_topic = 4;
  void clear_ms_topic();
  static const int kMsTopicFieldNumber = 4;
  const ::std::string& ms_topic() const;
  void set_ms_topic(const ::std::string& value);
  void set_ms_topic(const char* value);
  void set_ms_topic(const char* value, size_t size);
  ::std::string* mutable_ms_topic();
  ::std::string* release_ms_topic();
  void set_allocated_ms_topic(::std::string* ms_topic);
  ::std::string* unsafe_arena_release_ms_topic();
  void unsafe_arena_set_allocated_ms_topic(
      ::std::string* ms_topic);

  // string poll_time = 5;
  void clear_poll_time();
  static const int kPollTimeFieldNumber = 5;
  const ::std::string& poll_time() const;
  void set_poll_time(const ::std::string& value);
  void set_poll_time(const char* value);
  void set_poll_time(const char* value, size_t size);
  ::std::string* mutable_poll_time();
  ::std::string* release_poll_time();
  void set_allocated_poll_time(::std::string* poll_time);
  ::std::string* unsafe_arena_release_poll_time();
  void unsafe_arena_set_allocated_poll_time(
      ::std::string* poll_time);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.MsConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr kafka_brokers_;
  ::google::protobuf::internal::ArenaStringPtr zookeeper_servers_;
  ::google::protobuf::internal::ArenaStringPtr ms_topic_;
  ::google::protobuf::internal::ArenaStringPtr poll_time_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.MsConfRsp) */ {
 public:
  MsConfRsp();
  virtual ~MsConfRsp();

  MsConfRsp(const MsConfRsp& from);

  inline MsConfRsp& operator=(const MsConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsConfRsp& default_instance();

  static inline const MsConfRsp* internal_default_instance() {
    return reinterpret_cast<const MsConfRsp*>(
               &_MsConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(MsConfRsp* other);
  void Swap(MsConfRsp* other);

  // implements Message ----------------------------------------------

  inline MsConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  MsConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MsConfRsp& from);
  void MergeFrom(const MsConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MsConfRsp* other);
  protected:
  explicit MsConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.MsConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuleConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.RuleConf) */ {
 public:
  RuleConf();
  virtual ~RuleConf();

  RuleConf(const RuleConf& from);

  inline RuleConf& operator=(const RuleConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RuleConf& default_instance();

  static inline const RuleConf* internal_default_instance() {
    return reinterpret_cast<const RuleConf*>(
               &_RuleConf_default_instance_);
  }

  void UnsafeArenaSwap(RuleConf* other);
  void Swap(RuleConf* other);

  // implements Message ----------------------------------------------

  inline RuleConf* New() const PROTOBUF_FINAL { return New(NULL); }

  RuleConf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuleConf& from);
  void MergeFrom(const RuleConf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuleConf* other);
  protected:
  explicit RuleConf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ice_addr = 1;
  void clear_ice_addr();
  static const int kIceAddrFieldNumber = 1;
  const ::std::string& ice_addr() const;
  void set_ice_addr(const ::std::string& value);
  void set_ice_addr(const char* value);
  void set_ice_addr(const char* value, size_t size);
  ::std::string* mutable_ice_addr();
  ::std::string* release_ice_addr();
  void set_allocated_ice_addr(::std::string* ice_addr);
  ::std::string* unsafe_arena_release_ice_addr();
  void unsafe_arena_set_allocated_ice_addr(
      ::std::string* ice_addr);

  // string zookeeper_servers = 2;
  void clear_zookeeper_servers();
  static const int kZookeeperServersFieldNumber = 2;
  const ::std::string& zookeeper_servers() const;
  void set_zookeeper_servers(const ::std::string& value);
  void set_zookeeper_servers(const char* value);
  void set_zookeeper_servers(const char* value, size_t size);
  ::std::string* mutable_zookeeper_servers();
  ::std::string* release_zookeeper_servers();
  void set_allocated_zookeeper_servers(::std::string* zookeeper_servers);
  ::std::string* unsafe_arena_release_zookeeper_servers();
  void unsafe_arena_set_allocated_zookeeper_servers(
      ::std::string* zookeeper_servers);

  // string iplib_path = 3;
  void clear_iplib_path();
  static const int kIplibPathFieldNumber = 3;
  const ::std::string& iplib_path() const;
  void set_iplib_path(const ::std::string& value);
  void set_iplib_path(const char* value);
  void set_iplib_path(const char* value, size_t size);
  ::std::string* mutable_iplib_path();
  ::std::string* release_iplib_path();
  void set_allocated_iplib_path(::std::string* iplib_path);
  ::std::string* unsafe_arena_release_iplib_path();
  void unsafe_arena_set_allocated_iplib_path(
      ::std::string* iplib_path);

  // string config_path = 4;
  void clear_config_path();
  static const int kConfigPathFieldNumber = 4;
  const ::std::string& config_path() const;
  void set_config_path(const ::std::string& value);
  void set_config_path(const char* value);
  void set_config_path(const char* value, size_t size);
  ::std::string* mutable_config_path();
  ::std::string* release_config_path();
  void set_allocated_config_path(::std::string* config_path);
  ::std::string* unsafe_arena_release_config_path();
  void unsafe_arena_set_allocated_config_path(
      ::std::string* config_path);

  // string max_instance_size = 5;
  void clear_max_instance_size();
  static const int kMaxInstanceSizeFieldNumber = 5;
  const ::std::string& max_instance_size() const;
  void set_max_instance_size(const ::std::string& value);
  void set_max_instance_size(const char* value);
  void set_max_instance_size(const char* value, size_t size);
  ::std::string* mutable_max_instance_size();
  ::std::string* release_max_instance_size();
  void set_allocated_max_instance_size(::std::string* max_instance_size);
  ::std::string* unsafe_arena_release_max_instance_size();
  void unsafe_arena_set_allocated_max_instance_size(
      ::std::string* max_instance_size);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.RuleConf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ice_addr_;
  ::google::protobuf::internal::ArenaStringPtr zookeeper_servers_;
  ::google::protobuf::internal::ArenaStringPtr iplib_path_;
  ::google::protobuf::internal::ArenaStringPtr config_path_;
  ::google::protobuf::internal::ArenaStringPtr max_instance_size_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuleConfRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.smd.RuleConfRsp) */ {
 public:
  RuleConfRsp();
  virtual ~RuleConfRsp();

  RuleConfRsp(const RuleConfRsp& from);

  inline RuleConfRsp& operator=(const RuleConfRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RuleConfRsp& default_instance();

  static inline const RuleConfRsp* internal_default_instance() {
    return reinterpret_cast<const RuleConfRsp*>(
               &_RuleConfRsp_default_instance_);
  }

  void UnsafeArenaSwap(RuleConfRsp* other);
  void Swap(RuleConfRsp* other);

  // implements Message ----------------------------------------------

  inline RuleConfRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  RuleConfRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RuleConfRsp& from);
  void MergeFrom(const RuleConfRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RuleConfRsp* other);
  protected:
  explicit RuleConfRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dsmd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SMDHeartbeat

// -------------------------------------------------------------------

// SMDHeartbeatRsp

// -------------------------------------------------------------------

// ServiceOnline

// string smd_name = 1;
inline void ServiceOnline::clear_smd_name() {
  smd_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceOnline::smd_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
  return smd_name_.Get();
}
inline void ServiceOnline::set_smd_name(const ::std::string& value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}
inline void ServiceOnline::set_smd_name(const char* value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}
inline void ServiceOnline::set_smd_name(const char* value,
    size_t size) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}
inline ::std::string* ServiceOnline::mutable_smd_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
  return smd_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceOnline::release_smd_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
  
  return smd_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceOnline::unsafe_arena_release_smd_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return smd_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceOnline::set_allocated_smd_name(::std::string* smd_name) {
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smd_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}
inline void ServiceOnline::unsafe_arena_set_allocated_smd_name(
    ::std::string* smd_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      smd_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}

// string smd_report_addr = 2;
inline void ServiceOnline::clear_smd_report_addr() {
  smd_report_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceOnline::smd_report_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
  return smd_report_addr_.Get();
}
inline void ServiceOnline::set_smd_report_addr(const ::std::string& value) {
  
  smd_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}
inline void ServiceOnline::set_smd_report_addr(const char* value) {
  
  smd_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}
inline void ServiceOnline::set_smd_report_addr(const char* value,
    size_t size) {
  
  smd_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}
inline ::std::string* ServiceOnline::mutable_smd_report_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
  return smd_report_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceOnline::release_smd_report_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
  
  return smd_report_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceOnline::unsafe_arena_release_smd_report_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return smd_report_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceOnline::set_allocated_smd_report_addr(::std::string* smd_report_addr) {
  if (smd_report_addr != NULL) {
    
  } else {
    
  }
  smd_report_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smd_report_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}
inline void ServiceOnline::unsafe_arena_set_allocated_smd_report_addr(
    ::std::string* smd_report_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (smd_report_addr != NULL) {
    
  } else {
    
  }
  smd_report_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      smd_report_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}

// repeated string available_services = 3;
inline int ServiceOnline::available_services_size() const {
  return available_services_.size();
}
inline void ServiceOnline::clear_available_services() {
  available_services_.Clear();
}
inline const ::std::string& ServiceOnline::available_services(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return available_services_.Get(index);
}
inline ::std::string* ServiceOnline::mutable_available_services(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return available_services_.Mutable(index);
}
inline void ServiceOnline::set_available_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  available_services_.Mutable(index)->assign(value);
}
inline void ServiceOnline::set_available_services(int index, const char* value) {
  available_services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
inline void ServiceOnline::set_available_services(int index, const char* value, size_t size) {
  available_services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
inline ::std::string* ServiceOnline::add_available_services() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return available_services_.Add();
}
inline void ServiceOnline::add_available_services(const ::std::string& value) {
  available_services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
inline void ServiceOnline::add_available_services(const char* value) {
  available_services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
inline void ServiceOnline::add_available_services(const char* value, size_t size) {
  available_services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceOnline::available_services() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return available_services_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceOnline::mutable_available_services() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return &available_services_;
}

// -------------------------------------------------------------------

// ServiceOnlineRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool ServiceOnlineRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void ServiceOnlineRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& ServiceOnlineRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceOnlineRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceOnlineRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void ServiceOnlineRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
}

// -------------------------------------------------------------------

// ServiceStop

// string smd_name = 1;
inline void ServiceStop::clear_smd_name() {
  smd_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceStop::smd_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
  return smd_name_.Get();
}
inline void ServiceStop::set_smd_name(const ::std::string& value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}
inline void ServiceStop::set_smd_name(const char* value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}
inline void ServiceStop::set_smd_name(const char* value,
    size_t size) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}
inline ::std::string* ServiceStop::mutable_smd_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
  return smd_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceStop::release_smd_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
  
  return smd_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceStop::unsafe_arena_release_smd_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return smd_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceStop::set_allocated_smd_name(::std::string* smd_name) {
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smd_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}
inline void ServiceStop::unsafe_arena_set_allocated_smd_name(
    ::std::string* smd_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      smd_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}

// string service_name = 2;
inline void ServiceStop::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceStop::service_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
  return service_name_.Get();
}
inline void ServiceStop::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}
inline void ServiceStop::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}
inline void ServiceStop::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}
inline ::std::string* ServiceStop::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceStop::release_service_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceStop::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceStop::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}
inline void ServiceStop::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}

// -------------------------------------------------------------------

// ServiceStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool ServiceStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void ServiceStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& ServiceStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void ServiceStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
}

// -------------------------------------------------------------------

// ServiceConf

// string smd_name = 1;
inline void ServiceConf::clear_smd_name() {
  smd_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceConf::smd_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
  return smd_name_.Get();
}
inline void ServiceConf::set_smd_name(const ::std::string& value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}
inline void ServiceConf::set_smd_name(const char* value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}
inline void ServiceConf::set_smd_name(const char* value,
    size_t size) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}
inline ::std::string* ServiceConf::mutable_smd_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
  return smd_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConf::release_smd_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
  
  return smd_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConf::unsafe_arena_release_smd_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return smd_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceConf::set_allocated_smd_name(::std::string* smd_name) {
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smd_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}
inline void ServiceConf::unsafe_arena_set_allocated_smd_name(
    ::std::string* smd_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      smd_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}

// string service_name = 2;
inline void ServiceConf::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceConf::service_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
  return service_name_.Get();
}
inline void ServiceConf::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}
inline void ServiceConf::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}
inline void ServiceConf::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}
inline ::std::string* ServiceConf::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConf::release_service_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConf::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceConf::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}
inline void ServiceConf::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}

// string download_url = 3;
inline void ServiceConf::clear_download_url() {
  download_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceConf::download_url() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
  return download_url_.Get();
}
inline void ServiceConf::set_download_url(const ::std::string& value) {
  
  download_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}
inline void ServiceConf::set_download_url(const char* value) {
  
  download_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}
inline void ServiceConf::set_download_url(const char* value,
    size_t size) {
  
  download_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}
inline ::std::string* ServiceConf::mutable_download_url() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
  return download_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConf::release_download_url() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
  
  return download_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConf::unsafe_arena_release_download_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return download_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceConf::set_allocated_download_url(::std::string* download_url) {
  if (download_url != NULL) {
    
  } else {
    
  }
  download_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}
inline void ServiceConf::unsafe_arena_set_allocated_download_url(
    ::std::string* download_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (download_url != NULL) {
    
  } else {
    
  }
  download_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      download_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}

// bytes config = 4;
inline void ServiceConf::clear_config() {
  config_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceConf::config() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
  return config_.Get();
}
inline void ServiceConf::set_config(const ::std::string& value) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}
inline void ServiceConf::set_config(const char* value) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}
inline void ServiceConf::set_config(const void* value,
    size_t size) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}
inline ::std::string* ServiceConf::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
  return config_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConf::release_config() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
  
  return config_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConf::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return config_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceConf::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}
inline void ServiceConf::unsafe_arena_set_allocated_config(
    ::std::string* config) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (config != NULL) {
    
  } else {
    
  }
  config_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      config, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}

// -------------------------------------------------------------------

// ServiceConfRsp

// string service_name = 1;
inline void ServiceConfRsp::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceConfRsp::service_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
  return service_name_.Get();
}
inline void ServiceConfRsp::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}
inline void ServiceConfRsp::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}
inline void ServiceConfRsp::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}
inline ::std::string* ServiceConfRsp::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConfRsp::release_service_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConfRsp::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceConfRsp::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}
inline void ServiceConfRsp::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}

// string service_report_addr = 2;
inline void ServiceConfRsp::clear_service_report_addr() {
  service_report_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceConfRsp::service_report_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
  return service_report_addr_.Get();
}
inline void ServiceConfRsp::set_service_report_addr(const ::std::string& value) {
  
  service_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}
inline void ServiceConfRsp::set_service_report_addr(const char* value) {
  
  service_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}
inline void ServiceConfRsp::set_service_report_addr(const char* value,
    size_t size) {
  
  service_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}
inline ::std::string* ServiceConfRsp::mutable_service_report_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
  return service_report_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConfRsp::release_service_report_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
  
  return service_report_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceConfRsp::unsafe_arena_release_service_report_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_report_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceConfRsp::set_allocated_service_report_addr(::std::string* service_report_addr) {
  if (service_report_addr != NULL) {
    
  } else {
    
  }
  service_report_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_report_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}
inline void ServiceConfRsp::unsafe_arena_set_allocated_service_report_addr(
    ::std::string* service_report_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_report_addr != NULL) {
    
  } else {
    
  }
  service_report_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_report_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 3;
inline bool ServiceConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void ServiceConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& ServiceConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void ServiceConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
}

// -------------------------------------------------------------------

// ServiceQuery

// .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
inline void ServiceQuery::clear_query_type() {
  query_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::smd::ServiceQueryType ServiceQuery::query_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_type)
  return static_cast< ::com::fsmeeting::fsp::proto::smd::ServiceQueryType >(query_type_);
}
inline void ServiceQuery::set_query_type(::com::fsmeeting::fsp::proto::smd::ServiceQueryType value) {
  
  query_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_type)
}

// string query_argument = 2;
inline void ServiceQuery::clear_query_argument() {
  query_argument_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceQuery::query_argument() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
  return query_argument_.Get();
}
inline void ServiceQuery::set_query_argument(const ::std::string& value) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}
inline void ServiceQuery::set_query_argument(const char* value) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}
inline void ServiceQuery::set_query_argument(const char* value,
    size_t size) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}
inline ::std::string* ServiceQuery::mutable_query_argument() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
  return query_argument_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceQuery::release_query_argument() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
  
  return query_argument_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceQuery::unsafe_arena_release_query_argument() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return query_argument_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceQuery::set_allocated_query_argument(::std::string* query_argument) {
  if (query_argument != NULL) {
    
  } else {
    
  }
  query_argument_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_argument,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}
inline void ServiceQuery::unsafe_arena_set_allocated_query_argument(
    ::std::string* query_argument) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (query_argument != NULL) {
    
  } else {
    
  }
  query_argument_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      query_argument, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}

// -------------------------------------------------------------------

// ServiceQueryRsp

// .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
inline void ServiceQueryRsp::clear_query_type() {
  query_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::smd::ServiceQueryType ServiceQueryRsp::query_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_type)
  return static_cast< ::com::fsmeeting::fsp::proto::smd::ServiceQueryType >(query_type_);
}
inline void ServiceQueryRsp::set_query_type(::com::fsmeeting::fsp::proto::smd::ServiceQueryType value) {
  
  query_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_type)
}

// string query_argument = 2;
inline void ServiceQueryRsp::clear_query_argument() {
  query_argument_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ServiceQueryRsp::query_argument() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
  return query_argument_.Get();
}
inline void ServiceQueryRsp::set_query_argument(const ::std::string& value) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}
inline void ServiceQueryRsp::set_query_argument(const char* value) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}
inline void ServiceQueryRsp::set_query_argument(const char* value,
    size_t size) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}
inline ::std::string* ServiceQueryRsp::mutable_query_argument() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
  return query_argument_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceQueryRsp::release_query_argument() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
  
  return query_argument_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ServiceQueryRsp::unsafe_arena_release_query_argument() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return query_argument_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ServiceQueryRsp::set_allocated_query_argument(::std::string* query_argument) {
  if (query_argument != NULL) {
    
  } else {
    
  }
  query_argument_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_argument,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}
inline void ServiceQueryRsp::unsafe_arena_set_allocated_query_argument(
    ::std::string* query_argument) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (query_argument != NULL) {
    
  } else {
    
  }
  query_argument_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      query_argument, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}

// repeated string query_result = 3;
inline int ServiceQueryRsp::query_result_size() const {
  return query_result_.size();
}
inline void ServiceQueryRsp::clear_query_result() {
  query_result_.Clear();
}
inline const ::std::string& ServiceQueryRsp::query_result(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return query_result_.Get(index);
}
inline ::std::string* ServiceQueryRsp::mutable_query_result(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return query_result_.Mutable(index);
}
inline void ServiceQueryRsp::set_query_result(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  query_result_.Mutable(index)->assign(value);
}
inline void ServiceQueryRsp::set_query_result(int index, const char* value) {
  query_result_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
inline void ServiceQueryRsp::set_query_result(int index, const char* value, size_t size) {
  query_result_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
inline ::std::string* ServiceQueryRsp::add_query_result() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return query_result_.Add();
}
inline void ServiceQueryRsp::add_query_result(const ::std::string& value) {
  query_result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
inline void ServiceQueryRsp::add_query_result(const char* value) {
  query_result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
inline void ServiceQueryRsp::add_query_result(const char* value, size_t size) {
  query_result_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceQueryRsp::query_result() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return query_result_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceQueryRsp::mutable_query_result() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return &query_result_;
}

// -------------------------------------------------------------------

// SsConf

// string ice_addr = 1;
inline void SsConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SsConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
  return ice_addr_.Get();
}
inline void SsConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}
inline void SsConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}
inline void SsConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}
inline ::std::string* SsConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SsConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SsConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SsConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}
inline void SsConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}

// string kafka_brokers = 2;
inline void SsConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SsConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
  return kafka_brokers_.Get();
}
inline void SsConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}
inline void SsConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}
inline void SsConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}
inline ::std::string* SsConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SsConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SsConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SsConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}
inline void SsConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}

// string sc_topic = 3;
inline void SsConf::clear_sc_topic() {
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SsConf::sc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
  return sc_topic_.Get();
}
inline void SsConf::set_sc_topic(const ::std::string& value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}
inline void SsConf::set_sc_topic(const char* value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}
inline void SsConf::set_sc_topic(const char* value,
    size_t size) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}
inline ::std::string* SsConf::mutable_sc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
  return sc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SsConf::release_sc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
  
  return sc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SsConf::unsafe_arena_release_sc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SsConf::set_allocated_sc_topic(::std::string* sc_topic) {
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}
inline void SsConf::unsafe_arena_set_allocated_sc_topic(
    ::std::string* sc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}

// string instance_id = 4;
inline void SsConf::clear_instance_id() {
  instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SsConf::instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
  return instance_id_.Get();
}
inline void SsConf::set_instance_id(const ::std::string& value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}
inline void SsConf::set_instance_id(const char* value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}
inline void SsConf::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}
inline ::std::string* SsConf::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
  return instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SsConf::release_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
  
  return instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SsConf::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SsConf::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}
inline void SsConf::unsafe_arena_set_allocated_instance_id(
    ::std::string* instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}

// -------------------------------------------------------------------

// SsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool SsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void SsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& SsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void SsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
}

// -------------------------------------------------------------------

// CpConf

// string ice_addr = 1;
inline void CpConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CpConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
  return ice_addr_.Get();
}
inline void CpConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}
inline void CpConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}
inline void CpConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}
inline ::std::string* CpConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CpConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}
inline void CpConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}

// string kafka_brokers = 2;
inline void CpConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CpConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
  return kafka_brokers_.Get();
}
inline void CpConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}
inline void CpConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}
inline void CpConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}
inline ::std::string* CpConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CpConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}
inline void CpConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}

// string sc_topic = 3;
inline void CpConf::clear_sc_topic() {
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CpConf::sc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
  return sc_topic_.Get();
}
inline void CpConf::set_sc_topic(const ::std::string& value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}
inline void CpConf::set_sc_topic(const char* value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}
inline void CpConf::set_sc_topic(const char* value,
    size_t size) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}
inline ::std::string* CpConf::mutable_sc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
  return sc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::release_sc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
  
  return sc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::unsafe_arena_release_sc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CpConf::set_allocated_sc_topic(::std::string* sc_topic) {
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}
inline void CpConf::unsafe_arena_set_allocated_sc_topic(
    ::std::string* sc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}

// string instance_id = 4;
inline void CpConf::clear_instance_id() {
  instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CpConf::instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
  return instance_id_.Get();
}
inline void CpConf::set_instance_id(const ::std::string& value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}
inline void CpConf::set_instance_id(const char* value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}
inline void CpConf::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}
inline ::std::string* CpConf::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
  return instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::release_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
  
  return instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CpConf::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}
inline void CpConf::unsafe_arena_set_allocated_instance_id(
    ::std::string* instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}

// string session_app_id = 5;
inline void CpConf::clear_session_app_id() {
  session_app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CpConf::session_app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
  return session_app_id_.Get();
}
inline void CpConf::set_session_app_id(const ::std::string& value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}
inline void CpConf::set_session_app_id(const char* value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}
inline void CpConf::set_session_app_id(const char* value,
    size_t size) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}
inline ::std::string* CpConf::mutable_session_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
  return session_app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::release_session_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
  
  return session_app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CpConf::unsafe_arena_release_session_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CpConf::set_allocated_session_app_id(::std::string* session_app_id) {
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}
inline void CpConf::unsafe_arena_set_allocated_session_app_id(
    ::std::string* session_app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}

// -------------------------------------------------------------------

// CpConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool CpConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void CpConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& CpConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CpConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CpConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void CpConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
}

// -------------------------------------------------------------------

// StreamAsConf

// string access_url = 1;
inline void StreamAsConf::clear_access_url() {
  access_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamAsConf::access_url() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
  return access_url_.Get();
}
inline void StreamAsConf::set_access_url(const ::std::string& value) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}
inline void StreamAsConf::set_access_url(const char* value) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}
inline void StreamAsConf::set_access_url(const char* value,
    size_t size) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}
inline ::std::string* StreamAsConf::mutable_access_url() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
  return access_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamAsConf::release_access_url() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
  
  return access_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamAsConf::unsafe_arena_release_access_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return access_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamAsConf::set_allocated_access_url(::std::string* access_url) {
  if (access_url != NULL) {
    
  } else {
    
  }
  access_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}
inline void StreamAsConf::unsafe_arena_set_allocated_access_url(
    ::std::string* access_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (access_url != NULL) {
    
  } else {
    
  }
  access_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      access_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}

// string session_app_id = 2;
inline void StreamAsConf::clear_session_app_id() {
  session_app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamAsConf::session_app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
  return session_app_id_.Get();
}
inline void StreamAsConf::set_session_app_id(const ::std::string& value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}
inline void StreamAsConf::set_session_app_id(const char* value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}
inline void StreamAsConf::set_session_app_id(const char* value,
    size_t size) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}
inline ::std::string* StreamAsConf::mutable_session_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
  return session_app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamAsConf::release_session_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
  
  return session_app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamAsConf::unsafe_arena_release_session_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamAsConf::set_allocated_session_app_id(::std::string* session_app_id) {
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}
inline void StreamAsConf::unsafe_arena_set_allocated_session_app_id(
    ::std::string* session_app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}

// string debug_mode = 3;
inline void StreamAsConf::clear_debug_mode() {
  debug_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamAsConf::debug_mode() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
  return debug_mode_.Get();
}
inline void StreamAsConf::set_debug_mode(const ::std::string& value) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}
inline void StreamAsConf::set_debug_mode(const char* value) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}
inline void StreamAsConf::set_debug_mode(const char* value,
    size_t size) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}
inline ::std::string* StreamAsConf::mutable_debug_mode() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
  return debug_mode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamAsConf::release_debug_mode() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
  
  return debug_mode_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamAsConf::unsafe_arena_release_debug_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return debug_mode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamAsConf::set_allocated_debug_mode(::std::string* debug_mode) {
  if (debug_mode != NULL) {
    
  } else {
    
  }
  debug_mode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_mode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}
inline void StreamAsConf::unsafe_arena_set_allocated_debug_mode(
    ::std::string* debug_mode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (debug_mode != NULL) {
    
  } else {
    
  }
  debug_mode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      debug_mode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}

// -------------------------------------------------------------------

// StreamAsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool StreamAsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void StreamAsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamAsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamAsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamAsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void StreamAsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
}

// -------------------------------------------------------------------

// GroupAsConf

// string access_url = 1;
inline void GroupAsConf::clear_access_url() {
  access_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupAsConf::access_url() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
  return access_url_.Get();
}
inline void GroupAsConf::set_access_url(const ::std::string& value) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}
inline void GroupAsConf::set_access_url(const char* value) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}
inline void GroupAsConf::set_access_url(const char* value,
    size_t size) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}
inline ::std::string* GroupAsConf::mutable_access_url() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
  return access_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::release_access_url() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
  
  return access_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::unsafe_arena_release_access_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return access_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupAsConf::set_allocated_access_url(::std::string* access_url) {
  if (access_url != NULL) {
    
  } else {
    
  }
  access_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}
inline void GroupAsConf::unsafe_arena_set_allocated_access_url(
    ::std::string* access_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (access_url != NULL) {
    
  } else {
    
  }
  access_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      access_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}

// string ice_addr = 2;
inline void GroupAsConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupAsConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
  return ice_addr_.Get();
}
inline void GroupAsConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}
inline void GroupAsConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}
inline void GroupAsConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}
inline ::std::string* GroupAsConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupAsConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}
inline void GroupAsConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}

// string dev_id = 3;
inline void GroupAsConf::clear_dev_id() {
  dev_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupAsConf::dev_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
  return dev_id_.Get();
}
inline void GroupAsConf::set_dev_id(const ::std::string& value) {
  
  dev_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}
inline void GroupAsConf::set_dev_id(const char* value) {
  
  dev_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}
inline void GroupAsConf::set_dev_id(const char* value,
    size_t size) {
  
  dev_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}
inline ::std::string* GroupAsConf::mutable_dev_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
  return dev_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::release_dev_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
  
  return dev_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::unsafe_arena_release_dev_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dev_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupAsConf::set_allocated_dev_id(::std::string* dev_id) {
  if (dev_id != NULL) {
    
  } else {
    
  }
  dev_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}
inline void GroupAsConf::unsafe_arena_set_allocated_dev_id(
    ::std::string* dev_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dev_id != NULL) {
    
  } else {
    
  }
  dev_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dev_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}

// string dev_verify_code = 4;
inline void GroupAsConf::clear_dev_verify_code() {
  dev_verify_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupAsConf::dev_verify_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
  return dev_verify_code_.Get();
}
inline void GroupAsConf::set_dev_verify_code(const ::std::string& value) {
  
  dev_verify_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}
inline void GroupAsConf::set_dev_verify_code(const char* value) {
  
  dev_verify_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}
inline void GroupAsConf::set_dev_verify_code(const char* value,
    size_t size) {
  
  dev_verify_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}
inline ::std::string* GroupAsConf::mutable_dev_verify_code() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
  return dev_verify_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::release_dev_verify_code() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
  
  return dev_verify_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::unsafe_arena_release_dev_verify_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dev_verify_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupAsConf::set_allocated_dev_verify_code(::std::string* dev_verify_code) {
  if (dev_verify_code != NULL) {
    
  } else {
    
  }
  dev_verify_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_verify_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}
inline void GroupAsConf::unsafe_arena_set_allocated_dev_verify_code(
    ::std::string* dev_verify_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dev_verify_code != NULL) {
    
  } else {
    
  }
  dev_verify_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dev_verify_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}

// string app_id = 5;
inline void GroupAsConf::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupAsConf::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
  return app_id_.Get();
}
inline void GroupAsConf::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}
inline void GroupAsConf::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}
inline void GroupAsConf::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}
inline ::std::string* GroupAsConf::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupAsConf::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}
inline void GroupAsConf::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}

// string verification_code = 6;
inline void GroupAsConf::clear_verification_code() {
  verification_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupAsConf::verification_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
  return verification_code_.Get();
}
inline void GroupAsConf::set_verification_code(const ::std::string& value) {
  
  verification_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}
inline void GroupAsConf::set_verification_code(const char* value) {
  
  verification_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}
inline void GroupAsConf::set_verification_code(const char* value,
    size_t size) {
  
  verification_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}
inline ::std::string* GroupAsConf::mutable_verification_code() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
  return verification_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::release_verification_code() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
  
  return verification_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::unsafe_arena_release_verification_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return verification_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupAsConf::set_allocated_verification_code(::std::string* verification_code) {
  if (verification_code != NULL) {
    
  } else {
    
  }
  verification_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verification_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}
inline void GroupAsConf::unsafe_arena_set_allocated_verification_code(
    ::std::string* verification_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (verification_code != NULL) {
    
  } else {
    
  }
  verification_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      verification_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}

// string dev_group = 7;
inline void GroupAsConf::clear_dev_group() {
  dev_group_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupAsConf::dev_group() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
  return dev_group_.Get();
}
inline void GroupAsConf::set_dev_group(const ::std::string& value) {
  
  dev_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}
inline void GroupAsConf::set_dev_group(const char* value) {
  
  dev_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}
inline void GroupAsConf::set_dev_group(const char* value,
    size_t size) {
  
  dev_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}
inline ::std::string* GroupAsConf::mutable_dev_group() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
  return dev_group_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::release_dev_group() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
  
  return dev_group_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupAsConf::unsafe_arena_release_dev_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dev_group_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupAsConf::set_allocated_dev_group(::std::string* dev_group) {
  if (dev_group != NULL) {
    
  } else {
    
  }
  dev_group_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_group,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}
inline void GroupAsConf::unsafe_arena_set_allocated_dev_group(
    ::std::string* dev_group) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dev_group != NULL) {
    
  } else {
    
  }
  dev_group_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dev_group, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}

// -------------------------------------------------------------------

// GroupAsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GroupAsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GroupAsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GroupAsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GroupAsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GroupAsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GroupAsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
}

// -------------------------------------------------------------------

// ScConf

// string ice_addr = 1;
inline void ScConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
  return ice_addr_.Get();
}
inline void ScConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}
inline void ScConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}
inline void ScConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}
inline ::std::string* ScConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}
inline void ScConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}

// string kafka_brokers = 2;
inline void ScConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
  return kafka_brokers_.Get();
}
inline void ScConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}
inline void ScConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}
inline void ScConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}
inline ::std::string* ScConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}
inline void ScConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}

// string zookeeper_servers = 3;
inline void ScConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
inline void ScConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}
inline void ScConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}
inline void ScConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}
inline ::std::string* ScConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}
inline void ScConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}

// string sc_topic = 4;
inline void ScConf::clear_sc_topic() {
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::sc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
  return sc_topic_.Get();
}
inline void ScConf::set_sc_topic(const ::std::string& value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}
inline void ScConf::set_sc_topic(const char* value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}
inline void ScConf::set_sc_topic(const char* value,
    size_t size) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}
inline ::std::string* ScConf::mutable_sc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
  return sc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_sc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
  
  return sc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_sc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_sc_topic(::std::string* sc_topic) {
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}
inline void ScConf::unsafe_arena_set_allocated_sc_topic(
    ::std::string* sc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}

// string sc_group_topic = 5;
inline void ScConf::clear_sc_group_topic() {
  sc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::sc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
  return sc_group_topic_.Get();
}
inline void ScConf::set_sc_group_topic(const ::std::string& value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}
inline void ScConf::set_sc_group_topic(const char* value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}
inline void ScConf::set_sc_group_topic(const char* value,
    size_t size) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}
inline ::std::string* ScConf::mutable_sc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
  return sc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_sc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
  
  return sc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_sc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_sc_group_topic(::std::string* sc_group_topic) {
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}
inline void ScConf::unsafe_arena_set_allocated_sc_group_topic(
    ::std::string* sc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}

// string consumer_client_id = 6;
inline void ScConf::clear_consumer_client_id() {
  consumer_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::consumer_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
  return consumer_client_id_.Get();
}
inline void ScConf::set_consumer_client_id(const ::std::string& value) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}
inline void ScConf::set_consumer_client_id(const char* value) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}
inline void ScConf::set_consumer_client_id(const char* value,
    size_t size) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}
inline ::std::string* ScConf::mutable_consumer_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
  return consumer_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_consumer_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
  
  return consumer_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_consumer_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return consumer_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_consumer_client_id(::std::string* consumer_client_id) {
  if (consumer_client_id != NULL) {
    
  } else {
    
  }
  consumer_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}
inline void ScConf::unsafe_arena_set_allocated_consumer_client_id(
    ::std::string* consumer_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (consumer_client_id != NULL) {
    
  } else {
    
  }
  consumer_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      consumer_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}

// string lock_timeout = 11;
inline void ScConf::clear_lock_timeout() {
  lock_timeout_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::lock_timeout() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
  return lock_timeout_.Get();
}
inline void ScConf::set_lock_timeout(const ::std::string& value) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}
inline void ScConf::set_lock_timeout(const char* value) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}
inline void ScConf::set_lock_timeout(const char* value,
    size_t size) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}
inline ::std::string* ScConf::mutable_lock_timeout() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
  return lock_timeout_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_lock_timeout() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
  
  return lock_timeout_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_lock_timeout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return lock_timeout_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_lock_timeout(::std::string* lock_timeout) {
  if (lock_timeout != NULL) {
    
  } else {
    
  }
  lock_timeout_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_timeout,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}
inline void ScConf::unsafe_arena_set_allocated_lock_timeout(
    ::std::string* lock_timeout) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (lock_timeout != NULL) {
    
  } else {
    
  }
  lock_timeout_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      lock_timeout, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}

// string topic_partitions = 7;
inline void ScConf::clear_topic_partitions() {
  topic_partitions_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::topic_partitions() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
  return topic_partitions_.Get();
}
inline void ScConf::set_topic_partitions(const ::std::string& value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}
inline void ScConf::set_topic_partitions(const char* value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}
inline void ScConf::set_topic_partitions(const char* value,
    size_t size) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}
inline ::std::string* ScConf::mutable_topic_partitions() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
  return topic_partitions_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_topic_partitions() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
  
  return topic_partitions_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_topic_partitions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_partitions_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_topic_partitions(::std::string* topic_partitions) {
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_partitions,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}
inline void ScConf::unsafe_arena_set_allocated_topic_partitions(
    ::std::string* topic_partitions) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_partitions, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}

// string topic_replication = 8;
inline void ScConf::clear_topic_replication() {
  topic_replication_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::topic_replication() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
  return topic_replication_.Get();
}
inline void ScConf::set_topic_replication(const ::std::string& value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}
inline void ScConf::set_topic_replication(const char* value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}
inline void ScConf::set_topic_replication(const char* value,
    size_t size) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}
inline ::std::string* ScConf::mutable_topic_replication() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
  return topic_replication_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_topic_replication() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
  
  return topic_replication_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_topic_replication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_replication_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_topic_replication(::std::string* topic_replication) {
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_replication,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}
inline void ScConf::unsafe_arena_set_allocated_topic_replication(
    ::std::string* topic_replication) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_replication, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}

// string router_status_return_size = 9;
inline void ScConf::clear_router_status_return_size() {
  router_status_return_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::router_status_return_size() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
  return router_status_return_size_.Get();
}
inline void ScConf::set_router_status_return_size(const ::std::string& value) {
  
  router_status_return_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}
inline void ScConf::set_router_status_return_size(const char* value) {
  
  router_status_return_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}
inline void ScConf::set_router_status_return_size(const char* value,
    size_t size) {
  
  router_status_return_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}
inline ::std::string* ScConf::mutable_router_status_return_size() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
  return router_status_return_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_router_status_return_size() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
  
  return router_status_return_size_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_router_status_return_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return router_status_return_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_router_status_return_size(::std::string* router_status_return_size) {
  if (router_status_return_size != NULL) {
    
  } else {
    
  }
  router_status_return_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), router_status_return_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}
inline void ScConf::unsafe_arena_set_allocated_router_status_return_size(
    ::std::string* router_status_return_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (router_status_return_size != NULL) {
    
  } else {
    
  }
  router_status_return_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      router_status_return_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}

// string protocol_version = 10;
inline void ScConf::clear_protocol_version() {
  protocol_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::protocol_version() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
  return protocol_version_.Get();
}
inline void ScConf::set_protocol_version(const ::std::string& value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}
inline void ScConf::set_protocol_version(const char* value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}
inline void ScConf::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}
inline ::std::string* ScConf::mutable_protocol_version() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
  return protocol_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_protocol_version() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
  
  return protocol_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_protocol_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return protocol_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}
inline void ScConf::unsafe_arena_set_allocated_protocol_version(
    ::std::string* protocol_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      protocol_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}

// string retry_policy = 12;
inline void ScConf::clear_retry_policy() {
  retry_policy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::retry_policy() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
  return retry_policy_.Get();
}
inline void ScConf::set_retry_policy(const ::std::string& value) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}
inline void ScConf::set_retry_policy(const char* value) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}
inline void ScConf::set_retry_policy(const char* value,
    size_t size) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}
inline ::std::string* ScConf::mutable_retry_policy() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
  return retry_policy_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_retry_policy() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
  
  return retry_policy_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_retry_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return retry_policy_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_retry_policy(::std::string* retry_policy) {
  if (retry_policy != NULL) {
    
  } else {
    
  }
  retry_policy_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_policy,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}
inline void ScConf::unsafe_arena_set_allocated_retry_policy(
    ::std::string* retry_policy) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (retry_policy != NULL) {
    
  } else {
    
  }
  retry_policy_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      retry_policy, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}

// string root_path = 13;
inline void ScConf::clear_root_path() {
  root_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ScConf::root_path() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
  return root_path_.Get();
}
inline void ScConf::set_root_path(const ::std::string& value) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}
inline void ScConf::set_root_path(const char* value) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}
inline void ScConf::set_root_path(const char* value,
    size_t size) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}
inline ::std::string* ScConf::mutable_root_path() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
  return root_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::release_root_path() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
  
  return root_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ScConf::unsafe_arena_release_root_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return root_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ScConf::set_allocated_root_path(::std::string* root_path) {
  if (root_path != NULL) {
    
  } else {
    
  }
  root_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}
inline void ScConf::unsafe_arena_set_allocated_root_path(
    ::std::string* root_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (root_path != NULL) {
    
  } else {
    
  }
  root_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      root_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}

// -------------------------------------------------------------------

// ScConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool ScConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void ScConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& ScConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ScConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* ScConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void ScConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
}

// -------------------------------------------------------------------

// AccessConf

// string ice_addr = 1;
inline void AccessConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AccessConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
  return ice_addr_.Get();
}
inline void AccessConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}
inline void AccessConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}
inline void AccessConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}
inline ::std::string* AccessConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccessConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AccessConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AccessConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}
inline void AccessConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}

// -------------------------------------------------------------------

// AccessConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool AccessConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void AccessConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& AccessConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* AccessConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* AccessConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void AccessConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
}

// -------------------------------------------------------------------

// SpConf

// string ice_addr = 1;
inline void SpConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
  return ice_addr_.Get();
}
inline void SpConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}
inline void SpConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}
inline void SpConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}
inline ::std::string* SpConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}
inline void SpConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}

// string kafka_brokers = 2;
inline void SpConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
  return kafka_brokers_.Get();
}
inline void SpConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}
inline void SpConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}
inline void SpConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}
inline ::std::string* SpConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}
inline void SpConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}

// string zookeeper_servers = 3;
inline void SpConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
inline void SpConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}
inline void SpConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}
inline void SpConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}
inline ::std::string* SpConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}
inline void SpConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}

// string sp_topic = 4;
inline void SpConf::clear_sp_topic() {
  sp_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::sp_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
  return sp_topic_.Get();
}
inline void SpConf::set_sp_topic(const ::std::string& value) {
  
  sp_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}
inline void SpConf::set_sp_topic(const char* value) {
  
  sp_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}
inline void SpConf::set_sp_topic(const char* value,
    size_t size) {
  
  sp_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}
inline ::std::string* SpConf::mutable_sp_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
  return sp_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_sp_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
  
  return sp_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_sp_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sp_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_sp_topic(::std::string* sp_topic) {
  if (sp_topic != NULL) {
    
  } else {
    
  }
  sp_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sp_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}
inline void SpConf::unsafe_arena_set_allocated_sp_topic(
    ::std::string* sp_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sp_topic != NULL) {
    
  } else {
    
  }
  sp_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sp_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}

// string sc_group_topic = 5;
inline void SpConf::clear_sc_group_topic() {
  sc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::sc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
  return sc_group_topic_.Get();
}
inline void SpConf::set_sc_group_topic(const ::std::string& value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}
inline void SpConf::set_sc_group_topic(const char* value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}
inline void SpConf::set_sc_group_topic(const char* value,
    size_t size) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}
inline ::std::string* SpConf::mutable_sc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
  return sc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_sc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
  
  return sc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_sc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_sc_group_topic(::std::string* sc_group_topic) {
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}
inline void SpConf::unsafe_arena_set_allocated_sc_group_topic(
    ::std::string* sc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}

// string gc_group_topic = 6;
inline void SpConf::clear_gc_group_topic() {
  gc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::gc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
  return gc_group_topic_.Get();
}
inline void SpConf::set_gc_group_topic(const ::std::string& value) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}
inline void SpConf::set_gc_group_topic(const char* value) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}
inline void SpConf::set_gc_group_topic(const char* value,
    size_t size) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}
inline ::std::string* SpConf::mutable_gc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
  return gc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_gc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
  
  return gc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_gc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_gc_group_topic(::std::string* gc_group_topic) {
  if (gc_group_topic != NULL) {
    
  } else {
    
  }
  gc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}
inline void SpConf::unsafe_arena_set_allocated_gc_group_topic(
    ::std::string* gc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gc_group_topic != NULL) {
    
  } else {
    
  }
  gc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}

// string sp_server_id = 7;
inline void SpConf::clear_sp_server_id() {
  sp_server_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::sp_server_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
  return sp_server_id_.Get();
}
inline void SpConf::set_sp_server_id(const ::std::string& value) {
  
  sp_server_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}
inline void SpConf::set_sp_server_id(const char* value) {
  
  sp_server_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}
inline void SpConf::set_sp_server_id(const char* value,
    size_t size) {
  
  sp_server_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}
inline ::std::string* SpConf::mutable_sp_server_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
  return sp_server_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_sp_server_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
  
  return sp_server_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_sp_server_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sp_server_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_sp_server_id(::std::string* sp_server_id) {
  if (sp_server_id != NULL) {
    
  } else {
    
  }
  sp_server_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sp_server_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}
inline void SpConf::unsafe_arena_set_allocated_sp_server_id(
    ::std::string* sp_server_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sp_server_id != NULL) {
    
  } else {
    
  }
  sp_server_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sp_server_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}

// string topic_partitions = 8;
inline void SpConf::clear_topic_partitions() {
  topic_partitions_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::topic_partitions() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
  return topic_partitions_.Get();
}
inline void SpConf::set_topic_partitions(const ::std::string& value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}
inline void SpConf::set_topic_partitions(const char* value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}
inline void SpConf::set_topic_partitions(const char* value,
    size_t size) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}
inline ::std::string* SpConf::mutable_topic_partitions() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
  return topic_partitions_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_topic_partitions() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
  
  return topic_partitions_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_topic_partitions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_partitions_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_topic_partitions(::std::string* topic_partitions) {
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_partitions,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}
inline void SpConf::unsafe_arena_set_allocated_topic_partitions(
    ::std::string* topic_partitions) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_partitions, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}

// string topic_replication = 9;
inline void SpConf::clear_topic_replication() {
  topic_replication_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::topic_replication() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
  return topic_replication_.Get();
}
inline void SpConf::set_topic_replication(const ::std::string& value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}
inline void SpConf::set_topic_replication(const char* value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}
inline void SpConf::set_topic_replication(const char* value,
    size_t size) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}
inline ::std::string* SpConf::mutable_topic_replication() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
  return topic_replication_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_topic_replication() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
  
  return topic_replication_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_topic_replication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_replication_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_topic_replication(::std::string* topic_replication) {
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_replication,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}
inline void SpConf::unsafe_arena_set_allocated_topic_replication(
    ::std::string* topic_replication) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_replication, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}

// string protocol_version = 10;
inline void SpConf::clear_protocol_version() {
  protocol_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SpConf::protocol_version() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
  return protocol_version_.Get();
}
inline void SpConf::set_protocol_version(const ::std::string& value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}
inline void SpConf::set_protocol_version(const char* value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}
inline void SpConf::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}
inline ::std::string* SpConf::mutable_protocol_version() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
  return protocol_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::release_protocol_version() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
  
  return protocol_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SpConf::unsafe_arena_release_protocol_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return protocol_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SpConf::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}
inline void SpConf::unsafe_arena_set_allocated_protocol_version(
    ::std::string* protocol_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      protocol_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}

// -------------------------------------------------------------------

// SpConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool SpConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void SpConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& SpConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SpConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SpConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void SpConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
}

// -------------------------------------------------------------------

// IceConf

// string redis_addr = 1;
inline void IceConf::clear_redis_addr() {
  redis_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& IceConf::redis_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
  return redis_addr_.Get();
}
inline void IceConf::set_redis_addr(const ::std::string& value) {
  
  redis_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}
inline void IceConf::set_redis_addr(const char* value) {
  
  redis_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}
inline void IceConf::set_redis_addr(const char* value,
    size_t size) {
  
  redis_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}
inline ::std::string* IceConf::mutable_redis_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
  return redis_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* IceConf::release_redis_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
  
  return redis_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* IceConf::unsafe_arena_release_redis_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return redis_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void IceConf::set_allocated_redis_addr(::std::string* redis_addr) {
  if (redis_addr != NULL) {
    
  } else {
    
  }
  redis_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redis_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}
inline void IceConf::unsafe_arena_set_allocated_redis_addr(
    ::std::string* redis_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (redis_addr != NULL) {
    
  } else {
    
  }
  redis_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      redis_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}

// -------------------------------------------------------------------

// IceConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool IceConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void IceConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& IceConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* IceConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* IceConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void IceConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
}

// -------------------------------------------------------------------

// IpList

// repeated string ip = 1;
inline int IpList::ip_size() const {
  return ip_.size();
}
inline void IpList::clear_ip() {
  ip_.Clear();
}
inline const ::std::string& IpList::ip(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return ip_.Get(index);
}
inline ::std::string* IpList::mutable_ip(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return ip_.Mutable(index);
}
inline void IpList::set_ip(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.IpList.ip)
  ip_.Mutable(index)->assign(value);
}
inline void IpList::set_ip(int index, const char* value) {
  ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
inline void IpList::set_ip(int index, const char* value, size_t size) {
  ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
inline ::std::string* IpList::add_ip() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return ip_.Add();
}
inline void IpList::add_ip(const ::std::string& value) {
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
inline void IpList::add_ip(const char* value) {
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
inline void IpList::add_ip(const char* value, size_t size) {
  ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
IpList::ip() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return ip_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
IpList::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return &ip_;
}

// -------------------------------------------------------------------

// GsConf

// string ice_addr = 1;
inline void GsConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
  return ice_addr_.Get();
}
inline void GsConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}
inline void GsConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}
inline void GsConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}
inline ::std::string* GsConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}
inline void GsConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}

// string kafka_brokers = 2;
inline void GsConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
  return kafka_brokers_.Get();
}
inline void GsConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}
inline void GsConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}
inline void GsConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}
inline ::std::string* GsConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}
inline void GsConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}

// string sc_topic = 3;
inline void GsConf::clear_sc_topic() {
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::sc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
  return sc_topic_.Get();
}
inline void GsConf::set_sc_topic(const ::std::string& value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}
inline void GsConf::set_sc_topic(const char* value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}
inline void GsConf::set_sc_topic(const char* value,
    size_t size) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}
inline ::std::string* GsConf::mutable_sc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
  return sc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_sc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
  
  return sc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_sc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_sc_topic(::std::string* sc_topic) {
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}
inline void GsConf::unsafe_arena_set_allocated_sc_topic(
    ::std::string* sc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}

// string gc_topic = 4;
inline void GsConf::clear_gc_topic() {
  gc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::gc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
  return gc_topic_.Get();
}
inline void GsConf::set_gc_topic(const ::std::string& value) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}
inline void GsConf::set_gc_topic(const char* value) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}
inline void GsConf::set_gc_topic(const char* value,
    size_t size) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}
inline ::std::string* GsConf::mutable_gc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
  return gc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_gc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
  
  return gc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_gc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_gc_topic(::std::string* gc_topic) {
  if (gc_topic != NULL) {
    
  } else {
    
  }
  gc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}
inline void GsConf::unsafe_arena_set_allocated_gc_topic(
    ::std::string* gc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gc_topic != NULL) {
    
  } else {
    
  }
  gc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}

// string instance_id = 5;
inline void GsConf::clear_instance_id() {
  instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
  return instance_id_.Get();
}
inline void GsConf::set_instance_id(const ::std::string& value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}
inline void GsConf::set_instance_id(const char* value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}
inline void GsConf::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}
inline ::std::string* GsConf::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
  return instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
  
  return instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}
inline void GsConf::unsafe_arena_set_allocated_instance_id(
    ::std::string* instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}

// string group_id = 6;
inline void GsConf::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
  return group_id_.Get();
}
inline void GsConf::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}
inline void GsConf::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}
inline void GsConf::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}
inline ::std::string* GsConf::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}
inline void GsConf::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}

// .com.fsmeeting.fsp.proto.smd.IpList nat_ip_list = 7;
inline bool GsConf::has_nat_ip_list() const {
  return this != internal_default_instance() && nat_ip_list_ != NULL;
}
inline void GsConf::clear_nat_ip_list() {
  if (GetArenaNoVirtual() == NULL && nat_ip_list_ != NULL) delete nat_ip_list_;
  nat_ip_list_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::smd::IpList& GsConf::nat_ip_list() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
  return nat_ip_list_ != NULL ? *nat_ip_list_
                         : *::com::fsmeeting::fsp::proto::smd::IpList::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::smd::IpList* GsConf::mutable_nat_ip_list() {
  
  if (nat_ip_list_ == NULL) {
    _slow_mutable_nat_ip_list();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
  return nat_ip_list_;
}
inline ::com::fsmeeting::fsp::proto::smd::IpList* GsConf::release_nat_ip_list() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_nat_ip_list();
  } else {
    ::com::fsmeeting::fsp::proto::smd::IpList* temp = nat_ip_list_;
    nat_ip_list_ = NULL;
    return temp;
  }
}
inline  void GsConf::set_allocated_nat_ip_list(::com::fsmeeting::fsp::proto::smd::IpList* nat_ip_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nat_ip_list_;
  }
  if (nat_ip_list != NULL) {
    _slow_set_allocated_nat_ip_list(message_arena, &nat_ip_list);
  }
  nat_ip_list_ = nat_ip_list;
  if (nat_ip_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
}

// string log_save_days = 8;
inline void GsConf::clear_log_save_days() {
  log_save_days_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::log_save_days() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
  return log_save_days_.Get();
}
inline void GsConf::set_log_save_days(const ::std::string& value) {
  
  log_save_days_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}
inline void GsConf::set_log_save_days(const char* value) {
  
  log_save_days_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}
inline void GsConf::set_log_save_days(const char* value,
    size_t size) {
  
  log_save_days_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}
inline ::std::string* GsConf::mutable_log_save_days() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
  return log_save_days_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_log_save_days() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
  
  return log_save_days_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_log_save_days() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return log_save_days_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_log_save_days(::std::string* log_save_days) {
  if (log_save_days != NULL) {
    
  } else {
    
  }
  log_save_days_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_save_days,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}
inline void GsConf::unsafe_arena_set_allocated_log_save_days(
    ::std::string* log_save_days) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (log_save_days != NULL) {
    
  } else {
    
  }
  log_save_days_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      log_save_days, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}

// string process_name = 9;
inline void GsConf::clear_process_name() {
  process_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::process_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
  return process_name_.Get();
}
inline void GsConf::set_process_name(const ::std::string& value) {
  
  process_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}
inline void GsConf::set_process_name(const char* value) {
  
  process_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}
inline void GsConf::set_process_name(const char* value,
    size_t size) {
  
  process_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}
inline ::std::string* GsConf::mutable_process_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
  return process_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_process_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
  
  return process_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_process_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return process_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}
inline void GsConf::unsafe_arena_set_allocated_process_name(
    ::std::string* process_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      process_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}

// string guid = 10;
inline void GsConf::clear_guid() {
  guid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::guid() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.guid)
  return guid_.Get();
}
inline void GsConf::set_guid(const ::std::string& value) {
  
  guid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}
inline void GsConf::set_guid(const char* value) {
  
  guid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}
inline void GsConf::set_guid(const char* value,
    size_t size) {
  
  guid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}
inline ::std::string* GsConf::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.guid)
  return guid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_guid() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.guid)
  
  return guid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_guid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.guid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return guid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}
inline void GsConf::unsafe_arena_set_allocated_guid(
    ::std::string* guid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      guid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}

// string service_name = 11;
inline void GsConf::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::service_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
  return service_name_.Get();
}
inline void GsConf::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}
inline void GsConf::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}
inline void GsConf::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}
inline ::std::string* GsConf::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_service_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}
inline void GsConf::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}

// string priority = 12;
inline void GsConf::clear_priority() {
  priority_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::priority() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.priority)
  return priority_.Get();
}
inline void GsConf::set_priority(const ::std::string& value) {
  
  priority_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}
inline void GsConf::set_priority(const char* value) {
  
  priority_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}
inline void GsConf::set_priority(const char* value,
    size_t size) {
  
  priority_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}
inline ::std::string* GsConf::mutable_priority() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.priority)
  return priority_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_priority() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.priority)
  
  return priority_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_priority() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.priority)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return priority_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_priority(::std::string* priority) {
  if (priority != NULL) {
    
  } else {
    
  }
  priority_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), priority,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}
inline void GsConf::unsafe_arena_set_allocated_priority(
    ::std::string* priority) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (priority != NULL) {
    
  } else {
    
  }
  priority_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      priority, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}

// string session_app_id = 13;
inline void GsConf::clear_session_app_id() {
  session_app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::session_app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
  return session_app_id_.Get();
}
inline void GsConf::set_session_app_id(const ::std::string& value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}
inline void GsConf::set_session_app_id(const char* value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}
inline void GsConf::set_session_app_id(const char* value,
    size_t size) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}
inline ::std::string* GsConf::mutable_session_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
  return session_app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_session_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
  
  return session_app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_session_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_session_app_id(::std::string* session_app_id) {
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}
inline void GsConf::unsafe_arena_set_allocated_session_app_id(
    ::std::string* session_app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}

// string debug_mode = 14;
inline void GsConf::clear_debug_mode() {
  debug_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::debug_mode() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
  return debug_mode_.Get();
}
inline void GsConf::set_debug_mode(const ::std::string& value) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}
inline void GsConf::set_debug_mode(const char* value) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}
inline void GsConf::set_debug_mode(const char* value,
    size_t size) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}
inline ::std::string* GsConf::mutable_debug_mode() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
  return debug_mode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_debug_mode() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
  
  return debug_mode_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_debug_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return debug_mode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_debug_mode(::std::string* debug_mode) {
  if (debug_mode != NULL) {
    
  } else {
    
  }
  debug_mode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_mode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}
inline void GsConf::unsafe_arena_set_allocated_debug_mode(
    ::std::string* debug_mode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (debug_mode != NULL) {
    
  } else {
    
  }
  debug_mode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      debug_mode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}

// string sys_log_interval = 15;
inline void GsConf::clear_sys_log_interval() {
  sys_log_interval_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GsConf::sys_log_interval() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
  return sys_log_interval_.Get();
}
inline void GsConf::set_sys_log_interval(const ::std::string& value) {
  
  sys_log_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}
inline void GsConf::set_sys_log_interval(const char* value) {
  
  sys_log_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}
inline void GsConf::set_sys_log_interval(const char* value,
    size_t size) {
  
  sys_log_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}
inline ::std::string* GsConf::mutable_sys_log_interval() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
  return sys_log_interval_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::release_sys_log_interval() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
  
  return sys_log_interval_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GsConf::unsafe_arena_release_sys_log_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sys_log_interval_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GsConf::set_allocated_sys_log_interval(::std::string* sys_log_interval) {
  if (sys_log_interval != NULL) {
    
  } else {
    
  }
  sys_log_interval_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sys_log_interval,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}
inline void GsConf::unsafe_arena_set_allocated_sys_log_interval(
    ::std::string* sys_log_interval) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sys_log_interval != NULL) {
    
  } else {
    
  }
  sys_log_interval_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sys_log_interval, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}

// -------------------------------------------------------------------

// GsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
}

// -------------------------------------------------------------------

// GcConf

// string ice_addr = 1;
inline void GcConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
  return ice_addr_.Get();
}
inline void GcConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}
inline void GcConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}
inline void GcConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}
inline ::std::string* GcConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}
inline void GcConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}

// string kafka_brokers = 2;
inline void GcConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
  return kafka_brokers_.Get();
}
inline void GcConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}
inline void GcConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}
inline void GcConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}
inline ::std::string* GcConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}
inline void GcConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}

// string zookeeper_servers = 3;
inline void GcConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
inline void GcConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}
inline void GcConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}
inline void GcConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}
inline ::std::string* GcConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}
inline void GcConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}

// string gc_topic = 4;
inline void GcConf::clear_gc_topic() {
  gc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::gc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
  return gc_topic_.Get();
}
inline void GcConf::set_gc_topic(const ::std::string& value) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}
inline void GcConf::set_gc_topic(const char* value) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}
inline void GcConf::set_gc_topic(const char* value,
    size_t size) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}
inline ::std::string* GcConf::mutable_gc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
  return gc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_gc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
  
  return gc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_gc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_gc_topic(::std::string* gc_topic) {
  if (gc_topic != NULL) {
    
  } else {
    
  }
  gc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}
inline void GcConf::unsafe_arena_set_allocated_gc_topic(
    ::std::string* gc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gc_topic != NULL) {
    
  } else {
    
  }
  gc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}

// string gc_group_topic = 5;
inline void GcConf::clear_gc_group_topic() {
  gc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::gc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
  return gc_group_topic_.Get();
}
inline void GcConf::set_gc_group_topic(const ::std::string& value) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}
inline void GcConf::set_gc_group_topic(const char* value) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}
inline void GcConf::set_gc_group_topic(const char* value,
    size_t size) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}
inline ::std::string* GcConf::mutable_gc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
  return gc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_gc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
  
  return gc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_gc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_gc_group_topic(::std::string* gc_group_topic) {
  if (gc_group_topic != NULL) {
    
  } else {
    
  }
  gc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}
inline void GcConf::unsafe_arena_set_allocated_gc_group_topic(
    ::std::string* gc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gc_group_topic != NULL) {
    
  } else {
    
  }
  gc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}

// string sc_group_topic = 6;
inline void GcConf::clear_sc_group_topic() {
  sc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::sc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
  return sc_group_topic_.Get();
}
inline void GcConf::set_sc_group_topic(const ::std::string& value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}
inline void GcConf::set_sc_group_topic(const char* value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}
inline void GcConf::set_sc_group_topic(const char* value,
    size_t size) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}
inline ::std::string* GcConf::mutable_sc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
  return sc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_sc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
  
  return sc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_sc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_sc_group_topic(::std::string* sc_group_topic) {
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}
inline void GcConf::unsafe_arena_set_allocated_sc_group_topic(
    ::std::string* sc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}

// string consumer_client_id = 7;
inline void GcConf::clear_consumer_client_id() {
  consumer_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::consumer_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
  return consumer_client_id_.Get();
}
inline void GcConf::set_consumer_client_id(const ::std::string& value) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}
inline void GcConf::set_consumer_client_id(const char* value) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}
inline void GcConf::set_consumer_client_id(const char* value,
    size_t size) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}
inline ::std::string* GcConf::mutable_consumer_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
  return consumer_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_consumer_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
  
  return consumer_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_consumer_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return consumer_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_consumer_client_id(::std::string* consumer_client_id) {
  if (consumer_client_id != NULL) {
    
  } else {
    
  }
  consumer_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}
inline void GcConf::unsafe_arena_set_allocated_consumer_client_id(
    ::std::string* consumer_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (consumer_client_id != NULL) {
    
  } else {
    
  }
  consumer_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      consumer_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}

// string lock_timeout = 11;
inline void GcConf::clear_lock_timeout() {
  lock_timeout_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::lock_timeout() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
  return lock_timeout_.Get();
}
inline void GcConf::set_lock_timeout(const ::std::string& value) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}
inline void GcConf::set_lock_timeout(const char* value) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}
inline void GcConf::set_lock_timeout(const char* value,
    size_t size) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}
inline ::std::string* GcConf::mutable_lock_timeout() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
  return lock_timeout_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_lock_timeout() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
  
  return lock_timeout_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_lock_timeout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return lock_timeout_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_lock_timeout(::std::string* lock_timeout) {
  if (lock_timeout != NULL) {
    
  } else {
    
  }
  lock_timeout_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_timeout,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}
inline void GcConf::unsafe_arena_set_allocated_lock_timeout(
    ::std::string* lock_timeout) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (lock_timeout != NULL) {
    
  } else {
    
  }
  lock_timeout_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      lock_timeout, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}

// string topic_partitions = 8;
inline void GcConf::clear_topic_partitions() {
  topic_partitions_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::topic_partitions() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
  return topic_partitions_.Get();
}
inline void GcConf::set_topic_partitions(const ::std::string& value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}
inline void GcConf::set_topic_partitions(const char* value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}
inline void GcConf::set_topic_partitions(const char* value,
    size_t size) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}
inline ::std::string* GcConf::mutable_topic_partitions() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
  return topic_partitions_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_topic_partitions() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
  
  return topic_partitions_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_topic_partitions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_partitions_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_topic_partitions(::std::string* topic_partitions) {
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_partitions,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}
inline void GcConf::unsafe_arena_set_allocated_topic_partitions(
    ::std::string* topic_partitions) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_partitions, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}

// string topic_replication = 9;
inline void GcConf::clear_topic_replication() {
  topic_replication_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::topic_replication() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
  return topic_replication_.Get();
}
inline void GcConf::set_topic_replication(const ::std::string& value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}
inline void GcConf::set_topic_replication(const char* value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}
inline void GcConf::set_topic_replication(const char* value,
    size_t size) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}
inline ::std::string* GcConf::mutable_topic_replication() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
  return topic_replication_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_topic_replication() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
  
  return topic_replication_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_topic_replication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_replication_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_topic_replication(::std::string* topic_replication) {
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_replication,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}
inline void GcConf::unsafe_arena_set_allocated_topic_replication(
    ::std::string* topic_replication) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_replication, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}

// string protocol_version = 10;
inline void GcConf::clear_protocol_version() {
  protocol_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::protocol_version() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
  return protocol_version_.Get();
}
inline void GcConf::set_protocol_version(const ::std::string& value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}
inline void GcConf::set_protocol_version(const char* value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}
inline void GcConf::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}
inline ::std::string* GcConf::mutable_protocol_version() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
  return protocol_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_protocol_version() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
  
  return protocol_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_protocol_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return protocol_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}
inline void GcConf::unsafe_arena_set_allocated_protocol_version(
    ::std::string* protocol_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      protocol_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}

// string retry_policy = 12;
inline void GcConf::clear_retry_policy() {
  retry_policy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::retry_policy() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
  return retry_policy_.Get();
}
inline void GcConf::set_retry_policy(const ::std::string& value) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}
inline void GcConf::set_retry_policy(const char* value) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}
inline void GcConf::set_retry_policy(const char* value,
    size_t size) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}
inline ::std::string* GcConf::mutable_retry_policy() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
  return retry_policy_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_retry_policy() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
  
  return retry_policy_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_retry_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return retry_policy_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_retry_policy(::std::string* retry_policy) {
  if (retry_policy != NULL) {
    
  } else {
    
  }
  retry_policy_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_policy,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}
inline void GcConf::unsafe_arena_set_allocated_retry_policy(
    ::std::string* retry_policy) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (retry_policy != NULL) {
    
  } else {
    
  }
  retry_policy_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      retry_policy, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}

// string root_path = 13;
inline void GcConf::clear_root_path() {
  root_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GcConf::root_path() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
  return root_path_.Get();
}
inline void GcConf::set_root_path(const ::std::string& value) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}
inline void GcConf::set_root_path(const char* value) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}
inline void GcConf::set_root_path(const char* value,
    size_t size) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}
inline ::std::string* GcConf::mutable_root_path() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
  return root_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::release_root_path() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
  
  return root_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GcConf::unsafe_arena_release_root_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return root_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GcConf::set_allocated_root_path(::std::string* root_path) {
  if (root_path != NULL) {
    
  } else {
    
  }
  root_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}
inline void GcConf::unsafe_arena_set_allocated_root_path(
    ::std::string* root_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (root_path != NULL) {
    
  } else {
    
  }
  root_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      root_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}

// -------------------------------------------------------------------

// GcConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GcConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GcConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GcConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GcConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GcConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GcConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
}

// -------------------------------------------------------------------

// MaConf

// string ice_addr = 1;
inline void MaConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MaConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
  return ice_addr_.Get();
}
inline void MaConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}
inline void MaConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}
inline void MaConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}
inline ::std::string* MaConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MaConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}
inline void MaConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}

// string kafka_brokers = 2;
inline void MaConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MaConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
  return kafka_brokers_.Get();
}
inline void MaConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}
inline void MaConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}
inline void MaConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}
inline ::std::string* MaConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MaConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}
inline void MaConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}

// string zookeeper_servers = 3;
inline void MaConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MaConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
inline void MaConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}
inline void MaConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}
inline void MaConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}
inline ::std::string* MaConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MaConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}
inline void MaConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}

// string ma_topic = 4;
inline void MaConf::clear_ma_topic() {
  ma_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MaConf::ma_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
  return ma_topic_.Get();
}
inline void MaConf::set_ma_topic(const ::std::string& value) {
  
  ma_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}
inline void MaConf::set_ma_topic(const char* value) {
  
  ma_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}
inline void MaConf::set_ma_topic(const char* value,
    size_t size) {
  
  ma_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}
inline ::std::string* MaConf::mutable_ma_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
  return ma_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::release_ma_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
  
  return ma_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::unsafe_arena_release_ma_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ma_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MaConf::set_allocated_ma_topic(::std::string* ma_topic) {
  if (ma_topic != NULL) {
    
  } else {
    
  }
  ma_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ma_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}
inline void MaConf::unsafe_arena_set_allocated_ma_topic(
    ::std::string* ma_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ma_topic != NULL) {
    
  } else {
    
  }
  ma_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ma_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}

// string bandwidth = 5;
inline void MaConf::clear_bandwidth() {
  bandwidth_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MaConf::bandwidth() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
  return bandwidth_.Get();
}
inline void MaConf::set_bandwidth(const ::std::string& value) {
  
  bandwidth_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}
inline void MaConf::set_bandwidth(const char* value) {
  
  bandwidth_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}
inline void MaConf::set_bandwidth(const char* value,
    size_t size) {
  
  bandwidth_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}
inline ::std::string* MaConf::mutable_bandwidth() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
  return bandwidth_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::release_bandwidth() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
  
  return bandwidth_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MaConf::unsafe_arena_release_bandwidth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bandwidth_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MaConf::set_allocated_bandwidth(::std::string* bandwidth) {
  if (bandwidth != NULL) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}
inline void MaConf::unsafe_arena_set_allocated_bandwidth(
    ::std::string* bandwidth) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bandwidth != NULL) {
    
  } else {
    
  }
  bandwidth_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bandwidth, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}

// -------------------------------------------------------------------

// MaConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool MaConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void MaConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& MaConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* MaConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* MaConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void MaConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
}

// -------------------------------------------------------------------

// MsConf

// string ice_addr = 1;
inline void MsConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
  return ice_addr_.Get();
}
inline void MsConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}
inline void MsConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}
inline void MsConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}
inline ::std::string* MsConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}
inline void MsConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}

// string kafka_brokers = 2;
inline void MsConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
  return kafka_brokers_.Get();
}
inline void MsConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}
inline void MsConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}
inline void MsConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}
inline ::std::string* MsConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}
inline void MsConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}

// string zookeeper_servers = 3;
inline void MsConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
inline void MsConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}
inline void MsConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}
inline void MsConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}
inline ::std::string* MsConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}
inline void MsConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}

// string ms_topic = 4;
inline void MsConf::clear_ms_topic() {
  ms_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsConf::ms_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
  return ms_topic_.Get();
}
inline void MsConf::set_ms_topic(const ::std::string& value) {
  
  ms_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}
inline void MsConf::set_ms_topic(const char* value) {
  
  ms_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}
inline void MsConf::set_ms_topic(const char* value,
    size_t size) {
  
  ms_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}
inline ::std::string* MsConf::mutable_ms_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
  return ms_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::release_ms_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
  
  return ms_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::unsafe_arena_release_ms_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ms_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsConf::set_allocated_ms_topic(::std::string* ms_topic) {
  if (ms_topic != NULL) {
    
  } else {
    
  }
  ms_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ms_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}
inline void MsConf::unsafe_arena_set_allocated_ms_topic(
    ::std::string* ms_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ms_topic != NULL) {
    
  } else {
    
  }
  ms_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ms_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}

// string poll_time = 5;
inline void MsConf::clear_poll_time() {
  poll_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& MsConf::poll_time() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
  return poll_time_.Get();
}
inline void MsConf::set_poll_time(const ::std::string& value) {
  
  poll_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}
inline void MsConf::set_poll_time(const char* value) {
  
  poll_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}
inline void MsConf::set_poll_time(const char* value,
    size_t size) {
  
  poll_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}
inline ::std::string* MsConf::mutable_poll_time() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
  return poll_time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::release_poll_time() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
  
  return poll_time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* MsConf::unsafe_arena_release_poll_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return poll_time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MsConf::set_allocated_poll_time(::std::string* poll_time) {
  if (poll_time != NULL) {
    
  } else {
    
  }
  poll_time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poll_time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}
inline void MsConf::unsafe_arena_set_allocated_poll_time(
    ::std::string* poll_time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (poll_time != NULL) {
    
  } else {
    
  }
  poll_time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      poll_time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}

// -------------------------------------------------------------------

// MsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool MsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void MsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& MsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* MsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* MsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void MsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
}

// -------------------------------------------------------------------

// RuleConf

// string ice_addr = 1;
inline void RuleConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
  return ice_addr_.Get();
}
inline void RuleConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}
inline void RuleConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}
inline void RuleConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}
inline ::std::string* RuleConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}
inline void RuleConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}

// string zookeeper_servers = 2;
inline void RuleConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
inline void RuleConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}
inline void RuleConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}
inline void RuleConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}
inline ::std::string* RuleConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}
inline void RuleConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}

// string iplib_path = 3;
inline void RuleConf::clear_iplib_path() {
  iplib_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleConf::iplib_path() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
  return iplib_path_.Get();
}
inline void RuleConf::set_iplib_path(const ::std::string& value) {
  
  iplib_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}
inline void RuleConf::set_iplib_path(const char* value) {
  
  iplib_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}
inline void RuleConf::set_iplib_path(const char* value,
    size_t size) {
  
  iplib_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}
inline ::std::string* RuleConf::mutable_iplib_path() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
  return iplib_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::release_iplib_path() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
  
  return iplib_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::unsafe_arena_release_iplib_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return iplib_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleConf::set_allocated_iplib_path(::std::string* iplib_path) {
  if (iplib_path != NULL) {
    
  } else {
    
  }
  iplib_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iplib_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}
inline void RuleConf::unsafe_arena_set_allocated_iplib_path(
    ::std::string* iplib_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (iplib_path != NULL) {
    
  } else {
    
  }
  iplib_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      iplib_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}

// string config_path = 4;
inline void RuleConf::clear_config_path() {
  config_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleConf::config_path() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
  return config_path_.Get();
}
inline void RuleConf::set_config_path(const ::std::string& value) {
  
  config_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}
inline void RuleConf::set_config_path(const char* value) {
  
  config_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}
inline void RuleConf::set_config_path(const char* value,
    size_t size) {
  
  config_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}
inline ::std::string* RuleConf::mutable_config_path() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
  return config_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::release_config_path() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
  
  return config_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::unsafe_arena_release_config_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return config_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleConf::set_allocated_config_path(::std::string* config_path) {
  if (config_path != NULL) {
    
  } else {
    
  }
  config_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}
inline void RuleConf::unsafe_arena_set_allocated_config_path(
    ::std::string* config_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (config_path != NULL) {
    
  } else {
    
  }
  config_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      config_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}

// string max_instance_size = 5;
inline void RuleConf::clear_max_instance_size() {
  max_instance_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RuleConf::max_instance_size() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
  return max_instance_size_.Get();
}
inline void RuleConf::set_max_instance_size(const ::std::string& value) {
  
  max_instance_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}
inline void RuleConf::set_max_instance_size(const char* value) {
  
  max_instance_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}
inline void RuleConf::set_max_instance_size(const char* value,
    size_t size) {
  
  max_instance_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}
inline ::std::string* RuleConf::mutable_max_instance_size() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
  return max_instance_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::release_max_instance_size() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
  
  return max_instance_size_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RuleConf::unsafe_arena_release_max_instance_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return max_instance_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RuleConf::set_allocated_max_instance_size(::std::string* max_instance_size) {
  if (max_instance_size != NULL) {
    
  } else {
    
  }
  max_instance_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), max_instance_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}
inline void RuleConf::unsafe_arena_set_allocated_max_instance_size(
    ::std::string* max_instance_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (max_instance_size != NULL) {
    
  } else {
    
  }
  max_instance_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      max_instance_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}

// -------------------------------------------------------------------

// RuleConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool RuleConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void RuleConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& RuleConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* RuleConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* RuleConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void RuleConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace smd
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::smd::ProtoDictionary> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::smd::ProtoDictionary>() {
  return ::com::fsmeeting::fsp::proto::smd::ProtoDictionary_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::smd::ServiceQueryType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::smd::ServiceQueryType>() {
  return ::com::fsmeeting::fsp::proto::smd::ServiceQueryType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fsp_2dsmd_2eproto__INCLUDED
