// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-ma.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fsp-ma.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace ma {
class SendingTaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendingTask> {
} _SendingTask_default_instance_;
class SendingTaskRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendingTaskRsp> {
} _SendingTaskRsp_default_instance_;
class SendingSimpleTaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendingSimpleTask> {
} _SendingSimpleTask_default_instance_;
class SendingSimpleTaskRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendingSimpleTaskRsp> {
} _SendingSimpleTaskRsp_default_instance_;

namespace protobuf_fsp_2dma_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingTask, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingTask, agentservers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingTask, iplists_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingTaskRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingTaskRsp, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingTaskRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingSimpleTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingSimpleTask, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingSimpleTask, agentservers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingSimpleTask, iplists_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingSimpleTaskRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingSimpleTaskRsp, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendingSimpleTaskRsp, response_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SendingTask)},
  { 7, -1, sizeof(SendingTaskRsp)},
  { 13, -1, sizeof(SendingSimpleTask)},
  { 20, -1, sizeof(SendingSimpleTaskRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendingTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendingTaskRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendingSimpleTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendingSimpleTaskRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fsp-ma.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _SendingTask_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SendingTaskRsp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SendingSimpleTask_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SendingSimpleTaskRsp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::InitDefaults();
  _SendingTask_default_instance_.DefaultConstruct();
  _SendingTaskRsp_default_instance_.DefaultConstruct();
  _SendingSimpleTask_default_instance_.DefaultConstruct();
  _SendingSimpleTaskRsp_default_instance_.DefaultConstruct();
  _SendingTaskRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _SendingSimpleTaskRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014fsp-ma.proto\022\032com.fsmeeting.fsp.proto."
      "ma\032\020fsp-common.proto\"A\n\013SendingTask\022\013\n\003s"
      "eq\030\001 \001(\t\022\024\n\014agentServers\030\002 \003(\t\022\017\n\007ipList"
      "s\030\003 \003(\t\"_\n\016SendingTaskRsp\022\013\n\003seq\030\001 \001(\t\022@"
      "\n\010response\030\002 \001(\0132..com.fsmeeting.fsp.pro"
      "to.common.CommonResponse\"G\n\021SendingSimpl"
      "eTask\022\013\n\003seq\030\001 \001(\t\022\024\n\014agentServers\030\002 \003(\t"
      "\022\017\n\007ipLists\030\003 \003(\t\"e\n\024SendingSimpleTaskRs"
      "p\022\013\n\003seq\030\001 \001(\t\022@\n\010response\030\002 \001(\0132..com.f"
      "smeeting.fsp.proto.common.CommonResponse"
      "*\232\001\n\017ProtoDictionary\022\031\n\025Enum2UnknownInte"
      "rface\020\000\022\025\n\020Enum2SendingTask\020\220N\022\030\n\023Enum2S"
      "endingTaskRsp\020\221N\022\033\n\026Enum2SendingSimpleTa"
      "sk\020\222N\022\036\n\031Enum2SendingSimpleTaskRsp\020\223NB\'\n"
      "\032com.fsmeeting.fsp.proto.maP\001\370\001\001\242\002\003GPBb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 606);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsp-ma.proto", &protobuf_RegisterTypes);
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fsp_2dma_2eproto

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor() {
  protobuf_fsp_2dma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dma_2eproto::file_level_enum_descriptors[0];
}
bool ProtoDictionary_IsValid(int value) {
  switch (value) {
    case 0:
    case 10000:
    case 10001:
    case 10002:
    case 10003:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendingTask::kSeqFieldNumber;
const int SendingTask::kAgentServersFieldNumber;
const int SendingTask::kIpListsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendingTask::SendingTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dma_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ma.SendingTask)
}
SendingTask::SendingTask(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  agentservers_(arena),
  iplists_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dma_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ma.SendingTask)
}
SendingTask::SendingTask(const SendingTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      agentservers_(from.agentservers_),
      iplists_(from.iplists_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seq().size() > 0) {
    seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ma.SendingTask)
}

void SendingTask::SharedCtor() {
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendingTask::~SendingTask() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ma.SendingTask)
  SharedDtor();
}

void SendingTask::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  seq_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SendingTask::ArenaDtor(void* object) {
  SendingTask* _this = reinterpret_cast< SendingTask* >(object);
  (void)_this;
}
void SendingTask::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SendingTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendingTask::descriptor() {
  protobuf_fsp_2dma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dma_2eproto::file_level_metadata[0].descriptor;
}

const SendingTask& SendingTask::default_instance() {
  protobuf_fsp_2dma_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendingTask* SendingTask::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SendingTask>(arena);
}

void SendingTask::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ma.SendingTask)
  agentservers_.Clear();
  iplists_.Clear();
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SendingTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ma.SendingTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string seq = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seq().data(), this->seq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ma.SendingTask.seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string agentServers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_agentservers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->agentservers(this->agentservers_size() - 1).data(),
            this->agentservers(this->agentservers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ma.SendingTask.agentServers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ipLists = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_iplists()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iplists(this->iplists_size() - 1).data(),
            this->iplists(this->iplists_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ma.SendingTask.ipLists"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ma.SendingTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ma.SendingTask)
  return false;
#undef DO_
}

void SendingTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ma.SendingTask)
  // string seq = 1;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingTask.seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->seq(), output);
  }

  // repeated string agentServers = 2;
  for (int i = 0; i < this->agentservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agentservers(i).data(), this->agentservers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingTask.agentServers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->agentservers(i), output);
  }

  // repeated string ipLists = 3;
  for (int i = 0; i < this->iplists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iplists(i).data(), this->iplists(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingTask.ipLists");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->iplists(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ma.SendingTask)
}

::google::protobuf::uint8* SendingTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ma.SendingTask)
  // string seq = 1;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingTask.seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seq(), target);
  }

  // repeated string agentServers = 2;
  for (int i = 0; i < this->agentservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agentservers(i).data(), this->agentservers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingTask.agentServers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->agentservers(i), target);
  }

  // repeated string ipLists = 3;
  for (int i = 0; i < this->iplists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iplists(i).data(), this->iplists(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingTask.ipLists");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->iplists(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ma.SendingTask)
  return target;
}

size_t SendingTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ma.SendingTask)
  size_t total_size = 0;

  // repeated string agentServers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->agentservers_size());
  for (int i = 0; i < this->agentservers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->agentservers(i));
  }

  // repeated string ipLists = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->iplists_size());
  for (int i = 0; i < this->iplists_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->iplists(i));
  }

  // string seq = 1;
  if (this->seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendingTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ma.SendingTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SendingTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendingTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ma.SendingTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ma.SendingTask)
    MergeFrom(*source);
  }
}

void SendingTask::MergeFrom(const SendingTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ma.SendingTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  agentservers_.MergeFrom(from.agentservers_);
  iplists_.MergeFrom(from.iplists_);
  if (from.seq().size() > 0) {
    set_seq(from.seq());
  }
}

void SendingTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ma.SendingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendingTask::CopyFrom(const SendingTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ma.SendingTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendingTask::IsInitialized() const {
  return true;
}

void SendingTask::Swap(SendingTask* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SendingTask* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SendingTask::UnsafeArenaSwap(SendingTask* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SendingTask::InternalSwap(SendingTask* other) {
  agentservers_.UnsafeArenaSwap(&other->agentservers_);
  iplists_.UnsafeArenaSwap(&other->iplists_);
  seq_.Swap(&other->seq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendingTask::GetMetadata() const {
  protobuf_fsp_2dma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dma_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendingTask

// string seq = 1;
void SendingTask::clear_seq() {
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SendingTask::seq() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
  return seq_.Get();
}
void SendingTask::set_seq(const ::std::string& value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}
void SendingTask::set_seq(const char* value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}
void SendingTask::set_seq(const char* value,
    size_t size) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}
::std::string* SendingTask::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
  return seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SendingTask::release_seq() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
  
  return seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SendingTask::unsafe_arena_release_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SendingTask::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}
void SendingTask::unsafe_arena_set_allocated_seq(
    ::std::string* seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTask.seq)
}

// repeated string agentServers = 2;
int SendingTask::agentservers_size() const {
  return agentservers_.size();
}
void SendingTask::clear_agentservers() {
  agentservers_.Clear();
}
const ::std::string& SendingTask::agentservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return agentservers_.Get(index);
}
::std::string* SendingTask::mutable_agentservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return agentservers_.Mutable(index);
}
void SendingTask::set_agentservers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  agentservers_.Mutable(index)->assign(value);
}
void SendingTask::set_agentservers(int index, const char* value) {
  agentservers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
void SendingTask::set_agentservers(int index, const char* value, size_t size) {
  agentservers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
::std::string* SendingTask::add_agentservers() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return agentservers_.Add();
}
void SendingTask::add_agentservers(const ::std::string& value) {
  agentservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
void SendingTask::add_agentservers(const char* value) {
  agentservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
void SendingTask::add_agentservers(const char* value, size_t size) {
  agentservers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendingTask::agentservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return agentservers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SendingTask::mutable_agentservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.ma.SendingTask.agentServers)
  return &agentservers_;
}

// repeated string ipLists = 3;
int SendingTask::iplists_size() const {
  return iplists_.size();
}
void SendingTask::clear_iplists() {
  iplists_.Clear();
}
const ::std::string& SendingTask::iplists(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return iplists_.Get(index);
}
::std::string* SendingTask::mutable_iplists(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return iplists_.Mutable(index);
}
void SendingTask::set_iplists(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  iplists_.Mutable(index)->assign(value);
}
void SendingTask::set_iplists(int index, const char* value) {
  iplists_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
void SendingTask::set_iplists(int index, const char* value, size_t size) {
  iplists_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
::std::string* SendingTask::add_iplists() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return iplists_.Add();
}
void SendingTask::add_iplists(const ::std::string& value) {
  iplists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
void SendingTask::add_iplists(const char* value) {
  iplists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
void SendingTask::add_iplists(const char* value, size_t size) {
  iplists_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendingTask::iplists() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return iplists_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SendingTask::mutable_iplists() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.ma.SendingTask.ipLists)
  return &iplists_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SendingTaskRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SendingTaskRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SendingTaskRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void SendingTaskRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void SendingTaskRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendingTaskRsp::kSeqFieldNumber;
const int SendingTaskRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendingTaskRsp::SendingTaskRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dma_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
}
SendingTaskRsp::SendingTaskRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dma_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
}
SendingTaskRsp::SendingTaskRsp(const SendingTaskRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seq().size() > 0) {
    seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq(),
      GetArenaNoVirtual());
  }
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
}

void SendingTaskRsp::SharedCtor() {
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = NULL;
  _cached_size_ = 0;
}

SendingTaskRsp::~SendingTaskRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  SharedDtor();
}

void SendingTaskRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  seq_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete response_;
  }
}

void SendingTaskRsp::ArenaDtor(void* object) {
  SendingTaskRsp* _this = reinterpret_cast< SendingTaskRsp* >(object);
  (void)_this;
}
void SendingTaskRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SendingTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendingTaskRsp::descriptor() {
  protobuf_fsp_2dma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dma_2eproto::file_level_metadata[1].descriptor;
}

const SendingTaskRsp& SendingTaskRsp::default_instance() {
  protobuf_fsp_2dma_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendingTaskRsp* SendingTaskRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SendingTaskRsp>(arena);
}

void SendingTaskRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool SendingTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string seq = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seq().data(), this->seq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  return false;
#undef DO_
}

void SendingTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  // string seq = 1;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->seq(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
}

::google::protobuf::uint8* SendingTaskRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  // string seq = 1;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seq(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  return target;
}

size_t SendingTaskRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  size_t total_size = 0;

  // string seq = 1;
  if (this->seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seq());
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendingTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SendingTaskRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendingTaskRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
    MergeFrom(*source);
  }
}

void SendingTaskRsp::MergeFrom(const SendingTaskRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.seq().size() > 0) {
    set_seq(from.seq());
  }
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void SendingTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendingTaskRsp::CopyFrom(const SendingTaskRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ma.SendingTaskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendingTaskRsp::IsInitialized() const {
  return true;
}

void SendingTaskRsp::Swap(SendingTaskRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SendingTaskRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SendingTaskRsp::UnsafeArenaSwap(SendingTaskRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SendingTaskRsp::InternalSwap(SendingTaskRsp* other) {
  seq_.Swap(&other->seq_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendingTaskRsp::GetMetadata() const {
  protobuf_fsp_2dma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dma_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendingTaskRsp

// string seq = 1;
void SendingTaskRsp::clear_seq() {
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SendingTaskRsp::seq() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
  return seq_.Get();
}
void SendingTaskRsp::set_seq(const ::std::string& value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}
void SendingTaskRsp::set_seq(const char* value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}
void SendingTaskRsp::set_seq(const char* value,
    size_t size) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}
::std::string* SendingTaskRsp::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
  return seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SendingTaskRsp::release_seq() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
  
  return seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SendingTaskRsp::unsafe_arena_release_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SendingTaskRsp::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}
void SendingTaskRsp::unsafe_arena_set_allocated_seq(
    ::std::string* seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.seq)
}

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
bool SendingTaskRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void SendingTaskRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& SendingTaskRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SendingTaskRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SendingTaskRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void SendingTaskRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingTaskRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendingSimpleTask::kSeqFieldNumber;
const int SendingSimpleTask::kAgentServersFieldNumber;
const int SendingSimpleTask::kIpListsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendingSimpleTask::SendingSimpleTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dma_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
}
SendingSimpleTask::SendingSimpleTask(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  agentservers_(arena),
  iplists_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dma_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
}
SendingSimpleTask::SendingSimpleTask(const SendingSimpleTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      agentservers_(from.agentservers_),
      iplists_(from.iplists_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seq().size() > 0) {
    seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
}

void SendingSimpleTask::SharedCtor() {
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SendingSimpleTask::~SendingSimpleTask() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  SharedDtor();
}

void SendingSimpleTask::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  seq_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SendingSimpleTask::ArenaDtor(void* object) {
  SendingSimpleTask* _this = reinterpret_cast< SendingSimpleTask* >(object);
  (void)_this;
}
void SendingSimpleTask::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SendingSimpleTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendingSimpleTask::descriptor() {
  protobuf_fsp_2dma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dma_2eproto::file_level_metadata[2].descriptor;
}

const SendingSimpleTask& SendingSimpleTask::default_instance() {
  protobuf_fsp_2dma_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendingSimpleTask* SendingSimpleTask::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SendingSimpleTask>(arena);
}

void SendingSimpleTask::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  agentservers_.Clear();
  iplists_.Clear();
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SendingSimpleTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string seq = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seq().data(), this->seq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string agentServers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_agentservers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->agentservers(this->agentservers_size() - 1).data(),
            this->agentservers(this->agentservers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ipLists = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_iplists()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iplists(this->iplists_size() - 1).data(),
            this->iplists(this->iplists_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  return false;
#undef DO_
}

void SendingSimpleTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  // string seq = 1;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->seq(), output);
  }

  // repeated string agentServers = 2;
  for (int i = 0; i < this->agentservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agentservers(i).data(), this->agentservers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->agentservers(i), output);
  }

  // repeated string ipLists = 3;
  for (int i = 0; i < this->iplists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iplists(i).data(), this->iplists(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->iplists(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
}

::google::protobuf::uint8* SendingSimpleTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  // string seq = 1;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seq(), target);
  }

  // repeated string agentServers = 2;
  for (int i = 0; i < this->agentservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->agentservers(i).data(), this->agentservers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->agentservers(i), target);
  }

  // repeated string ipLists = 3;
  for (int i = 0; i < this->iplists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iplists(i).data(), this->iplists(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->iplists(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  return target;
}

size_t SendingSimpleTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  size_t total_size = 0;

  // repeated string agentServers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->agentservers_size());
  for (int i = 0; i < this->agentservers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->agentservers(i));
  }

  // repeated string ipLists = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->iplists_size());
  for (int i = 0; i < this->iplists_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->iplists(i));
  }

  // string seq = 1;
  if (this->seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendingSimpleTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SendingSimpleTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendingSimpleTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
    MergeFrom(*source);
  }
}

void SendingSimpleTask::MergeFrom(const SendingSimpleTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  agentservers_.MergeFrom(from.agentservers_);
  iplists_.MergeFrom(from.iplists_);
  if (from.seq().size() > 0) {
    set_seq(from.seq());
  }
}

void SendingSimpleTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendingSimpleTask::CopyFrom(const SendingSimpleTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendingSimpleTask::IsInitialized() const {
  return true;
}

void SendingSimpleTask::Swap(SendingSimpleTask* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SendingSimpleTask* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SendingSimpleTask::UnsafeArenaSwap(SendingSimpleTask* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SendingSimpleTask::InternalSwap(SendingSimpleTask* other) {
  agentservers_.UnsafeArenaSwap(&other->agentservers_);
  iplists_.UnsafeArenaSwap(&other->iplists_);
  seq_.Swap(&other->seq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendingSimpleTask::GetMetadata() const {
  protobuf_fsp_2dma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dma_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendingSimpleTask

// string seq = 1;
void SendingSimpleTask::clear_seq() {
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SendingSimpleTask::seq() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
  return seq_.Get();
}
void SendingSimpleTask::set_seq(const ::std::string& value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}
void SendingSimpleTask::set_seq(const char* value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}
void SendingSimpleTask::set_seq(const char* value,
    size_t size) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}
::std::string* SendingSimpleTask::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
  return seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SendingSimpleTask::release_seq() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
  
  return seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SendingSimpleTask::unsafe_arena_release_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SendingSimpleTask::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}
void SendingSimpleTask::unsafe_arena_set_allocated_seq(
    ::std::string* seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.seq)
}

// repeated string agentServers = 2;
int SendingSimpleTask::agentservers_size() const {
  return agentservers_.size();
}
void SendingSimpleTask::clear_agentservers() {
  agentservers_.Clear();
}
const ::std::string& SendingSimpleTask::agentservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return agentservers_.Get(index);
}
::std::string* SendingSimpleTask::mutable_agentservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return agentservers_.Mutable(index);
}
void SendingSimpleTask::set_agentservers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  agentservers_.Mutable(index)->assign(value);
}
void SendingSimpleTask::set_agentservers(int index, const char* value) {
  agentservers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
void SendingSimpleTask::set_agentservers(int index, const char* value, size_t size) {
  agentservers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
::std::string* SendingSimpleTask::add_agentservers() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return agentservers_.Add();
}
void SendingSimpleTask::add_agentservers(const ::std::string& value) {
  agentservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
void SendingSimpleTask::add_agentservers(const char* value) {
  agentservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
void SendingSimpleTask::add_agentservers(const char* value, size_t size) {
  agentservers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendingSimpleTask::agentservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return agentservers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SendingSimpleTask::mutable_agentservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.agentServers)
  return &agentservers_;
}

// repeated string ipLists = 3;
int SendingSimpleTask::iplists_size() const {
  return iplists_.size();
}
void SendingSimpleTask::clear_iplists() {
  iplists_.Clear();
}
const ::std::string& SendingSimpleTask::iplists(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return iplists_.Get(index);
}
::std::string* SendingSimpleTask::mutable_iplists(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return iplists_.Mutable(index);
}
void SendingSimpleTask::set_iplists(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  iplists_.Mutable(index)->assign(value);
}
void SendingSimpleTask::set_iplists(int index, const char* value) {
  iplists_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
void SendingSimpleTask::set_iplists(int index, const char* value, size_t size) {
  iplists_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
::std::string* SendingSimpleTask::add_iplists() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return iplists_.Add();
}
void SendingSimpleTask::add_iplists(const ::std::string& value) {
  iplists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
void SendingSimpleTask::add_iplists(const char* value) {
  iplists_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
void SendingSimpleTask::add_iplists(const char* value, size_t size) {
  iplists_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendingSimpleTask::iplists() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return iplists_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SendingSimpleTask::mutable_iplists() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.ma.SendingSimpleTask.ipLists)
  return &iplists_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SendingSimpleTaskRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SendingSimpleTaskRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SendingSimpleTaskRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void SendingSimpleTaskRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void SendingSimpleTaskRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendingSimpleTaskRsp::kSeqFieldNumber;
const int SendingSimpleTaskRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendingSimpleTaskRsp::SendingSimpleTaskRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dma_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
}
SendingSimpleTaskRsp::SendingSimpleTaskRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dma_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
}
SendingSimpleTaskRsp::SendingSimpleTaskRsp(const SendingSimpleTaskRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.seq().size() > 0) {
    seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.seq(),
      GetArenaNoVirtual());
  }
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
}

void SendingSimpleTaskRsp::SharedCtor() {
  seq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = NULL;
  _cached_size_ = 0;
}

SendingSimpleTaskRsp::~SendingSimpleTaskRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  SharedDtor();
}

void SendingSimpleTaskRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  seq_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete response_;
  }
}

void SendingSimpleTaskRsp::ArenaDtor(void* object) {
  SendingSimpleTaskRsp* _this = reinterpret_cast< SendingSimpleTaskRsp* >(object);
  (void)_this;
}
void SendingSimpleTaskRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SendingSimpleTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendingSimpleTaskRsp::descriptor() {
  protobuf_fsp_2dma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dma_2eproto::file_level_metadata[3].descriptor;
}

const SendingSimpleTaskRsp& SendingSimpleTaskRsp::default_instance() {
  protobuf_fsp_2dma_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendingSimpleTaskRsp* SendingSimpleTaskRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SendingSimpleTaskRsp>(arena);
}

void SendingSimpleTaskRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool SendingSimpleTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string seq = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->seq().data(), this->seq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  return false;
#undef DO_
}

void SendingSimpleTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  // string seq = 1;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->seq(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
}

::google::protobuf::uint8* SendingSimpleTaskRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  // string seq = 1;
  if (this->seq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->seq().data(), this->seq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seq(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  return target;
}

size_t SendingSimpleTaskRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  size_t total_size = 0;

  // string seq = 1;
  if (this->seq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->seq());
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendingSimpleTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SendingSimpleTaskRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendingSimpleTaskRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
    MergeFrom(*source);
  }
}

void SendingSimpleTaskRsp::MergeFrom(const SendingSimpleTaskRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.seq().size() > 0) {
    set_seq(from.seq());
  }
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void SendingSimpleTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendingSimpleTaskRsp::CopyFrom(const SendingSimpleTaskRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendingSimpleTaskRsp::IsInitialized() const {
  return true;
}

void SendingSimpleTaskRsp::Swap(SendingSimpleTaskRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SendingSimpleTaskRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SendingSimpleTaskRsp::UnsafeArenaSwap(SendingSimpleTaskRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SendingSimpleTaskRsp::InternalSwap(SendingSimpleTaskRsp* other) {
  seq_.Swap(&other->seq_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendingSimpleTaskRsp::GetMetadata() const {
  protobuf_fsp_2dma_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dma_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendingSimpleTaskRsp

// string seq = 1;
void SendingSimpleTaskRsp::clear_seq() {
  seq_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SendingSimpleTaskRsp::seq() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
  return seq_.Get();
}
void SendingSimpleTaskRsp::set_seq(const ::std::string& value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}
void SendingSimpleTaskRsp::set_seq(const char* value) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}
void SendingSimpleTaskRsp::set_seq(const char* value,
    size_t size) {
  
  seq_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}
::std::string* SendingSimpleTaskRsp::mutable_seq() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
  return seq_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SendingSimpleTaskRsp::release_seq() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
  
  return seq_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SendingSimpleTaskRsp::unsafe_arena_release_seq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return seq_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SendingSimpleTaskRsp::set_allocated_seq(::std::string* seq) {
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), seq,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}
void SendingSimpleTaskRsp::unsafe_arena_set_allocated_seq(
    ::std::string* seq) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (seq != NULL) {
    
  } else {
    
  }
  seq_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      seq, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.seq)
}

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 2;
bool SendingSimpleTaskRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void SendingSimpleTaskRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& SendingSimpleTaskRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SendingSimpleTaskRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SendingSimpleTaskRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void SendingSimpleTaskRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.ma.SendingSimpleTaskRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ma
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

// @@protoc_insertion_point(global_scope)
