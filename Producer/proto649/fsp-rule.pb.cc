// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-rule.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fsp-rule.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace rule {
class GetMediaServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMediaServer> {
} _GetMediaServer_default_instance_;
class GetMediaServerRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetMediaServerRsp> {
} _GetMediaServerRsp_default_instance_;
class RuleSelectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RuleSelect> {
} _RuleSelect_default_instance_;
class RuleSelectRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RuleSelectRsp> {
} _RuleSelectRsp_default_instance_;

namespace protobuf_fsp_2drule_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServer, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServer, server_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServer, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServer, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServer, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServer, company_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServer, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServer, media_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServerRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServerRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServerRsp, mediaservers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetMediaServerRsp, mediaserveraddrs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelect, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelect, sourceinstance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelect, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelect, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelect, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelect, company_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelect, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelect, media_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelectRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelectRsp, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelectRsp, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleSelectRsp, connectstr_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(GetMediaServer)},
  { 12, -1, sizeof(GetMediaServerRsp)},
  { 19, -1, sizeof(RuleSelect)},
  { 31, -1, sizeof(RuleSelectRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMediaServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetMediaServerRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RuleSelect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RuleSelectRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fsp-rule.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _GetMediaServer_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _GetMediaServerRsp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RuleSelect_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RuleSelectRsp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::InitDefaults();
  _GetMediaServer_default_instance_.DefaultConstruct();
  _GetMediaServerRsp_default_instance_.DefaultConstruct();
  _RuleSelect_default_instance_.DefaultConstruct();
  _RuleSelectRsp_default_instance_.DefaultConstruct();
  _GetMediaServerRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _RuleSelectRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016fsp-rule.proto\022\034com.fsmeeting.fsp.prot"
      "o.rule\032\020fsp-common.proto\"\244\001\n\016GetMediaSer"
      "ver\022\021\n\tclient_ip\030\001 \001(\t\022\023\n\013server_type\030\002 "
      "\001(\t\022\020\n\010group_id\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\022\016"
      "\n\006app_id\030\005 \001(\t\022\022\n\ncompany_id\030\006 \001(\t\022\017\n\007ro"
      "om_id\030\007 \001(\t\022\022\n\nmedia_type\030\010 \001(\005\"\205\001\n\021GetM"
      "ediaServerRsp\022@\n\010response\030\001 \001(\0132..com.fs"
      "meeting.fsp.proto.common.CommonResponse\022"
      "\024\n\014mediaServers\030\002 \003(\t\022\030\n\020mediaServerAddr"
      "s\030\003 \003(\t\"\240\001\n\nRuleSelect\022\021\n\tstream_id\030\001 \001("
      "\t\022\026\n\016sourceInstance\030\002 \001(\t\022\020\n\010instance\030\003 "
      "\001(\t\022\014\n\004type\030\004 \001(\t\022\017\n\007room_id\030\005 \001(\t\022\022\n\nco"
      "mpany_id\030\006 \001(\t\022\016\n\006app_id\030\007 \001(\t\022\022\n\nmedia_"
      "type\030\010 \001(\005\"w\n\rRuleSelectRsp\022@\n\010response\030"
      "\001 \001(\0132..com.fsmeeting.fsp.proto.common.C"
      "ommonResponse\022\020\n\010instance\030\002 \001(\t\022\022\n\nconne"
      "ctStr\030\003 \001(\t*\313\001\n\017ProtoDictionary\022\031\n\025Enum2"
      "UnknownInterface\020\000\022\030\n\023Enum2GetMediaServe"
      "r\020\250F\022\033\n\026Enum2GetMediaServerRsp\020\251F\022\027\n\022Enu"
      "m2RuleSelection\020\252F\022\032\n\025Enum2RuleSelection"
      "Rsp\020\253F\022\026\n\021Enum2GetVNCServer\020\254F\022\031\n\024Enum2G"
      "etVNCServerRsp\020\255FB)\n\034com.fsmeeting.fsp.p"
      "roto.ruleP\001\370\001\001\242\002\003GPBb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 908);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsp-rule.proto", &protobuf_RegisterTypes);
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fsp_2drule_2eproto

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor() {
  protobuf_fsp_2drule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2drule_2eproto::file_level_enum_descriptors[0];
}
bool ProtoDictionary_IsValid(int value) {
  switch (value) {
    case 0:
    case 9000:
    case 9001:
    case 9002:
    case 9003:
    case 9004:
    case 9005:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMediaServer::kClientIpFieldNumber;
const int GetMediaServer::kServerTypeFieldNumber;
const int GetMediaServer::kGroupIdFieldNumber;
const int GetMediaServer::kUserIdFieldNumber;
const int GetMediaServer::kAppIdFieldNumber;
const int GetMediaServer::kCompanyIdFieldNumber;
const int GetMediaServer::kRoomIdFieldNumber;
const int GetMediaServer::kMediaTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMediaServer::GetMediaServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2drule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.rule.GetMediaServer)
}
GetMediaServer::GetMediaServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2drule_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.rule.GetMediaServer)
}
GetMediaServer::GetMediaServer(const GetMediaServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_ip().size() > 0) {
    client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ip(),
      GetArenaNoVirtual());
  }
  server_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_type().size() > 0) {
    server_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_type(),
      GetArenaNoVirtual());
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.company_id().size() > 0) {
    company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_id(),
      GetArenaNoVirtual());
  }
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_id().size() > 0) {
    room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id(),
      GetArenaNoVirtual());
  }
  media_type_ = from.media_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.rule.GetMediaServer)
}

void GetMediaServer::SharedCtor() {
  client_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  _cached_size_ = 0;
}

GetMediaServer::~GetMediaServer() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  SharedDtor();
}

void GetMediaServer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  client_ip_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  server_type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  company_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  room_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GetMediaServer::ArenaDtor(void* object) {
  GetMediaServer* _this = reinterpret_cast< GetMediaServer* >(object);
  (void)_this;
}
void GetMediaServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetMediaServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMediaServer::descriptor() {
  protobuf_fsp_2drule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2drule_2eproto::file_level_metadata[0].descriptor;
}

const GetMediaServer& GetMediaServer::default_instance() {
  protobuf_fsp_2drule_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMediaServer* GetMediaServer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetMediaServer>(arena);
}

void GetMediaServer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  server_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_type_ = 0;
}

bool GetMediaServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string client_ip = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_ip().data(), this->client_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_type = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_type().data(), this->server_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string company_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 media_type = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  return false;
#undef DO_
}

void GetMediaServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  // string client_ip = 1;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_ip(), output);
  }

  // string server_type = 2;
  if (this->server_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_type().data(), this->server_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_type(), output);
  }

  // string group_id = 3;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_id(), output);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->app_id(), output);
  }

  // string company_id = 6;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->company_id(), output);
  }

  // string room_id = 7;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->room_id(), output);
  }

  // int32 media_type = 8;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->media_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.rule.GetMediaServer)
}

::google::protobuf::uint8* GetMediaServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  // string client_ip = 1;
  if (this->client_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ip().data(), this->client_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_ip(), target);
  }

  // string server_type = 2;
  if (this->server_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_type().data(), this->server_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_type(), target);
  }

  // string group_id = 3;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_id(), target);
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->app_id(), target);
  }

  // string company_id = 6;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->company_id(), target);
  }

  // string room_id = 7;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->room_id(), target);
  }

  // int32 media_type = 8;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->media_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  return target;
}

size_t GetMediaServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  size_t total_size = 0;

  // string client_ip = 1;
  if (this->client_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_ip());
  }

  // string server_type = 2;
  if (this->server_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_type());
  }

  // string group_id = 3;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 4;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string company_id = 6;
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->company_id());
  }

  // string room_id = 7;
  if (this->room_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_id());
  }

  // int32 media_type = 8;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMediaServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMediaServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMediaServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.rule.GetMediaServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.rule.GetMediaServer)
    MergeFrom(*source);
  }
}

void GetMediaServer::MergeFrom(const GetMediaServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.client_ip().size() > 0) {
    set_client_ip(from.client_ip());
  }
  if (from.server_type().size() > 0) {
    set_server_type(from.server_type());
  }
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.company_id().size() > 0) {
    set_company_id(from.company_id());
  }
  if (from.room_id().size() > 0) {
    set_room_id(from.room_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void GetMediaServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMediaServer::CopyFrom(const GetMediaServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.rule.GetMediaServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMediaServer::IsInitialized() const {
  return true;
}

void GetMediaServer::Swap(GetMediaServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetMediaServer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetMediaServer::UnsafeArenaSwap(GetMediaServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetMediaServer::InternalSwap(GetMediaServer* other) {
  client_ip_.Swap(&other->client_ip_);
  server_type_.Swap(&other->server_type_);
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  app_id_.Swap(&other->app_id_);
  company_id_.Swap(&other->company_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMediaServer::GetMetadata() const {
  protobuf_fsp_2drule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2drule_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMediaServer

// string client_ip = 1;
void GetMediaServer::clear_client_ip() {
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetMediaServer::client_ip() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
  return client_ip_.Get();
}
void GetMediaServer::set_client_ip(const ::std::string& value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}
void GetMediaServer::set_client_ip(const char* value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}
void GetMediaServer::set_client_ip(const char* value,
    size_t size) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}
::std::string* GetMediaServer::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
  return client_ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::release_client_ip() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
  
  return client_ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::unsafe_arena_release_client_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetMediaServer::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}
void GetMediaServer::unsafe_arena_set_allocated_client_ip(
    ::std::string* client_ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.client_ip)
}

// string server_type = 2;
void GetMediaServer::clear_server_type() {
  server_type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetMediaServer::server_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
  return server_type_.Get();
}
void GetMediaServer::set_server_type(const ::std::string& value) {
  
  server_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}
void GetMediaServer::set_server_type(const char* value) {
  
  server_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}
void GetMediaServer::set_server_type(const char* value,
    size_t size) {
  
  server_type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}
::std::string* GetMediaServer::mutable_server_type() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
  return server_type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::release_server_type() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
  
  return server_type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::unsafe_arena_release_server_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return server_type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetMediaServer::set_allocated_server_type(::std::string* server_type) {
  if (server_type != NULL) {
    
  } else {
    
  }
  server_type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}
void GetMediaServer::unsafe_arena_set_allocated_server_type(
    ::std::string* server_type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (server_type != NULL) {
    
  } else {
    
  }
  server_type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      server_type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.server_type)
}

// string group_id = 3;
void GetMediaServer::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetMediaServer::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
  return group_id_.Get();
}
void GetMediaServer::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}
void GetMediaServer::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}
void GetMediaServer::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}
::std::string* GetMediaServer::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetMediaServer::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}
void GetMediaServer::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.group_id)
}

// string user_id = 4;
void GetMediaServer::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetMediaServer::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
  return user_id_.Get();
}
void GetMediaServer::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}
void GetMediaServer::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}
void GetMediaServer::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}
::std::string* GetMediaServer::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetMediaServer::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}
void GetMediaServer::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.user_id)
}

// string app_id = 5;
void GetMediaServer::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetMediaServer::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
  return app_id_.Get();
}
void GetMediaServer::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}
void GetMediaServer::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}
void GetMediaServer::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}
::std::string* GetMediaServer::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetMediaServer::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}
void GetMediaServer::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.app_id)
}

// string company_id = 6;
void GetMediaServer::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetMediaServer::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
  return company_id_.Get();
}
void GetMediaServer::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}
void GetMediaServer::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}
void GetMediaServer::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}
::std::string* GetMediaServer::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetMediaServer::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}
void GetMediaServer::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.company_id)
}

// string room_id = 7;
void GetMediaServer::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GetMediaServer::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
  return room_id_.Get();
}
void GetMediaServer::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}
void GetMediaServer::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}
void GetMediaServer::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}
::std::string* GetMediaServer::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GetMediaServer::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GetMediaServer::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}
void GetMediaServer::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServer.room_id)
}

// int32 media_type = 8;
void GetMediaServer::clear_media_type() {
  media_type_ = 0;
}
::google::protobuf::int32 GetMediaServer::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServer.media_type)
  return media_type_;
}
void GetMediaServer::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServer.media_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GetMediaServerRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetMediaServerRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetMediaServerRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GetMediaServerRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GetMediaServerRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMediaServerRsp::kResponseFieldNumber;
const int GetMediaServerRsp::kMediaServersFieldNumber;
const int GetMediaServerRsp::kMediaServerAddrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMediaServerRsp::GetMediaServerRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2drule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
}
GetMediaServerRsp::GetMediaServerRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  mediaservers_(arena),
  mediaserveraddrs_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2drule_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
}
GetMediaServerRsp::GetMediaServerRsp(const GetMediaServerRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mediaservers_(from.mediaservers_),
      mediaserveraddrs_(from.mediaserveraddrs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
}

void GetMediaServerRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

GetMediaServerRsp::~GetMediaServerRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  SharedDtor();
}

void GetMediaServerRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GetMediaServerRsp::ArenaDtor(void* object) {
  GetMediaServerRsp* _this = reinterpret_cast< GetMediaServerRsp* >(object);
  (void)_this;
}
void GetMediaServerRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetMediaServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetMediaServerRsp::descriptor() {
  protobuf_fsp_2drule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2drule_2eproto::file_level_metadata[1].descriptor;
}

const GetMediaServerRsp& GetMediaServerRsp::default_instance() {
  protobuf_fsp_2drule_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetMediaServerRsp* GetMediaServerRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetMediaServerRsp>(arena);
}

void GetMediaServerRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  mediaservers_.Clear();
  mediaserveraddrs_.Clear();
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool GetMediaServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mediaServers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mediaservers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mediaservers(this->mediaservers_size() - 1).data(),
            this->mediaservers(this->mediaservers_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mediaServerAddrs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mediaserveraddrs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mediaserveraddrs(this->mediaserveraddrs_size() - 1).data(),
            this->mediaserveraddrs(this->mediaserveraddrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  return false;
#undef DO_
}

void GetMediaServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // repeated string mediaServers = 2;
  for (int i = 0; i < this->mediaservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mediaservers(i).data(), this->mediaservers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mediaservers(i), output);
  }

  // repeated string mediaServerAddrs = 3;
  for (int i = 0; i < this->mediaserveraddrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mediaserveraddrs(i).data(), this->mediaserveraddrs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mediaserveraddrs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
}

::google::protobuf::uint8* GetMediaServerRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // repeated string mediaServers = 2;
  for (int i = 0; i < this->mediaservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mediaservers(i).data(), this->mediaservers(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->mediaservers(i), target);
  }

  // repeated string mediaServerAddrs = 3;
  for (int i = 0; i < this->mediaserveraddrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mediaserveraddrs(i).data(), this->mediaserveraddrs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mediaserveraddrs(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  return target;
}

size_t GetMediaServerRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  size_t total_size = 0;

  // repeated string mediaServers = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mediaservers_size());
  for (int i = 0; i < this->mediaservers_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mediaservers(i));
  }

  // repeated string mediaServerAddrs = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mediaserveraddrs_size());
  for (int i = 0; i < this->mediaserveraddrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mediaserveraddrs(i));
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetMediaServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMediaServerRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMediaServerRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
    MergeFrom(*source);
  }
}

void GetMediaServerRsp::MergeFrom(const GetMediaServerRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mediaservers_.MergeFrom(from.mediaservers_);
  mediaserveraddrs_.MergeFrom(from.mediaserveraddrs_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void GetMediaServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMediaServerRsp::CopyFrom(const GetMediaServerRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMediaServerRsp::IsInitialized() const {
  return true;
}

void GetMediaServerRsp::Swap(GetMediaServerRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetMediaServerRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetMediaServerRsp::UnsafeArenaSwap(GetMediaServerRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetMediaServerRsp::InternalSwap(GetMediaServerRsp* other) {
  mediaservers_.UnsafeArenaSwap(&other->mediaservers_);
  mediaserveraddrs_.UnsafeArenaSwap(&other->mediaserveraddrs_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetMediaServerRsp::GetMetadata() const {
  protobuf_fsp_2drule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2drule_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetMediaServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GetMediaServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GetMediaServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetMediaServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetMediaServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GetMediaServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GetMediaServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.response)
}

// repeated string mediaServers = 2;
int GetMediaServerRsp::mediaservers_size() const {
  return mediaservers_.size();
}
void GetMediaServerRsp::clear_mediaservers() {
  mediaservers_.Clear();
}
const ::std::string& GetMediaServerRsp::mediaservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return mediaservers_.Get(index);
}
::std::string* GetMediaServerRsp::mutable_mediaservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return mediaservers_.Mutable(index);
}
void GetMediaServerRsp::set_mediaservers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  mediaservers_.Mutable(index)->assign(value);
}
void GetMediaServerRsp::set_mediaservers(int index, const char* value) {
  mediaservers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
void GetMediaServerRsp::set_mediaservers(int index, const char* value, size_t size) {
  mediaservers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
::std::string* GetMediaServerRsp::add_mediaservers() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return mediaservers_.Add();
}
void GetMediaServerRsp::add_mediaservers(const ::std::string& value) {
  mediaservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
void GetMediaServerRsp::add_mediaservers(const char* value) {
  mediaservers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
void GetMediaServerRsp::add_mediaservers(const char* value, size_t size) {
  mediaservers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetMediaServerRsp::mediaservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return mediaservers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GetMediaServerRsp::mutable_mediaservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServers)
  return &mediaservers_;
}

// repeated string mediaServerAddrs = 3;
int GetMediaServerRsp::mediaserveraddrs_size() const {
  return mediaserveraddrs_.size();
}
void GetMediaServerRsp::clear_mediaserveraddrs() {
  mediaserveraddrs_.Clear();
}
const ::std::string& GetMediaServerRsp::mediaserveraddrs(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return mediaserveraddrs_.Get(index);
}
::std::string* GetMediaServerRsp::mutable_mediaserveraddrs(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return mediaserveraddrs_.Mutable(index);
}
void GetMediaServerRsp::set_mediaserveraddrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  mediaserveraddrs_.Mutable(index)->assign(value);
}
void GetMediaServerRsp::set_mediaserveraddrs(int index, const char* value) {
  mediaserveraddrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
void GetMediaServerRsp::set_mediaserveraddrs(int index, const char* value, size_t size) {
  mediaserveraddrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
::std::string* GetMediaServerRsp::add_mediaserveraddrs() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return mediaserveraddrs_.Add();
}
void GetMediaServerRsp::add_mediaserveraddrs(const ::std::string& value) {
  mediaserveraddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
void GetMediaServerRsp::add_mediaserveraddrs(const char* value) {
  mediaserveraddrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
void GetMediaServerRsp::add_mediaserveraddrs(const char* value, size_t size) {
  mediaserveraddrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetMediaServerRsp::mediaserveraddrs() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return mediaserveraddrs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GetMediaServerRsp::mutable_mediaserveraddrs() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.rule.GetMediaServerRsp.mediaServerAddrs)
  return &mediaserveraddrs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuleSelect::kStreamIdFieldNumber;
const int RuleSelect::kSourceInstanceFieldNumber;
const int RuleSelect::kInstanceFieldNumber;
const int RuleSelect::kTypeFieldNumber;
const int RuleSelect::kRoomIdFieldNumber;
const int RuleSelect::kCompanyIdFieldNumber;
const int RuleSelect::kAppIdFieldNumber;
const int RuleSelect::kMediaTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuleSelect::RuleSelect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2drule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.rule.RuleSelect)
}
RuleSelect::RuleSelect(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2drule_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.rule.RuleSelect)
}
RuleSelect::RuleSelect(const RuleSelect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  sourceinstance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sourceinstance().size() > 0) {
    sourceinstance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sourceinstance(),
      GetArenaNoVirtual());
  }
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance().size() > 0) {
    instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance(),
      GetArenaNoVirtual());
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type(),
      GetArenaNoVirtual());
  }
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_id().size() > 0) {
    room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id(),
      GetArenaNoVirtual());
  }
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.company_id().size() > 0) {
    company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.company_id(),
      GetArenaNoVirtual());
  }
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  media_type_ = from.media_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.rule.RuleSelect)
}

void RuleSelect::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sourceinstance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  _cached_size_ = 0;
}

RuleSelect::~RuleSelect() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.rule.RuleSelect)
  SharedDtor();
}

void RuleSelect::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sourceinstance_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  instance_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  type_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  room_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  company_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void RuleSelect::ArenaDtor(void* object) {
  RuleSelect* _this = reinterpret_cast< RuleSelect* >(object);
  (void)_this;
}
void RuleSelect::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RuleSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleSelect::descriptor() {
  protobuf_fsp_2drule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2drule_2eproto::file_level_metadata[2].descriptor;
}

const RuleSelect& RuleSelect::default_instance() {
  protobuf_fsp_2drule_2eproto::InitDefaults();
  return *internal_default_instance();
}

RuleSelect* RuleSelect::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RuleSelect>(arena);
}

void RuleSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.rule.RuleSelect)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sourceinstance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  instance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_type_ = 0;
}

bool RuleSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.rule.RuleSelect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sourceInstance = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceinstance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sourceinstance().data(), this->sourceinstance().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instance = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance().data(), this->instance().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.RuleSelect.instance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.RuleSelect.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string room_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.RuleSelect.room_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string company_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_company_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->company_id().data(), this->company_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.RuleSelect.company_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.RuleSelect.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 media_type = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.rule.RuleSelect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.rule.RuleSelect)
  return false;
#undef DO_
}

void RuleSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.rule.RuleSelect)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string sourceInstance = 2;
  if (this->sourceinstance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourceinstance().data(), this->sourceinstance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sourceinstance(), output);
  }

  // string instance = 3;
  if (this->instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.instance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->instance(), output);
  }

  // string type = 4;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->type(), output);
  }

  // string room_id = 5;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->room_id(), output);
  }

  // string company_id = 6;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.company_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->company_id(), output);
  }

  // string app_id = 7;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->app_id(), output);
  }

  // int32 media_type = 8;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->media_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.rule.RuleSelect)
}

::google::protobuf::uint8* RuleSelect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.rule.RuleSelect)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string sourceInstance = 2;
  if (this->sourceinstance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sourceinstance().data(), this->sourceinstance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourceinstance(), target);
  }

  // string instance = 3;
  if (this->instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.instance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instance(), target);
  }

  // string type = 4;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // string room_id = 5;
  if (this->room_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->room_id(), target);
  }

  // string company_id = 6;
  if (this->company_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->company_id().data(), this->company_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.company_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->company_id(), target);
  }

  // string app_id = 7;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelect.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->app_id(), target);
  }

  // int32 media_type = 8;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->media_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.rule.RuleSelect)
  return target;
}

size_t RuleSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.rule.RuleSelect)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string sourceInstance = 2;
  if (this->sourceinstance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sourceinstance());
  }

  // string instance = 3;
  if (this->instance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance());
  }

  // string type = 4;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string room_id = 5;
  if (this->room_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_id());
  }

  // string company_id = 6;
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->company_id());
  }

  // string app_id = 7;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // int32 media_type = 8;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleSelect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.rule.RuleSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleSelect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuleSelect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.rule.RuleSelect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.rule.RuleSelect)
    MergeFrom(*source);
  }
}

void RuleSelect::MergeFrom(const RuleSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.rule.RuleSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.sourceinstance().size() > 0) {
    set_sourceinstance(from.sourceinstance());
  }
  if (from.instance().size() > 0) {
    set_instance(from.instance());
  }
  if (from.type().size() > 0) {
    set_type(from.type());
  }
  if (from.room_id().size() > 0) {
    set_room_id(from.room_id());
  }
  if (from.company_id().size() > 0) {
    set_company_id(from.company_id());
  }
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void RuleSelect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.rule.RuleSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleSelect::CopyFrom(const RuleSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.rule.RuleSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleSelect::IsInitialized() const {
  return true;
}

void RuleSelect::Swap(RuleSelect* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RuleSelect* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RuleSelect::UnsafeArenaSwap(RuleSelect* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RuleSelect::InternalSwap(RuleSelect* other) {
  stream_id_.Swap(&other->stream_id_);
  sourceinstance_.Swap(&other->sourceinstance_);
  instance_.Swap(&other->instance_);
  type_.Swap(&other->type_);
  room_id_.Swap(&other->room_id_);
  company_id_.Swap(&other->company_id_);
  app_id_.Swap(&other->app_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuleSelect::GetMetadata() const {
  protobuf_fsp_2drule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2drule_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuleSelect

// string stream_id = 1;
void RuleSelect::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleSelect::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
  return stream_id_.Get();
}
void RuleSelect::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}
void RuleSelect::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}
void RuleSelect::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}
::std::string* RuleSelect::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleSelect::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}
void RuleSelect::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.stream_id)
}

// string sourceInstance = 2;
void RuleSelect::clear_sourceinstance() {
  sourceinstance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleSelect::sourceinstance() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
  return sourceinstance_.Get();
}
void RuleSelect::set_sourceinstance(const ::std::string& value) {
  
  sourceinstance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}
void RuleSelect::set_sourceinstance(const char* value) {
  
  sourceinstance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}
void RuleSelect::set_sourceinstance(const char* value,
    size_t size) {
  
  sourceinstance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}
::std::string* RuleSelect::mutable_sourceinstance() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
  return sourceinstance_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::release_sourceinstance() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
  
  return sourceinstance_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::unsafe_arena_release_sourceinstance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sourceinstance_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleSelect::set_allocated_sourceinstance(::std::string* sourceinstance) {
  if (sourceinstance != NULL) {
    
  } else {
    
  }
  sourceinstance_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sourceinstance,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}
void RuleSelect::unsafe_arena_set_allocated_sourceinstance(
    ::std::string* sourceinstance) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sourceinstance != NULL) {
    
  } else {
    
  }
  sourceinstance_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sourceinstance, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.sourceInstance)
}

// string instance = 3;
void RuleSelect::clear_instance() {
  instance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleSelect::instance() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
  return instance_.Get();
}
void RuleSelect::set_instance(const ::std::string& value) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}
void RuleSelect::set_instance(const char* value) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}
void RuleSelect::set_instance(const char* value,
    size_t size) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}
::std::string* RuleSelect::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
  return instance_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::release_instance() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
  
  return instance_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleSelect::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}
void RuleSelect::unsafe_arena_set_allocated_instance(
    ::std::string* instance) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.instance)
}

// string type = 4;
void RuleSelect::clear_type() {
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleSelect::type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
  return type_.Get();
}
void RuleSelect::set_type(const ::std::string& value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}
void RuleSelect::set_type(const char* value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}
void RuleSelect::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}
::std::string* RuleSelect::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
  return type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::release_type() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
  
  return type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleSelect::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}
void RuleSelect::unsafe_arena_set_allocated_type(
    ::std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type != NULL) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.type)
}

// string room_id = 5;
void RuleSelect::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleSelect::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
  return room_id_.Get();
}
void RuleSelect::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}
void RuleSelect::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}
void RuleSelect::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}
::std::string* RuleSelect::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleSelect::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}
void RuleSelect::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.room_id)
}

// string company_id = 6;
void RuleSelect::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleSelect::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
  return company_id_.Get();
}
void RuleSelect::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}
void RuleSelect::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}
void RuleSelect::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}
::std::string* RuleSelect::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleSelect::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}
void RuleSelect::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.company_id)
}

// string app_id = 7;
void RuleSelect::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleSelect::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
  return app_id_.Get();
}
void RuleSelect::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}
void RuleSelect::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}
void RuleSelect::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}
::std::string* RuleSelect::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelect::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleSelect::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}
void RuleSelect::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelect.app_id)
}

// int32 media_type = 8;
void RuleSelect::clear_media_type() {
  media_type_ = 0;
}
::google::protobuf::int32 RuleSelect::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelect.media_type)
  return media_type_;
}
void RuleSelect::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelect.media_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RuleSelectRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* RuleSelectRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* RuleSelectRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void RuleSelectRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void RuleSelectRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuleSelectRsp::kResponseFieldNumber;
const int RuleSelectRsp::kInstanceFieldNumber;
const int RuleSelectRsp::kConnectStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuleSelectRsp::RuleSelectRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2drule_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
}
RuleSelectRsp::RuleSelectRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2drule_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
}
RuleSelectRsp::RuleSelectRsp(const RuleSelectRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance().size() > 0) {
    instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance(),
      GetArenaNoVirtual());
  }
  connectstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connectstr().size() > 0) {
    connectstr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connectstr(),
      GetArenaNoVirtual());
  }
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
}

void RuleSelectRsp::SharedCtor() {
  instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connectstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = NULL;
  _cached_size_ = 0;
}

RuleSelectRsp::~RuleSelectRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  SharedDtor();
}

void RuleSelectRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  instance_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  connectstr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete response_;
  }
}

void RuleSelectRsp::ArenaDtor(void* object) {
  RuleSelectRsp* _this = reinterpret_cast< RuleSelectRsp* >(object);
  (void)_this;
}
void RuleSelectRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RuleSelectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleSelectRsp::descriptor() {
  protobuf_fsp_2drule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2drule_2eproto::file_level_metadata[3].descriptor;
}

const RuleSelectRsp& RuleSelectRsp::default_instance() {
  protobuf_fsp_2drule_2eproto::InitDefaults();
  return *internal_default_instance();
}

RuleSelectRsp* RuleSelectRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RuleSelectRsp>(arena);
}

void RuleSelectRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  instance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  connectstr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool RuleSelectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instance = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance().data(), this->instance().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connectStr = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connectstr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connectstr().data(), this->connectstr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  return false;
#undef DO_
}

void RuleSelectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // string instance = 2;
  if (this->instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instance(), output);
  }

  // string connectStr = 3;
  if (this->connectstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connectstr().data(), this->connectstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->connectstr(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
}

::google::protobuf::uint8* RuleSelectRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // string instance = 2;
  if (this->instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance().data(), this->instance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instance(), target);
  }

  // string connectStr = 3;
  if (this->connectstr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connectstr().data(), this->connectstr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->connectstr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  return target;
}

size_t RuleSelectRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  size_t total_size = 0;

  // string instance = 2;
  if (this->instance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance());
  }

  // string connectStr = 3;
  if (this->connectstr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connectstr());
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleSelectRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleSelectRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuleSelectRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
    MergeFrom(*source);
  }
}

void RuleSelectRsp::MergeFrom(const RuleSelectRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.instance().size() > 0) {
    set_instance(from.instance());
  }
  if (from.connectstr().size() > 0) {
    set_connectstr(from.connectstr());
  }
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void RuleSelectRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleSelectRsp::CopyFrom(const RuleSelectRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.rule.RuleSelectRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleSelectRsp::IsInitialized() const {
  return true;
}

void RuleSelectRsp::Swap(RuleSelectRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RuleSelectRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RuleSelectRsp::UnsafeArenaSwap(RuleSelectRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RuleSelectRsp::InternalSwap(RuleSelectRsp* other) {
  instance_.Swap(&other->instance_);
  connectstr_.Swap(&other->connectstr_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuleSelectRsp::GetMetadata() const {
  protobuf_fsp_2drule_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2drule_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuleSelectRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool RuleSelectRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void RuleSelectRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& RuleSelectRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* RuleSelectRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* RuleSelectRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void RuleSelectRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.response)
}

// string instance = 2;
void RuleSelectRsp::clear_instance() {
  instance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleSelectRsp::instance() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
  return instance_.Get();
}
void RuleSelectRsp::set_instance(const ::std::string& value) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}
void RuleSelectRsp::set_instance(const char* value) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}
void RuleSelectRsp::set_instance(const char* value,
    size_t size) {
  
  instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}
::std::string* RuleSelectRsp::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
  return instance_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelectRsp::release_instance() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
  
  return instance_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelectRsp::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleSelectRsp::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}
void RuleSelectRsp::unsafe_arena_set_allocated_instance(
    ::std::string* instance) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.instance)
}

// string connectStr = 3;
void RuleSelectRsp::clear_connectstr() {
  connectstr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleSelectRsp::connectstr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
  return connectstr_.Get();
}
void RuleSelectRsp::set_connectstr(const ::std::string& value) {
  
  connectstr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}
void RuleSelectRsp::set_connectstr(const char* value) {
  
  connectstr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}
void RuleSelectRsp::set_connectstr(const char* value,
    size_t size) {
  
  connectstr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}
::std::string* RuleSelectRsp::mutable_connectstr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
  return connectstr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelectRsp::release_connectstr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
  
  return connectstr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleSelectRsp::unsafe_arena_release_connectstr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return connectstr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleSelectRsp::set_allocated_connectstr(::std::string* connectstr) {
  if (connectstr != NULL) {
    
  } else {
    
  }
  connectstr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connectstr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}
void RuleSelectRsp::unsafe_arena_set_allocated_connectstr(
    ::std::string* connectstr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (connectstr != NULL) {
    
  } else {
    
  }
  connectstr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      connectstr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.rule.RuleSelectRsp.connectStr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rule
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

// @@protoc_insertion_point(global_scope)
