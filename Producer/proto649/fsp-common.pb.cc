// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fsp-common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class ProxyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Proxy> {
} _Proxy_default_instance_;
class StreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Stream> {
} _Stream_default_instance_;
class StreamServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamServer> {
} _StreamServer_default_instance_;
class GroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Group> {
} _Group_default_instance_;
class GroupServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GroupServer> {
} _GroupServer_default_instance_;
class StreamDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamData> {
} _StreamData_default_instance_;
class CommonResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonResponse> {
} _CommonResponse_default_instance_;
class NotifyStreamDestroiedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamDestroied> {
} _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NotifyStreamDestroiedRsp> {
} _NotifyStreamDestroiedRsp_default_instance_;
class StreamSourceChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamSourceChanged> {
} _StreamSourceChanged_default_instance_;
class StreamSourceChangedRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamSourceChangedRsp> {
} _StreamSourceChangedRsp_default_instance_;
class CommonInvokeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonInvokeInfo> {
} _CommonInvokeInfo_default_instance_;
class BillInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BillInfo> {
} _BillInfo_default_instance_;
class BroadcastInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BroadcastInfo> {
} _BroadcastInfo_default_instance_;
class CommonInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommonInfo> {
} _CommonInfo_default_instance_;

namespace protobuf_fsp_2dcommon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, proxy_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Proxy, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, stream_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, stream_property_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, stream_publish_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, stream_subscribe_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamServer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamServer, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamServer, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamServer, connect_str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, group_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, group_check_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, server_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupServer, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupServer, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupServer, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupServer, connect_str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamData, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, response_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResponse, response_msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamDestroied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamDestroied, stream_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamDestroiedRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyStreamDestroiedRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSourceChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSourceChanged, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSourceChanged, source_instance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSourceChangedRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamSourceChangedRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInvokeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInvokeInfo, trace_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInvokeInfo, invoke_order_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, stream_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, service_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, transfer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillInfo, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, media_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastInfo, media_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInfo, user_data_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Proxy)},
  { 8, -1, sizeof(Stream)},
  { 17, -1, sizeof(StreamServer)},
  { 25, -1, sizeof(Group)},
  { 33, -1, sizeof(GroupServer)},
  { 41, -1, sizeof(StreamData)},
  { 48, -1, sizeof(CommonResponse)},
  { 54, -1, sizeof(NotifyStreamDestroied)},
  { 59, -1, sizeof(NotifyStreamDestroiedRsp)},
  { 64, -1, sizeof(StreamSourceChanged)},
  { 70, -1, sizeof(StreamSourceChangedRsp)},
  { 75, -1, sizeof(CommonInvokeInfo)},
  { 81, -1, sizeof(BillInfo)},
  { 95, -1, sizeof(BroadcastInfo)},
  { 103, -1, sizeof(CommonInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Proxy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GroupServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamDestroied_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NotifyStreamDestroiedRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamSourceChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamSourceChangedRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonInvokeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BillInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BroadcastInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommonInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fsp-common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace

void TableStruct::Shutdown() {
  _Proxy_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Stream_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _StreamServer_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Group_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GroupServer_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _StreamData_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CommonResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _NotifyStreamDestroied_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _NotifyStreamDestroiedRsp_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _StreamSourceChanged_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _StreamSourceChangedRsp_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CommonInvokeInfo_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _BillInfo_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _BroadcastInfo_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CommonInfo_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Proxy_default_instance_.DefaultConstruct();
  _Stream_default_instance_.DefaultConstruct();
  _StreamServer_default_instance_.DefaultConstruct();
  _Group_default_instance_.DefaultConstruct();
  _GroupServer_default_instance_.DefaultConstruct();
  _StreamData_default_instance_.DefaultConstruct();
  _CommonResponse_default_instance_.DefaultConstruct();
  _NotifyStreamDestroied_default_instance_.DefaultConstruct();
  _NotifyStreamDestroiedRsp_default_instance_.DefaultConstruct();
  _StreamSourceChanged_default_instance_.DefaultConstruct();
  _StreamSourceChangedRsp_default_instance_.DefaultConstruct();
  _CommonInvokeInfo_default_instance_.DefaultConstruct();
  _BillInfo_default_instance_.DefaultConstruct();
  _BroadcastInfo_default_instance_.DefaultConstruct();
  _CommonInfo_default_instance_.DefaultConstruct();
  _NotifyStreamDestroiedRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _StreamSourceChangedRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020fsp-common.proto\022\036com.fsmeeting.fsp.pr"
      "oto.common\"n\n\005Proxy\022\n\n\002id\030\001 \001(\t\022=\n\nproxy"
      "_type\030\002 \001(\0162).com.fsmeeting.fsp.proto.co"
      "mmon.ProxyType\022\014\n\004addr\030\003 \001(\t\022\014\n\004port\030\004 \001"
      "(\005\"\343\001\n\006Stream\022\021\n\tstream_id\030\001 \001(\t\022\?\n\013stre"
      "am_type\030\002 \001(\0162*.com.fsmeeting.fsp.proto."
      "common.StreamType\022G\n\017stream_property\030\003 \001"
      "(\0162..com.fsmeeting.fsp.proto.common.Stre"
      "amProperty\022\034\n\024stream_publish_token\030\004 \001(\t"
      "\022\036\n\026stream_subscribe_token\030\005 \001(\t\"K\n\014Stre"
      "amServer\022\n\n\002id\030\001 \001(\t\022\014\n\004addr\030\002 \001(\t\022\014\n\004po"
      "rt\030\003 \001(\t\022\023\n\013connect_str\030\004 \001(\t\"\211\001\n\005Group\022"
      "\020\n\010group_id\030\001 \001(\t\022\023\n\013group_token\030\002 \001(\t\022\030"
      "\n\020group_check_code\030\003 \001(\t\022\?\n\013server_type\030"
      "\004 \001(\0162*.com.fsmeeting.fsp.proto.common.S"
      "erverType\"J\n\013GroupServer\022\n\n\002id\030\001 \001(\t\022\014\n\004"
      "addr\030\002 \001(\t\022\014\n\004port\030\003 \001(\t\022\023\n\013connect_str\030"
      "\004 \001(\t\"g\n\nStreamData\022;\n\tdata_type\030\001 \001(\0162("
      ".com.fsmeeting.fsp.proto.common.DataType"
      "\022\016\n\006length\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\"k\n\016Common"
      "Response\022C\n\rresponse_code\030\001 \001(\0162,.com.fs"
      "meeting.fsp.proto.common.ResponseCode\022\024\n"
      "\014response_msg\030\002 \001(\t\"*\n\025NotifyStreamDestr"
      "oied\022\021\n\tstream_id\030\001 \001(\t\"\\\n\030NotifyStreamD"
      "estroiedRsp\022@\n\010response\030\001 \001(\0132..com.fsme"
      "eting.fsp.proto.common.CommonResponse\"A\n"
      "\023StreamSourceChanged\022\021\n\tstream_id\030\001 \001(\t\022"
      "\027\n\017source_instance\030\002 \001(\t\"Z\n\026StreamSource"
      "ChangedRsp\022@\n\010response\030\001 \001(\0132..com.fsmee"
      "ting.fsp.proto.common.CommonResponse\":\n\020"
      "CommonInvokeInfo\022\020\n\010trace_id\030\001 \001(\t\022\024\n\014in"
      "voke_order\030\002 \001(\t\"\306\001\n\010BillInfo\022\016\n\006app_id\030"
      "\001 \001(\t\022\020\n\010group_id\030\002 \001(\t\022\021\n\tstream_id\030\003 \001"
      "(\t\022\021\n\tclient_id\030\004 \001(\t\022\022\n\nservice_id\030\005 \001("
      "\005\022\025\n\rtransfer_type\030\006 \001(\005\022\r\n\005bytes\030\007 \001(\004\022"
      "\022\n\ntotal_time\030\010 \001(\r\022\022\n\nstart_time\030\t \001(\t\022"
      "\020\n\010end_time\030\n \001(\t\"X\n\rBroadcastInfo\022\020\n\010gr"
      "oup_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\022\n\nmedia_t"
      "ype\030\003 \001(\005\022\020\n\010media_id\030\004 \001(\t\"\037\n\nCommonInf"
      "o\022\021\n\tuser_data\030\001 \001(\t*\272\003\n\017ProtoDictionary"
      "\022\031\n\025Enum2UnknownInterface\020\000\022\017\n\nEnum2Prox"
      "y\020\352\007\022\020\n\013Enum2Stream\020\353\007\022\026\n\021Enum2StreamSer"
      "ver\020\354\007\022\017\n\nEnum2Group\020\355\007\022\025\n\020Enum2GroupSer"
      "ver\020\356\007\022\024\n\017Enum2StreamData\020\357\007\022\037\n\032Enum2Not"
      "ifyStreamDestroied\020\360\007\022\"\n\035Enum2NotifyStre"
      "amDestroiedRsp\020\361\007\022\035\n\030Enum2StreamSourceCh"
      "anged\020\362\007\022 \n\033Enum2StreamSourceChangedRsp\020"
      "\363\007\022\022\n\rEnum2PostBill\020\364\007\022\031\n\024Enum2NotifyBro"
      "adcast\020\365\007\022\035\n\030Enum2NotifyStopBroadcast\020\366\007"
      "\022\036\n\031Enum2NotifyGroupDestroied\020\367\007\022\037\n\032Enum"
      "2NotifyInstanceStarted\020\370\007*\276\001\n\014ResponseCo"
      "de\022\017\n\013EnumSuccess\020\000\022\r\n\tEnumError\020\001\022\016\n\nEn"
      "umUnknow\020\002\022 \n\034EnumMediaNodesOverThreeErr"
      "or\020\003\022\024\n\020EnumIceException\020\004\022\024\n\020EnumIceDat"
      "aError\020\005\022\027\n\023EnumUserHaveLogined\020\006\022\027\n\023Enu"
      "mExcludeToplimit\020\007*}\n\nServerType\022\023\n\017Enum"
      "ClientProxy\020\000\022\024\n\020EnumStreamServer\020\001\022\023\n\017E"
      "numGroupServer\020\002\022\026\n\022EnumVNCGroupServer\020\003"
      "\022\027\n\023EnumVNCStreamServer\020\004*+\n\tProxyType\022\016"
      "\n\nEnumServer\020\000\022\016\n\nEnumClient\020\001*M\n\nStream"
      "Type\022\023\n\017EnumVideoStream\020\000\022\023\n\017EnumAudioSt"
      "ream\020\001\022\025\n\021EnumDeskTopStream\020\002*6\n\tMediaTy"
      "pe\022\013\n\007EnumVNC\020\000\022\r\n\tEnumAudio\020\001\022\r\n\tEnumVi"
      "deo\020\002*2\n\nPresetType\022\021\n\rEnumAddPreset\020\000\022\021"
      "\n\rEnumDelPreset\020\001*6\n\016StreamProperty\022\020\n\014E"
      "numReliable\020\000\022\022\n\016EnumUnreliable\020\001*\?\n\010Dat"
      "aType\022\017\n\013EnumQOSData\020\000\022\021\n\rEnumMediaData\020"
      "\001\022\017\n\013EnumVNCData\020\002*M\n\013ServiceType\022\021\n\rEnu"
      "mAVService\020\000\022\022\n\016EnumVNCService\020\001\022\027\n\023Enum"
      "DataSyncService\020\002*+\n\rDataDirection\022\013\n\007Se"
      "nding\020\000\022\r\n\tReceiving\020\001*N\n\013ChannelType\022\013\n"
      "\007EnumC2G\020\000\022\013\n\007EnumS2G\020\001\022\013\n\007EnumC2S\020\002\022\013\n\007"
      "EnumG2S\020\003\022\013\n\007EnumS2S\020\004B+\n\036com.fsmeeting."
      "fsp.proto.commonP\001\370\001\001\242\002\003GPBb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2955);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsp-common.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fsp_2dcommon_2eproto

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[0];
}
bool ProtoDictionary_IsValid(int value) {
  switch (value) {
    case 0:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[1];
}
bool ResponseCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServerType_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[2];
}
bool ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProxyType_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[3];
}
bool ProxyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StreamType_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[4];
}
bool StreamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MediaType_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[5];
}
bool MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PresetType_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[6];
}
bool PresetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StreamProperty_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[7];
}
bool StreamProperty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[8];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceType_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[9];
}
bool ServiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataDirection_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[10];
}
bool DataDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_enum_descriptors[11];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Proxy::kIdFieldNumber;
const int Proxy::kProxyTypeFieldNumber;
const int Proxy::kAddrFieldNumber;
const int Proxy::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Proxy::Proxy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.Proxy)
}
Proxy::Proxy(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.Proxy)
}
Proxy::Proxy(const Proxy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr(),
      GetArenaNoVirtual());
  }
  ::memcpy(&proxy_type_, &from.proxy_type_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&proxy_type_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.Proxy)
}

void Proxy::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&proxy_type_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&proxy_type_) + sizeof(port_));
  _cached_size_ = 0;
}

Proxy::~Proxy() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.Proxy)
  SharedDtor();
}

void Proxy::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Proxy::ArenaDtor(void* object) {
  Proxy* _this = reinterpret_cast< Proxy* >(object);
  (void)_this;
}
void Proxy::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Proxy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Proxy::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[0].descriptor;
}

const Proxy& Proxy::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Proxy* Proxy::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Proxy>(arena);
}

void Proxy::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.Proxy)
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&proxy_type_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&proxy_type_) + sizeof(port_));
}

bool Proxy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.Proxy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.Proxy.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.ProxyType proxy_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_proxy_type(static_cast< ::com::fsmeeting::fsp::proto::common::ProxyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.Proxy.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.Proxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.Proxy)
  return false;
#undef DO_
}

void Proxy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.Proxy)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Proxy.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.ProxyType proxy_type = 2;
  if (this->proxy_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->proxy_type(), output);
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Proxy.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->addr(), output);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.Proxy)
}

::google::protobuf::uint8* Proxy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.Proxy)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Proxy.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.ProxyType proxy_type = 2;
  if (this->proxy_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->proxy_type(), target);
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Proxy.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->addr(), target);
  }

  // int32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.Proxy)
  return target;
}

size_t Proxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.Proxy)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string addr = 3;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // .com.fsmeeting.fsp.proto.common.ProxyType proxy_type = 2;
  if (this->proxy_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->proxy_type());
  }

  // int32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Proxy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.Proxy)
  GOOGLE_DCHECK_NE(&from, this);
  const Proxy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Proxy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.Proxy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.Proxy)
    MergeFrom(*source);
  }
}

void Proxy::MergeFrom(const Proxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.Proxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.addr().size() > 0) {
    set_addr(from.addr());
  }
  if (from.proxy_type() != 0) {
    set_proxy_type(from.proxy_type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Proxy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.Proxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proxy::CopyFrom(const Proxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.Proxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proxy::IsInitialized() const {
  return true;
}

void Proxy::Swap(Proxy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Proxy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Proxy::UnsafeArenaSwap(Proxy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Proxy::InternalSwap(Proxy* other) {
  id_.Swap(&other->id_);
  addr_.Swap(&other->addr_);
  std::swap(proxy_type_, other->proxy_type_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Proxy::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Proxy

// string id = 1;
void Proxy::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Proxy::id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Proxy.id)
  return id_.Get();
}
void Proxy::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Proxy.id)
}
void Proxy::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Proxy.id)
}
void Proxy::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Proxy.id)
}
::std::string* Proxy::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Proxy.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Proxy::release_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Proxy.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Proxy::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Proxy.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Proxy::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Proxy.id)
}
void Proxy::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Proxy.id)
}

// .com.fsmeeting.fsp.proto.common.ProxyType proxy_type = 2;
void Proxy::clear_proxy_type() {
  proxy_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::ProxyType Proxy::proxy_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Proxy.proxy_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ProxyType >(proxy_type_);
}
void Proxy::set_proxy_type(::com::fsmeeting::fsp::proto::common::ProxyType value) {
  
  proxy_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Proxy.proxy_type)
}

// string addr = 3;
void Proxy::clear_addr() {
  addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Proxy::addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Proxy.addr)
  return addr_.Get();
}
void Proxy::set_addr(const ::std::string& value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Proxy.addr)
}
void Proxy::set_addr(const char* value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Proxy.addr)
}
void Proxy::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Proxy.addr)
}
::std::string* Proxy::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Proxy.addr)
  return addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Proxy::release_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Proxy.addr)
  
  return addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Proxy::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Proxy.addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Proxy::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Proxy.addr)
}
void Proxy::unsafe_arena_set_allocated_addr(
    ::std::string* addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Proxy.addr)
}

// int32 port = 4;
void Proxy::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 Proxy::port() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Proxy.port)
  return port_;
}
void Proxy::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Proxy.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream::kStreamIdFieldNumber;
const int Stream::kStreamTypeFieldNumber;
const int Stream::kStreamPropertyFieldNumber;
const int Stream::kStreamPublishTokenFieldNumber;
const int Stream::kStreamSubscribeTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream::Stream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.Stream)
}
Stream::Stream(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.Stream)
}
Stream::Stream(const Stream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_publish_token().size() > 0) {
    stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_publish_token(),
      GetArenaNoVirtual());
  }
  stream_subscribe_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_subscribe_token().size() > 0) {
    stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_subscribe_token(),
      GetArenaNoVirtual());
  }
  ::memcpy(&stream_type_, &from.stream_type_,
    reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&stream_type_) + sizeof(stream_property_));
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.Stream)
}

void Stream::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_publish_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_subscribe_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stream_type_, 0, reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&stream_type_) + sizeof(stream_property_));
  _cached_size_ = 0;
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_publish_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_subscribe_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Stream::ArenaDtor(void* object) {
  Stream* _this = reinterpret_cast< Stream* >(object);
  (void)_this;
}
void Stream::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[1].descriptor;
}

const Stream& Stream::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stream* Stream::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Stream>(arena);
}

void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.Stream)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&stream_type_, 0, reinterpret_cast<char*>(&stream_property_) -
    reinterpret_cast<char*>(&stream_type_) + sizeof(stream_property_));
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.Stream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.Stream.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stream_type(static_cast< ::com::fsmeeting::fsp::proto::common::StreamType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stream_property(static_cast< ::com::fsmeeting::fsp::proto::common::StreamProperty >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_publish_token = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_publish_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_publish_token().data(), this->stream_publish_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.Stream.stream_publish_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_subscribe_token = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_subscribe_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.Stream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.Stream)
  return false;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.Stream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Stream.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  if (this->stream_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stream_type(), output);
  }

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
  if (this->stream_property() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->stream_property(), output);
  }

  // string stream_publish_token = 4;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Stream.stream_publish_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stream_publish_token(), output);
  }

  // string stream_subscribe_token = 5;
  if (this->stream_subscribe_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stream_subscribe_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.Stream)
}

::google::protobuf::uint8* Stream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.Stream)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Stream.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  if (this->stream_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stream_type(), target);
  }

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
  if (this->stream_property() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->stream_property(), target);
  }

  // string stream_publish_token = 4;
  if (this->stream_publish_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_publish_token().data(), this->stream_publish_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Stream.stream_publish_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stream_publish_token(), target);
  }

  // string stream_subscribe_token = 5;
  if (this->stream_subscribe_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_subscribe_token().data(), this->stream_subscribe_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stream_subscribe_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.Stream)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string stream_publish_token = 4;
  if (this->stream_publish_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_publish_token());
  }

  // string stream_subscribe_token = 5;
  if (this->stream_subscribe_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_subscribe_token());
  }

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  if (this->stream_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_type());
  }

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
  if (this->stream_property() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stream_property());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.Stream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.Stream)
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.stream_publish_token().size() > 0) {
    set_stream_publish_token(from.stream_publish_token());
  }
  if (from.stream_subscribe_token().size() > 0) {
    set_stream_subscribe_token(from.stream_subscribe_token());
  }
  if (from.stream_type() != 0) {
    set_stream_type(from.stream_type());
  }
  if (from.stream_property() != 0) {
    set_stream_property(from.stream_property());
  }
}

void Stream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::Swap(Stream* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Stream* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Stream::UnsafeArenaSwap(Stream* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Stream::InternalSwap(Stream* other) {
  stream_id_.Swap(&other->stream_id_);
  stream_publish_token_.Swap(&other->stream_publish_token_);
  stream_subscribe_token_.Swap(&other->stream_subscribe_token_);
  std::swap(stream_type_, other->stream_type_);
  std::swap(stream_property_, other->stream_property_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stream

// string stream_id = 1;
void Stream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Stream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_id)
  return stream_id_.Get();
}
void Stream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}
void Stream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}
void Stream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}
::std::string* Stream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Stream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Stream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Stream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Stream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Stream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Stream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}
void Stream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}

// .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
void Stream::clear_stream_type() {
  stream_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::StreamType Stream::stream_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamType >(stream_type_);
}
void Stream::set_stream_type(::com::fsmeeting::fsp::proto::common::StreamType value) {
  
  stream_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_type)
}

// .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
void Stream::clear_stream_property() {
  stream_property_ = 0;
}
::com::fsmeeting::fsp::proto::common::StreamProperty Stream::stream_property() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_property)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamProperty >(stream_property_);
}
void Stream::set_stream_property(::com::fsmeeting::fsp::proto::common::StreamProperty value) {
  
  stream_property_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_property)
}

// string stream_publish_token = 4;
void Stream::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Stream::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
  return stream_publish_token_.Get();
}
void Stream::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}
void Stream::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}
void Stream::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}
::std::string* Stream::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Stream::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Stream::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Stream::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}
void Stream::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}

// string stream_subscribe_token = 5;
void Stream::clear_stream_subscribe_token() {
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Stream::stream_subscribe_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
  return stream_subscribe_token_.Get();
}
void Stream::set_stream_subscribe_token(const ::std::string& value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}
void Stream::set_stream_subscribe_token(const char* value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}
void Stream::set_stream_subscribe_token(const char* value,
    size_t size) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}
::std::string* Stream::mutable_stream_subscribe_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
  return stream_subscribe_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Stream::release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
  
  return stream_subscribe_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Stream::unsafe_arena_release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_subscribe_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Stream::set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token) {
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_subscribe_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}
void Stream::unsafe_arena_set_allocated_stream_subscribe_token(
    ::std::string* stream_subscribe_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_subscribe_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamServer::kIdFieldNumber;
const int StreamServer::kAddrFieldNumber;
const int StreamServer::kPortFieldNumber;
const int StreamServer::kConnectStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamServer::StreamServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.StreamServer)
}
StreamServer::StreamServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.StreamServer)
}
StreamServer::StreamServer(const StreamServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr(),
      GetArenaNoVirtual());
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port(),
      GetArenaNoVirtual());
  }
  connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connect_str().size() > 0) {
    connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_str(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.StreamServer)
}

void StreamServer::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StreamServer::~StreamServer() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.StreamServer)
  SharedDtor();
}

void StreamServer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  port_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  connect_str_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void StreamServer::ArenaDtor(void* object) {
  StreamServer* _this = reinterpret_cast< StreamServer* >(object);
  (void)_this;
}
void StreamServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamServer::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[2].descriptor;
}

const StreamServer& StreamServer::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamServer* StreamServer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamServer>(arena);
}

void StreamServer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.StreamServer)
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  port_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  connect_str_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool StreamServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.StreamServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.StreamServer.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.StreamServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.StreamServer.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connect_str = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connect_str().data(), this->connect_str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.StreamServer.connect_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.StreamServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.StreamServer)
  return false;
#undef DO_
}

void StreamServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.StreamServer)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamServer.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addr(), output);
  }

  // string port = 3;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamServer.port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->port(), output);
  }

  // string connect_str = 4;
  if (this->connect_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connect_str().data(), this->connect_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamServer.connect_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->connect_str(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.StreamServer)
}

::google::protobuf::uint8* StreamServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.StreamServer)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamServer.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // string port = 3;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamServer.port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->port(), target);
  }

  // string connect_str = 4;
  if (this->connect_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connect_str().data(), this->connect_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamServer.connect_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->connect_str(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.StreamServer)
  return target;
}

size_t StreamServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.StreamServer)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // string port = 3;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port());
  }

  // string connect_str = 4;
  if (this->connect_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connect_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.StreamServer)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.StreamServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.StreamServer)
    MergeFrom(*source);
  }
}

void StreamServer::MergeFrom(const StreamServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.StreamServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.addr().size() > 0) {
    set_addr(from.addr());
  }
  if (from.port().size() > 0) {
    set_port(from.port());
  }
  if (from.connect_str().size() > 0) {
    set_connect_str(from.connect_str());
  }
}

void StreamServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.StreamServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamServer::CopyFrom(const StreamServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.StreamServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamServer::IsInitialized() const {
  return true;
}

void StreamServer::Swap(StreamServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamServer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamServer::UnsafeArenaSwap(StreamServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamServer::InternalSwap(StreamServer* other) {
  id_.Swap(&other->id_);
  addr_.Swap(&other->addr_);
  port_.Swap(&other->port_);
  connect_str_.Swap(&other->connect_str_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamServer::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamServer

// string id = 1;
void StreamServer::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamServer::id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamServer.id)
  return id_.Get();
}
void StreamServer::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamServer.id)
}
void StreamServer::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamServer.id)
}
void StreamServer::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamServer.id)
}
::std::string* StreamServer::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamServer.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamServer::release_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamServer.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamServer::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamServer.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamServer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.id)
}
void StreamServer::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.id)
}

// string addr = 2;
void StreamServer::clear_addr() {
  addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamServer::addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamServer.addr)
  return addr_.Get();
}
void StreamServer::set_addr(const ::std::string& value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}
void StreamServer::set_addr(const char* value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}
void StreamServer::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}
::std::string* StreamServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamServer.addr)
  return addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamServer::release_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamServer.addr)
  
  return addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamServer::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamServer.addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}
void StreamServer::unsafe_arena_set_allocated_addr(
    ::std::string* addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}

// string port = 3;
void StreamServer::clear_port() {
  port_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamServer::port() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamServer.port)
  return port_.Get();
}
void StreamServer::set_port(const ::std::string& value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamServer.port)
}
void StreamServer::set_port(const char* value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamServer.port)
}
void StreamServer::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamServer.port)
}
::std::string* StreamServer::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamServer.port)
  return port_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamServer::release_port() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamServer.port)
  
  return port_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamServer::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamServer.port)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return port_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamServer::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.port)
}
void StreamServer::unsafe_arena_set_allocated_port(
    ::std::string* port) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (port != NULL) {
    
  } else {
    
  }
  port_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      port, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.port)
}

// string connect_str = 4;
void StreamServer::clear_connect_str() {
  connect_str_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamServer::connect_str() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
  return connect_str_.Get();
}
void StreamServer::set_connect_str(const ::std::string& value) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}
void StreamServer::set_connect_str(const char* value) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}
void StreamServer::set_connect_str(const char* value,
    size_t size) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}
::std::string* StreamServer::mutable_connect_str() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
  return connect_str_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamServer::release_connect_str() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
  
  return connect_str_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamServer::unsafe_arena_release_connect_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return connect_str_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamServer::set_allocated_connect_str(::std::string* connect_str) {
  if (connect_str != NULL) {
    
  } else {
    
  }
  connect_str_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect_str,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}
void StreamServer::unsafe_arena_set_allocated_connect_str(
    ::std::string* connect_str) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (connect_str != NULL) {
    
  } else {
    
  }
  connect_str_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      connect_str, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kGroupIdFieldNumber;
const int Group::kGroupTokenFieldNumber;
const int Group::kGroupCheckCodeFieldNumber;
const int Group::kServerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.Group)
}
Group::Group(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.Group)
}
Group::Group(const Group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  group_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_token().size() > 0) {
    group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_token(),
      GetArenaNoVirtual());
  }
  group_check_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_check_code().size() > 0) {
    group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_check_code(),
      GetArenaNoVirtual());
  }
  server_type_ = from.server_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.Group)
}

void Group::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_check_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_type_ = 0;
  _cached_size_ = 0;
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_token_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_check_code_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Group::ArenaDtor(void* object) {
  Group* _this = reinterpret_cast< Group* >(object);
  (void)_this;
}
void Group::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[3].descriptor;
}

const Group& Group::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Group* Group::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Group>(arena);
}

void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.Group)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_check_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  server_type_ = 0;
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.Group.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_token = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_token().data(), this->group_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.Group.group_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_check_code = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_check_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_check_code().data(), this->group_check_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.Group.group_check_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.ServerType server_type = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_server_type(static_cast< ::com::fsmeeting::fsp::proto::common::ServerType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.Group)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Group.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string group_token = 2;
  if (this->group_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_token().data(), this->group_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Group.group_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_token(), output);
  }

  // string group_check_code = 3;
  if (this->group_check_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_check_code().data(), this->group_check_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Group.group_check_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group_check_code(), output);
  }

  // .com.fsmeeting.fsp.proto.common.ServerType server_type = 4;
  if (this->server_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->server_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.Group)
}

::google::protobuf::uint8* Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.Group)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Group.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string group_token = 2;
  if (this->group_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_token().data(), this->group_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Group.group_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_token(), target);
  }

  // string group_check_code = 3;
  if (this->group_check_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_check_code().data(), this->group_check_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.Group.group_check_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->group_check_code(), target);
  }

  // .com.fsmeeting.fsp.proto.common.ServerType server_type = 4;
  if (this->server_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->server_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.Group)
  return target;
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.Group)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string group_token = 2;
  if (this->group_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_token());
  }

  // string group_check_code = 3;
  if (this->group_check_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_check_code());
  }

  // .com.fsmeeting.fsp.proto.common.ServerType server_type = 4;
  if (this->server_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.Group)
  GOOGLE_DCHECK_NE(&from, this);
  const Group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.Group)
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.group_token().size() > 0) {
    set_group_token(from.group_token());
  }
  if (from.group_check_code().size() > 0) {
    set_group_check_code(from.group_check_code());
  }
  if (from.server_type() != 0) {
    set_server_type(from.server_type());
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Group* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Group::UnsafeArenaSwap(Group* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  group_id_.Swap(&other->group_id_);
  group_token_.Swap(&other->group_token_);
  group_check_code_.Swap(&other->group_check_code_);
  std::swap(server_type_, other->server_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Group

// string group_id = 1;
void Group::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Group::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Group.group_id)
  return group_id_.Get();
}
void Group::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Group.group_id)
}
void Group::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Group.group_id)
}
void Group::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Group.group_id)
}
::std::string* Group::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Group.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Group::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Group.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Group::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Group.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Group::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_id)
}
void Group::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_id)
}

// string group_token = 2;
void Group::clear_group_token() {
  group_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Group::group_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Group.group_token)
  return group_token_.Get();
}
void Group::set_group_token(const ::std::string& value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Group.group_token)
}
void Group::set_group_token(const char* value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Group.group_token)
}
void Group::set_group_token(const char* value,
    size_t size) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Group.group_token)
}
::std::string* Group::mutable_group_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Group.group_token)
  return group_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Group::release_group_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Group.group_token)
  
  return group_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Group::unsafe_arena_release_group_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Group.group_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Group::set_allocated_group_token(::std::string* group_token) {
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_token)
}
void Group::unsafe_arena_set_allocated_group_token(
    ::std::string* group_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_token)
}

// string group_check_code = 3;
void Group::clear_group_check_code() {
  group_check_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Group::group_check_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Group.group_check_code)
  return group_check_code_.Get();
}
void Group::set_group_check_code(const ::std::string& value) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}
void Group::set_group_check_code(const char* value) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}
void Group::set_group_check_code(const char* value,
    size_t size) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}
::std::string* Group::mutable_group_check_code() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Group.group_check_code)
  return group_check_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Group::release_group_check_code() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Group.group_check_code)
  
  return group_check_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Group::unsafe_arena_release_group_check_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Group.group_check_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_check_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Group::set_allocated_group_check_code(::std::string* group_check_code) {
  if (group_check_code != NULL) {
    
  } else {
    
  }
  group_check_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_check_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}
void Group::unsafe_arena_set_allocated_group_check_code(
    ::std::string* group_check_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_check_code != NULL) {
    
  } else {
    
  }
  group_check_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_check_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}

// .com.fsmeeting.fsp.proto.common.ServerType server_type = 4;
void Group::clear_server_type() {
  server_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::ServerType Group::server_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Group.server_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ServerType >(server_type_);
}
void Group::set_server_type(::com::fsmeeting::fsp::proto::common::ServerType value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Group.server_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupServer::kIdFieldNumber;
const int GroupServer::kAddrFieldNumber;
const int GroupServer::kPortFieldNumber;
const int GroupServer::kConnectStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupServer::GroupServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.GroupServer)
}
GroupServer::GroupServer(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.GroupServer)
}
GroupServer::GroupServer(const GroupServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id(),
      GetArenaNoVirtual());
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr(),
      GetArenaNoVirtual());
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port(),
      GetArenaNoVirtual());
  }
  connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connect_str().size() > 0) {
    connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_str(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.GroupServer)
}

void GroupServer::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GroupServer::~GroupServer() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.GroupServer)
  SharedDtor();
}

void GroupServer::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  port_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  connect_str_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GroupServer::ArenaDtor(void* object) {
  GroupServer* _this = reinterpret_cast< GroupServer* >(object);
  (void)_this;
}
void GroupServer::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GroupServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupServer::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[4].descriptor;
}

const GroupServer& GroupServer::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupServer* GroupServer::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GroupServer>(arena);
}

void GroupServer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.GroupServer)
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  port_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  connect_str_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GroupServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.GroupServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.GroupServer.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.GroupServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.GroupServer.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connect_str = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connect_str().data(), this->connect_str().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.GroupServer.connect_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.GroupServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.GroupServer)
  return false;
#undef DO_
}

void GroupServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.GroupServer)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.GroupServer.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.GroupServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addr(), output);
  }

  // string port = 3;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.GroupServer.port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->port(), output);
  }

  // string connect_str = 4;
  if (this->connect_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connect_str().data(), this->connect_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.GroupServer.connect_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->connect_str(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.GroupServer)
}

::google::protobuf::uint8* GroupServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.GroupServer)
  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.GroupServer.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.GroupServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // string port = 3;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.GroupServer.port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->port(), target);
  }

  // string connect_str = 4;
  if (this->connect_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connect_str().data(), this->connect_str().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.GroupServer.connect_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->connect_str(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.GroupServer)
  return target;
}

size_t GroupServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.GroupServer)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // string port = 3;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port());
  }

  // string connect_str = 4;
  if (this->connect_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connect_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.GroupServer)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.GroupServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.GroupServer)
    MergeFrom(*source);
  }
}

void GroupServer::MergeFrom(const GroupServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.GroupServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id().size() > 0) {
    set_id(from.id());
  }
  if (from.addr().size() > 0) {
    set_addr(from.addr());
  }
  if (from.port().size() > 0) {
    set_port(from.port());
  }
  if (from.connect_str().size() > 0) {
    set_connect_str(from.connect_str());
  }
}

void GroupServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.GroupServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupServer::CopyFrom(const GroupServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.GroupServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupServer::IsInitialized() const {
  return true;
}

void GroupServer::Swap(GroupServer* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GroupServer* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GroupServer::UnsafeArenaSwap(GroupServer* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GroupServer::InternalSwap(GroupServer* other) {
  id_.Swap(&other->id_);
  addr_.Swap(&other->addr_);
  port_.Swap(&other->port_);
  connect_str_.Swap(&other->connect_str_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupServer::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupServer

// string id = 1;
void GroupServer::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupServer::id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.GroupServer.id)
  return id_.Get();
}
void GroupServer::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.GroupServer.id)
}
void GroupServer::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.GroupServer.id)
}
void GroupServer::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.GroupServer.id)
}
::std::string* GroupServer::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.GroupServer.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupServer::release_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.GroupServer.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupServer::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.GroupServer.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupServer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.id)
}
void GroupServer::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.id)
}

// string addr = 2;
void GroupServer::clear_addr() {
  addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupServer::addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.GroupServer.addr)
  return addr_.Get();
}
void GroupServer::set_addr(const ::std::string& value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}
void GroupServer::set_addr(const char* value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}
void GroupServer::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}
::std::string* GroupServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.GroupServer.addr)
  return addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupServer::release_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.GroupServer.addr)
  
  return addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupServer::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.GroupServer.addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}
void GroupServer::unsafe_arena_set_allocated_addr(
    ::std::string* addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}

// string port = 3;
void GroupServer::clear_port() {
  port_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupServer::port() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.GroupServer.port)
  return port_.Get();
}
void GroupServer::set_port(const ::std::string& value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.GroupServer.port)
}
void GroupServer::set_port(const char* value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.GroupServer.port)
}
void GroupServer::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.GroupServer.port)
}
::std::string* GroupServer::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.GroupServer.port)
  return port_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupServer::release_port() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.GroupServer.port)
  
  return port_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupServer::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.GroupServer.port)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return port_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupServer::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.port)
}
void GroupServer::unsafe_arena_set_allocated_port(
    ::std::string* port) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (port != NULL) {
    
  } else {
    
  }
  port_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      port, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.port)
}

// string connect_str = 4;
void GroupServer::clear_connect_str() {
  connect_str_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupServer::connect_str() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
  return connect_str_.Get();
}
void GroupServer::set_connect_str(const ::std::string& value) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}
void GroupServer::set_connect_str(const char* value) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}
void GroupServer::set_connect_str(const char* value,
    size_t size) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}
::std::string* GroupServer::mutable_connect_str() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
  return connect_str_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupServer::release_connect_str() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
  
  return connect_str_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupServer::unsafe_arena_release_connect_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return connect_str_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupServer::set_allocated_connect_str(::std::string* connect_str) {
  if (connect_str != NULL) {
    
  } else {
    
  }
  connect_str_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect_str,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}
void GroupServer::unsafe_arena_set_allocated_connect_str(
    ::std::string* connect_str) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (connect_str != NULL) {
    
  } else {
    
  }
  connect_str_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      connect_str, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamData::kDataTypeFieldNumber;
const int StreamData::kLengthFieldNumber;
const int StreamData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamData::StreamData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.StreamData)
}
StreamData::StreamData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.StreamData)
}
StreamData::StreamData(const StreamData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  ::memcpy(&data_type_, &from.data_type_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&data_type_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.StreamData)
}

void StreamData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&data_type_) + sizeof(length_));
  _cached_size_ = 0;
}

StreamData::~StreamData() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.StreamData)
  SharedDtor();
}

void StreamData::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void StreamData::ArenaDtor(void* object) {
  StreamData* _this = reinterpret_cast< StreamData* >(object);
  (void)_this;
}
void StreamData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamData::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[5].descriptor;
}

const StreamData& StreamData::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamData* StreamData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamData>(arena);
}

void StreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.StreamData)
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&data_type_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&data_type_) + sizeof(length_));
}

bool StreamData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.StreamData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.DataType data_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_type(static_cast< ::com::fsmeeting::fsp::proto::common::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.StreamData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.StreamData)
  return false;
#undef DO_
}

void StreamData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.StreamData)
  // .com.fsmeeting.fsp.proto.common.DataType data_type = 1;
  if (this->data_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->data_type(), output);
  }

  // int32 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.StreamData)
}

::google::protobuf::uint8* StreamData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.StreamData)
  // .com.fsmeeting.fsp.proto.common.DataType data_type = 1;
  if (this->data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->data_type(), target);
  }

  // int32 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.StreamData)
  return target;
}

size_t StreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.StreamData)
  size_t total_size = 0;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .com.fsmeeting.fsp.proto.common.DataType data_type = 1;
  if (this->data_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
  }

  // int32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.StreamData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.StreamData)
    MergeFrom(*source);
  }
}

void StreamData::MergeFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.StreamData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {
    set_data(from.data());
  }
  if (from.data_type() != 0) {
    set_data_type(from.data_type());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void StreamData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamData::CopyFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamData::IsInitialized() const {
  return true;
}

void StreamData::Swap(StreamData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamData* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamData::UnsafeArenaSwap(StreamData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamData::InternalSwap(StreamData* other) {
  data_.Swap(&other->data_);
  std::swap(data_type_, other->data_type_);
  std::swap(length_, other->length_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamData::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamData

// .com.fsmeeting.fsp.proto.common.DataType data_type = 1;
void StreamData::clear_data_type() {
  data_type_ = 0;
}
::com::fsmeeting::fsp::proto::common::DataType StreamData::data_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamData.data_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::DataType >(data_type_);
}
void StreamData::set_data_type(::com::fsmeeting::fsp::proto::common::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamData.data_type)
}

// int32 length = 2;
void StreamData::clear_length() {
  length_ = 0;
}
::google::protobuf::int32 StreamData::length() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamData.length)
  return length_;
}
void StreamData::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamData.length)
}

// bytes data = 3;
void StreamData::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamData::data() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamData.data)
  return data_.Get();
}
void StreamData::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamData.data)
}
void StreamData::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamData.data)
}
void StreamData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamData.data)
}
::std::string* StreamData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamData.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamData::release_data() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamData.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamData.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamData.data)
}
void StreamData::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonResponse::kResponseCodeFieldNumber;
const int CommonResponse::kResponseMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonResponse::CommonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.CommonResponse)
}
CommonResponse::CommonResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.CommonResponse)
}
CommonResponse::CommonResponse(const CommonResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.response_msg().size() > 0) {
    response_msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_msg(),
      GetArenaNoVirtual());
  }
  response_code_ = from.response_code_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.CommonResponse)
}

void CommonResponse::SharedCtor() {
  response_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_code_ = 0;
  _cached_size_ = 0;
}

CommonResponse::~CommonResponse() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.CommonResponse)
  SharedDtor();
}

void CommonResponse::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  response_msg_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CommonResponse::ArenaDtor(void* object) {
  CommonResponse* _this = reinterpret_cast< CommonResponse* >(object);
  (void)_this;
}
void CommonResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonResponse::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[6].descriptor;
}

const CommonResponse& CommonResponse::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonResponse* CommonResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CommonResponse>(arena);
}

void CommonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.CommonResponse)
  response_msg_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  response_code_ = 0;
}

bool CommonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.CommonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.ResponseCode response_code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_response_code(static_cast< ::com::fsmeeting::fsp::proto::common::ResponseCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string response_msg = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_msg().data(), this->response_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.CommonResponse.response_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.CommonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.CommonResponse)
  return false;
#undef DO_
}

void CommonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.CommonResponse)
  // .com.fsmeeting.fsp.proto.common.ResponseCode response_code = 1;
  if (this->response_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response_code(), output);
  }

  // string response_msg = 2;
  if (this->response_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_msg().data(), this->response_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.CommonResponse.response_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.CommonResponse)
}

::google::protobuf::uint8* CommonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.CommonResponse)
  // .com.fsmeeting.fsp.proto.common.ResponseCode response_code = 1;
  if (this->response_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response_code(), target);
  }

  // string response_msg = 2;
  if (this->response_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_msg().data(), this->response_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.CommonResponse.response_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.CommonResponse)
  return target;
}

size_t CommonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.CommonResponse)
  size_t total_size = 0;

  // string response_msg = 2;
  if (this->response_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_msg());
  }

  // .com.fsmeeting.fsp.proto.common.ResponseCode response_code = 1;
  if (this->response_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.CommonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.CommonResponse)
    MergeFrom(*source);
  }
}

void CommonResponse::MergeFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.CommonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.response_msg().size() > 0) {
    set_response_msg(from.response_msg());
  }
  if (from.response_code() != 0) {
    set_response_code(from.response_code());
  }
}

void CommonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResponse::CopyFrom(const CommonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.CommonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResponse::IsInitialized() const {
  return true;
}

void CommonResponse::Swap(CommonResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommonResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommonResponse::UnsafeArenaSwap(CommonResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommonResponse::InternalSwap(CommonResponse* other) {
  response_msg_.Swap(&other->response_msg_);
  std::swap(response_code_, other->response_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonResponse::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonResponse

// .com.fsmeeting.fsp.proto.common.ResponseCode response_code = 1;
void CommonResponse::clear_response_code() {
  response_code_ = 0;
}
::com::fsmeeting::fsp::proto::common::ResponseCode CommonResponse::response_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonResponse.response_code)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ResponseCode >(response_code_);
}
void CommonResponse::set_response_code(::com::fsmeeting::fsp::proto::common::ResponseCode value) {
  
  response_code_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonResponse.response_code)
}

// string response_msg = 2;
void CommonResponse::clear_response_msg() {
  response_msg_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CommonResponse::response_msg() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
  return response_msg_.Get();
}
void CommonResponse::set_response_msg(const ::std::string& value) {
  
  response_msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}
void CommonResponse::set_response_msg(const char* value) {
  
  response_msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}
void CommonResponse::set_response_msg(const char* value,
    size_t size) {
  
  response_msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}
::std::string* CommonResponse::mutable_response_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
  return response_msg_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommonResponse::release_response_msg() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
  
  return response_msg_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommonResponse::unsafe_arena_release_response_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return response_msg_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CommonResponse::set_allocated_response_msg(::std::string* response_msg) {
  if (response_msg != NULL) {
    
  } else {
    
  }
  response_msg_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_msg,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}
void CommonResponse::unsafe_arena_set_allocated_response_msg(
    ::std::string* response_msg) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (response_msg != NULL) {
    
  } else {
    
  }
  response_msg_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      response_msg, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamDestroied::kStreamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamDestroied::NotifyStreamDestroied()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
}
NotifyStreamDestroied::NotifyStreamDestroied(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
}
NotifyStreamDestroied::NotifyStreamDestroied(const NotifyStreamDestroied& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
}

void NotifyStreamDestroied::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NotifyStreamDestroied::~NotifyStreamDestroied() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  SharedDtor();
}

void NotifyStreamDestroied::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void NotifyStreamDestroied::ArenaDtor(void* object) {
  NotifyStreamDestroied* _this = reinterpret_cast< NotifyStreamDestroied* >(object);
  (void)_this;
}
void NotifyStreamDestroied::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamDestroied::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamDestroied::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[7].descriptor;
}

const NotifyStreamDestroied& NotifyStreamDestroied::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamDestroied* NotifyStreamDestroied::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamDestroied>(arena);
}

void NotifyStreamDestroied::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool NotifyStreamDestroied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  return false;
#undef DO_
}

void NotifyStreamDestroied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
}

::google::protobuf::uint8* NotifyStreamDestroied::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  return target;
}

size_t NotifyStreamDestroied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamDestroied::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamDestroied* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamDestroied>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
    MergeFrom(*source);
  }
}

void NotifyStreamDestroied::MergeFrom(const NotifyStreamDestroied& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
}

void NotifyStreamDestroied::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamDestroied::CopyFrom(const NotifyStreamDestroied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamDestroied::IsInitialized() const {
  return true;
}

void NotifyStreamDestroied::Swap(NotifyStreamDestroied* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamDestroied* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamDestroied::UnsafeArenaSwap(NotifyStreamDestroied* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamDestroied::InternalSwap(NotifyStreamDestroied* other) {
  stream_id_.Swap(&other->stream_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamDestroied::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamDestroied

// string stream_id = 1;
void NotifyStreamDestroied::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& NotifyStreamDestroied::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
  return stream_id_.Get();
}
void NotifyStreamDestroied::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}
void NotifyStreamDestroied::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}
void NotifyStreamDestroied::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}
::std::string* NotifyStreamDestroied::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamDestroied::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* NotifyStreamDestroied::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void NotifyStreamDestroied::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}
void NotifyStreamDestroied::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void NotifyStreamDestroiedRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamDestroiedRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamDestroiedRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void NotifyStreamDestroiedRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void NotifyStreamDestroiedRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyStreamDestroiedRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyStreamDestroiedRsp::NotifyStreamDestroiedRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
}
NotifyStreamDestroiedRsp::NotifyStreamDestroiedRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
}
NotifyStreamDestroiedRsp::NotifyStreamDestroiedRsp(const NotifyStreamDestroiedRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
}

void NotifyStreamDestroiedRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

NotifyStreamDestroiedRsp::~NotifyStreamDestroiedRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  SharedDtor();
}

void NotifyStreamDestroiedRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void NotifyStreamDestroiedRsp::ArenaDtor(void* object) {
  NotifyStreamDestroiedRsp* _this = reinterpret_cast< NotifyStreamDestroiedRsp* >(object);
  (void)_this;
}
void NotifyStreamDestroiedRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void NotifyStreamDestroiedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyStreamDestroiedRsp::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[8].descriptor;
}

const NotifyStreamDestroiedRsp& NotifyStreamDestroiedRsp::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

NotifyStreamDestroiedRsp* NotifyStreamDestroiedRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<NotifyStreamDestroiedRsp>(arena);
}

void NotifyStreamDestroiedRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool NotifyStreamDestroiedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  return false;
#undef DO_
}

void NotifyStreamDestroiedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
}

::google::protobuf::uint8* NotifyStreamDestroiedRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  return target;
}

size_t NotifyStreamDestroiedRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyStreamDestroiedRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const NotifyStreamDestroiedRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyStreamDestroiedRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
    MergeFrom(*source);
  }
}

void NotifyStreamDestroiedRsp::MergeFrom(const NotifyStreamDestroiedRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void NotifyStreamDestroiedRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyStreamDestroiedRsp::CopyFrom(const NotifyStreamDestroiedRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyStreamDestroiedRsp::IsInitialized() const {
  return true;
}

void NotifyStreamDestroiedRsp::Swap(NotifyStreamDestroiedRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    NotifyStreamDestroiedRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void NotifyStreamDestroiedRsp::UnsafeArenaSwap(NotifyStreamDestroiedRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void NotifyStreamDestroiedRsp::InternalSwap(NotifyStreamDestroiedRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyStreamDestroiedRsp::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyStreamDestroiedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool NotifyStreamDestroiedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void NotifyStreamDestroiedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamDestroiedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamDestroiedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamDestroiedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void NotifyStreamDestroiedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSourceChanged::kStreamIdFieldNumber;
const int StreamSourceChanged::kSourceInstanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSourceChanged::StreamSourceChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
}
StreamSourceChanged::StreamSourceChanged(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
}
StreamSourceChanged::StreamSourceChanged(const StreamSourceChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  source_instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.source_instance().size() > 0) {
    source_instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_instance(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
}

void StreamSourceChanged::SharedCtor() {
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_instance_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StreamSourceChanged::~StreamSourceChanged() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  SharedDtor();
}

void StreamSourceChanged::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  source_instance_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void StreamSourceChanged::ArenaDtor(void* object) {
  StreamSourceChanged* _this = reinterpret_cast< StreamSourceChanged* >(object);
  (void)_this;
}
void StreamSourceChanged::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamSourceChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSourceChanged::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[9].descriptor;
}

const StreamSourceChanged& StreamSourceChanged::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamSourceChanged* StreamSourceChanged::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamSourceChanged>(arena);
}

void StreamSourceChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_instance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool StreamSourceChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string stream_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_instance = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_instance()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_instance().data(), this->source_instance().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  return false;
#undef DO_
}

void StreamSourceChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stream_id(), output);
  }

  // string source_instance = 2;
  if (this->source_instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_instance().data(), this->source_instance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_instance(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
}

::google::protobuf::uint8* StreamSourceChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stream_id(), target);
  }

  // string source_instance = 2;
  if (this->source_instance().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_instance().data(), this->source_instance().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_instance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  return target;
}

size_t StreamSourceChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  size_t total_size = 0;

  // string stream_id = 1;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string source_instance = 2;
  if (this->source_instance().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_instance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSourceChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSourceChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSourceChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
    MergeFrom(*source);
  }
}

void StreamSourceChanged::MergeFrom(const StreamSourceChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.source_instance().size() > 0) {
    set_source_instance(from.source_instance());
  }
}

void StreamSourceChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSourceChanged::CopyFrom(const StreamSourceChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSourceChanged::IsInitialized() const {
  return true;
}

void StreamSourceChanged::Swap(StreamSourceChanged* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamSourceChanged* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamSourceChanged::UnsafeArenaSwap(StreamSourceChanged* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamSourceChanged::InternalSwap(StreamSourceChanged* other) {
  stream_id_.Swap(&other->stream_id_);
  source_instance_.Swap(&other->source_instance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSourceChanged::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSourceChanged

// string stream_id = 1;
void StreamSourceChanged::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamSourceChanged::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
  return stream_id_.Get();
}
void StreamSourceChanged::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}
void StreamSourceChanged::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}
void StreamSourceChanged::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}
::std::string* StreamSourceChanged::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSourceChanged::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSourceChanged::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamSourceChanged::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}
void StreamSourceChanged::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}

// string source_instance = 2;
void StreamSourceChanged::clear_source_instance() {
  source_instance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamSourceChanged::source_instance() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
  return source_instance_.Get();
}
void StreamSourceChanged::set_source_instance(const ::std::string& value) {
  
  source_instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}
void StreamSourceChanged::set_source_instance(const char* value) {
  
  source_instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}
void StreamSourceChanged::set_source_instance(const char* value,
    size_t size) {
  
  source_instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}
::std::string* StreamSourceChanged::mutable_source_instance() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
  return source_instance_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSourceChanged::release_source_instance() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
  
  return source_instance_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamSourceChanged::unsafe_arena_release_source_instance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_instance_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamSourceChanged::set_allocated_source_instance(::std::string* source_instance) {
  if (source_instance != NULL) {
    
  } else {
    
  }
  source_instance_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_instance,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}
void StreamSourceChanged::unsafe_arena_set_allocated_source_instance(
    ::std::string* source_instance) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_instance != NULL) {
    
  } else {
    
  }
  source_instance_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_instance, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StreamSourceChangedRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSourceChangedRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSourceChangedRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void StreamSourceChangedRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void StreamSourceChangedRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamSourceChangedRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamSourceChangedRsp::StreamSourceChangedRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
}
StreamSourceChangedRsp::StreamSourceChangedRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
}
StreamSourceChangedRsp::StreamSourceChangedRsp(const StreamSourceChangedRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
}

void StreamSourceChangedRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

StreamSourceChangedRsp::~StreamSourceChangedRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  SharedDtor();
}

void StreamSourceChangedRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void StreamSourceChangedRsp::ArenaDtor(void* object) {
  StreamSourceChangedRsp* _this = reinterpret_cast< StreamSourceChangedRsp* >(object);
  (void)_this;
}
void StreamSourceChangedRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamSourceChangedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamSourceChangedRsp::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[10].descriptor;
}

const StreamSourceChangedRsp& StreamSourceChangedRsp::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamSourceChangedRsp* StreamSourceChangedRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamSourceChangedRsp>(arena);
}

void StreamSourceChangedRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool StreamSourceChangedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  return false;
#undef DO_
}

void StreamSourceChangedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
}

::google::protobuf::uint8* StreamSourceChangedRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  return target;
}

size_t StreamSourceChangedRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamSourceChangedRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamSourceChangedRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamSourceChangedRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
    MergeFrom(*source);
  }
}

void StreamSourceChangedRsp::MergeFrom(const StreamSourceChangedRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void StreamSourceChangedRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamSourceChangedRsp::CopyFrom(const StreamSourceChangedRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamSourceChangedRsp::IsInitialized() const {
  return true;
}

void StreamSourceChangedRsp::Swap(StreamSourceChangedRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamSourceChangedRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamSourceChangedRsp::UnsafeArenaSwap(StreamSourceChangedRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamSourceChangedRsp::InternalSwap(StreamSourceChangedRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamSourceChangedRsp::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamSourceChangedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool StreamSourceChangedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void StreamSourceChangedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamSourceChangedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSourceChangedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSourceChangedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void StreamSourceChangedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonInvokeInfo::kTraceIdFieldNumber;
const int CommonInvokeInfo::kInvokeOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonInvokeInfo::CommonInvokeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
}
CommonInvokeInfo::CommonInvokeInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
}
CommonInvokeInfo::CommonInvokeInfo(const CommonInvokeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trace_id().size() > 0) {
    trace_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id(),
      GetArenaNoVirtual());
  }
  invoke_order_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.invoke_order().size() > 0) {
    invoke_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invoke_order(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
}

void CommonInvokeInfo::SharedCtor() {
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invoke_order_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CommonInvokeInfo::~CommonInvokeInfo() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  SharedDtor();
}

void CommonInvokeInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  trace_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  invoke_order_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CommonInvokeInfo::ArenaDtor(void* object) {
  CommonInvokeInfo* _this = reinterpret_cast< CommonInvokeInfo* >(object);
  (void)_this;
}
void CommonInvokeInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommonInvokeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonInvokeInfo::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[11].descriptor;
}

const CommonInvokeInfo& CommonInvokeInfo::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonInvokeInfo* CommonInvokeInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CommonInvokeInfo>(arena);
}

void CommonInvokeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  trace_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  invoke_order_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CommonInvokeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string trace_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trace_id().data(), this->trace_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string invoke_order = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoke_order()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->invoke_order().data(), this->invoke_order().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  return false;
#undef DO_
}

void CommonInvokeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  // string trace_id = 1;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), this->trace_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->trace_id(), output);
  }

  // string invoke_order = 2;
  if (this->invoke_order().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->invoke_order().data(), this->invoke_order().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invoke_order(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
}

::google::protobuf::uint8* CommonInvokeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  // string trace_id = 1;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), this->trace_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trace_id(), target);
  }

  // string invoke_order = 2;
  if (this->invoke_order().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->invoke_order().data(), this->invoke_order().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invoke_order(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  return target;
}

size_t CommonInvokeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  size_t total_size = 0;

  // string trace_id = 1;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trace_id());
  }

  // string invoke_order = 2;
  if (this->invoke_order().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->invoke_order());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonInvokeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonInvokeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonInvokeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
    MergeFrom(*source);
  }
}

void CommonInvokeInfo::MergeFrom(const CommonInvokeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.trace_id().size() > 0) {
    set_trace_id(from.trace_id());
  }
  if (from.invoke_order().size() > 0) {
    set_invoke_order(from.invoke_order());
  }
}

void CommonInvokeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonInvokeInfo::CopyFrom(const CommonInvokeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonInvokeInfo::IsInitialized() const {
  return true;
}

void CommonInvokeInfo::Swap(CommonInvokeInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommonInvokeInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommonInvokeInfo::UnsafeArenaSwap(CommonInvokeInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommonInvokeInfo::InternalSwap(CommonInvokeInfo* other) {
  trace_id_.Swap(&other->trace_id_);
  invoke_order_.Swap(&other->invoke_order_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonInvokeInfo::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonInvokeInfo

// string trace_id = 1;
void CommonInvokeInfo::clear_trace_id() {
  trace_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CommonInvokeInfo::trace_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
  return trace_id_.Get();
}
void CommonInvokeInfo::set_trace_id(const ::std::string& value) {
  
  trace_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}
void CommonInvokeInfo::set_trace_id(const char* value) {
  
  trace_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}
void CommonInvokeInfo::set_trace_id(const char* value,
    size_t size) {
  
  trace_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}
::std::string* CommonInvokeInfo::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
  return trace_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommonInvokeInfo::release_trace_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
  
  return trace_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommonInvokeInfo::unsafe_arena_release_trace_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return trace_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CommonInvokeInfo::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}
void CommonInvokeInfo::unsafe_arena_set_allocated_trace_id(
    ::std::string* trace_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trace_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}

// string invoke_order = 2;
void CommonInvokeInfo::clear_invoke_order() {
  invoke_order_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CommonInvokeInfo::invoke_order() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
  return invoke_order_.Get();
}
void CommonInvokeInfo::set_invoke_order(const ::std::string& value) {
  
  invoke_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}
void CommonInvokeInfo::set_invoke_order(const char* value) {
  
  invoke_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}
void CommonInvokeInfo::set_invoke_order(const char* value,
    size_t size) {
  
  invoke_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}
::std::string* CommonInvokeInfo::mutable_invoke_order() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
  return invoke_order_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommonInvokeInfo::release_invoke_order() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
  
  return invoke_order_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommonInvokeInfo::unsafe_arena_release_invoke_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return invoke_order_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CommonInvokeInfo::set_allocated_invoke_order(::std::string* invoke_order) {
  if (invoke_order != NULL) {
    
  } else {
    
  }
  invoke_order_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invoke_order,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}
void CommonInvokeInfo::unsafe_arena_set_allocated_invoke_order(
    ::std::string* invoke_order) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (invoke_order != NULL) {
    
  } else {
    
  }
  invoke_order_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      invoke_order, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BillInfo::kAppIdFieldNumber;
const int BillInfo::kGroupIdFieldNumber;
const int BillInfo::kStreamIdFieldNumber;
const int BillInfo::kClientIdFieldNumber;
const int BillInfo::kServiceIdFieldNumber;
const int BillInfo::kTransferTypeFieldNumber;
const int BillInfo::kBytesFieldNumber;
const int BillInfo::kTotalTimeFieldNumber;
const int BillInfo::kStartTimeFieldNumber;
const int BillInfo::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BillInfo::BillInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.BillInfo)
}
BillInfo::BillInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.BillInfo)
}
BillInfo::BillInfo(const BillInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stream_id().size() > 0) {
    stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_id(),
      GetArenaNoVirtual());
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id(),
      GetArenaNoVirtual());
  }
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_time().size() > 0) {
    start_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_time(),
      GetArenaNoVirtual());
  }
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.end_time().size() > 0) {
    end_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.end_time(),
      GetArenaNoVirtual());
  }
  ::memcpy(&service_id_, &from.service_id_,
    reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&service_id_) + sizeof(total_time_));
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.BillInfo)
}

void BillInfo::SharedCtor() {
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&service_id_, 0, reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&service_id_) + sizeof(total_time_));
  _cached_size_ = 0;
}

BillInfo::~BillInfo() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.BillInfo)
  SharedDtor();
}

void BillInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  stream_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  start_time_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  end_time_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void BillInfo::ArenaDtor(void* object) {
  BillInfo* _this = reinterpret_cast< BillInfo* >(object);
  (void)_this;
}
void BillInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillInfo::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[12].descriptor;
}

const BillInfo& BillInfo::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

BillInfo* BillInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BillInfo>(arena);
}

void BillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.BillInfo)
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  start_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  end_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&service_id_, 0, reinterpret_cast<char*>(&total_time_) -
    reinterpret_cast<char*>(&service_id_) + sizeof(total_time_));
}

bool BillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.BillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string app_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.BillInfo.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.BillInfo.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stream_id().data(), this->stream_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.BillInfo.stream_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.BillInfo.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 service_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &service_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 transfer_type = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 bytes = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_time = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_time = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.BillInfo.start_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string end_time = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.BillInfo.end_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.BillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.BillInfo)
  return false;
#undef DO_
}

void BillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.BillInfo)
  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->app_id(), output);
  }

  // string group_id = 2;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_id(), output);
  }

  // string stream_id = 3;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.stream_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stream_id(), output);
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_id(), output);
  }

  // int32 service_id = 5;
  if (this->service_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->service_id(), output);
  }

  // int32 transfer_type = 6;
  if (this->transfer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->transfer_type(), output);
  }

  // uint64 bytes = 7;
  if (this->bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes(), output);
  }

  // uint32 total_time = 8;
  if (this->total_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_time(), output);
  }

  // string start_time = 9;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.start_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->start_time(), output);
  }

  // string end_time = 10;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.end_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->end_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.BillInfo)
}

::google::protobuf::uint8* BillInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.BillInfo)
  // string app_id = 1;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_id(), target);
  }

  // string group_id = 2;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_id(), target);
  }

  // string stream_id = 3;
  if (this->stream_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stream_id().data(), this->stream_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.stream_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stream_id(), target);
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_id(), target);
  }

  // int32 service_id = 5;
  if (this->service_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->service_id(), target);
  }

  // int32 transfer_type = 6;
  if (this->transfer_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->transfer_type(), target);
  }

  // uint64 bytes = 7;
  if (this->bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->bytes(), target);
  }

  // uint32 total_time = 8;
  if (this->total_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_time(), target);
  }

  // string start_time = 9;
  if (this->start_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.start_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->start_time(), target);
  }

  // string end_time = 10;
  if (this->end_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BillInfo.end_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->end_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.BillInfo)
  return target;
}

size_t BillInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.BillInfo)
  size_t total_size = 0;

  // string app_id = 1;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string group_id = 2;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string stream_id = 3;
  if (this->stream_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stream_id());
  }

  // string client_id = 4;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // string start_time = 9;
  if (this->start_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_time());
  }

  // string end_time = 10;
  if (this->end_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->end_time());
  }

  // int32 service_id = 5;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->service_id());
  }

  // int32 transfer_type = 6;
  if (this->transfer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->transfer_type());
  }

  // uint64 bytes = 7;
  if (this->bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes());
  }

  // uint32 total_time = 8;
  if (this->total_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.BillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BillInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BillInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.BillInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.BillInfo)
    MergeFrom(*source);
  }
}

void BillInfo::MergeFrom(const BillInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.BillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.stream_id().size() > 0) {
    set_stream_id(from.stream_id());
  }
  if (from.client_id().size() > 0) {
    set_client_id(from.client_id());
  }
  if (from.start_time().size() > 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time().size() > 0) {
    set_end_time(from.end_time());
  }
  if (from.service_id() != 0) {
    set_service_id(from.service_id());
  }
  if (from.transfer_type() != 0) {
    set_transfer_type(from.transfer_type());
  }
  if (from.bytes() != 0) {
    set_bytes(from.bytes());
  }
  if (from.total_time() != 0) {
    set_total_time(from.total_time());
  }
}

void BillInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.BillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillInfo::CopyFrom(const BillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.BillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillInfo::IsInitialized() const {
  return true;
}

void BillInfo::Swap(BillInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BillInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BillInfo::UnsafeArenaSwap(BillInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BillInfo::InternalSwap(BillInfo* other) {
  app_id_.Swap(&other->app_id_);
  group_id_.Swap(&other->group_id_);
  stream_id_.Swap(&other->stream_id_);
  client_id_.Swap(&other->client_id_);
  start_time_.Swap(&other->start_time_);
  end_time_.Swap(&other->end_time_);
  std::swap(service_id_, other->service_id_);
  std::swap(transfer_type_, other->transfer_type_);
  std::swap(bytes_, other->bytes_);
  std::swap(total_time_, other->total_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BillInfo::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BillInfo

// string app_id = 1;
void BillInfo::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BillInfo::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
  return app_id_.Get();
}
void BillInfo::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}
void BillInfo::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}
void BillInfo::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}
::std::string* BillInfo::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BillInfo::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}
void BillInfo::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}

// string group_id = 2;
void BillInfo::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BillInfo::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
  return group_id_.Get();
}
void BillInfo::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}
void BillInfo::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}
void BillInfo::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}
::std::string* BillInfo::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BillInfo::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}
void BillInfo::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}

// string stream_id = 3;
void BillInfo::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BillInfo::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
  return stream_id_.Get();
}
void BillInfo::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}
void BillInfo::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}
void BillInfo::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}
::std::string* BillInfo::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BillInfo::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}
void BillInfo::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}

// string client_id = 4;
void BillInfo::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BillInfo::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
  return client_id_.Get();
}
void BillInfo::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}
void BillInfo::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}
void BillInfo::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}
::std::string* BillInfo::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BillInfo::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}
void BillInfo::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}

// int32 service_id = 5;
void BillInfo::clear_service_id() {
  service_id_ = 0;
}
::google::protobuf::int32 BillInfo::service_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.service_id)
  return service_id_;
}
void BillInfo::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.service_id)
}

// int32 transfer_type = 6;
void BillInfo::clear_transfer_type() {
  transfer_type_ = 0;
}
::google::protobuf::int32 BillInfo::transfer_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.transfer_type)
  return transfer_type_;
}
void BillInfo::set_transfer_type(::google::protobuf::int32 value) {
  
  transfer_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.transfer_type)
}

// uint64 bytes = 7;
void BillInfo::clear_bytes() {
  bytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 BillInfo::bytes() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.bytes)
  return bytes_;
}
void BillInfo::set_bytes(::google::protobuf::uint64 value) {
  
  bytes_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.bytes)
}

// uint32 total_time = 8;
void BillInfo::clear_total_time() {
  total_time_ = 0u;
}
::google::protobuf::uint32 BillInfo::total_time() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.total_time)
  return total_time_;
}
void BillInfo::set_total_time(::google::protobuf::uint32 value) {
  
  total_time_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.total_time)
}

// string start_time = 9;
void BillInfo::clear_start_time() {
  start_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BillInfo::start_time() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
  return start_time_.Get();
}
void BillInfo::set_start_time(const ::std::string& value) {
  
  start_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}
void BillInfo::set_start_time(const char* value) {
  
  start_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}
void BillInfo::set_start_time(const char* value,
    size_t size) {
  
  start_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}
::std::string* BillInfo::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
  return start_time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::release_start_time() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
  
  return start_time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return start_time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BillInfo::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}
void BillInfo::unsafe_arena_set_allocated_start_time(
    ::std::string* start_time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      start_time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}

// string end_time = 10;
void BillInfo::clear_end_time() {
  end_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BillInfo::end_time() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
  return end_time_.Get();
}
void BillInfo::set_end_time(const ::std::string& value) {
  
  end_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}
void BillInfo::set_end_time(const char* value) {
  
  end_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}
void BillInfo::set_end_time(const char* value,
    size_t size) {
  
  end_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}
::std::string* BillInfo::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
  return end_time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::release_end_time() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
  
  return end_time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BillInfo::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return end_time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BillInfo::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}
void BillInfo::unsafe_arena_set_allocated_end_time(
    ::std::string* end_time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      end_time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BroadcastInfo::kGroupIdFieldNumber;
const int BroadcastInfo::kUserIdFieldNumber;
const int BroadcastInfo::kMediaTypeFieldNumber;
const int BroadcastInfo::kMediaIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BroadcastInfo::BroadcastInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.BroadcastInfo)
}
BroadcastInfo::BroadcastInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.BroadcastInfo)
}
BroadcastInfo::BroadcastInfo(const BroadcastInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_id().size() > 0) {
    user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id(),
      GetArenaNoVirtual());
  }
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.media_id().size() > 0) {
    media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.media_id(),
      GetArenaNoVirtual());
  }
  media_type_ = from.media_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.BroadcastInfo)
}

void BroadcastInfo::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  _cached_size_ = 0;
}

BroadcastInfo::~BroadcastInfo() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  SharedDtor();
}

void BroadcastInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  user_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  media_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void BroadcastInfo::ArenaDtor(void* object) {
  BroadcastInfo* _this = reinterpret_cast< BroadcastInfo* >(object);
  (void)_this;
}
void BroadcastInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BroadcastInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastInfo::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[13].descriptor;
}

const BroadcastInfo& BroadcastInfo::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

BroadcastInfo* BroadcastInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BroadcastInfo>(arena);
}

void BroadcastInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_type_ = 0;
}

bool BroadcastInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 media_type = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_media_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->media_id().data(), this->media_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  return false;
#undef DO_
}

void BroadcastInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_id(), output);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // int32 media_type = 3;
  if (this->media_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->media_type(), output);
  }

  // string media_id = 4;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->media_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.BroadcastInfo)
}

::google::protobuf::uint8* BroadcastInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  // string group_id = 1;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_id(), target);
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_id(), target);
  }

  // int32 media_type = 3;
  if (this->media_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->media_type(), target);
  }

  // string media_id = 4;
  if (this->media_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->media_id().data(), this->media_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->media_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  return target;
}

size_t BroadcastInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  size_t total_size = 0;

  // string group_id = 1;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string user_id = 2;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // string media_id = 4;
  if (this->media_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->media_id());
  }

  // int32 media_type = 3;
  if (this->media_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BroadcastInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BroadcastInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.BroadcastInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.BroadcastInfo)
    MergeFrom(*source);
  }
}

void BroadcastInfo::MergeFrom(const BroadcastInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.user_id().size() > 0) {
    set_user_id(from.user_id());
  }
  if (from.media_id().size() > 0) {
    set_media_id(from.media_id());
  }
  if (from.media_type() != 0) {
    set_media_type(from.media_type());
  }
}

void BroadcastInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastInfo::CopyFrom(const BroadcastInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.BroadcastInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastInfo::IsInitialized() const {
  return true;
}

void BroadcastInfo::Swap(BroadcastInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BroadcastInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void BroadcastInfo::UnsafeArenaSwap(BroadcastInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BroadcastInfo::InternalSwap(BroadcastInfo* other) {
  group_id_.Swap(&other->group_id_);
  user_id_.Swap(&other->user_id_);
  media_id_.Swap(&other->media_id_);
  std::swap(media_type_, other->media_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BroadcastInfo::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BroadcastInfo

// string group_id = 1;
void BroadcastInfo::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BroadcastInfo::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
  return group_id_.Get();
}
void BroadcastInfo::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}
void BroadcastInfo::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}
void BroadcastInfo::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}
::std::string* BroadcastInfo::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastInfo::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastInfo::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BroadcastInfo::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}
void BroadcastInfo::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}

// string user_id = 2;
void BroadcastInfo::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BroadcastInfo::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
  return user_id_.Get();
}
void BroadcastInfo::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}
void BroadcastInfo::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}
void BroadcastInfo::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}
::std::string* BroadcastInfo::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastInfo::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BroadcastInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}
void BroadcastInfo::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}

// int32 media_type = 3;
void BroadcastInfo::clear_media_type() {
  media_type_ = 0;
}
::google::protobuf::int32 BroadcastInfo::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_type)
  return media_type_;
}
void BroadcastInfo::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_type)
}

// string media_id = 4;
void BroadcastInfo::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& BroadcastInfo::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
  return media_id_.Get();
}
void BroadcastInfo::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}
void BroadcastInfo::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}
void BroadcastInfo::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}
::std::string* BroadcastInfo::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastInfo::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* BroadcastInfo::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void BroadcastInfo::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}
void BroadcastInfo::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonInfo::kUserDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonInfo::CommonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.common.CommonInfo)
}
CommonInfo::CommonInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.common.CommonInfo)
}
CommonInfo::CommonInfo(const CommonInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_data().size() > 0) {
    user_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_data(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.common.CommonInfo)
}

void CommonInfo::SharedCtor() {
  user_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CommonInfo::~CommonInfo() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.common.CommonInfo)
  SharedDtor();
}

void CommonInfo::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  user_data_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CommonInfo::ArenaDtor(void* object) {
  CommonInfo* _this = reinterpret_cast< CommonInfo* >(object);
  (void)_this;
}
void CommonInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CommonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonInfo::descriptor() {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[14].descriptor;
}

const CommonInfo& CommonInfo::default_instance() {
  protobuf_fsp_2dcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommonInfo* CommonInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CommonInfo>(arena);
}

void CommonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.common.CommonInfo)
  user_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CommonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.common.CommonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_data = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_data().data(), this->user_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.common.CommonInfo.user_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.common.CommonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.common.CommonInfo)
  return false;
#undef DO_
}

void CommonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.common.CommonInfo)
  // string user_data = 1;
  if (this->user_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_data().data(), this->user_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.CommonInfo.user_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.common.CommonInfo)
}

::google::protobuf::uint8* CommonInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.common.CommonInfo)
  // string user_data = 1;
  if (this->user_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_data().data(), this->user_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.common.CommonInfo.user_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.common.CommonInfo)
  return target;
}

size_t CommonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.common.CommonInfo)
  size_t total_size = 0;

  // string user_data = 1;
  if (this->user_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.common.CommonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.common.CommonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.common.CommonInfo)
    MergeFrom(*source);
  }
}

void CommonInfo::MergeFrom(const CommonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.common.CommonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.user_data().size() > 0) {
    set_user_data(from.user_data());
  }
}

void CommonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.common.CommonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonInfo::CopyFrom(const CommonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.common.CommonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonInfo::IsInitialized() const {
  return true;
}

void CommonInfo::Swap(CommonInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CommonInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CommonInfo::UnsafeArenaSwap(CommonInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CommonInfo::InternalSwap(CommonInfo* other) {
  user_data_.Swap(&other->user_data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonInfo::GetMetadata() const {
  protobuf_fsp_2dcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dcommon_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommonInfo

// string user_data = 1;
void CommonInfo::clear_user_data() {
  user_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CommonInfo::user_data() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
  return user_data_.Get();
}
void CommonInfo::set_user_data(const ::std::string& value) {
  
  user_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}
void CommonInfo::set_user_data(const char* value) {
  
  user_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}
void CommonInfo::set_user_data(const char* value,
    size_t size) {
  
  user_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}
::std::string* CommonInfo::mutable_user_data() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
  return user_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommonInfo::release_user_data() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
  
  return user_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CommonInfo::unsafe_arena_release_user_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CommonInfo::set_allocated_user_data(::std::string* user_data) {
  if (user_data != NULL) {
    
  } else {
    
  }
  user_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}
void CommonInfo::unsafe_arena_set_allocated_user_data(
    ::std::string* user_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_data != NULL) {
    
  } else {
    
  }
  user_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

// @@protoc_insertion_point(global_scope)
