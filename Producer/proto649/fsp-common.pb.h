// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-common.proto

#ifndef PROTOBUF_fsp_2dcommon_2eproto__INCLUDED
#define PROTOBUF_fsp_2dcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class BillInfo;
class BillInfoDefaultTypeInternal;
extern BillInfoDefaultTypeInternal _BillInfo_default_instance_;
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class CommonInfo;
class CommonInfoDefaultTypeInternal;
extern CommonInfoDefaultTypeInternal _CommonInfo_default_instance_;
class CommonInvokeInfo;
class CommonInvokeInfoDefaultTypeInternal;
extern CommonInvokeInfoDefaultTypeInternal _CommonInvokeInfo_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupServer;
class GroupServerDefaultTypeInternal;
extern GroupServerDefaultTypeInternal _GroupServer_default_instance_;
class NotifyStreamDestroied;
class NotifyStreamDestroiedDefaultTypeInternal;
extern NotifyStreamDestroiedDefaultTypeInternal _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRsp;
class NotifyStreamDestroiedRspDefaultTypeInternal;
extern NotifyStreamDestroiedRspDefaultTypeInternal _NotifyStreamDestroiedRsp_default_instance_;
class Proxy;
class ProxyDefaultTypeInternal;
extern ProxyDefaultTypeInternal _Proxy_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamServer;
class StreamServerDefaultTypeInternal;
extern StreamServerDefaultTypeInternal _StreamServer_default_instance_;
class StreamSourceChanged;
class StreamSourceChangedDefaultTypeInternal;
extern StreamSourceChangedDefaultTypeInternal _StreamSourceChanged_default_instance_;
class StreamSourceChangedRsp;
class StreamSourceChangedRspDefaultTypeInternal;
extern StreamSourceChangedRspDefaultTypeInternal _StreamSourceChangedRsp_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {

namespace protobuf_fsp_2dcommon_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fsp_2dcommon_2eproto

enum ProtoDictionary {
  Enum2UnknownInterface = 0,
  Enum2Proxy = 1002,
  Enum2Stream = 1003,
  Enum2StreamServer = 1004,
  Enum2Group = 1005,
  Enum2GroupServer = 1006,
  Enum2StreamData = 1007,
  Enum2NotifyStreamDestroied = 1008,
  Enum2NotifyStreamDestroiedRsp = 1009,
  Enum2StreamSourceChanged = 1010,
  Enum2StreamSourceChangedRsp = 1011,
  Enum2PostBill = 1012,
  Enum2NotifyBroadcast = 1013,
  Enum2NotifyStopBroadcast = 1014,
  Enum2NotifyGroupDestroied = 1015,
  Enum2NotifyInstanceStarted = 1016,
  ProtoDictionary_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoDictionary_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoDictionary_IsValid(int value);
const ProtoDictionary ProtoDictionary_MIN = Enum2UnknownInterface;
const ProtoDictionary ProtoDictionary_MAX = Enum2NotifyInstanceStarted;
const int ProtoDictionary_ARRAYSIZE = ProtoDictionary_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor();
inline const ::std::string& ProtoDictionary_Name(ProtoDictionary value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDictionary_descriptor(), value);
}
inline bool ProtoDictionary_Parse(
    const ::std::string& name, ProtoDictionary* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDictionary>(
    ProtoDictionary_descriptor(), name, value);
}
enum ResponseCode {
  EnumSuccess = 0,
  EnumError = 1,
  EnumUnknow = 2,
  EnumMediaNodesOverThreeError = 3,
  EnumIceException = 4,
  EnumIceDataError = 5,
  EnumUserHaveLogined = 6,
  EnumExcludeToplimit = 7,
  ResponseCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResponseCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResponseCode_IsValid(int value);
const ResponseCode ResponseCode_MIN = EnumSuccess;
const ResponseCode ResponseCode_MAX = EnumExcludeToplimit;
const int ResponseCode_ARRAYSIZE = ResponseCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor();
inline const ::std::string& ResponseCode_Name(ResponseCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseCode_descriptor(), value);
}
inline bool ResponseCode_Parse(
    const ::std::string& name, ResponseCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseCode>(
    ResponseCode_descriptor(), name, value);
}
enum ServerType {
  EnumClientProxy = 0,
  EnumStreamServer = 1,
  EnumGroupServer = 2,
  EnumVNCGroupServer = 3,
  EnumVNCStreamServer = 4,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServerType_IsValid(int value);
const ServerType ServerType_MIN = EnumClientProxy;
const ServerType ServerType_MAX = EnumVNCStreamServer;
const int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerType_descriptor();
inline const ::std::string& ServerType_Name(ServerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerType_descriptor(), value);
}
inline bool ServerType_Parse(
    const ::std::string& name, ServerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
enum ProxyType {
  EnumServer = 0,
  EnumClient = 1,
  ProxyType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProxyType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProxyType_IsValid(int value);
const ProxyType ProxyType_MIN = EnumServer;
const ProxyType ProxyType_MAX = EnumClient;
const int ProxyType_ARRAYSIZE = ProxyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProxyType_descriptor();
inline const ::std::string& ProxyType_Name(ProxyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProxyType_descriptor(), value);
}
inline bool ProxyType_Parse(
    const ::std::string& name, ProxyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProxyType>(
    ProxyType_descriptor(), name, value);
}
enum StreamType {
  EnumVideoStream = 0,
  EnumAudioStream = 1,
  EnumDeskTopStream = 2,
  StreamType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StreamType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StreamType_IsValid(int value);
const StreamType StreamType_MIN = EnumVideoStream;
const StreamType StreamType_MAX = EnumDeskTopStream;
const int StreamType_ARRAYSIZE = StreamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamType_descriptor();
inline const ::std::string& StreamType_Name(StreamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamType_descriptor(), value);
}
inline bool StreamType_Parse(
    const ::std::string& name, StreamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamType>(
    StreamType_descriptor(), name, value);
}
enum MediaType {
  EnumVNC = 0,
  EnumAudio = 1,
  EnumVideo = 2,
  MediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MediaType_IsValid(int value);
const MediaType MediaType_MIN = EnumVNC;
const MediaType MediaType_MAX = EnumVideo;
const int MediaType_ARRAYSIZE = MediaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaType_descriptor();
inline const ::std::string& MediaType_Name(MediaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaType_descriptor(), value);
}
inline bool MediaType_Parse(
    const ::std::string& name, MediaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaType>(
    MediaType_descriptor(), name, value);
}
enum PresetType {
  EnumAddPreset = 0,
  EnumDelPreset = 1,
  PresetType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PresetType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PresetType_IsValid(int value);
const PresetType PresetType_MIN = EnumAddPreset;
const PresetType PresetType_MAX = EnumDelPreset;
const int PresetType_ARRAYSIZE = PresetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PresetType_descriptor();
inline const ::std::string& PresetType_Name(PresetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PresetType_descriptor(), value);
}
inline bool PresetType_Parse(
    const ::std::string& name, PresetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PresetType>(
    PresetType_descriptor(), name, value);
}
enum StreamProperty {
  EnumReliable = 0,
  EnumUnreliable = 1,
  StreamProperty_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StreamProperty_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StreamProperty_IsValid(int value);
const StreamProperty StreamProperty_MIN = EnumReliable;
const StreamProperty StreamProperty_MAX = EnumUnreliable;
const int StreamProperty_ARRAYSIZE = StreamProperty_MAX + 1;

const ::google::protobuf::EnumDescriptor* StreamProperty_descriptor();
inline const ::std::string& StreamProperty_Name(StreamProperty value) {
  return ::google::protobuf::internal::NameOfEnum(
    StreamProperty_descriptor(), value);
}
inline bool StreamProperty_Parse(
    const ::std::string& name, StreamProperty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StreamProperty>(
    StreamProperty_descriptor(), name, value);
}
enum DataType {
  EnumQOSData = 0,
  EnumMediaData = 1,
  EnumVNCData = 2,
  DataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = EnumQOSData;
const DataType DataType_MAX = EnumVNCData;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum ServiceType {
  EnumAVService = 0,
  EnumVNCService = 1,
  EnumDataSyncService = 2,
  ServiceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ServiceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ServiceType_IsValid(int value);
const ServiceType ServiceType_MIN = EnumAVService;
const ServiceType ServiceType_MAX = EnumDataSyncService;
const int ServiceType_ARRAYSIZE = ServiceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceType_descriptor();
inline const ::std::string& ServiceType_Name(ServiceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceType_descriptor(), value);
}
inline bool ServiceType_Parse(
    const ::std::string& name, ServiceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceType>(
    ServiceType_descriptor(), name, value);
}
enum DataDirection {
  Sending = 0,
  Receiving = 1,
  DataDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DataDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DataDirection_IsValid(int value);
const DataDirection DataDirection_MIN = Sending;
const DataDirection DataDirection_MAX = Receiving;
const int DataDirection_ARRAYSIZE = DataDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataDirection_descriptor();
inline const ::std::string& DataDirection_Name(DataDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataDirection_descriptor(), value);
}
inline bool DataDirection_Parse(
    const ::std::string& name, DataDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataDirection>(
    DataDirection_descriptor(), name, value);
}
enum ChannelType {
  EnumC2G = 0,
  EnumS2G = 1,
  EnumC2S = 2,
  EnumG2S = 3,
  EnumS2S = 4,
  ChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChannelType_IsValid(int value);
const ChannelType ChannelType_MIN = EnumC2G;
const ChannelType ChannelType_MAX = EnumS2S;
const int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor();
inline const ::std::string& ChannelType_Name(ChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelType_descriptor(), value);
}
inline bool ChannelType_Parse(
    const ::std::string& name, ChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
// ===================================================================

class Proxy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.Proxy) */ {
 public:
  Proxy();
  virtual ~Proxy();

  Proxy(const Proxy& from);

  inline Proxy& operator=(const Proxy& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Proxy& default_instance();

  static inline const Proxy* internal_default_instance() {
    return reinterpret_cast<const Proxy*>(
               &_Proxy_default_instance_);
  }

  void UnsafeArenaSwap(Proxy* other);
  void Swap(Proxy* other);

  // implements Message ----------------------------------------------

  inline Proxy* New() const PROTOBUF_FINAL { return New(NULL); }

  Proxy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Proxy& from);
  void MergeFrom(const Proxy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Proxy* other);
  protected:
  explicit Proxy(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string addr = 3;
  void clear_addr();
  static const int kAddrFieldNumber = 3;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);
  ::std::string* unsafe_arena_release_addr();
  void unsafe_arena_set_allocated_addr(
      ::std::string* addr);

  // .com.fsmeeting.fsp.proto.common.ProxyType proxy_type = 2;
  void clear_proxy_type();
  static const int kProxyTypeFieldNumber = 2;
  ::com::fsmeeting::fsp::proto::common::ProxyType proxy_type() const;
  void set_proxy_type(::com::fsmeeting::fsp::proto::common::ProxyType value);

  // int32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.Proxy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  int proxy_type_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.Stream) */ {
 public:
  Stream();
  virtual ~Stream();

  Stream(const Stream& from);

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream& default_instance();

  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }

  void UnsafeArenaSwap(Stream* other);
  void Swap(Stream* other);

  // implements Message ----------------------------------------------

  inline Stream* New() const PROTOBUF_FINAL { return New(NULL); }

  Stream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Stream* other);
  protected:
  explicit Stream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string stream_publish_token = 4;
  void clear_stream_publish_token();
  static const int kStreamPublishTokenFieldNumber = 4;
  const ::std::string& stream_publish_token() const;
  void set_stream_publish_token(const ::std::string& value);
  void set_stream_publish_token(const char* value);
  void set_stream_publish_token(const char* value, size_t size);
  ::std::string* mutable_stream_publish_token();
  ::std::string* release_stream_publish_token();
  void set_allocated_stream_publish_token(::std::string* stream_publish_token);
  ::std::string* unsafe_arena_release_stream_publish_token();
  void unsafe_arena_set_allocated_stream_publish_token(
      ::std::string* stream_publish_token);

  // string stream_subscribe_token = 5;
  void clear_stream_subscribe_token();
  static const int kStreamSubscribeTokenFieldNumber = 5;
  const ::std::string& stream_subscribe_token() const;
  void set_stream_subscribe_token(const ::std::string& value);
  void set_stream_subscribe_token(const char* value);
  void set_stream_subscribe_token(const char* value, size_t size);
  ::std::string* mutable_stream_subscribe_token();
  ::std::string* release_stream_subscribe_token();
  void set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token);
  ::std::string* unsafe_arena_release_stream_subscribe_token();
  void unsafe_arena_set_allocated_stream_subscribe_token(
      ::std::string* stream_subscribe_token);

  // .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
  void clear_stream_type();
  static const int kStreamTypeFieldNumber = 2;
  ::com::fsmeeting::fsp::proto::common::StreamType stream_type() const;
  void set_stream_type(::com::fsmeeting::fsp::proto::common::StreamType value);

  // .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
  void clear_stream_property();
  static const int kStreamPropertyFieldNumber = 3;
  ::com::fsmeeting::fsp::proto::common::StreamProperty stream_property() const;
  void set_stream_property(::com::fsmeeting::fsp::proto::common::StreamProperty value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.Stream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_publish_token_;
  ::google::protobuf::internal::ArenaStringPtr stream_subscribe_token_;
  int stream_type_;
  int stream_property_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.StreamServer) */ {
 public:
  StreamServer();
  virtual ~StreamServer();

  StreamServer(const StreamServer& from);

  inline StreamServer& operator=(const StreamServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamServer& default_instance();

  static inline const StreamServer* internal_default_instance() {
    return reinterpret_cast<const StreamServer*>(
               &_StreamServer_default_instance_);
  }

  void UnsafeArenaSwap(StreamServer* other);
  void Swap(StreamServer* other);

  // implements Message ----------------------------------------------

  inline StreamServer* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamServer& from);
  void MergeFrom(const StreamServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamServer* other);
  protected:
  explicit StreamServer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);
  ::std::string* unsafe_arena_release_addr();
  void unsafe_arena_set_allocated_addr(
      ::std::string* addr);

  // string port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);
  ::std::string* unsafe_arena_release_port();
  void unsafe_arena_set_allocated_port(
      ::std::string* port);

  // string connect_str = 4;
  void clear_connect_str();
  static const int kConnectStrFieldNumber = 4;
  const ::std::string& connect_str() const;
  void set_connect_str(const ::std::string& value);
  void set_connect_str(const char* value);
  void set_connect_str(const char* value, size_t size);
  ::std::string* mutable_connect_str();
  ::std::string* release_connect_str();
  void set_allocated_connect_str(::std::string* connect_str);
  ::std::string* unsafe_arena_release_connect_str();
  void unsafe_arena_set_allocated_connect_str(
      ::std::string* connect_str);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.StreamServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::google::protobuf::internal::ArenaStringPtr connect_str_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Group : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.Group) */ {
 public:
  Group();
  virtual ~Group();

  Group(const Group& from);

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Group& default_instance();

  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }

  void UnsafeArenaSwap(Group* other);
  void Swap(Group* other);

  // implements Message ----------------------------------------------

  inline Group* New() const PROTOBUF_FINAL { return New(NULL); }

  Group* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Group* other);
  protected:
  explicit Group(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string group_token = 2;
  void clear_group_token();
  static const int kGroupTokenFieldNumber = 2;
  const ::std::string& group_token() const;
  void set_group_token(const ::std::string& value);
  void set_group_token(const char* value);
  void set_group_token(const char* value, size_t size);
  ::std::string* mutable_group_token();
  ::std::string* release_group_token();
  void set_allocated_group_token(::std::string* group_token);
  ::std::string* unsafe_arena_release_group_token();
  void unsafe_arena_set_allocated_group_token(
      ::std::string* group_token);

  // string group_check_code = 3;
  void clear_group_check_code();
  static const int kGroupCheckCodeFieldNumber = 3;
  const ::std::string& group_check_code() const;
  void set_group_check_code(const ::std::string& value);
  void set_group_check_code(const char* value);
  void set_group_check_code(const char* value, size_t size);
  ::std::string* mutable_group_check_code();
  ::std::string* release_group_check_code();
  void set_allocated_group_check_code(::std::string* group_check_code);
  ::std::string* unsafe_arena_release_group_check_code();
  void unsafe_arena_set_allocated_group_check_code(
      ::std::string* group_check_code);

  // .com.fsmeeting.fsp.proto.common.ServerType server_type = 4;
  void clear_server_type();
  static const int kServerTypeFieldNumber = 4;
  ::com::fsmeeting::fsp::proto::common::ServerType server_type() const;
  void set_server_type(::com::fsmeeting::fsp::proto::common::ServerType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.Group)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr group_token_;
  ::google::protobuf::internal::ArenaStringPtr group_check_code_;
  int server_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GroupServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.GroupServer) */ {
 public:
  GroupServer();
  virtual ~GroupServer();

  GroupServer(const GroupServer& from);

  inline GroupServer& operator=(const GroupServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupServer& default_instance();

  static inline const GroupServer* internal_default_instance() {
    return reinterpret_cast<const GroupServer*>(
               &_GroupServer_default_instance_);
  }

  void UnsafeArenaSwap(GroupServer* other);
  void Swap(GroupServer* other);

  // implements Message ----------------------------------------------

  inline GroupServer* New() const PROTOBUF_FINAL { return New(NULL); }

  GroupServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GroupServer& from);
  void MergeFrom(const GroupServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GroupServer* other);
  protected:
  explicit GroupServer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  ::std::string* unsafe_arena_release_id();
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);
  ::std::string* unsafe_arena_release_addr();
  void unsafe_arena_set_allocated_addr(
      ::std::string* addr);

  // string port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);
  ::std::string* unsafe_arena_release_port();
  void unsafe_arena_set_allocated_port(
      ::std::string* port);

  // string connect_str = 4;
  void clear_connect_str();
  static const int kConnectStrFieldNumber = 4;
  const ::std::string& connect_str() const;
  void set_connect_str(const ::std::string& value);
  void set_connect_str(const char* value);
  void set_connect_str(const char* value, size_t size);
  ::std::string* mutable_connect_str();
  ::std::string* release_connect_str();
  void set_allocated_connect_str(::std::string* connect_str);
  ::std::string* unsafe_arena_release_connect_str();
  void unsafe_arena_set_allocated_connect_str(
      ::std::string* connect_str);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.GroupServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::google::protobuf::internal::ArenaStringPtr connect_str_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.StreamData) */ {
 public:
  StreamData();
  virtual ~StreamData();

  StreamData(const StreamData& from);

  inline StreamData& operator=(const StreamData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamData& default_instance();

  static inline const StreamData* internal_default_instance() {
    return reinterpret_cast<const StreamData*>(
               &_StreamData_default_instance_);
  }

  void UnsafeArenaSwap(StreamData* other);
  void Swap(StreamData* other);

  // implements Message ----------------------------------------------

  inline StreamData* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamData& from);
  void MergeFrom(const StreamData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamData* other);
  protected:
  explicit StreamData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  ::std::string* unsafe_arena_release_data();
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // .com.fsmeeting.fsp.proto.common.DataType data_type = 1;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  ::com::fsmeeting::fsp::proto::common::DataType data_type() const;
  void set_data_type(::com::fsmeeting::fsp::proto::common::DataType value);

  // int32 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.StreamData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int data_type_;
  ::google::protobuf::int32 length_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.CommonResponse) */ {
 public:
  CommonResponse();
  virtual ~CommonResponse();

  CommonResponse(const CommonResponse& from);

  inline CommonResponse& operator=(const CommonResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonResponse& default_instance();

  static inline const CommonResponse* internal_default_instance() {
    return reinterpret_cast<const CommonResponse*>(
               &_CommonResponse_default_instance_);
  }

  void UnsafeArenaSwap(CommonResponse* other);
  void Swap(CommonResponse* other);

  // implements Message ----------------------------------------------

  inline CommonResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonResponse& from);
  void MergeFrom(const CommonResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonResponse* other);
  protected:
  explicit CommonResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string response_msg = 2;
  void clear_response_msg();
  static const int kResponseMsgFieldNumber = 2;
  const ::std::string& response_msg() const;
  void set_response_msg(const ::std::string& value);
  void set_response_msg(const char* value);
  void set_response_msg(const char* value, size_t size);
  ::std::string* mutable_response_msg();
  ::std::string* release_response_msg();
  void set_allocated_response_msg(::std::string* response_msg);
  ::std::string* unsafe_arena_release_response_msg();
  void unsafe_arena_set_allocated_response_msg(
      ::std::string* response_msg);

  // .com.fsmeeting.fsp.proto.common.ResponseCode response_code = 1;
  void clear_response_code();
  static const int kResponseCodeFieldNumber = 1;
  ::com::fsmeeting::fsp::proto::common::ResponseCode response_code() const;
  void set_response_code(::com::fsmeeting::fsp::proto::common::ResponseCode value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.CommonResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr response_msg_;
  int response_code_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamDestroied : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied) */ {
 public:
  NotifyStreamDestroied();
  virtual ~NotifyStreamDestroied();

  NotifyStreamDestroied(const NotifyStreamDestroied& from);

  inline NotifyStreamDestroied& operator=(const NotifyStreamDestroied& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamDestroied& default_instance();

  static inline const NotifyStreamDestroied* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamDestroied*>(
               &_NotifyStreamDestroied_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamDestroied* other);
  void Swap(NotifyStreamDestroied* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamDestroied* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamDestroied* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamDestroied& from);
  void MergeFrom(const NotifyStreamDestroied& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamDestroied* other);
  protected:
  explicit NotifyStreamDestroied(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamDestroiedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp) */ {
 public:
  NotifyStreamDestroiedRsp();
  virtual ~NotifyStreamDestroiedRsp();

  NotifyStreamDestroiedRsp(const NotifyStreamDestroiedRsp& from);

  inline NotifyStreamDestroiedRsp& operator=(const NotifyStreamDestroiedRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamDestroiedRsp& default_instance();

  static inline const NotifyStreamDestroiedRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamDestroiedRsp*>(
               &_NotifyStreamDestroiedRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamDestroiedRsp* other);
  void Swap(NotifyStreamDestroiedRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamDestroiedRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamDestroiedRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamDestroiedRsp& from);
  void MergeFrom(const NotifyStreamDestroiedRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamDestroiedRsp* other);
  protected:
  explicit NotifyStreamDestroiedRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamSourceChanged : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.StreamSourceChanged) */ {
 public:
  StreamSourceChanged();
  virtual ~StreamSourceChanged();

  StreamSourceChanged(const StreamSourceChanged& from);

  inline StreamSourceChanged& operator=(const StreamSourceChanged& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSourceChanged& default_instance();

  static inline const StreamSourceChanged* internal_default_instance() {
    return reinterpret_cast<const StreamSourceChanged*>(
               &_StreamSourceChanged_default_instance_);
  }

  void UnsafeArenaSwap(StreamSourceChanged* other);
  void Swap(StreamSourceChanged* other);

  // implements Message ----------------------------------------------

  inline StreamSourceChanged* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSourceChanged* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSourceChanged& from);
  void MergeFrom(const StreamSourceChanged& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSourceChanged* other);
  protected:
  explicit StreamSourceChanged(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string source_instance = 2;
  void clear_source_instance();
  static const int kSourceInstanceFieldNumber = 2;
  const ::std::string& source_instance() const;
  void set_source_instance(const ::std::string& value);
  void set_source_instance(const char* value);
  void set_source_instance(const char* value, size_t size);
  ::std::string* mutable_source_instance();
  ::std::string* release_source_instance();
  void set_allocated_source_instance(::std::string* source_instance);
  ::std::string* unsafe_arena_release_source_instance();
  void unsafe_arena_set_allocated_source_instance(
      ::std::string* source_instance);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.StreamSourceChanged)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr source_instance_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamSourceChangedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp) */ {
 public:
  StreamSourceChangedRsp();
  virtual ~StreamSourceChangedRsp();

  StreamSourceChangedRsp(const StreamSourceChangedRsp& from);

  inline StreamSourceChangedRsp& operator=(const StreamSourceChangedRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSourceChangedRsp& default_instance();

  static inline const StreamSourceChangedRsp* internal_default_instance() {
    return reinterpret_cast<const StreamSourceChangedRsp*>(
               &_StreamSourceChangedRsp_default_instance_);
  }

  void UnsafeArenaSwap(StreamSourceChangedRsp* other);
  void Swap(StreamSourceChangedRsp* other);

  // implements Message ----------------------------------------------

  inline StreamSourceChangedRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSourceChangedRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSourceChangedRsp& from);
  void MergeFrom(const StreamSourceChangedRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSourceChangedRsp* other);
  protected:
  explicit StreamSourceChangedRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonInvokeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.CommonInvokeInfo) */ {
 public:
  CommonInvokeInfo();
  virtual ~CommonInvokeInfo();

  CommonInvokeInfo(const CommonInvokeInfo& from);

  inline CommonInvokeInfo& operator=(const CommonInvokeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonInvokeInfo& default_instance();

  static inline const CommonInvokeInfo* internal_default_instance() {
    return reinterpret_cast<const CommonInvokeInfo*>(
               &_CommonInvokeInfo_default_instance_);
  }

  void UnsafeArenaSwap(CommonInvokeInfo* other);
  void Swap(CommonInvokeInfo* other);

  // implements Message ----------------------------------------------

  inline CommonInvokeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonInvokeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonInvokeInfo& from);
  void MergeFrom(const CommonInvokeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonInvokeInfo* other);
  protected:
  explicit CommonInvokeInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string trace_id = 1;
  void clear_trace_id();
  static const int kTraceIdFieldNumber = 1;
  const ::std::string& trace_id() const;
  void set_trace_id(const ::std::string& value);
  void set_trace_id(const char* value);
  void set_trace_id(const char* value, size_t size);
  ::std::string* mutable_trace_id();
  ::std::string* release_trace_id();
  void set_allocated_trace_id(::std::string* trace_id);
  ::std::string* unsafe_arena_release_trace_id();
  void unsafe_arena_set_allocated_trace_id(
      ::std::string* trace_id);

  // string invoke_order = 2;
  void clear_invoke_order();
  static const int kInvokeOrderFieldNumber = 2;
  const ::std::string& invoke_order() const;
  void set_invoke_order(const ::std::string& value);
  void set_invoke_order(const char* value);
  void set_invoke_order(const char* value, size_t size);
  ::std::string* mutable_invoke_order();
  ::std::string* release_invoke_order();
  void set_allocated_invoke_order(::std::string* invoke_order);
  ::std::string* unsafe_arena_release_invoke_order();
  void unsafe_arena_set_allocated_invoke_order(
      ::std::string* invoke_order);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.CommonInvokeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr trace_id_;
  ::google::protobuf::internal::ArenaStringPtr invoke_order_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BillInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.BillInfo) */ {
 public:
  BillInfo();
  virtual ~BillInfo();

  BillInfo(const BillInfo& from);

  inline BillInfo& operator=(const BillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BillInfo& default_instance();

  static inline const BillInfo* internal_default_instance() {
    return reinterpret_cast<const BillInfo*>(
               &_BillInfo_default_instance_);
  }

  void UnsafeArenaSwap(BillInfo* other);
  void Swap(BillInfo* other);

  // implements Message ----------------------------------------------

  inline BillInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BillInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BillInfo& from);
  void MergeFrom(const BillInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BillInfo* other);
  protected:
  explicit BillInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // string group_id = 2;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string stream_id = 3;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 3;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string client_id = 4;
  void clear_client_id();
  static const int kClientIdFieldNumber = 4;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string start_time = 9;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 9;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);
  ::std::string* unsafe_arena_release_start_time();
  void unsafe_arena_set_allocated_start_time(
      ::std::string* start_time);

  // string end_time = 10;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 10;
  const ::std::string& end_time() const;
  void set_end_time(const ::std::string& value);
  void set_end_time(const char* value);
  void set_end_time(const char* value, size_t size);
  ::std::string* mutable_end_time();
  ::std::string* release_end_time();
  void set_allocated_end_time(::std::string* end_time);
  ::std::string* unsafe_arena_release_end_time();
  void unsafe_arena_set_allocated_end_time(
      ::std::string* end_time);

  // int32 service_id = 5;
  void clear_service_id();
  static const int kServiceIdFieldNumber = 5;
  ::google::protobuf::int32 service_id() const;
  void set_service_id(::google::protobuf::int32 value);

  // int32 transfer_type = 6;
  void clear_transfer_type();
  static const int kTransferTypeFieldNumber = 6;
  ::google::protobuf::int32 transfer_type() const;
  void set_transfer_type(::google::protobuf::int32 value);

  // uint64 bytes = 7;
  void clear_bytes();
  static const int kBytesFieldNumber = 7;
  ::google::protobuf::uint64 bytes() const;
  void set_bytes(::google::protobuf::uint64 value);

  // uint32 total_time = 8;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 8;
  ::google::protobuf::uint32 total_time() const;
  void set_total_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.BillInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  ::google::protobuf::internal::ArenaStringPtr end_time_;
  ::google::protobuf::int32 service_id_;
  ::google::protobuf::int32 transfer_type_;
  ::google::protobuf::uint64 bytes_;
  ::google::protobuf::uint32 total_time_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.BroadcastInfo) */ {
 public:
  BroadcastInfo();
  virtual ~BroadcastInfo();

  BroadcastInfo(const BroadcastInfo& from);

  inline BroadcastInfo& operator=(const BroadcastInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastInfo& default_instance();

  static inline const BroadcastInfo* internal_default_instance() {
    return reinterpret_cast<const BroadcastInfo*>(
               &_BroadcastInfo_default_instance_);
  }

  void UnsafeArenaSwap(BroadcastInfo* other);
  void Swap(BroadcastInfo* other);

  // implements Message ----------------------------------------------

  inline BroadcastInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BroadcastInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BroadcastInfo& from);
  void MergeFrom(const BroadcastInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BroadcastInfo* other);
  protected:
  explicit BroadcastInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string media_id = 4;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 4;
  const ::std::string& media_id() const;
  void set_media_id(const ::std::string& value);
  void set_media_id(const char* value);
  void set_media_id(const char* value, size_t size);
  ::std::string* mutable_media_id();
  ::std::string* release_media_id();
  void set_allocated_media_id(::std::string* media_id);
  ::std::string* unsafe_arena_release_media_id();
  void unsafe_arena_set_allocated_media_id(
      ::std::string* media_id);

  // int32 media_type = 3;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 3;
  ::google::protobuf::int32 media_type() const;
  void set_media_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.BroadcastInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr media_id_;
  ::google::protobuf::int32 media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommonInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.common.CommonInfo) */ {
 public:
  CommonInfo();
  virtual ~CommonInfo();

  CommonInfo(const CommonInfo& from);

  inline CommonInfo& operator=(const CommonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonInfo& default_instance();

  static inline const CommonInfo* internal_default_instance() {
    return reinterpret_cast<const CommonInfo*>(
               &_CommonInfo_default_instance_);
  }

  void UnsafeArenaSwap(CommonInfo* other);
  void Swap(CommonInfo* other);

  // implements Message ----------------------------------------------

  inline CommonInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonInfo& from);
  void MergeFrom(const CommonInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonInfo* other);
  protected:
  explicit CommonInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_data = 1;
  void clear_user_data();
  static const int kUserDataFieldNumber = 1;
  const ::std::string& user_data() const;
  void set_user_data(const ::std::string& value);
  void set_user_data(const char* value);
  void set_user_data(const char* value, size_t size);
  ::std::string* mutable_user_data();
  ::std::string* release_user_data();
  void set_allocated_user_data(::std::string* user_data);
  ::std::string* unsafe_arena_release_user_data();
  void unsafe_arena_set_allocated_user_data(
      ::std::string* user_data);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.common.CommonInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr user_data_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcommon_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Proxy

// string id = 1;
inline void Proxy::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Proxy::id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Proxy.id)
  return id_.Get();
}
inline void Proxy::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Proxy.id)
}
inline void Proxy::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Proxy.id)
}
inline void Proxy::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Proxy.id)
}
inline ::std::string* Proxy::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Proxy.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Proxy::release_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Proxy.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Proxy::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Proxy.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Proxy::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Proxy.id)
}
inline void Proxy::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Proxy.id)
}

// .com.fsmeeting.fsp.proto.common.ProxyType proxy_type = 2;
inline void Proxy::clear_proxy_type() {
  proxy_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::ProxyType Proxy::proxy_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Proxy.proxy_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ProxyType >(proxy_type_);
}
inline void Proxy::set_proxy_type(::com::fsmeeting::fsp::proto::common::ProxyType value) {
  
  proxy_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Proxy.proxy_type)
}

// string addr = 3;
inline void Proxy::clear_addr() {
  addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Proxy::addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Proxy.addr)
  return addr_.Get();
}
inline void Proxy::set_addr(const ::std::string& value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Proxy.addr)
}
inline void Proxy::set_addr(const char* value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Proxy.addr)
}
inline void Proxy::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Proxy.addr)
}
inline ::std::string* Proxy::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Proxy.addr)
  return addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Proxy::release_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Proxy.addr)
  
  return addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Proxy::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Proxy.addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Proxy::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Proxy.addr)
}
inline void Proxy::unsafe_arena_set_allocated_addr(
    ::std::string* addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Proxy.addr)
}

// int32 port = 4;
inline void Proxy::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Proxy::port() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Proxy.port)
  return port_;
}
inline void Proxy::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Proxy.port)
}

// -------------------------------------------------------------------

// Stream

// string stream_id = 1;
inline void Stream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Stream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_id)
  return stream_id_.Get();
}
inline void Stream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}
inline void Stream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}
inline void Stream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}
inline ::std::string* Stream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Stream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Stream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Stream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Stream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Stream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Stream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}
inline void Stream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_id)
}

// .com.fsmeeting.fsp.proto.common.StreamType stream_type = 2;
inline void Stream::clear_stream_type() {
  stream_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::StreamType Stream::stream_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamType >(stream_type_);
}
inline void Stream::set_stream_type(::com::fsmeeting::fsp::proto::common::StreamType value) {
  
  stream_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_type)
}

// .com.fsmeeting.fsp.proto.common.StreamProperty stream_property = 3;
inline void Stream::clear_stream_property() {
  stream_property_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::StreamProperty Stream::stream_property() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_property)
  return static_cast< ::com::fsmeeting::fsp::proto::common::StreamProperty >(stream_property_);
}
inline void Stream::set_stream_property(::com::fsmeeting::fsp::proto::common::StreamProperty value) {
  
  stream_property_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_property)
}

// string stream_publish_token = 4;
inline void Stream::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Stream::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
  return stream_publish_token_.Get();
}
inline void Stream::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}
inline void Stream::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}
inline void Stream::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}
inline ::std::string* Stream::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Stream::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Stream::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Stream::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}
inline void Stream::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_publish_token)
}

// string stream_subscribe_token = 5;
inline void Stream::clear_stream_subscribe_token() {
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Stream::stream_subscribe_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
  return stream_subscribe_token_.Get();
}
inline void Stream::set_stream_subscribe_token(const ::std::string& value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}
inline void Stream::set_stream_subscribe_token(const char* value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}
inline void Stream::set_stream_subscribe_token(const char* value,
    size_t size) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}
inline ::std::string* Stream::mutable_stream_subscribe_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
  return stream_subscribe_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Stream::release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
  
  return stream_subscribe_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Stream::unsafe_arena_release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_subscribe_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Stream::set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token) {
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_subscribe_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}
inline void Stream::unsafe_arena_set_allocated_stream_subscribe_token(
    ::std::string* stream_subscribe_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_subscribe_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Stream.stream_subscribe_token)
}

// -------------------------------------------------------------------

// StreamServer

// string id = 1;
inline void StreamServer::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamServer::id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamServer.id)
  return id_.Get();
}
inline void StreamServer::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamServer.id)
}
inline void StreamServer::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamServer.id)
}
inline void StreamServer::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamServer.id)
}
inline ::std::string* StreamServer::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamServer.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamServer::release_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamServer.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamServer::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamServer.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamServer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.id)
}
inline void StreamServer::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.id)
}

// string addr = 2;
inline void StreamServer::clear_addr() {
  addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamServer::addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamServer.addr)
  return addr_.Get();
}
inline void StreamServer::set_addr(const ::std::string& value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}
inline void StreamServer::set_addr(const char* value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}
inline void StreamServer::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}
inline ::std::string* StreamServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamServer.addr)
  return addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamServer::release_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamServer.addr)
  
  return addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamServer::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamServer.addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}
inline void StreamServer::unsafe_arena_set_allocated_addr(
    ::std::string* addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.addr)
}

// string port = 3;
inline void StreamServer::clear_port() {
  port_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamServer::port() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamServer.port)
  return port_.Get();
}
inline void StreamServer::set_port(const ::std::string& value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamServer.port)
}
inline void StreamServer::set_port(const char* value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamServer.port)
}
inline void StreamServer::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamServer.port)
}
inline ::std::string* StreamServer::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamServer.port)
  return port_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamServer::release_port() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamServer.port)
  
  return port_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamServer::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamServer.port)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return port_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamServer::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.port)
}
inline void StreamServer::unsafe_arena_set_allocated_port(
    ::std::string* port) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (port != NULL) {
    
  } else {
    
  }
  port_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      port, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.port)
}

// string connect_str = 4;
inline void StreamServer::clear_connect_str() {
  connect_str_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamServer::connect_str() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
  return connect_str_.Get();
}
inline void StreamServer::set_connect_str(const ::std::string& value) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}
inline void StreamServer::set_connect_str(const char* value) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}
inline void StreamServer::set_connect_str(const char* value,
    size_t size) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}
inline ::std::string* StreamServer::mutable_connect_str() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
  return connect_str_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamServer::release_connect_str() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
  
  return connect_str_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamServer::unsafe_arena_release_connect_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return connect_str_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamServer::set_allocated_connect_str(::std::string* connect_str) {
  if (connect_str != NULL) {
    
  } else {
    
  }
  connect_str_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect_str,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}
inline void StreamServer::unsafe_arena_set_allocated_connect_str(
    ::std::string* connect_str) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (connect_str != NULL) {
    
  } else {
    
  }
  connect_str_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      connect_str, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamServer.connect_str)
}

// -------------------------------------------------------------------

// Group

// string group_id = 1;
inline void Group::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Group::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Group.group_id)
  return group_id_.Get();
}
inline void Group::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Group.group_id)
}
inline void Group::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Group.group_id)
}
inline void Group::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Group.group_id)
}
inline ::std::string* Group::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Group.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Group::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Group.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Group::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Group.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Group::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_id)
}
inline void Group::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_id)
}

// string group_token = 2;
inline void Group::clear_group_token() {
  group_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Group::group_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Group.group_token)
  return group_token_.Get();
}
inline void Group::set_group_token(const ::std::string& value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Group.group_token)
}
inline void Group::set_group_token(const char* value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Group.group_token)
}
inline void Group::set_group_token(const char* value,
    size_t size) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Group.group_token)
}
inline ::std::string* Group::mutable_group_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Group.group_token)
  return group_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Group::release_group_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Group.group_token)
  
  return group_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Group::unsafe_arena_release_group_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Group.group_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Group::set_allocated_group_token(::std::string* group_token) {
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_token)
}
inline void Group::unsafe_arena_set_allocated_group_token(
    ::std::string* group_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_token)
}

// string group_check_code = 3;
inline void Group::clear_group_check_code() {
  group_check_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Group::group_check_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Group.group_check_code)
  return group_check_code_.Get();
}
inline void Group::set_group_check_code(const ::std::string& value) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}
inline void Group::set_group_check_code(const char* value) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}
inline void Group::set_group_check_code(const char* value,
    size_t size) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}
inline ::std::string* Group::mutable_group_check_code() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.Group.group_check_code)
  return group_check_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Group::release_group_check_code() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.Group.group_check_code)
  
  return group_check_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Group::unsafe_arena_release_group_check_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.Group.group_check_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_check_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Group::set_allocated_group_check_code(::std::string* group_check_code) {
  if (group_check_code != NULL) {
    
  } else {
    
  }
  group_check_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_check_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}
inline void Group::unsafe_arena_set_allocated_group_check_code(
    ::std::string* group_check_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_check_code != NULL) {
    
  } else {
    
  }
  group_check_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_check_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.Group.group_check_code)
}

// .com.fsmeeting.fsp.proto.common.ServerType server_type = 4;
inline void Group::clear_server_type() {
  server_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::ServerType Group::server_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.Group.server_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ServerType >(server_type_);
}
inline void Group::set_server_type(::com::fsmeeting::fsp::proto::common::ServerType value) {
  
  server_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.Group.server_type)
}

// -------------------------------------------------------------------

// GroupServer

// string id = 1;
inline void GroupServer::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupServer::id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.GroupServer.id)
  return id_.Get();
}
inline void GroupServer::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.GroupServer.id)
}
inline void GroupServer::set_id(const char* value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.GroupServer.id)
}
inline void GroupServer::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.GroupServer.id)
}
inline ::std::string* GroupServer::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.GroupServer.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupServer::release_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.GroupServer.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupServer::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.GroupServer.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupServer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.id)
}
inline void GroupServer::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.id)
}

// string addr = 2;
inline void GroupServer::clear_addr() {
  addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupServer::addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.GroupServer.addr)
  return addr_.Get();
}
inline void GroupServer::set_addr(const ::std::string& value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}
inline void GroupServer::set_addr(const char* value) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}
inline void GroupServer::set_addr(const char* value,
    size_t size) {
  
  addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}
inline ::std::string* GroupServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.GroupServer.addr)
  return addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupServer::release_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.GroupServer.addr)
  
  return addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupServer::unsafe_arena_release_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.GroupServer.addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}
inline void GroupServer::unsafe_arena_set_allocated_addr(
    ::std::string* addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.addr)
}

// string port = 3;
inline void GroupServer::clear_port() {
  port_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupServer::port() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.GroupServer.port)
  return port_.Get();
}
inline void GroupServer::set_port(const ::std::string& value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.GroupServer.port)
}
inline void GroupServer::set_port(const char* value) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.GroupServer.port)
}
inline void GroupServer::set_port(const char* value,
    size_t size) {
  
  port_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.GroupServer.port)
}
inline ::std::string* GroupServer::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.GroupServer.port)
  return port_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupServer::release_port() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.GroupServer.port)
  
  return port_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupServer::unsafe_arena_release_port() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.GroupServer.port)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return port_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupServer::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.port)
}
inline void GroupServer::unsafe_arena_set_allocated_port(
    ::std::string* port) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (port != NULL) {
    
  } else {
    
  }
  port_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      port, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.port)
}

// string connect_str = 4;
inline void GroupServer::clear_connect_str() {
  connect_str_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GroupServer::connect_str() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
  return connect_str_.Get();
}
inline void GroupServer::set_connect_str(const ::std::string& value) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}
inline void GroupServer::set_connect_str(const char* value) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}
inline void GroupServer::set_connect_str(const char* value,
    size_t size) {
  
  connect_str_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}
inline ::std::string* GroupServer::mutable_connect_str() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
  return connect_str_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupServer::release_connect_str() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
  
  return connect_str_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GroupServer::unsafe_arena_release_connect_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return connect_str_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GroupServer::set_allocated_connect_str(::std::string* connect_str) {
  if (connect_str != NULL) {
    
  } else {
    
  }
  connect_str_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect_str,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}
inline void GroupServer::unsafe_arena_set_allocated_connect_str(
    ::std::string* connect_str) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (connect_str != NULL) {
    
  } else {
    
  }
  connect_str_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      connect_str, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.GroupServer.connect_str)
}

// -------------------------------------------------------------------

// StreamData

// .com.fsmeeting.fsp.proto.common.DataType data_type = 1;
inline void StreamData::clear_data_type() {
  data_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::DataType StreamData::data_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamData.data_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::DataType >(data_type_);
}
inline void StreamData::set_data_type(::com::fsmeeting::fsp::proto::common::DataType value) {
  
  data_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamData.data_type)
}

// int32 length = 2;
inline void StreamData::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 StreamData::length() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamData.length)
  return length_;
}
inline void StreamData::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamData.length)
}

// bytes data = 3;
inline void StreamData::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamData::data() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamData.data)
  return data_.Get();
}
inline void StreamData::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamData.data)
}
inline void StreamData::set_data(const char* value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamData.data)
}
inline void StreamData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamData.data)
}
inline ::std::string* StreamData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamData.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamData::release_data() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamData.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamData.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamData.data)
}
inline void StreamData::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamData.data)
}

// -------------------------------------------------------------------

// CommonResponse

// .com.fsmeeting.fsp.proto.common.ResponseCode response_code = 1;
inline void CommonResponse::clear_response_code() {
  response_code_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::ResponseCode CommonResponse::response_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonResponse.response_code)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ResponseCode >(response_code_);
}
inline void CommonResponse::set_response_code(::com::fsmeeting::fsp::proto::common::ResponseCode value) {
  
  response_code_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonResponse.response_code)
}

// string response_msg = 2;
inline void CommonResponse::clear_response_msg() {
  response_msg_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CommonResponse::response_msg() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
  return response_msg_.Get();
}
inline void CommonResponse::set_response_msg(const ::std::string& value) {
  
  response_msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}
inline void CommonResponse::set_response_msg(const char* value) {
  
  response_msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}
inline void CommonResponse::set_response_msg(const char* value,
    size_t size) {
  
  response_msg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}
inline ::std::string* CommonResponse::mutable_response_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
  return response_msg_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CommonResponse::release_response_msg() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
  
  return response_msg_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CommonResponse::unsafe_arena_release_response_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return response_msg_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CommonResponse::set_allocated_response_msg(::std::string* response_msg) {
  if (response_msg != NULL) {
    
  } else {
    
  }
  response_msg_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_msg,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}
inline void CommonResponse::unsafe_arena_set_allocated_response_msg(
    ::std::string* response_msg) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (response_msg != NULL) {
    
  } else {
    
  }
  response_msg_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      response_msg, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.CommonResponse.response_msg)
}

// -------------------------------------------------------------------

// NotifyStreamDestroied

// string stream_id = 1;
inline void NotifyStreamDestroied::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamDestroied::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
  return stream_id_.Get();
}
inline void NotifyStreamDestroied::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}
inline void NotifyStreamDestroied::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}
inline void NotifyStreamDestroied::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}
inline ::std::string* NotifyStreamDestroied::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamDestroied::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamDestroied::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamDestroied::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}
inline void NotifyStreamDestroied::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.NotifyStreamDestroied.stream_id)
}

// -------------------------------------------------------------------

// NotifyStreamDestroiedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyStreamDestroiedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyStreamDestroiedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamDestroiedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamDestroiedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamDestroiedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamDestroiedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.NotifyStreamDestroiedRsp.response)
}

// -------------------------------------------------------------------

// StreamSourceChanged

// string stream_id = 1;
inline void StreamSourceChanged::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamSourceChanged::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
  return stream_id_.Get();
}
inline void StreamSourceChanged::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}
inline void StreamSourceChanged::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}
inline void StreamSourceChanged::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}
inline ::std::string* StreamSourceChanged::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSourceChanged::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSourceChanged::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamSourceChanged::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}
inline void StreamSourceChanged::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChanged.stream_id)
}

// string source_instance = 2;
inline void StreamSourceChanged::clear_source_instance() {
  source_instance_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamSourceChanged::source_instance() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
  return source_instance_.Get();
}
inline void StreamSourceChanged::set_source_instance(const ::std::string& value) {
  
  source_instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}
inline void StreamSourceChanged::set_source_instance(const char* value) {
  
  source_instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}
inline void StreamSourceChanged::set_source_instance(const char* value,
    size_t size) {
  
  source_instance_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}
inline ::std::string* StreamSourceChanged::mutable_source_instance() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
  return source_instance_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSourceChanged::release_source_instance() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
  
  return source_instance_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSourceChanged::unsafe_arena_release_source_instance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return source_instance_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamSourceChanged::set_allocated_source_instance(::std::string* source_instance) {
  if (source_instance != NULL) {
    
  } else {
    
  }
  source_instance_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_instance,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}
inline void StreamSourceChanged::unsafe_arena_set_allocated_source_instance(
    ::std::string* source_instance) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (source_instance != NULL) {
    
  } else {
    
  }
  source_instance_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      source_instance, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChanged.source_instance)
}

// -------------------------------------------------------------------

// StreamSourceChangedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool StreamSourceChangedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void StreamSourceChangedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamSourceChangedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSourceChangedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSourceChangedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void StreamSourceChangedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.StreamSourceChangedRsp.response)
}

// -------------------------------------------------------------------

// CommonInvokeInfo

// string trace_id = 1;
inline void CommonInvokeInfo::clear_trace_id() {
  trace_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CommonInvokeInfo::trace_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
  return trace_id_.Get();
}
inline void CommonInvokeInfo::set_trace_id(const ::std::string& value) {
  
  trace_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}
inline void CommonInvokeInfo::set_trace_id(const char* value) {
  
  trace_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}
inline void CommonInvokeInfo::set_trace_id(const char* value,
    size_t size) {
  
  trace_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}
inline ::std::string* CommonInvokeInfo::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
  return trace_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CommonInvokeInfo::release_trace_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
  
  return trace_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CommonInvokeInfo::unsafe_arena_release_trace_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return trace_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CommonInvokeInfo::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}
inline void CommonInvokeInfo::unsafe_arena_set_allocated_trace_id(
    ::std::string* trace_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      trace_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.trace_id)
}

// string invoke_order = 2;
inline void CommonInvokeInfo::clear_invoke_order() {
  invoke_order_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CommonInvokeInfo::invoke_order() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
  return invoke_order_.Get();
}
inline void CommonInvokeInfo::set_invoke_order(const ::std::string& value) {
  
  invoke_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}
inline void CommonInvokeInfo::set_invoke_order(const char* value) {
  
  invoke_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}
inline void CommonInvokeInfo::set_invoke_order(const char* value,
    size_t size) {
  
  invoke_order_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}
inline ::std::string* CommonInvokeInfo::mutable_invoke_order() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
  return invoke_order_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CommonInvokeInfo::release_invoke_order() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
  
  return invoke_order_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CommonInvokeInfo::unsafe_arena_release_invoke_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return invoke_order_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CommonInvokeInfo::set_allocated_invoke_order(::std::string* invoke_order) {
  if (invoke_order != NULL) {
    
  } else {
    
  }
  invoke_order_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invoke_order,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}
inline void CommonInvokeInfo::unsafe_arena_set_allocated_invoke_order(
    ::std::string* invoke_order) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (invoke_order != NULL) {
    
  } else {
    
  }
  invoke_order_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      invoke_order, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.CommonInvokeInfo.invoke_order)
}

// -------------------------------------------------------------------

// BillInfo

// string app_id = 1;
inline void BillInfo::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BillInfo::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
  return app_id_.Get();
}
inline void BillInfo::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}
inline void BillInfo::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}
inline void BillInfo::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}
inline ::std::string* BillInfo::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BillInfo::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}
inline void BillInfo::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.app_id)
}

// string group_id = 2;
inline void BillInfo::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BillInfo::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
  return group_id_.Get();
}
inline void BillInfo::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}
inline void BillInfo::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}
inline void BillInfo::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}
inline ::std::string* BillInfo::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BillInfo::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}
inline void BillInfo::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.group_id)
}

// string stream_id = 3;
inline void BillInfo::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BillInfo::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
  return stream_id_.Get();
}
inline void BillInfo::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}
inline void BillInfo::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}
inline void BillInfo::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}
inline ::std::string* BillInfo::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BillInfo::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}
inline void BillInfo::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.stream_id)
}

// string client_id = 4;
inline void BillInfo::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BillInfo::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
  return client_id_.Get();
}
inline void BillInfo::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}
inline void BillInfo::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}
inline void BillInfo::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}
inline ::std::string* BillInfo::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BillInfo::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}
inline void BillInfo::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.client_id)
}

// int32 service_id = 5;
inline void BillInfo::clear_service_id() {
  service_id_ = 0;
}
inline ::google::protobuf::int32 BillInfo::service_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.service_id)
  return service_id_;
}
inline void BillInfo::set_service_id(::google::protobuf::int32 value) {
  
  service_id_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.service_id)
}

// int32 transfer_type = 6;
inline void BillInfo::clear_transfer_type() {
  transfer_type_ = 0;
}
inline ::google::protobuf::int32 BillInfo::transfer_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.transfer_type)
  return transfer_type_;
}
inline void BillInfo::set_transfer_type(::google::protobuf::int32 value) {
  
  transfer_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.transfer_type)
}

// uint64 bytes = 7;
inline void BillInfo::clear_bytes() {
  bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 BillInfo::bytes() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.bytes)
  return bytes_;
}
inline void BillInfo::set_bytes(::google::protobuf::uint64 value) {
  
  bytes_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.bytes)
}

// uint32 total_time = 8;
inline void BillInfo::clear_total_time() {
  total_time_ = 0u;
}
inline ::google::protobuf::uint32 BillInfo::total_time() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.total_time)
  return total_time_;
}
inline void BillInfo::set_total_time(::google::protobuf::uint32 value) {
  
  total_time_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.total_time)
}

// string start_time = 9;
inline void BillInfo::clear_start_time() {
  start_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BillInfo::start_time() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
  return start_time_.Get();
}
inline void BillInfo::set_start_time(const ::std::string& value) {
  
  start_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}
inline void BillInfo::set_start_time(const char* value) {
  
  start_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}
inline void BillInfo::set_start_time(const char* value,
    size_t size) {
  
  start_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}
inline ::std::string* BillInfo::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
  return start_time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::release_start_time() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
  
  return start_time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return start_time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BillInfo::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}
inline void BillInfo::unsafe_arena_set_allocated_start_time(
    ::std::string* start_time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      start_time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.start_time)
}

// string end_time = 10;
inline void BillInfo::clear_end_time() {
  end_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BillInfo::end_time() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
  return end_time_.Get();
}
inline void BillInfo::set_end_time(const ::std::string& value) {
  
  end_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}
inline void BillInfo::set_end_time(const char* value) {
  
  end_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}
inline void BillInfo::set_end_time(const char* value,
    size_t size) {
  
  end_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}
inline ::std::string* BillInfo::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
  return end_time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::release_end_time() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
  
  return end_time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BillInfo::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return end_time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BillInfo::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}
inline void BillInfo::unsafe_arena_set_allocated_end_time(
    ::std::string* end_time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      end_time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BillInfo.end_time)
}

// -------------------------------------------------------------------

// BroadcastInfo

// string group_id = 1;
inline void BroadcastInfo::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BroadcastInfo::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
  return group_id_.Get();
}
inline void BroadcastInfo::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}
inline void BroadcastInfo::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}
inline void BroadcastInfo::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}
inline ::std::string* BroadcastInfo::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastInfo::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastInfo::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BroadcastInfo::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}
inline void BroadcastInfo::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.group_id)
}

// string user_id = 2;
inline void BroadcastInfo::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BroadcastInfo::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
  return user_id_.Get();
}
inline void BroadcastInfo::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}
inline void BroadcastInfo::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}
inline void BroadcastInfo::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}
inline ::std::string* BroadcastInfo::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastInfo::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BroadcastInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}
inline void BroadcastInfo::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.user_id)
}

// int32 media_type = 3;
inline void BroadcastInfo::clear_media_type() {
  media_type_ = 0;
}
inline ::google::protobuf::int32 BroadcastInfo::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_type)
  return media_type_;
}
inline void BroadcastInfo::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_type)
}

// string media_id = 4;
inline void BroadcastInfo::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BroadcastInfo::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
  return media_id_.Get();
}
inline void BroadcastInfo::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}
inline void BroadcastInfo::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}
inline void BroadcastInfo::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}
inline ::std::string* BroadcastInfo::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastInfo::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastInfo::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BroadcastInfo::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}
inline void BroadcastInfo::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.BroadcastInfo.media_id)
}

// -------------------------------------------------------------------

// CommonInfo

// string user_data = 1;
inline void CommonInfo::clear_user_data() {
  user_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CommonInfo::user_data() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
  return user_data_.Get();
}
inline void CommonInfo::set_user_data(const ::std::string& value) {
  
  user_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}
inline void CommonInfo::set_user_data(const char* value) {
  
  user_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}
inline void CommonInfo::set_user_data(const char* value,
    size_t size) {
  
  user_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}
inline ::std::string* CommonInfo::mutable_user_data() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
  return user_data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CommonInfo::release_user_data() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
  
  return user_data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CommonInfo::unsafe_arena_release_user_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CommonInfo::set_allocated_user_data(::std::string* user_data) {
  if (user_data != NULL) {
    
  } else {
    
  }
  user_data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}
inline void CommonInfo::unsafe_arena_set_allocated_user_data(
    ::std::string* user_data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_data != NULL) {
    
  } else {
    
  }
  user_data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.common.CommonInfo.user_data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace common
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::ProtoDictionary> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::ProtoDictionary>() {
  return ::com::fsmeeting::fsp::proto::common::ProtoDictionary_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::ResponseCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::ResponseCode>() {
  return ::com::fsmeeting::fsp::proto::common::ResponseCode_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::ServerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::ServerType>() {
  return ::com::fsmeeting::fsp::proto::common::ServerType_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::ProxyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::ProxyType>() {
  return ::com::fsmeeting::fsp::proto::common::ProxyType_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::StreamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::StreamType>() {
  return ::com::fsmeeting::fsp::proto::common::StreamType_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::MediaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::MediaType>() {
  return ::com::fsmeeting::fsp::proto::common::MediaType_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::PresetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::PresetType>() {
  return ::com::fsmeeting::fsp::proto::common::PresetType_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::StreamProperty> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::StreamProperty>() {
  return ::com::fsmeeting::fsp::proto::common::StreamProperty_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::DataType>() {
  return ::com::fsmeeting::fsp::proto::common::DataType_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::ServiceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::ServiceType>() {
  return ::com::fsmeeting::fsp::proto::common::ServiceType_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::DataDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::DataDirection>() {
  return ::com::fsmeeting::fsp::proto::common::DataDirection_descriptor();
}
template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::common::ChannelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::common::ChannelType>() {
  return ::com::fsmeeting::fsp::proto::common::ChannelType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fsp_2dcommon_2eproto__INCLUDED
