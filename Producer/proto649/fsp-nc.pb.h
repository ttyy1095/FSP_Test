// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-nc.proto

#ifndef PROTOBUF_fsp_2dnc_2eproto__INCLUDED
#define PROTOBUF_fsp_2dnc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fsp-common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class BillInfo;
class BillInfoDefaultTypeInternal;
extern BillInfoDefaultTypeInternal _BillInfo_default_instance_;
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class CommonInfo;
class CommonInfoDefaultTypeInternal;
extern CommonInfoDefaultTypeInternal _CommonInfo_default_instance_;
class CommonInvokeInfo;
class CommonInvokeInfoDefaultTypeInternal;
extern CommonInvokeInfoDefaultTypeInternal _CommonInvokeInfo_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupServer;
class GroupServerDefaultTypeInternal;
extern GroupServerDefaultTypeInternal _GroupServer_default_instance_;
class NotifyStreamDestroied;
class NotifyStreamDestroiedDefaultTypeInternal;
extern NotifyStreamDestroiedDefaultTypeInternal _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRsp;
class NotifyStreamDestroiedRspDefaultTypeInternal;
extern NotifyStreamDestroiedRspDefaultTypeInternal _NotifyStreamDestroiedRsp_default_instance_;
class Proxy;
class ProxyDefaultTypeInternal;
extern ProxyDefaultTypeInternal _Proxy_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamServer;
class StreamServerDefaultTypeInternal;
extern StreamServerDefaultTypeInternal _StreamServer_default_instance_;
class StreamSourceChanged;
class StreamSourceChangedDefaultTypeInternal;
extern StreamSourceChangedDefaultTypeInternal _StreamSourceChanged_default_instance_;
class StreamSourceChangedRsp;
class StreamSourceChangedRspDefaultTypeInternal;
extern StreamSourceChangedRspDefaultTypeInternal _StreamSourceChangedRsp_default_instance_;
}  // namespace common
namespace nc {
class NotifyPublishStream;
class NotifyPublishStreamDefaultTypeInternal;
extern NotifyPublishStreamDefaultTypeInternal _NotifyPublishStream_default_instance_;
class NotifyPublishStreamRsp;
class NotifyPublishStreamRspDefaultTypeInternal;
extern NotifyPublishStreamRspDefaultTypeInternal _NotifyPublishStreamRsp_default_instance_;
class NotifyStreamSendingStart;
class NotifyStreamSendingStartDefaultTypeInternal;
extern NotifyStreamSendingStartDefaultTypeInternal _NotifyStreamSendingStart_default_instance_;
class NotifyStreamSendingStartRsp;
class NotifyStreamSendingStartRspDefaultTypeInternal;
extern NotifyStreamSendingStartRspDefaultTypeInternal _NotifyStreamSendingStartRsp_default_instance_;
class NotifyStreamSendingStop;
class NotifyStreamSendingStopDefaultTypeInternal;
extern NotifyStreamSendingStopDefaultTypeInternal _NotifyStreamSendingStop_default_instance_;
class NotifyStreamSendingStopRsp;
class NotifyStreamSendingStopRspDefaultTypeInternal;
extern NotifyStreamSendingStopRspDefaultTypeInternal _NotifyStreamSendingStopRsp_default_instance_;
class SelectStreamServer;
class SelectStreamServerDefaultTypeInternal;
extern SelectStreamServerDefaultTypeInternal _SelectStreamServer_default_instance_;
class SelectStreamServerRsp;
class SelectStreamServerRspDefaultTypeInternal;
extern SelectStreamServerRspDefaultTypeInternal _SelectStreamServerRsp_default_instance_;
}  // namespace nc
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace nc {

namespace protobuf_fsp_2dnc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fsp_2dnc_2eproto

enum ProtoDictionary {
  Enum2UnknownInterface = 0,
  Enum2SelectStreamServer = 5000,
  Enum2SelectStreamServerRsp = 5001,
  Enum2NotifyStreamSendingStart = 5002,
  Enum2NotifyStreamSendingStartRsp = 5003,
  Enum2NotifyStreamSendingStop = 5004,
  Enum2NotifyStreamSendingStopRsp = 5005,
  Enum2NotifyPublishStream = 5006,
  Enum2NotifyPublishStreamRsp = 5007,
  Enum2StreamSendingStart = 5008,
  Enum2StreamSendingStartRsp = 5009,
  ProtoDictionary_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoDictionary_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoDictionary_IsValid(int value);
const ProtoDictionary ProtoDictionary_MIN = Enum2UnknownInterface;
const ProtoDictionary ProtoDictionary_MAX = Enum2StreamSendingStartRsp;
const int ProtoDictionary_ARRAYSIZE = ProtoDictionary_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor();
inline const ::std::string& ProtoDictionary_Name(ProtoDictionary value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDictionary_descriptor(), value);
}
inline bool ProtoDictionary_Parse(
    const ::std::string& name, ProtoDictionary* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDictionary>(
    ProtoDictionary_descriptor(), name, value);
}
// ===================================================================

class SelectStreamServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.nc.SelectStreamServer) */ {
 public:
  SelectStreamServer();
  virtual ~SelectStreamServer();

  SelectStreamServer(const SelectStreamServer& from);

  inline SelectStreamServer& operator=(const SelectStreamServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectStreamServer& default_instance();

  static inline const SelectStreamServer* internal_default_instance() {
    return reinterpret_cast<const SelectStreamServer*>(
               &_SelectStreamServer_default_instance_);
  }

  void UnsafeArenaSwap(SelectStreamServer* other);
  void Swap(SelectStreamServer* other);

  // implements Message ----------------------------------------------

  inline SelectStreamServer* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectStreamServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectStreamServer& from);
  void MergeFrom(const SelectStreamServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectStreamServer* other);
  protected:
  explicit SelectStreamServer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServer = 2;
  int streamserver_size() const;
  void clear_streamserver();
  static const int kStreamServerFieldNumber = 2;
  const ::com::fsmeeting::fsp::proto::common::StreamServer& streamserver(int index) const;
  ::com::fsmeeting::fsp::proto::common::StreamServer* mutable_streamserver(int index);
  ::com::fsmeeting::fsp::proto::common::StreamServer* add_streamserver();
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
      mutable_streamserver();
  const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
      streamserver() const;

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.nc.SelectStreamServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer > streamserver_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dnc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectStreamServerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp) */ {
 public:
  SelectStreamServerRsp();
  virtual ~SelectStreamServerRsp();

  SelectStreamServerRsp(const SelectStreamServerRsp& from);

  inline SelectStreamServerRsp& operator=(const SelectStreamServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectStreamServerRsp& default_instance();

  static inline const SelectStreamServerRsp* internal_default_instance() {
    return reinterpret_cast<const SelectStreamServerRsp*>(
               &_SelectStreamServerRsp_default_instance_);
  }

  void UnsafeArenaSwap(SelectStreamServerRsp* other);
  void Swap(SelectStreamServerRsp* other);

  // implements Message ----------------------------------------------

  inline SelectStreamServerRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectStreamServerRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectStreamServerRsp& from);
  void MergeFrom(const SelectStreamServerRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectStreamServerRsp* other);
  protected:
  explicit SelectStreamServerRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dnc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart) */ {
 public:
  NotifyStreamSendingStart();
  virtual ~NotifyStreamSendingStart();

  NotifyStreamSendingStart(const NotifyStreamSendingStart& from);

  inline NotifyStreamSendingStart& operator=(const NotifyStreamSendingStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStart& default_instance();

  static inline const NotifyStreamSendingStart* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStart*>(
               &_NotifyStreamSendingStart_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStart* other);
  void Swap(NotifyStreamSendingStart* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStart* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStart& from);
  void MergeFrom(const NotifyStreamSendingStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStart* other);
  protected:
  explicit NotifyStreamSendingStart(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string recv_client_id = 2;
  void clear_recv_client_id();
  static const int kRecvClientIdFieldNumber = 2;
  const ::std::string& recv_client_id() const;
  void set_recv_client_id(const ::std::string& value);
  void set_recv_client_id(const char* value);
  void set_recv_client_id(const char* value, size_t size);
  ::std::string* mutable_recv_client_id();
  ::std::string* release_recv_client_id();
  void set_allocated_recv_client_id(::std::string* recv_client_id);
  ::std::string* unsafe_arena_release_recv_client_id();
  void unsafe_arena_set_allocated_recv_client_id(
      ::std::string* recv_client_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr recv_client_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dnc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStartRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp) */ {
 public:
  NotifyStreamSendingStartRsp();
  virtual ~NotifyStreamSendingStartRsp();

  NotifyStreamSendingStartRsp(const NotifyStreamSendingStartRsp& from);

  inline NotifyStreamSendingStartRsp& operator=(const NotifyStreamSendingStartRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStartRsp& default_instance();

  static inline const NotifyStreamSendingStartRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStartRsp*>(
               &_NotifyStreamSendingStartRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStartRsp* other);
  void Swap(NotifyStreamSendingStartRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStartRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStartRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStartRsp& from);
  void MergeFrom(const NotifyStreamSendingStartRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStartRsp* other);
  protected:
  explicit NotifyStreamSendingStartRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dnc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop) */ {
 public:
  NotifyStreamSendingStop();
  virtual ~NotifyStreamSendingStop();

  NotifyStreamSendingStop(const NotifyStreamSendingStop& from);

  inline NotifyStreamSendingStop& operator=(const NotifyStreamSendingStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStop& default_instance();

  static inline const NotifyStreamSendingStop* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStop*>(
               &_NotifyStreamSendingStop_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStop* other);
  void Swap(NotifyStreamSendingStop* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStop* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStop* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStop& from);
  void MergeFrom(const NotifyStreamSendingStop& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStop* other);
  protected:
  explicit NotifyStreamSendingStop(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string recv_client_id = 2;
  void clear_recv_client_id();
  static const int kRecvClientIdFieldNumber = 2;
  const ::std::string& recv_client_id() const;
  void set_recv_client_id(const ::std::string& value);
  void set_recv_client_id(const char* value);
  void set_recv_client_id(const char* value, size_t size);
  ::std::string* mutable_recv_client_id();
  ::std::string* release_recv_client_id();
  void set_allocated_recv_client_id(::std::string* recv_client_id);
  ::std::string* unsafe_arena_release_recv_client_id();
  void unsafe_arena_set_allocated_recv_client_id(
      ::std::string* recv_client_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr recv_client_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dnc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStopRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp) */ {
 public:
  NotifyStreamSendingStopRsp();
  virtual ~NotifyStreamSendingStopRsp();

  NotifyStreamSendingStopRsp(const NotifyStreamSendingStopRsp& from);

  inline NotifyStreamSendingStopRsp& operator=(const NotifyStreamSendingStopRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStopRsp& default_instance();

  static inline const NotifyStreamSendingStopRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStopRsp*>(
               &_NotifyStreamSendingStopRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStopRsp* other);
  void Swap(NotifyStreamSendingStopRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStopRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStopRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStopRsp& from);
  void MergeFrom(const NotifyStreamSendingStopRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStopRsp* other);
  protected:
  explicit NotifyStreamSendingStopRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dnc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyPublishStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.nc.NotifyPublishStream) */ {
 public:
  NotifyPublishStream();
  virtual ~NotifyPublishStream();

  NotifyPublishStream(const NotifyPublishStream& from);

  inline NotifyPublishStream& operator=(const NotifyPublishStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyPublishStream& default_instance();

  static inline const NotifyPublishStream* internal_default_instance() {
    return reinterpret_cast<const NotifyPublishStream*>(
               &_NotifyPublishStream_default_instance_);
  }

  void UnsafeArenaSwap(NotifyPublishStream* other);
  void Swap(NotifyPublishStream* other);

  // implements Message ----------------------------------------------

  inline NotifyPublishStream* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyPublishStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyPublishStream& from);
  void MergeFrom(const NotifyPublishStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyPublishStream* other);
  protected:
  explicit NotifyPublishStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string stream_publish_token = 2;
  void clear_stream_publish_token();
  static const int kStreamPublishTokenFieldNumber = 2;
  const ::std::string& stream_publish_token() const;
  void set_stream_publish_token(const ::std::string& value);
  void set_stream_publish_token(const char* value);
  void set_stream_publish_token(const char* value, size_t size);
  ::std::string* mutable_stream_publish_token();
  ::std::string* release_stream_publish_token();
  void set_allocated_stream_publish_token(::std::string* stream_publish_token);
  ::std::string* unsafe_arena_release_stream_publish_token();
  void unsafe_arena_set_allocated_stream_publish_token(
      ::std::string* stream_publish_token);

  // string group_id = 3;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string media_id = 5;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 5;
  const ::std::string& media_id() const;
  void set_media_id(const ::std::string& value);
  void set_media_id(const char* value);
  void set_media_id(const char* value, size_t size);
  ::std::string* mutable_media_id();
  ::std::string* release_media_id();
  void set_allocated_media_id(::std::string* media_id);
  ::std::string* unsafe_arena_release_media_id();
  void unsafe_arena_set_allocated_media_id(
      ::std::string* media_id);

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 6;
  ::com::fsmeeting::fsp::proto::common::MediaType media_type() const;
  void set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.nc.NotifyPublishStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_publish_token_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr media_id_;
  int media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dnc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyPublishStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp) */ {
 public:
  NotifyPublishStreamRsp();
  virtual ~NotifyPublishStreamRsp();

  NotifyPublishStreamRsp(const NotifyPublishStreamRsp& from);

  inline NotifyPublishStreamRsp& operator=(const NotifyPublishStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyPublishStreamRsp& default_instance();

  static inline const NotifyPublishStreamRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyPublishStreamRsp*>(
               &_NotifyPublishStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyPublishStreamRsp* other);
  void Swap(NotifyPublishStreamRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyPublishStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyPublishStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyPublishStreamRsp& from);
  void MergeFrom(const NotifyPublishStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyPublishStreamRsp* other);
  protected:
  explicit NotifyPublishStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dnc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectStreamServer

// string stream_id = 1;
inline void SelectStreamServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SelectStreamServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
  return stream_id_.Get();
}
inline void SelectStreamServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}
inline void SelectStreamServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}
inline void SelectStreamServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}
inline ::std::string* SelectStreamServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SelectStreamServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SelectStreamServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SelectStreamServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}
inline void SelectStreamServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.SelectStreamServer.stream_id)
}

// repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServer = 2;
inline int SelectStreamServer::streamserver_size() const {
  return streamserver_.size();
}
inline void SelectStreamServer::clear_streamserver() {
  streamserver_.Clear();
}
inline const ::com::fsmeeting::fsp::proto::common::StreamServer& SelectStreamServer::streamserver(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return streamserver_.Get(index);
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* SelectStreamServer::mutable_streamserver(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return streamserver_.Mutable(index);
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* SelectStreamServer::add_streamserver() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return streamserver_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
SelectStreamServer::mutable_streamserver() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return &streamserver_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
SelectStreamServer::streamserver() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.nc.SelectStreamServer.streamServer)
  return streamserver_;
}

// -------------------------------------------------------------------

// SelectStreamServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool SelectStreamServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void SelectStreamServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& SelectStreamServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void SelectStreamServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.SelectStreamServerRsp.response)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStart

// string stream_id = 1;
inline void NotifyStreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
  return stream_id_.Get();
}
inline void NotifyStreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}
inline void NotifyStreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}
inline void NotifyStreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}
inline ::std::string* NotifyStreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}
inline void NotifyStreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.stream_id)
}

// string recv_client_id = 2;
inline void NotifyStreamSendingStart::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStart::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Get();
}
inline void NotifyStreamSendingStart::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}
inline void NotifyStreamSendingStart::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}
inline void NotifyStreamSendingStart::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}
inline ::std::string* NotifyStreamSendingStart::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStart::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}
inline void NotifyStreamSendingStart::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStart.recv_client_id)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyStreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyStreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStartRsp.response)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStop

// string stream_id = 1;
inline void NotifyStreamSendingStop::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStop::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
  return stream_id_.Get();
}
inline void NotifyStreamSendingStop::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}
inline void NotifyStreamSendingStop::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}
inline void NotifyStreamSendingStop::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}
inline ::std::string* NotifyStreamSendingStop::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStop::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}
inline void NotifyStreamSendingStop::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.stream_id)
}

// string recv_client_id = 2;
inline void NotifyStreamSendingStop::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStop::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Get();
}
inline void NotifyStreamSendingStop::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}
inline void NotifyStreamSendingStop::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}
inline void NotifyStreamSendingStop::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}
inline ::std::string* NotifyStreamSendingStop::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStop::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}
inline void NotifyStreamSendingStop::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStop.recv_client_id)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyStreamSendingStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyStreamSendingStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamSendingStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyStreamSendingStopRsp.response)
}

// -------------------------------------------------------------------

// NotifyPublishStream

// string stream_id = 1;
inline void NotifyPublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
  return stream_id_.Get();
}
inline void NotifyPublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}
inline void NotifyPublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}
inline void NotifyPublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}
inline ::std::string* NotifyPublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_id)
}

// string stream_publish_token = 2;
inline void NotifyPublishStream::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
  return stream_publish_token_.Get();
}
inline void NotifyPublishStream::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}
inline void NotifyPublishStream::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}
inline void NotifyPublishStream::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}
inline ::std::string* NotifyPublishStream::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.stream_publish_token)
}

// string group_id = 3;
inline void NotifyPublishStream::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
  return group_id_.Get();
}
inline void NotifyPublishStream::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}
inline void NotifyPublishStream::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}
inline void NotifyPublishStream::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}
inline ::std::string* NotifyPublishStream::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.group_id)
}

// string user_id = 4;
inline void NotifyPublishStream::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
  return user_id_.Get();
}
inline void NotifyPublishStream::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}
inline void NotifyPublishStream::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}
inline void NotifyPublishStream::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}
inline ::std::string* NotifyPublishStream::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.user_id)
}

// string media_id = 5;
inline void NotifyPublishStream::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
  return media_id_.Get();
}
inline void NotifyPublishStream::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}
inline void NotifyPublishStream::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}
inline void NotifyPublishStream::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}
inline ::std::string* NotifyPublishStream::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
inline void NotifyPublishStream::clear_media_type() {
  media_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::MediaType NotifyPublishStream::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
inline void NotifyPublishStream::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.nc.NotifyPublishStream.media_type)
}

// -------------------------------------------------------------------

// NotifyPublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyPublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyPublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyPublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyPublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.nc.NotifyPublishStreamRsp.response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace nc
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::nc::ProtoDictionary> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::nc::ProtoDictionary>() {
  return ::com::fsmeeting::fsp::proto::nc::ProtoDictionary_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fsp_2dnc_2eproto__INCLUDED
