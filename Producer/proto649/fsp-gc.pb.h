// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-gc.proto

#ifndef PROTOBUF_fsp_2dgc_2eproto__INCLUDED
#define PROTOBUF_fsp_2dgc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fsp-common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class BillInfo;
class BillInfoDefaultTypeInternal;
extern BillInfoDefaultTypeInternal _BillInfo_default_instance_;
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class CommonInfo;
class CommonInfoDefaultTypeInternal;
extern CommonInfoDefaultTypeInternal _CommonInfo_default_instance_;
class CommonInvokeInfo;
class CommonInvokeInfoDefaultTypeInternal;
extern CommonInvokeInfoDefaultTypeInternal _CommonInvokeInfo_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupServer;
class GroupServerDefaultTypeInternal;
extern GroupServerDefaultTypeInternal _GroupServer_default_instance_;
class NotifyStreamDestroied;
class NotifyStreamDestroiedDefaultTypeInternal;
extern NotifyStreamDestroiedDefaultTypeInternal _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRsp;
class NotifyStreamDestroiedRspDefaultTypeInternal;
extern NotifyStreamDestroiedRspDefaultTypeInternal _NotifyStreamDestroiedRsp_default_instance_;
class Proxy;
class ProxyDefaultTypeInternal;
extern ProxyDefaultTypeInternal _Proxy_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamServer;
class StreamServerDefaultTypeInternal;
extern StreamServerDefaultTypeInternal _StreamServer_default_instance_;
class StreamSourceChanged;
class StreamSourceChangedDefaultTypeInternal;
extern StreamSourceChangedDefaultTypeInternal _StreamSourceChanged_default_instance_;
class StreamSourceChangedRsp;
class StreamSourceChangedRspDefaultTypeInternal;
extern StreamSourceChangedRspDefaultTypeInternal _StreamSourceChangedRsp_default_instance_;
}  // namespace common
namespace gc {
class BroadcastMediaInfo;
class BroadcastMediaInfoDefaultTypeInternal;
extern BroadcastMediaInfoDefaultTypeInternal _BroadcastMediaInfo_default_instance_;
class BroadcastMediaInfoRsp;
class BroadcastMediaInfoRspDefaultTypeInternal;
extern BroadcastMediaInfoRspDefaultTypeInternal _BroadcastMediaInfoRsp_default_instance_;
class CreateGroup;
class CreateGroupDefaultTypeInternal;
extern CreateGroupDefaultTypeInternal _CreateGroup_default_instance_;
class CreateGroupRsp;
class CreateGroupRspDefaultTypeInternal;
extern CreateGroupRspDefaultTypeInternal _CreateGroupRsp_default_instance_;
class DestroyGroup;
class DestroyGroupDefaultTypeInternal;
extern DestroyGroupDefaultTypeInternal _DestroyGroup_default_instance_;
class DestroyGroupRsp;
class DestroyGroupRspDefaultTypeInternal;
extern DestroyGroupRspDefaultTypeInternal _DestroyGroupRsp_default_instance_;
class GetGroupServers;
class GetGroupServersDefaultTypeInternal;
extern GetGroupServersDefaultTypeInternal _GetGroupServers_default_instance_;
class GetGroupServersRsp;
class GetGroupServersRspDefaultTypeInternal;
extern GetGroupServersRspDefaultTypeInternal _GetGroupServersRsp_default_instance_;
class GetStream;
class GetStreamDefaultTypeInternal;
extern GetStreamDefaultTypeInternal _GetStream_default_instance_;
class GetStreamRsp;
class GetStreamRspDefaultTypeInternal;
extern GetStreamRspDefaultTypeInternal _GetStreamRsp_default_instance_;
class JoinGroup;
class JoinGroupDefaultTypeInternal;
extern JoinGroupDefaultTypeInternal _JoinGroup_default_instance_;
class JoinGroupRsp;
class JoinGroupRspDefaultTypeInternal;
extern JoinGroupRspDefaultTypeInternal _JoinGroupRsp_default_instance_;
class NotifyStreamPublished;
class NotifyStreamPublishedDefaultTypeInternal;
extern NotifyStreamPublishedDefaultTypeInternal _NotifyStreamPublished_default_instance_;
class NotifyStreamPublishedRsp;
class NotifyStreamPublishedRspDefaultTypeInternal;
extern NotifyStreamPublishedRspDefaultTypeInternal _NotifyStreamPublishedRsp_default_instance_;
class QuitGroup;
class QuitGroupDefaultTypeInternal;
extern QuitGroupDefaultTypeInternal _QuitGroup_default_instance_;
class QuitGroupRsp;
class QuitGroupRspDefaultTypeInternal;
extern QuitGroupRspDefaultTypeInternal _QuitGroupRsp_default_instance_;
}  // namespace gc
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace gc {

namespace protobuf_fsp_2dgc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fsp_2dgc_2eproto

enum ProtoDictionary {
  Enum2UnknownInterface = 0,
  Enum2CreateGroup = 3000,
  Enum2CreateGroupRsp = 3001,
  Enum2DestroyGroup = 3002,
  Enum2DestroyGroupRsp = 3003,
  Enum2GetGroupServers = 3004,
  Enum2GetGroupServersRsp = 3005,
  Enum2JoinGroup = 3006,
  Enum2JoinGroupRsp = 3007,
  Enum2QuitGroup = 3008,
  Enum2QuitGroupRsp = 3009,
  Enum2GetStream = 3010,
  Enum2GetStreamRsp = 3012,
  Enum2NotifyStreamPublished = 3013,
  Enum2NotifyStreamPublishedRsp = 3014,
  Enum2NotifyStartBroadcastMedia = 3015,
  Enum2NotifyStartBroadcastMediaRsp = 3016,
  Enum2NotifyStopBroadcastMedia = 3017,
  Enum2NotifyStopBroadcastMediaRsp = 3018,
  Enum2GetVNCGroupServers = 3019,
  Enum2GetVNCGroupServersRsp = 3020,
  ProtoDictionary_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoDictionary_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoDictionary_IsValid(int value);
const ProtoDictionary ProtoDictionary_MIN = Enum2UnknownInterface;
const ProtoDictionary ProtoDictionary_MAX = Enum2GetVNCGroupServersRsp;
const int ProtoDictionary_ARRAYSIZE = ProtoDictionary_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor();
inline const ::std::string& ProtoDictionary_Name(ProtoDictionary value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDictionary_descriptor(), value);
}
inline bool ProtoDictionary_Parse(
    const ::std::string& name, ProtoDictionary* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDictionary>(
    ProtoDictionary_descriptor(), name, value);
}
// ===================================================================

class CreateGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.CreateGroup) */ {
 public:
  CreateGroup();
  virtual ~CreateGroup();

  CreateGroup(const CreateGroup& from);

  inline CreateGroup& operator=(const CreateGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroup& default_instance();

  static inline const CreateGroup* internal_default_instance() {
    return reinterpret_cast<const CreateGroup*>(
               &_CreateGroup_default_instance_);
  }

  void UnsafeArenaSwap(CreateGroup* other);
  void Swap(CreateGroup* other);

  // implements Message ----------------------------------------------

  inline CreateGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateGroup& from);
  void MergeFrom(const CreateGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateGroup* other);
  protected:
  explicit CreateGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // string room_id = 3;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);
  ::std::string* unsafe_arena_release_room_id();
  void unsafe_arena_set_allocated_room_id(
      ::std::string* room_id);

  // string company_id = 4;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 4;
  const ::std::string& company_id() const;
  void set_company_id(const ::std::string& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  ::std::string* mutable_company_id();
  ::std::string* release_company_id();
  void set_allocated_company_id(::std::string* company_id);
  ::std::string* unsafe_arena_release_company_id();
  void unsafe_arena_set_allocated_company_id(
      ::std::string* company_id);

  // .com.fsmeeting.fsp.proto.common.ServiceType service_type = 2;
  void clear_service_type();
  static const int kServiceTypeFieldNumber = 2;
  ::com::fsmeeting::fsp::proto::common::ServiceType service_type() const;
  void set_service_type(::com::fsmeeting::fsp::proto::common::ServiceType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.CreateGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::internal::ArenaStringPtr company_id_;
  int service_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.CreateGroupRsp) */ {
 public:
  CreateGroupRsp();
  virtual ~CreateGroupRsp();

  CreateGroupRsp(const CreateGroupRsp& from);

  inline CreateGroupRsp& operator=(const CreateGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupRsp& default_instance();

  static inline const CreateGroupRsp* internal_default_instance() {
    return reinterpret_cast<const CreateGroupRsp*>(
               &_CreateGroupRsp_default_instance_);
  }

  void UnsafeArenaSwap(CreateGroupRsp* other);
  void Swap(CreateGroupRsp* other);

  // implements Message ----------------------------------------------

  inline CreateGroupRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateGroupRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateGroupRsp& from);
  void MergeFrom(const CreateGroupRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateGroupRsp* other);
  protected:
  explicit CreateGroupRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // .com.fsmeeting.fsp.proto.common.Group group = 2;
  bool has_group() const;
  void clear_group();
  static const int kGroupFieldNumber = 2;
  private:
  void _slow_mutable_group();
  void _slow_set_allocated_group(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::Group** group);
  ::com::fsmeeting::fsp::proto::common::Group* _slow_release_group();
  public:
  const ::com::fsmeeting::fsp::proto::common::Group& group() const;
  ::com::fsmeeting::fsp::proto::common::Group* mutable_group();
  ::com::fsmeeting::fsp::proto::common::Group* release_group();
  void set_allocated_group(::com::fsmeeting::fsp::proto::common::Group* group);
  ::com::fsmeeting::fsp::proto::common::Group* unsafe_arena_release_group();
  void unsafe_arena_set_allocated_group(
      ::com::fsmeeting::fsp::proto::common::Group* group);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.CreateGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  ::com::fsmeeting::fsp::proto::common::Group* group_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DestroyGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.DestroyGroup) */ {
 public:
  DestroyGroup();
  virtual ~DestroyGroup();

  DestroyGroup(const DestroyGroup& from);

  inline DestroyGroup& operator=(const DestroyGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyGroup& default_instance();

  static inline const DestroyGroup* internal_default_instance() {
    return reinterpret_cast<const DestroyGroup*>(
               &_DestroyGroup_default_instance_);
  }

  void UnsafeArenaSwap(DestroyGroup* other);
  void Swap(DestroyGroup* other);

  // implements Message ----------------------------------------------

  inline DestroyGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  DestroyGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DestroyGroup& from);
  void MergeFrom(const DestroyGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DestroyGroup* other);
  protected:
  explicit DestroyGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string app_id = 1;
  void clear_app_id();
  static const int kAppIdFieldNumber = 1;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // string group_id = 2;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.DestroyGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DestroyGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp) */ {
 public:
  DestroyGroupRsp();
  virtual ~DestroyGroupRsp();

  DestroyGroupRsp(const DestroyGroupRsp& from);

  inline DestroyGroupRsp& operator=(const DestroyGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DestroyGroupRsp& default_instance();

  static inline const DestroyGroupRsp* internal_default_instance() {
    return reinterpret_cast<const DestroyGroupRsp*>(
               &_DestroyGroupRsp_default_instance_);
  }

  void UnsafeArenaSwap(DestroyGroupRsp* other);
  void Swap(DestroyGroupRsp* other);

  // implements Message ----------------------------------------------

  inline DestroyGroupRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  DestroyGroupRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DestroyGroupRsp& from);
  void MergeFrom(const DestroyGroupRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DestroyGroupRsp* other);
  protected:
  explicit DestroyGroupRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGroupServers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.GetGroupServers) */ {
 public:
  GetGroupServers();
  virtual ~GetGroupServers();

  GetGroupServers(const GetGroupServers& from);

  inline GetGroupServers& operator=(const GetGroupServers& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupServers& default_instance();

  static inline const GetGroupServers* internal_default_instance() {
    return reinterpret_cast<const GetGroupServers*>(
               &_GetGroupServers_default_instance_);
  }

  void UnsafeArenaSwap(GetGroupServers* other);
  void Swap(GetGroupServers* other);

  // implements Message ----------------------------------------------

  inline GetGroupServers* New() const PROTOBUF_FINAL { return New(NULL); }

  GetGroupServers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetGroupServers& from);
  void MergeFrom(const GetGroupServers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetGroupServers* other);
  protected:
  explicit GetGroupServers(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string client_ip = 2;
  void clear_client_ip();
  static const int kClientIpFieldNumber = 2;
  const ::std::string& client_ip() const;
  void set_client_ip(const ::std::string& value);
  void set_client_ip(const char* value);
  void set_client_ip(const char* value, size_t size);
  ::std::string* mutable_client_ip();
  ::std::string* release_client_ip();
  void set_allocated_client_ip(::std::string* client_ip);
  ::std::string* unsafe_arena_release_client_ip();
  void unsafe_arena_set_allocated_client_ip(
      ::std::string* client_ip);

  // string user_id = 3;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string app_id = 4;
  void clear_app_id();
  static const int kAppIdFieldNumber = 4;
  const ::std::string& app_id() const;
  void set_app_id(const ::std::string& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  ::std::string* mutable_app_id();
  ::std::string* release_app_id();
  void set_allocated_app_id(::std::string* app_id);
  ::std::string* unsafe_arena_release_app_id();
  void unsafe_arena_set_allocated_app_id(
      ::std::string* app_id);

  // string company_id = 5;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 5;
  const ::std::string& company_id() const;
  void set_company_id(const ::std::string& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  ::std::string* mutable_company_id();
  ::std::string* release_company_id();
  void set_allocated_company_id(::std::string* company_id);
  ::std::string* unsafe_arena_release_company_id();
  void unsafe_arena_set_allocated_company_id(
      ::std::string* company_id);

  // string room_id = 6;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 6;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);
  ::std::string* unsafe_arena_release_room_id();
  void unsafe_arena_set_allocated_room_id(
      ::std::string* room_id);

  // int32 type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.GetGroupServers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr client_ip_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr app_id_;
  ::google::protobuf::internal::ArenaStringPtr company_id_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetGroupServersRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp) */ {
 public:
  GetGroupServersRsp();
  virtual ~GetGroupServersRsp();

  GetGroupServersRsp(const GetGroupServersRsp& from);

  inline GetGroupServersRsp& operator=(const GetGroupServersRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetGroupServersRsp& default_instance();

  static inline const GetGroupServersRsp* internal_default_instance() {
    return reinterpret_cast<const GetGroupServersRsp*>(
               &_GetGroupServersRsp_default_instance_);
  }

  void UnsafeArenaSwap(GetGroupServersRsp* other);
  void Swap(GetGroupServersRsp* other);

  // implements Message ----------------------------------------------

  inline GetGroupServersRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetGroupServersRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetGroupServersRsp& from);
  void MergeFrom(const GetGroupServersRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetGroupServersRsp* other);
  protected:
  explicit GetGroupServersRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fsmeeting.fsp.proto.common.GroupServer group_servers = 2;
  int group_servers_size() const;
  void clear_group_servers();
  static const int kGroupServersFieldNumber = 2;
  const ::com::fsmeeting::fsp::proto::common::GroupServer& group_servers(int index) const;
  ::com::fsmeeting::fsp::proto::common::GroupServer* mutable_group_servers(int index);
  ::com::fsmeeting::fsp::proto::common::GroupServer* add_group_servers();
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::GroupServer >*
      mutable_group_servers();
  const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::GroupServer >&
      group_servers() const;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::GroupServer > group_servers_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.JoinGroup) */ {
 public:
  JoinGroup();
  virtual ~JoinGroup();

  JoinGroup(const JoinGroup& from);

  inline JoinGroup& operator=(const JoinGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGroup& default_instance();

  static inline const JoinGroup* internal_default_instance() {
    return reinterpret_cast<const JoinGroup*>(
               &_JoinGroup_default_instance_);
  }

  void UnsafeArenaSwap(JoinGroup* other);
  void Swap(JoinGroup* other);

  // implements Message ----------------------------------------------

  inline JoinGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinGroup& from);
  void MergeFrom(const JoinGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGroup* other);
  protected:
  explicit JoinGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string group_token = 3;
  void clear_group_token();
  static const int kGroupTokenFieldNumber = 3;
  const ::std::string& group_token() const;
  void set_group_token(const ::std::string& value);
  void set_group_token(const char* value);
  void set_group_token(const char* value, size_t size);
  ::std::string* mutable_group_token();
  ::std::string* release_group_token();
  void set_allocated_group_token(::std::string* group_token);
  ::std::string* unsafe_arena_release_group_token();
  void unsafe_arena_set_allocated_group_token(
      ::std::string* group_token);

  // string client_id = 4;
  void clear_client_id();
  static const int kClientIdFieldNumber = 4;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string service_instance_id = 5;
  void clear_service_instance_id();
  static const int kServiceInstanceIdFieldNumber = 5;
  const ::std::string& service_instance_id() const;
  void set_service_instance_id(const ::std::string& value);
  void set_service_instance_id(const char* value);
  void set_service_instance_id(const char* value, size_t size);
  ::std::string* mutable_service_instance_id();
  ::std::string* release_service_instance_id();
  void set_allocated_service_instance_id(::std::string* service_instance_id);
  ::std::string* unsafe_arena_release_service_instance_id();
  void unsafe_arena_set_allocated_service_instance_id(
      ::std::string* service_instance_id);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 6;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 6;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.JoinGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr group_token_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr service_instance_id_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.JoinGroupRsp) */ {
 public:
  JoinGroupRsp();
  virtual ~JoinGroupRsp();

  JoinGroupRsp(const JoinGroupRsp& from);

  inline JoinGroupRsp& operator=(const JoinGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGroupRsp& default_instance();

  static inline const JoinGroupRsp* internal_default_instance() {
    return reinterpret_cast<const JoinGroupRsp*>(
               &_JoinGroupRsp_default_instance_);
  }

  void UnsafeArenaSwap(JoinGroupRsp* other);
  void Swap(JoinGroupRsp* other);

  // implements Message ----------------------------------------------

  inline JoinGroupRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGroupRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinGroupRsp& from);
  void MergeFrom(const JoinGroupRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGroupRsp* other);
  protected:
  explicit JoinGroupRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string room_id = 2;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);
  ::std::string* unsafe_arena_release_room_id();
  void unsafe_arena_set_allocated_room_id(
      ::std::string* room_id);

  // string company_id = 3;
  void clear_company_id();
  static const int kCompanyIdFieldNumber = 3;
  const ::std::string& company_id() const;
  void set_company_id(const ::std::string& value);
  void set_company_id(const char* value);
  void set_company_id(const char* value, size_t size);
  ::std::string* mutable_company_id();
  ::std::string* release_company_id();
  void set_allocated_company_id(::std::string* company_id);
  ::std::string* unsafe_arena_release_company_id();
  void unsafe_arena_set_allocated_company_id(
      ::std::string* company_id);

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.JoinGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr room_id_;
  ::google::protobuf::internal::ArenaStringPtr company_id_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuitGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.QuitGroup) */ {
 public:
  QuitGroup();
  virtual ~QuitGroup();

  QuitGroup(const QuitGroup& from);

  inline QuitGroup& operator=(const QuitGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitGroup& default_instance();

  static inline const QuitGroup* internal_default_instance() {
    return reinterpret_cast<const QuitGroup*>(
               &_QuitGroup_default_instance_);
  }

  void UnsafeArenaSwap(QuitGroup* other);
  void Swap(QuitGroup* other);

  // implements Message ----------------------------------------------

  inline QuitGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  QuitGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuitGroup& from);
  void MergeFrom(const QuitGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuitGroup* other);
  protected:
  explicit QuitGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string client_id = 3;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string service_instance_id = 4;
  void clear_service_instance_id();
  static const int kServiceInstanceIdFieldNumber = 4;
  const ::std::string& service_instance_id() const;
  void set_service_instance_id(const ::std::string& value);
  void set_service_instance_id(const char* value);
  void set_service_instance_id(const char* value, size_t size);
  ::std::string* mutable_service_instance_id();
  ::std::string* release_service_instance_id();
  void set_allocated_service_instance_id(::std::string* service_instance_id);
  ::std::string* unsafe_arena_release_service_instance_id();
  void unsafe_arena_set_allocated_service_instance_id(
      ::std::string* service_instance_id);

  // .com.fsmeeting.fsp.proto.common.ServerType service_type = 5;
  void clear_service_type();
  static const int kServiceTypeFieldNumber = 5;
  ::com::fsmeeting::fsp::proto::common::ServerType service_type() const;
  void set_service_type(::com::fsmeeting::fsp::proto::common::ServerType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.QuitGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr service_instance_id_;
  int service_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuitGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.QuitGroupRsp) */ {
 public:
  QuitGroupRsp();
  virtual ~QuitGroupRsp();

  QuitGroupRsp(const QuitGroupRsp& from);

  inline QuitGroupRsp& operator=(const QuitGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitGroupRsp& default_instance();

  static inline const QuitGroupRsp* internal_default_instance() {
    return reinterpret_cast<const QuitGroupRsp*>(
               &_QuitGroupRsp_default_instance_);
  }

  void UnsafeArenaSwap(QuitGroupRsp* other);
  void Swap(QuitGroupRsp* other);

  // implements Message ----------------------------------------------

  inline QuitGroupRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  QuitGroupRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuitGroupRsp& from);
  void MergeFrom(const QuitGroupRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuitGroupRsp* other);
  protected:
  explicit QuitGroupRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.QuitGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamPublished : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished) */ {
 public:
  NotifyStreamPublished();
  virtual ~NotifyStreamPublished();

  NotifyStreamPublished(const NotifyStreamPublished& from);

  inline NotifyStreamPublished& operator=(const NotifyStreamPublished& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamPublished& default_instance();

  static inline const NotifyStreamPublished* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamPublished*>(
               &_NotifyStreamPublished_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamPublished* other);
  void Swap(NotifyStreamPublished* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamPublished* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamPublished* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamPublished& from);
  void MergeFrom(const NotifyStreamPublished& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamPublished* other);
  protected:
  explicit NotifyStreamPublished(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string stream_id = 2;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string group_id = 3;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 4;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string media_id2 = 7;
  void clear_media_id2();
  static const int kMediaId2FieldNumber = 7;
  const ::std::string& media_id2() const;
  void set_media_id2(const ::std::string& value);
  void set_media_id2(const char* value);
  void set_media_id2(const char* value, size_t size);
  ::std::string* mutable_media_id2();
  ::std::string* release_media_id2();
  void set_allocated_media_id2(::std::string* media_id2);
  ::std::string* unsafe_arena_release_media_id2();
  void unsafe_arena_set_allocated_media_id2(
      ::std::string* media_id2);

  // int32 media_id = 5;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 5;
  ::google::protobuf::int32 media_id() const;
  void set_media_id(::google::protobuf::int32 value);

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 6;
  ::com::fsmeeting::fsp::proto::common::MediaType media_type() const;
  void set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr media_id2_;
  ::google::protobuf::int32 media_id_;
  int media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamPublishedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp) */ {
 public:
  NotifyStreamPublishedRsp();
  virtual ~NotifyStreamPublishedRsp();

  NotifyStreamPublishedRsp(const NotifyStreamPublishedRsp& from);

  inline NotifyStreamPublishedRsp& operator=(const NotifyStreamPublishedRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamPublishedRsp& default_instance();

  static inline const NotifyStreamPublishedRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamPublishedRsp*>(
               &_NotifyStreamPublishedRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamPublishedRsp* other);
  void Swap(NotifyStreamPublishedRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamPublishedRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamPublishedRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamPublishedRsp& from);
  void MergeFrom(const NotifyStreamPublishedRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamPublishedRsp* other);
  protected:
  explicit NotifyStreamPublishedRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.GetStream) */ {
 public:
  GetStream();
  virtual ~GetStream();

  GetStream(const GetStream& from);

  inline GetStream& operator=(const GetStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStream& default_instance();

  static inline const GetStream* internal_default_instance() {
    return reinterpret_cast<const GetStream*>(
               &_GetStream_default_instance_);
  }

  void UnsafeArenaSwap(GetStream* other);
  void Swap(GetStream* other);

  // implements Message ----------------------------------------------

  inline GetStream* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStream& from);
  void MergeFrom(const GetStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStream* other);
  protected:
  explicit GetStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string media_id2 = 6;
  void clear_media_id2();
  static const int kMediaId2FieldNumber = 6;
  const ::std::string& media_id2() const;
  void set_media_id2(const ::std::string& value);
  void set_media_id2(const char* value);
  void set_media_id2(const char* value, size_t size);
  ::std::string* mutable_media_id2();
  ::std::string* release_media_id2();
  void set_allocated_media_id2(::std::string* media_id2);
  ::std::string* unsafe_arena_release_media_id2();
  void unsafe_arena_set_allocated_media_id2(
      ::std::string* media_id2);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 5;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // int32 media_id = 3;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 3;
  ::google::protobuf::int32 media_id() const;
  void set_media_id(::google::protobuf::int32 value);

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 4;
  ::com::fsmeeting::fsp::proto::common::MediaType media_type() const;
  void set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.GetStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr media_id2_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  ::google::protobuf::int32 media_id_;
  int media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.GetStreamRsp) */ {
 public:
  GetStreamRsp();
  virtual ~GetStreamRsp();

  GetStreamRsp(const GetStreamRsp& from);

  inline GetStreamRsp& operator=(const GetStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamRsp& default_instance();

  static inline const GetStreamRsp* internal_default_instance() {
    return reinterpret_cast<const GetStreamRsp*>(
               &_GetStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamRsp* other);
  void Swap(GetStreamRsp* other);

  // implements Message ----------------------------------------------

  inline GetStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamRsp& from);
  void MergeFrom(const GetStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamRsp* other);
  protected:
  explicit GetStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  bool has_stream() const;
  void clear_stream();
  static const int kStreamFieldNumber = 2;
  private:
  void _slow_mutable_stream();
  void _slow_set_allocated_stream(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::Stream** stream);
  ::com::fsmeeting::fsp::proto::common::Stream* _slow_release_stream();
  public:
  const ::com::fsmeeting::fsp::proto::common::Stream& stream() const;
  ::com::fsmeeting::fsp::proto::common::Stream* mutable_stream();
  ::com::fsmeeting::fsp::proto::common::Stream* release_stream();
  void set_allocated_stream(::com::fsmeeting::fsp::proto::common::Stream* stream);
  ::com::fsmeeting::fsp::proto::common::Stream* unsafe_arena_release_stream();
  void unsafe_arena_set_allocated_stream(
      ::com::fsmeeting::fsp::proto::common::Stream* stream);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.GetStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  ::com::fsmeeting::fsp::proto::common::Stream* stream_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastMediaInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo) */ {
 public:
  BroadcastMediaInfo();
  virtual ~BroadcastMediaInfo();

  BroadcastMediaInfo(const BroadcastMediaInfo& from);

  inline BroadcastMediaInfo& operator=(const BroadcastMediaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastMediaInfo& default_instance();

  static inline const BroadcastMediaInfo* internal_default_instance() {
    return reinterpret_cast<const BroadcastMediaInfo*>(
               &_BroadcastMediaInfo_default_instance_);
  }

  void UnsafeArenaSwap(BroadcastMediaInfo* other);
  void Swap(BroadcastMediaInfo* other);

  // implements Message ----------------------------------------------

  inline BroadcastMediaInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BroadcastMediaInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BroadcastMediaInfo& from);
  void MergeFrom(const BroadcastMediaInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BroadcastMediaInfo* other);
  protected:
  explicit BroadcastMediaInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string media_id = 4;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 4;
  const ::std::string& media_id() const;
  void set_media_id(const ::std::string& value);
  void set_media_id(const char* value);
  void set_media_id(const char* value, size_t size);
  ::std::string* mutable_media_id();
  ::std::string* release_media_id();
  void set_allocated_media_id(::std::string* media_id);
  ::std::string* unsafe_arena_release_media_id();
  void unsafe_arena_set_allocated_media_id(
      ::std::string* media_id);

  // int32 media_type = 3;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 3;
  ::google::protobuf::int32 media_type() const;
  void set_media_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr media_id_;
  ::google::protobuf::int32 media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BroadcastMediaInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp) */ {
 public:
  BroadcastMediaInfoRsp();
  virtual ~BroadcastMediaInfoRsp();

  BroadcastMediaInfoRsp(const BroadcastMediaInfoRsp& from);

  inline BroadcastMediaInfoRsp& operator=(const BroadcastMediaInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastMediaInfoRsp& default_instance();

  static inline const BroadcastMediaInfoRsp* internal_default_instance() {
    return reinterpret_cast<const BroadcastMediaInfoRsp*>(
               &_BroadcastMediaInfoRsp_default_instance_);
  }

  void UnsafeArenaSwap(BroadcastMediaInfoRsp* other);
  void Swap(BroadcastMediaInfoRsp* other);

  // implements Message ----------------------------------------------

  inline BroadcastMediaInfoRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  BroadcastMediaInfoRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BroadcastMediaInfoRsp& from);
  void MergeFrom(const BroadcastMediaInfoRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BroadcastMediaInfoRsp* other);
  protected:
  explicit BroadcastMediaInfoRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dgc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGroup

// string app_id = 1;
inline void CreateGroup::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateGroup::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
  return app_id_.Get();
}
inline void CreateGroup::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}
inline void CreateGroup::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}
inline void CreateGroup::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}
inline ::std::string* CreateGroup::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateGroup::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateGroup::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateGroup::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}
inline void CreateGroup::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.app_id)
}

// .com.fsmeeting.fsp.proto.common.ServiceType service_type = 2;
inline void CreateGroup::clear_service_type() {
  service_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::ServiceType CreateGroup::service_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroup.service_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ServiceType >(service_type_);
}
inline void CreateGroup::set_service_type(::com::fsmeeting::fsp::proto::common::ServiceType value) {
  
  service_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.CreateGroup.service_type)
}

// string room_id = 3;
inline void CreateGroup::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateGroup::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
  return room_id_.Get();
}
inline void CreateGroup::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}
inline void CreateGroup::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}
inline void CreateGroup::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}
inline ::std::string* CreateGroup::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateGroup::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateGroup::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateGroup::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}
inline void CreateGroup::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.room_id)
}

// string company_id = 4;
inline void CreateGroup::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateGroup::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
  return company_id_.Get();
}
inline void CreateGroup::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}
inline void CreateGroup::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}
inline void CreateGroup::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}
inline ::std::string* CreateGroup::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateGroup::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateGroup::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateGroup::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}
inline void CreateGroup::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroup.company_id)
}

// -------------------------------------------------------------------

// CreateGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool CreateGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void CreateGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& CreateGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CreateGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* CreateGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void CreateGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.response)
}

// .com.fsmeeting.fsp.proto.common.Group group = 2;
inline bool CreateGroupRsp::has_group() const {
  return this != internal_default_instance() && group_ != NULL;
}
inline void CreateGroupRsp::clear_group() {
  if (GetArenaNoVirtual() == NULL && group_ != NULL) delete group_;
  group_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::Group& CreateGroupRsp::group() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
  return group_ != NULL ? *group_
                         : *::com::fsmeeting::fsp::proto::common::Group::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::Group* CreateGroupRsp::mutable_group() {
  
  if (group_ == NULL) {
    _slow_mutable_group();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
  return group_;
}
inline ::com::fsmeeting::fsp::proto::common::Group* CreateGroupRsp::release_group() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_group();
  } else {
    ::com::fsmeeting::fsp::proto::common::Group* temp = group_;
    group_ = NULL;
    return temp;
  }
}
inline  void CreateGroupRsp::set_allocated_group(::com::fsmeeting::fsp::proto::common::Group* group) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete group_;
  }
  if (group != NULL) {
    _slow_set_allocated_group(message_arena, &group);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.CreateGroupRsp.group)
}

// -------------------------------------------------------------------

// DestroyGroup

// string app_id = 1;
inline void DestroyGroup::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DestroyGroup::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
  return app_id_.Get();
}
inline void DestroyGroup::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}
inline void DestroyGroup::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}
inline void DestroyGroup::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}
inline ::std::string* DestroyGroup::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DestroyGroup::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DestroyGroup::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DestroyGroup::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}
inline void DestroyGroup::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroup.app_id)
}

// string group_id = 2;
inline void DestroyGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DestroyGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
  return group_id_.Get();
}
inline void DestroyGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}
inline void DestroyGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}
inline void DestroyGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}
inline ::std::string* DestroyGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DestroyGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DestroyGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DestroyGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}
inline void DestroyGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroup.group_id)
}

// -------------------------------------------------------------------

// DestroyGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool DestroyGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void DestroyGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& DestroyGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* DestroyGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void DestroyGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.DestroyGroupRsp.response)
}

// -------------------------------------------------------------------

// GetGroupServers

// string group_id = 1;
inline void GetGroupServers::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetGroupServers::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
  return group_id_.Get();
}
inline void GetGroupServers::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}
inline void GetGroupServers::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}
inline void GetGroupServers::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}
inline ::std::string* GetGroupServers::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetGroupServers::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}
inline void GetGroupServers::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.group_id)
}

// string client_ip = 2;
inline void GetGroupServers::clear_client_ip() {
  client_ip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetGroupServers::client_ip() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
  return client_ip_.Get();
}
inline void GetGroupServers::set_client_ip(const ::std::string& value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}
inline void GetGroupServers::set_client_ip(const char* value) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}
inline void GetGroupServers::set_client_ip(const char* value,
    size_t size) {
  
  client_ip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}
inline ::std::string* GetGroupServers::mutable_client_ip() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
  return client_ip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::release_client_ip() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
  
  return client_ip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::unsafe_arena_release_client_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_ip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetGroupServers::set_allocated_client_ip(::std::string* client_ip) {
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}
inline void GetGroupServers::unsafe_arena_set_allocated_client_ip(
    ::std::string* client_ip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_ip != NULL) {
    
  } else {
    
  }
  client_ip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_ip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.client_ip)
}

// string user_id = 3;
inline void GetGroupServers::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetGroupServers::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
  return user_id_.Get();
}
inline void GetGroupServers::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}
inline void GetGroupServers::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}
inline void GetGroupServers::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}
inline ::std::string* GetGroupServers::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetGroupServers::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}
inline void GetGroupServers::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.user_id)
}

// string app_id = 4;
inline void GetGroupServers::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetGroupServers::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
  return app_id_.Get();
}
inline void GetGroupServers::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}
inline void GetGroupServers::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}
inline void GetGroupServers::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}
inline ::std::string* GetGroupServers::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetGroupServers::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}
inline void GetGroupServers::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.app_id)
}

// string company_id = 5;
inline void GetGroupServers::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetGroupServers::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
  return company_id_.Get();
}
inline void GetGroupServers::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}
inline void GetGroupServers::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}
inline void GetGroupServers::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}
inline ::std::string* GetGroupServers::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetGroupServers::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}
inline void GetGroupServers::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.company_id)
}

// string room_id = 6;
inline void GetGroupServers::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetGroupServers::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
  return room_id_.Get();
}
inline void GetGroupServers::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}
inline void GetGroupServers::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}
inline void GetGroupServers::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}
inline ::std::string* GetGroupServers::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetGroupServers::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetGroupServers::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}
inline void GetGroupServers::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServers.room_id)
}

// int32 type = 7;
inline void GetGroupServers::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 GetGroupServers::type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServers.type)
  return type_;
}
inline void GetGroupServers::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetGroupServers.type)
}

// -------------------------------------------------------------------

// GetGroupServersRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GetGroupServersRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GetGroupServersRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetGroupServersRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetGroupServersRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetGroupServersRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GetGroupServersRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.response)
}

// repeated .com.fsmeeting.fsp.proto.common.GroupServer group_servers = 2;
inline int GetGroupServersRsp::group_servers_size() const {
  return group_servers_.size();
}
inline void GetGroupServersRsp::clear_group_servers() {
  group_servers_.Clear();
}
inline const ::com::fsmeeting::fsp::proto::common::GroupServer& GetGroupServersRsp::group_servers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return group_servers_.Get(index);
}
inline ::com::fsmeeting::fsp::proto::common::GroupServer* GetGroupServersRsp::mutable_group_servers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return group_servers_.Mutable(index);
}
inline ::com::fsmeeting::fsp::proto::common::GroupServer* GetGroupServersRsp::add_group_servers() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return group_servers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::GroupServer >*
GetGroupServersRsp::mutable_group_servers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return &group_servers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::GroupServer >&
GetGroupServersRsp::group_servers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.gc.GetGroupServersRsp.group_servers)
  return group_servers_;
}

// -------------------------------------------------------------------

// JoinGroup

// string group_id = 1;
inline void JoinGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
  return group_id_.Get();
}
inline void JoinGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}
inline void JoinGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}
inline void JoinGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}
inline ::std::string* JoinGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}
inline void JoinGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.group_id)
}

// string user_id = 2;
inline void JoinGroup::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroup::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
  return user_id_.Get();
}
inline void JoinGroup::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}
inline void JoinGroup::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}
inline void JoinGroup::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}
inline ::std::string* JoinGroup::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroup::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}
inline void JoinGroup::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.user_id)
}

// string group_token = 3;
inline void JoinGroup::clear_group_token() {
  group_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroup::group_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
  return group_token_.Get();
}
inline void JoinGroup::set_group_token(const ::std::string& value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}
inline void JoinGroup::set_group_token(const char* value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}
inline void JoinGroup::set_group_token(const char* value,
    size_t size) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}
inline ::std::string* JoinGroup::mutable_group_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
  return group_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::release_group_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
  
  return group_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::unsafe_arena_release_group_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroup::set_allocated_group_token(::std::string* group_token) {
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}
inline void JoinGroup::unsafe_arena_set_allocated_group_token(
    ::std::string* group_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.group_token)
}

// string client_id = 4;
inline void JoinGroup::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroup::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
  return client_id_.Get();
}
inline void JoinGroup::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}
inline void JoinGroup::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}
inline void JoinGroup::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}
inline ::std::string* JoinGroup::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroup::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}
inline void JoinGroup::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.client_id)
}

// string service_instance_id = 5;
inline void JoinGroup::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroup::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
  return service_instance_id_.Get();
}
inline void JoinGroup::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}
inline void JoinGroup::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}
inline void JoinGroup::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}
inline ::std::string* JoinGroup::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroup::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}
inline void JoinGroup::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.service_instance_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 6;
inline bool JoinGroup::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void JoinGroup::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& JoinGroup::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* JoinGroup::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* JoinGroup::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void JoinGroup::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroup.commonInvokeInfo)
}

// -------------------------------------------------------------------

// JoinGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool JoinGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void JoinGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& JoinGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void JoinGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.response)
}

// string room_id = 2;
inline void JoinGroupRsp::clear_room_id() {
  room_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroupRsp::room_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
  return room_id_.Get();
}
inline void JoinGroupRsp::set_room_id(const ::std::string& value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}
inline void JoinGroupRsp::set_room_id(const char* value) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}
inline void JoinGroupRsp::set_room_id(const char* value,
    size_t size) {
  
  room_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}
inline ::std::string* JoinGroupRsp::mutable_room_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
  return room_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroupRsp::release_room_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
  
  return room_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroupRsp::unsafe_arena_release_room_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return room_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroupRsp::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}
inline void JoinGroupRsp::unsafe_arena_set_allocated_room_id(
    ::std::string* room_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (room_id != NULL) {
    
  } else {
    
  }
  room_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      room_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.room_id)
}

// string company_id = 3;
inline void JoinGroupRsp::clear_company_id() {
  company_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroupRsp::company_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
  return company_id_.Get();
}
inline void JoinGroupRsp::set_company_id(const ::std::string& value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}
inline void JoinGroupRsp::set_company_id(const char* value) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}
inline void JoinGroupRsp::set_company_id(const char* value,
    size_t size) {
  
  company_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}
inline ::std::string* JoinGroupRsp::mutable_company_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
  return company_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroupRsp::release_company_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
  
  return company_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroupRsp::unsafe_arena_release_company_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return company_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroupRsp::set_allocated_company_id(::std::string* company_id) {
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), company_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}
inline void JoinGroupRsp::unsafe_arena_set_allocated_company_id(
    ::std::string* company_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (company_id != NULL) {
    
  } else {
    
  }
  company_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      company_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.JoinGroupRsp.company_id)
}

// -------------------------------------------------------------------

// QuitGroup

// string group_id = 1;
inline void QuitGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QuitGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
  return group_id_.Get();
}
inline void QuitGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}
inline void QuitGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}
inline void QuitGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}
inline ::std::string* QuitGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QuitGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}
inline void QuitGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.group_id)
}

// string user_id = 2;
inline void QuitGroup::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QuitGroup::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
  return user_id_.Get();
}
inline void QuitGroup::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}
inline void QuitGroup::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}
inline void QuitGroup::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}
inline ::std::string* QuitGroup::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QuitGroup::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}
inline void QuitGroup::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.user_id)
}

// string client_id = 3;
inline void QuitGroup::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QuitGroup::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
  return client_id_.Get();
}
inline void QuitGroup::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}
inline void QuitGroup::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}
inline void QuitGroup::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}
inline ::std::string* QuitGroup::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QuitGroup::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}
inline void QuitGroup::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.client_id)
}

// string service_instance_id = 4;
inline void QuitGroup::clear_service_instance_id() {
  service_instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QuitGroup::service_instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
  return service_instance_id_.Get();
}
inline void QuitGroup::set_service_instance_id(const ::std::string& value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}
inline void QuitGroup::set_service_instance_id(const char* value) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}
inline void QuitGroup::set_service_instance_id(const char* value,
    size_t size) {
  
  service_instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}
inline ::std::string* QuitGroup::mutable_service_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
  return service_instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::release_service_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
  
  return service_instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::unsafe_arena_release_service_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QuitGroup::set_allocated_service_instance_id(::std::string* service_instance_id) {
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}
inline void QuitGroup::unsafe_arena_set_allocated_service_instance_id(
    ::std::string* service_instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_instance_id != NULL) {
    
  } else {
    
  }
  service_instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroup.service_instance_id)
}

// .com.fsmeeting.fsp.proto.common.ServerType service_type = 5;
inline void QuitGroup::clear_service_type() {
  service_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::ServerType QuitGroup::service_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroup.service_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::ServerType >(service_type_);
}
inline void QuitGroup::set_service_type(::com::fsmeeting::fsp::proto::common::ServerType value) {
  
  service_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.QuitGroup.service_type)
}

// -------------------------------------------------------------------

// QuitGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool QuitGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void QuitGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& QuitGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void QuitGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.QuitGroupRsp.response)
}

// -------------------------------------------------------------------

// NotifyStreamPublished

// string client_id = 1;
inline void NotifyStreamPublished::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamPublished::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
  return client_id_.Get();
}
inline void NotifyStreamPublished::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}
inline void NotifyStreamPublished::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}
inline void NotifyStreamPublished::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}
inline ::std::string* NotifyStreamPublished::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamPublished::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}
inline void NotifyStreamPublished::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.client_id)
}

// string stream_id = 2;
inline void NotifyStreamPublished::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamPublished::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
  return stream_id_.Get();
}
inline void NotifyStreamPublished::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}
inline void NotifyStreamPublished::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}
inline void NotifyStreamPublished::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}
inline ::std::string* NotifyStreamPublished::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamPublished::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}
inline void NotifyStreamPublished::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.stream_id)
}

// string group_id = 3;
inline void NotifyStreamPublished::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamPublished::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
  return group_id_.Get();
}
inline void NotifyStreamPublished::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}
inline void NotifyStreamPublished::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}
inline void NotifyStreamPublished::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}
inline ::std::string* NotifyStreamPublished::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamPublished::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}
inline void NotifyStreamPublished::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.group_id)
}

// string user_id = 4;
inline void NotifyStreamPublished::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamPublished::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
  return user_id_.Get();
}
inline void NotifyStreamPublished::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}
inline void NotifyStreamPublished::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}
inline void NotifyStreamPublished::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}
inline ::std::string* NotifyStreamPublished::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamPublished::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}
inline void NotifyStreamPublished::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.user_id)
}

// int32 media_id = 5;
inline void NotifyStreamPublished::clear_media_id() {
  media_id_ = 0;
}
inline ::google::protobuf::int32 NotifyStreamPublished::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id)
  return media_id_;
}
inline void NotifyStreamPublished::set_media_id(::google::protobuf::int32 value) {
  
  media_id_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 6;
inline void NotifyStreamPublished::clear_media_type() {
  media_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::MediaType NotifyStreamPublished::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
inline void NotifyStreamPublished::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_type)
}

// string media_id2 = 7;
inline void NotifyStreamPublished::clear_media_id2() {
  media_id2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamPublished::media_id2() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
  return media_id2_.Get();
}
inline void NotifyStreamPublished::set_media_id2(const ::std::string& value) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}
inline void NotifyStreamPublished::set_media_id2(const char* value) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}
inline void NotifyStreamPublished::set_media_id2(const char* value,
    size_t size) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}
inline ::std::string* NotifyStreamPublished::mutable_media_id2() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
  return media_id2_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::release_media_id2() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
  
  return media_id2_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::unsafe_arena_release_media_id2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id2_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamPublished::set_allocated_media_id2(::std::string* media_id2) {
  if (media_id2 != NULL) {
    
  } else {
    
  }
  media_id2_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}
inline void NotifyStreamPublished::unsafe_arena_set_allocated_media_id2(
    ::std::string* media_id2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id2 != NULL) {
    
  } else {
    
  }
  media_id2_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublished.media_id2)
}

// -------------------------------------------------------------------

// NotifyStreamPublishedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyStreamPublishedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyStreamPublishedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamPublishedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamPublishedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.NotifyStreamPublishedRsp.response)
}

// -------------------------------------------------------------------

// GetStream

// string group_id = 1;
inline void GetStream::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStream::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
  return group_id_.Get();
}
inline void GetStream::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}
inline void GetStream::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}
inline void GetStream::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}
inline ::std::string* GetStream::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStream::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}
inline void GetStream::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.group_id)
}

// string user_id = 2;
inline void GetStream::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStream::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
  return user_id_.Get();
}
inline void GetStream::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}
inline void GetStream::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}
inline void GetStream::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}
inline ::std::string* GetStream::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStream::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}
inline void GetStream::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.user_id)
}

// int32 media_id = 3;
inline void GetStream::clear_media_id() {
  media_id_ = 0;
}
inline ::google::protobuf::int32 GetStream::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.media_id)
  return media_id_;
}
inline void GetStream::set_media_id(::google::protobuf::int32 value) {
  
  media_id_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
inline void GetStream::clear_media_type() {
  media_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::MediaType GetStream::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
inline void GetStream::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.media_type)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 5;
inline bool GetStream::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void GetStream::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& GetStream::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetStream::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* GetStream::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void GetStream::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.commonInvokeInfo)
}

// string media_id2 = 6;
inline void GetStream::clear_media_id2() {
  media_id2_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStream::media_id2() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
  return media_id2_.Get();
}
inline void GetStream::set_media_id2(const ::std::string& value) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}
inline void GetStream::set_media_id2(const char* value) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}
inline void GetStream::set_media_id2(const char* value,
    size_t size) {
  
  media_id2_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}
inline ::std::string* GetStream::mutable_media_id2() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
  return media_id2_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::release_media_id2() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
  
  return media_id2_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::unsafe_arena_release_media_id2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id2_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStream::set_allocated_media_id2(::std::string* media_id2) {
  if (media_id2 != NULL) {
    
  } else {
    
  }
  media_id2_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}
inline void GetStream::unsafe_arena_set_allocated_media_id2(
    ::std::string* media_id2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id2 != NULL) {
    
  } else {
    
  }
  media_id2_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.GetStream.media_id2)
}

// -------------------------------------------------------------------

// GetStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GetStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GetStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GetStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStreamRsp.response)
}

// .com.fsmeeting.fsp.proto.common.Stream stream = 2;
inline bool GetStreamRsp::has_stream() const {
  return this != internal_default_instance() && stream_ != NULL;
}
inline void GetStreamRsp::clear_stream() {
  if (GetArenaNoVirtual() == NULL && stream_ != NULL) delete stream_;
  stream_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::Stream& GetStreamRsp::stream() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
  return stream_ != NULL ? *stream_
                         : *::com::fsmeeting::fsp::proto::common::Stream::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::mutable_stream() {
  
  if (stream_ == NULL) {
    _slow_mutable_stream();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
  return stream_;
}
inline ::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::release_stream() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_stream();
  } else {
    ::com::fsmeeting::fsp::proto::common::Stream* temp = stream_;
    stream_ = NULL;
    return temp;
  }
}
inline  void GetStreamRsp::set_allocated_stream(::com::fsmeeting::fsp::proto::common::Stream* stream) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stream_;
  }
  if (stream != NULL) {
    _slow_set_allocated_stream(message_arena, &stream);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.GetStreamRsp.stream)
}

// -------------------------------------------------------------------

// BroadcastMediaInfo

// string group_id = 1;
inline void BroadcastMediaInfo::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BroadcastMediaInfo::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
  return group_id_.Get();
}
inline void BroadcastMediaInfo::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}
inline void BroadcastMediaInfo::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}
inline void BroadcastMediaInfo::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}
inline ::std::string* BroadcastMediaInfo::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastMediaInfo::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastMediaInfo::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BroadcastMediaInfo::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}
inline void BroadcastMediaInfo::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.group_id)
}

// string user_id = 2;
inline void BroadcastMediaInfo::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BroadcastMediaInfo::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
  return user_id_.Get();
}
inline void BroadcastMediaInfo::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}
inline void BroadcastMediaInfo::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}
inline void BroadcastMediaInfo::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}
inline ::std::string* BroadcastMediaInfo::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastMediaInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastMediaInfo::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BroadcastMediaInfo::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}
inline void BroadcastMediaInfo::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.user_id)
}

// int32 media_type = 3;
inline void BroadcastMediaInfo::clear_media_type() {
  media_type_ = 0;
}
inline ::google::protobuf::int32 BroadcastMediaInfo::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_type)
  return media_type_;
}
inline void BroadcastMediaInfo::set_media_type(::google::protobuf::int32 value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_type)
}

// string media_id = 4;
inline void BroadcastMediaInfo::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BroadcastMediaInfo::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
  return media_id_.Get();
}
inline void BroadcastMediaInfo::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}
inline void BroadcastMediaInfo::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}
inline void BroadcastMediaInfo::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}
inline ::std::string* BroadcastMediaInfo::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastMediaInfo::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BroadcastMediaInfo::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BroadcastMediaInfo::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}
inline void BroadcastMediaInfo::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfo.media_id)
}

// -------------------------------------------------------------------

// BroadcastMediaInfoRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool BroadcastMediaInfoRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void BroadcastMediaInfoRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& BroadcastMediaInfoRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* BroadcastMediaInfoRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* BroadcastMediaInfoRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void BroadcastMediaInfoRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.gc.BroadcastMediaInfoRsp.response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace gc
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::gc::ProtoDictionary> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::gc::ProtoDictionary>() {
  return ::com::fsmeeting::fsp::proto::gc::ProtoDictionary_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fsp_2dgc_2eproto__INCLUDED
