// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-smd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fsp-smd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace smd {
class SMDHeartbeatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SMDHeartbeat> {
} _SMDHeartbeat_default_instance_;
class SMDHeartbeatRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SMDHeartbeatRsp> {
} _SMDHeartbeatRsp_default_instance_;
class ServiceOnlineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceOnline> {
} _ServiceOnline_default_instance_;
class ServiceOnlineRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceOnlineRsp> {
} _ServiceOnlineRsp_default_instance_;
class ServiceStopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceStop> {
} _ServiceStop_default_instance_;
class ServiceStopRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceStopRsp> {
} _ServiceStopRsp_default_instance_;
class ServiceConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceConf> {
} _ServiceConf_default_instance_;
class ServiceConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceConfRsp> {
} _ServiceConfRsp_default_instance_;
class ServiceQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceQuery> {
} _ServiceQuery_default_instance_;
class ServiceQueryRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceQueryRsp> {
} _ServiceQueryRsp_default_instance_;
class SsConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SsConf> {
} _SsConf_default_instance_;
class SsConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SsConfRsp> {
} _SsConfRsp_default_instance_;
class CpConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CpConf> {
} _CpConf_default_instance_;
class CpConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CpConfRsp> {
} _CpConfRsp_default_instance_;
class StreamAsConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamAsConf> {
} _StreamAsConf_default_instance_;
class StreamAsConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreamAsConfRsp> {
} _StreamAsConfRsp_default_instance_;
class GroupAsConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GroupAsConf> {
} _GroupAsConf_default_instance_;
class GroupAsConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GroupAsConfRsp> {
} _GroupAsConfRsp_default_instance_;
class ScConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScConf> {
} _ScConf_default_instance_;
class ScConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScConfRsp> {
} _ScConfRsp_default_instance_;
class AccessConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccessConf> {
} _AccessConf_default_instance_;
class AccessConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccessConfRsp> {
} _AccessConfRsp_default_instance_;
class SpConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpConf> {
} _SpConf_default_instance_;
class SpConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpConfRsp> {
} _SpConfRsp_default_instance_;
class IceConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IceConf> {
} _IceConf_default_instance_;
class IceConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IceConfRsp> {
} _IceConfRsp_default_instance_;
class IpListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IpList> {
} _IpList_default_instance_;
class GsConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GsConf> {
} _GsConf_default_instance_;
class GsConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GsConfRsp> {
} _GsConfRsp_default_instance_;
class GcConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GcConf> {
} _GcConf_default_instance_;
class GcConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GcConfRsp> {
} _GcConfRsp_default_instance_;
class MaConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MaConf> {
} _MaConf_default_instance_;
class MaConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MaConfRsp> {
} _MaConfRsp_default_instance_;
class MsConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsConf> {
} _MsConf_default_instance_;
class MsConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsConfRsp> {
} _MsConfRsp_default_instance_;
class RuleConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RuleConf> {
} _RuleConf_default_instance_;
class RuleConfRspDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RuleConfRsp> {
} _RuleConfRsp_default_instance_;

namespace protobuf_fsp_2dsmd_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[37];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMDHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMDHeartbeatRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOnline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOnline, smd_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOnline, smd_report_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOnline, available_services_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOnlineRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceOnlineRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStop, smd_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStop, service_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStopRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStopRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceConf, smd_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceConf, service_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceConf, download_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceConf, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceConfRsp, service_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceConfRsp, service_report_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceQuery, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceQuery, query_argument_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceQueryRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceQueryRsp, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceQueryRsp, query_argument_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceQueryRsp, query_result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsConf, kafka_brokers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsConf, sc_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsConf, instance_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SsConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpConf, kafka_brokers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpConf, sc_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpConf, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpConf, session_app_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAsConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAsConf, access_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAsConf, session_app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAsConf, debug_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAsConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamAsConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConf, access_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConf, dev_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConf, dev_verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConf, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConf, verification_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConf, dev_group_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAsConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, kafka_brokers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, zookeeper_servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, sc_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, sc_group_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, consumer_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, lock_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, topic_partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, topic_replication_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, router_status_return_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, retry_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConf, root_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessConf, ice_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, kafka_brokers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, zookeeper_servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, sp_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, sc_group_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, gc_group_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, sp_server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, topic_partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, topic_replication_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConf, protocol_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceConf, redis_addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpList, ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, kafka_brokers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, sc_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, gc_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, nat_ip_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, log_save_days_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, process_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, service_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, session_app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, debug_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConf, sys_log_interval_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GsConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, kafka_brokers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, zookeeper_servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, gc_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, gc_group_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, sc_group_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, consumer_client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, lock_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, topic_partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, topic_replication_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, protocol_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, retry_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConf, root_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GcConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaConf, kafka_brokers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaConf, zookeeper_servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaConf, ma_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaConf, bandwidth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsConf, kafka_brokers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsConf, zookeeper_servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsConf, ms_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsConf, poll_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsConfRsp, response_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConf, ice_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConf, zookeeper_servers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConf, iplib_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConf, config_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConf, max_instance_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConfRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuleConfRsp, response_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SMDHeartbeat)},
  { 4, -1, sizeof(SMDHeartbeatRsp)},
  { 8, -1, sizeof(ServiceOnline)},
  { 15, -1, sizeof(ServiceOnlineRsp)},
  { 20, -1, sizeof(ServiceStop)},
  { 26, -1, sizeof(ServiceStopRsp)},
  { 31, -1, sizeof(ServiceConf)},
  { 39, -1, sizeof(ServiceConfRsp)},
  { 46, -1, sizeof(ServiceQuery)},
  { 52, -1, sizeof(ServiceQueryRsp)},
  { 59, -1, sizeof(SsConf)},
  { 67, -1, sizeof(SsConfRsp)},
  { 72, -1, sizeof(CpConf)},
  { 81, -1, sizeof(CpConfRsp)},
  { 86, -1, sizeof(StreamAsConf)},
  { 93, -1, sizeof(StreamAsConfRsp)},
  { 98, -1, sizeof(GroupAsConf)},
  { 109, -1, sizeof(GroupAsConfRsp)},
  { 114, -1, sizeof(ScConf)},
  { 131, -1, sizeof(ScConfRsp)},
  { 136, -1, sizeof(AccessConf)},
  { 141, -1, sizeof(AccessConfRsp)},
  { 146, -1, sizeof(SpConf)},
  { 160, -1, sizeof(SpConfRsp)},
  { 165, -1, sizeof(IceConf)},
  { 170, -1, sizeof(IceConfRsp)},
  { 175, -1, sizeof(IpList)},
  { 180, -1, sizeof(GsConf)},
  { 199, -1, sizeof(GsConfRsp)},
  { 204, -1, sizeof(GcConf)},
  { 221, -1, sizeof(GcConfRsp)},
  { 226, -1, sizeof(MaConf)},
  { 235, -1, sizeof(MaConfRsp)},
  { 240, -1, sizeof(MsConf)},
  { 249, -1, sizeof(MsConfRsp)},
  { 254, -1, sizeof(RuleConf)},
  { 263, -1, sizeof(RuleConfRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SMDHeartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SMDHeartbeatRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceOnline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceOnlineRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceStopRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceQueryRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SsConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SsConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CpConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CpConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamAsConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreamAsConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GroupAsConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GroupAsConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccessConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccessConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IceConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IceConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IpList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GsConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GsConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GcConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GcConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MaConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsConfRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RuleConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RuleConfRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fsp-smd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 37);
}

}  // namespace

void TableStruct::Shutdown() {
  _SMDHeartbeat_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SMDHeartbeatRsp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ServiceOnline_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ServiceOnlineRsp_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ServiceStop_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ServiceStopRsp_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ServiceConf_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ServiceConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ServiceQuery_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ServiceQueryRsp_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SsConf_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _SsConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CpConf_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CpConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _StreamAsConf_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _StreamAsConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GroupAsConf_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _GroupAsConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _ScConf_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _ScConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _AccessConf_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _AccessConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _SpConf_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _SpConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _IceConf_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _IceConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _IpList_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _GsConf_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _GsConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _GcConf_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _GcConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _MaConf_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _MaConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _MsConf_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _MsConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _RuleConf_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _RuleConfRsp_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::InitDefaults();
  _SMDHeartbeat_default_instance_.DefaultConstruct();
  _SMDHeartbeatRsp_default_instance_.DefaultConstruct();
  _ServiceOnline_default_instance_.DefaultConstruct();
  _ServiceOnlineRsp_default_instance_.DefaultConstruct();
  _ServiceStop_default_instance_.DefaultConstruct();
  _ServiceStopRsp_default_instance_.DefaultConstruct();
  _ServiceConf_default_instance_.DefaultConstruct();
  _ServiceConfRsp_default_instance_.DefaultConstruct();
  _ServiceQuery_default_instance_.DefaultConstruct();
  _ServiceQueryRsp_default_instance_.DefaultConstruct();
  _SsConf_default_instance_.DefaultConstruct();
  _SsConfRsp_default_instance_.DefaultConstruct();
  _CpConf_default_instance_.DefaultConstruct();
  _CpConfRsp_default_instance_.DefaultConstruct();
  _StreamAsConf_default_instance_.DefaultConstruct();
  _StreamAsConfRsp_default_instance_.DefaultConstruct();
  _GroupAsConf_default_instance_.DefaultConstruct();
  _GroupAsConfRsp_default_instance_.DefaultConstruct();
  _ScConf_default_instance_.DefaultConstruct();
  _ScConfRsp_default_instance_.DefaultConstruct();
  _AccessConf_default_instance_.DefaultConstruct();
  _AccessConfRsp_default_instance_.DefaultConstruct();
  _SpConf_default_instance_.DefaultConstruct();
  _SpConfRsp_default_instance_.DefaultConstruct();
  _IceConf_default_instance_.DefaultConstruct();
  _IceConfRsp_default_instance_.DefaultConstruct();
  _IpList_default_instance_.DefaultConstruct();
  _GsConf_default_instance_.DefaultConstruct();
  _GsConfRsp_default_instance_.DefaultConstruct();
  _GcConf_default_instance_.DefaultConstruct();
  _GcConfRsp_default_instance_.DefaultConstruct();
  _MaConf_default_instance_.DefaultConstruct();
  _MaConfRsp_default_instance_.DefaultConstruct();
  _MsConf_default_instance_.DefaultConstruct();
  _MsConfRsp_default_instance_.DefaultConstruct();
  _RuleConf_default_instance_.DefaultConstruct();
  _RuleConfRsp_default_instance_.DefaultConstruct();
  _ServiceOnlineRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _ServiceStopRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _ServiceConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _SsConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _CpConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _StreamAsConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GroupAsConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _ScConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _AccessConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _SpConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _IceConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GsConf_default_instance_.get_mutable()->nat_ip_list_ = const_cast< ::com::fsmeeting::fsp::proto::smd::IpList*>(
      ::com::fsmeeting::fsp::proto::smd::IpList::internal_default_instance());
  _GsConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _GcConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _MaConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _MsConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
  _RuleConfRsp_default_instance_.get_mutable()->response_ = const_cast< ::com::fsmeeting::fsp::proto::common::CommonResponse*>(
      ::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rfsp-smd.proto\022\033com.fsmeeting.fsp.proto"
      ".smd\032\020fsp-common.proto\"\016\n\014SMDHeartbeat\"\021"
      "\n\017SMDHeartbeatRsp\"V\n\rServiceOnline\022\020\n\010sm"
      "d_name\030\001 \001(\t\022\027\n\017smd_report_addr\030\002 \001(\t\022\032\n"
      "\022available_services\030\003 \003(\t\"T\n\020ServiceOnli"
      "neRsp\022@\n\010response\030\001 \001(\0132..com.fsmeeting."
      "fsp.proto.common.CommonResponse\"5\n\013Servi"
      "ceStop\022\020\n\010smd_name\030\001 \001(\t\022\024\n\014service_name"
      "\030\002 \001(\t\"R\n\016ServiceStopRsp\022@\n\010response\030\001 \001"
      "(\0132..com.fsmeeting.fsp.proto.common.Comm"
      "onResponse\"[\n\013ServiceConf\022\020\n\010smd_name\030\001 "
      "\001(\t\022\024\n\014service_name\030\002 \001(\t\022\024\n\014download_ur"
      "l\030\003 \001(\t\022\016\n\006config\030\004 \001(\014\"\205\001\n\016ServiceConfR"
      "sp\022\024\n\014service_name\030\001 \001(\t\022\033\n\023service_repo"
      "rt_addr\030\002 \001(\t\022@\n\010response\030\003 \001(\0132..com.fs"
      "meeting.fsp.proto.common.CommonResponse\""
      "i\n\014ServiceQuery\022A\n\nquery_type\030\001 \001(\0162-.co"
      "m.fsmeeting.fsp.proto.smd.ServiceQueryTy"
      "pe\022\026\n\016query_argument\030\002 \001(\t\"\202\001\n\017ServiceQu"
      "eryRsp\022A\n\nquery_type\030\001 \001(\0162-.com.fsmeeti"
      "ng.fsp.proto.smd.ServiceQueryType\022\026\n\016que"
      "ry_argument\030\002 \001(\t\022\024\n\014query_result\030\003 \003(\t\""
      "X\n\006SsConf\022\020\n\010ice_addr\030\001 \001(\t\022\025\n\rkafka_bro"
      "kers\030\002 \001(\t\022\020\n\010sc_topic\030\003 \001(\t\022\023\n\013instance"
      "_id\030\004 \001(\t\"M\n\tSsConfRsp\022@\n\010response\030\001 \001(\013"
      "2..com.fsmeeting.fsp.proto.common.Common"
      "Response\"p\n\006CpConf\022\020\n\010ice_addr\030\001 \001(\t\022\025\n\r"
      "kafka_brokers\030\002 \001(\t\022\020\n\010sc_topic\030\003 \001(\t\022\023\n"
      "\013instance_id\030\004 \001(\t\022\026\n\016session_app_id\030\005 \001"
      "(\t\"M\n\tCpConfRsp\022@\n\010response\030\001 \001(\0132..com."
      "fsmeeting.fsp.proto.common.CommonRespons"
      "e\"N\n\014StreamAsConf\022\022\n\naccess_url\030\001 \001(\t\022\026\n"
      "\016session_app_id\030\002 \001(\t\022\022\n\ndebug_mode\030\003 \001("
      "\t\"S\n\017StreamAsConfRsp\022@\n\010response\030\001 \001(\0132."
      ".com.fsmeeting.fsp.proto.common.CommonRe"
      "sponse\"\232\001\n\013GroupAsConf\022\022\n\naccess_url\030\001 \001"
      "(\t\022\020\n\010ice_addr\030\002 \001(\t\022\016\n\006dev_id\030\003 \001(\t\022\027\n\017"
      "dev_verify_code\030\004 \001(\t\022\016\n\006app_id\030\005 \001(\t\022\031\n"
      "\021verification_code\030\006 \001(\t\022\021\n\tdev_group\030\007 "
      "\001(\t\"R\n\016GroupAsConfRsp\022@\n\010response\030\001 \001(\0132"
      "..com.fsmeeting.fsp.proto.common.CommonR"
      "esponse\"\303\002\n\006ScConf\022\020\n\010ice_addr\030\001 \001(\t\022\025\n\r"
      "kafka_brokers\030\002 \001(\t\022\031\n\021zookeeper_servers"
      "\030\003 \001(\t\022\020\n\010sc_topic\030\004 \001(\t\022\026\n\016sc_group_top"
      "ic\030\005 \001(\t\022\032\n\022consumer_client_id\030\006 \001(\t\022\024\n\014"
      "lock_timeout\030\013 \001(\t\022\030\n\020topic_partitions\030\007"
      " \001(\t\022\031\n\021topic_replication\030\010 \001(\t\022!\n\031route"
      "r_status_return_size\030\t \001(\t\022\030\n\020protocol_v"
      "ersion\030\n \001(\t\022\024\n\014retry_policy\030\014 \001(\t\022\021\n\tro"
      "ot_path\030\r \001(\t\"M\n\tScConfRsp\022@\n\010response\030\001"
      " \001(\0132..com.fsmeeting.fsp.proto.common.Co"
      "mmonResponse\"\036\n\nAccessConf\022\020\n\010ice_addr\030\001"
      " \001(\t\"Q\n\rAccessConfRsp\022@\n\010response\030\001 \001(\0132"
      "..com.fsmeeting.fsp.proto.common.CommonR"
      "esponse\"\363\001\n\006SpConf\022\020\n\010ice_addr\030\001 \001(\t\022\025\n\r"
      "kafka_brokers\030\002 \001(\t\022\031\n\021zookeeper_servers"
      "\030\003 \001(\t\022\020\n\010sp_topic\030\004 \001(\t\022\026\n\016sc_group_top"
      "ic\030\005 \001(\t\022\026\n\016gc_group_topic\030\006 \001(\t\022\024\n\014sp_s"
      "erver_id\030\007 \001(\t\022\030\n\020topic_partitions\030\010 \001(\t"
      "\022\031\n\021topic_replication\030\t \001(\t\022\030\n\020protocol_"
      "version\030\n \001(\t\"M\n\tSpConfRsp\022@\n\010response\030\001"
      " \001(\0132..com.fsmeeting.fsp.proto.common.Co"
      "mmonResponse\"\035\n\007IceConf\022\022\n\nredis_addr\030\001 "
      "\001(\t\"N\n\nIceConfRsp\022@\n\010response\030\001 \001(\0132..co"
      "m.fsmeeting.fsp.proto.common.CommonRespo"
      "nse\"\024\n\006IpList\022\n\n\002ip\030\001 \003(\t\"\337\002\n\006GsConf\022\020\n\010"
      "ice_addr\030\001 \001(\t\022\025\n\rkafka_brokers\030\002 \001(\t\022\020\n"
      "\010sc_topic\030\003 \001(\t\022\020\n\010gc_topic\030\004 \001(\t\022\023\n\013ins"
      "tance_id\030\005 \001(\t\022\020\n\010group_id\030\006 \001(\t\0228\n\013nat_"
      "ip_list\030\007 \001(\0132#.com.fsmeeting.fsp.proto."
      "smd.IpList\022\025\n\rlog_save_days\030\010 \001(\t\022\024\n\014pro"
      "cess_name\030\t \001(\t\022\014\n\004guid\030\n \001(\t\022\024\n\014service"
      "_name\030\013 \001(\t\022\020\n\010priority\030\014 \001(\t\022\026\n\016session"
      "_app_id\030\r \001(\t\022\022\n\ndebug_mode\030\016 \001(\t\022\030\n\020sys"
      "_log_interval\030\017 \001(\t\"M\n\tGsConfRsp\022@\n\010resp"
      "onse\030\001 \001(\0132..com.fsmeeting.fsp.proto.com"
      "mon.CommonResponse\"\270\002\n\006GcConf\022\020\n\010ice_add"
      "r\030\001 \001(\t\022\025\n\rkafka_brokers\030\002 \001(\t\022\031\n\021zookee"
      "per_servers\030\003 \001(\t\022\020\n\010gc_topic\030\004 \001(\t\022\026\n\016g"
      "c_group_topic\030\005 \001(\t\022\026\n\016sc_group_topic\030\006 "
      "\001(\t\022\032\n\022consumer_client_id\030\007 \001(\t\022\024\n\014lock_"
      "timeout\030\013 \001(\t\022\030\n\020topic_partitions\030\010 \001(\t\022"
      "\031\n\021topic_replication\030\t \001(\t\022\030\n\020protocol_v"
      "ersion\030\n \001(\t\022\024\n\014retry_policy\030\014 \001(\t\022\021\n\tro"
      "ot_path\030\r \001(\t\"M\n\tGcConfRsp\022@\n\010response\030\001"
      " \001(\0132..com.fsmeeting.fsp.proto.common.Co"
      "mmonResponse\"q\n\006MaConf\022\020\n\010ice_addr\030\001 \001(\t"
      "\022\025\n\rkafka_brokers\030\002 \001(\t\022\031\n\021zookeeper_ser"
      "vers\030\003 \001(\t\022\020\n\010ma_topic\030\004 \001(\t\022\021\n\tbandwidt"
      "h\030\005 \001(\t\"M\n\tMaConfRsp\022@\n\010response\030\001 \001(\0132."
      ".com.fsmeeting.fsp.proto.common.CommonRe"
      "sponse\"q\n\006MsConf\022\020\n\010ice_addr\030\001 \001(\t\022\025\n\rka"
      "fka_brokers\030\002 \001(\t\022\031\n\021zookeeper_servers\030\003"
      " \001(\t\022\020\n\010ms_topic\030\004 \001(\t\022\021\n\tpoll_time\030\005 \001("
      "\t\"M\n\tMsConfRsp\022@\n\010response\030\001 \001(\0132..com.f"
      "smeeting.fsp.proto.common.CommonResponse"
      "\"{\n\010RuleConf\022\020\n\010ice_addr\030\001 \001(\t\022\031\n\021zookee"
      "per_servers\030\002 \001(\t\022\022\n\niplib_path\030\003 \001(\t\022\023\n"
      "\013config_path\030\004 \001(\t\022\031\n\021max_instance_size\030"
      "\005 \001(\t\"O\n\013RuleConfRsp\022@\n\010response\030\001 \001(\0132."
      ".com.fsmeeting.fsp.proto.common.CommonRe"
      "sponse*\234\005\n\017ProtoDictionary\022\031\n\025Enum2Unkno"
      "wnInterface\020\000\022\020\n\013Enum2SsConf\020\301>\022\023\n\016Enum2"
      "SsConfRsp\020\302>\022\020\n\013Enum2CpConf\020\303>\022\023\n\016Enum2C"
      "pConfRsp\020\304>\022\026\n\021Enum2StreamAsConf\020\305>\022\031\n\024E"
      "num2StreamAsConfRsp\020\306>\022\020\n\013Enum2ScConf\020\307>"
      "\022\023\n\016Enum2ScConfRsp\020\310>\022\024\n\017Enum2AccessConf"
      "\020\311>\022\027\n\022Enum2AccessConfRsp\020\312>\022\020\n\013Enum2SpC"
      "onf\020\313>\022\023\n\016Enum2SpConfRsp\020\314>\022\021\n\014Enum2IceC"
      "onf\020\315>\022\024\n\017Enum2IceConfRsp\020\316>\022\020\n\013Enum2GsC"
      "onf\020\317>\022\023\n\016Enum2GsConfRsp\020\320>\022\020\n\013Enum2GcCo"
      "nf\020\321>\022\023\n\016Enum2GcConfRsp\020\322>\022\025\n\020Enum2Group"
      "AsConf\020\323>\022\030\n\023Enum2GroupAsConfRsp\020\324>\022\025\n\020E"
      "num2ServiceConf\020\325>\022\030\n\023Enum2ServiceConfRs"
      "p\020\326>\022\027\n\022Enum2ServiceOnline\020\327>\022\032\n\025Enum2Se"
      "rviceOnlineRsp\020\330>\022\025\n\020Enum2ServiceStop\020\331>"
      "\022\030\n\023Enum2ServiceStopRsp\020\332>\022\026\n\021Enum2SMDHe"
      "artbeat\020\333>\022\031\n\024Enum2SMDHeartbeatRsp\020\334>*\212\001"
      "\n\020ServiceQueryType\022\031\n\025EnumAvailableServi"
      "ces\020\000\022\031\n\025EnumInstalledServices\020\001\022\033\n\027Enum"
      "ServiceDistribution\020\002\022\017\n\013EnumAllSmds\020\003\022\022"
      "\n\016EnumActiveSmds\020\004B(\n\033com.fsmeeting.fsp."
      "proto.smdP\001\370\001\001\242\002\003GPBb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4908);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fsp-smd.proto", &protobuf_RegisterTypes);
  ::com::fsmeeting::fsp::proto::common::protobuf_fsp_2dcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fsp_2dsmd_2eproto

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_enum_descriptors[0];
}
bool ProtoDictionary_IsValid(int value) {
  switch (value) {
    case 0:
    case 8001:
    case 8002:
    case 8003:
    case 8004:
    case 8005:
    case 8006:
    case 8007:
    case 8008:
    case 8009:
    case 8010:
    case 8011:
    case 8012:
    case 8013:
    case 8014:
    case 8015:
    case 8016:
    case 8017:
    case 8018:
    case 8019:
    case 8020:
    case 8021:
    case 8022:
    case 8023:
    case 8024:
    case 8025:
    case 8026:
    case 8027:
    case 8028:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceQueryType_descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_enum_descriptors[1];
}
bool ServiceQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMDHeartbeat::SMDHeartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
}
SMDHeartbeat::SMDHeartbeat(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
}
SMDHeartbeat::SMDHeartbeat(const SMDHeartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
}

void SMDHeartbeat::SharedCtor() {
  _cached_size_ = 0;
}

SMDHeartbeat::~SMDHeartbeat() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  SharedDtor();
}

void SMDHeartbeat::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void SMDHeartbeat::ArenaDtor(void* object) {
  SMDHeartbeat* _this = reinterpret_cast< SMDHeartbeat* >(object);
  (void)_this;
}
void SMDHeartbeat::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SMDHeartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMDHeartbeat::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[0].descriptor;
}

const SMDHeartbeat& SMDHeartbeat::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SMDHeartbeat* SMDHeartbeat::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SMDHeartbeat>(arena);
}

void SMDHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
}

bool SMDHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  return false;
#undef DO_
}

void SMDHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
}

::google::protobuf::uint8* SMDHeartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  return target;
}

size_t SMDHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMDHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const SMDHeartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SMDHeartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
    MergeFrom(*source);
  }
}

void SMDHeartbeat::MergeFrom(const SMDHeartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void SMDHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMDHeartbeat::CopyFrom(const SMDHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMDHeartbeat::IsInitialized() const {
  return true;
}

void SMDHeartbeat::Swap(SMDHeartbeat* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SMDHeartbeat* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SMDHeartbeat::UnsafeArenaSwap(SMDHeartbeat* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SMDHeartbeat::InternalSwap(SMDHeartbeat* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SMDHeartbeat::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SMDHeartbeat

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMDHeartbeatRsp::SMDHeartbeatRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
}
SMDHeartbeatRsp::SMDHeartbeatRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
}
SMDHeartbeatRsp::SMDHeartbeatRsp(const SMDHeartbeatRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
}

void SMDHeartbeatRsp::SharedCtor() {
  _cached_size_ = 0;
}

SMDHeartbeatRsp::~SMDHeartbeatRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  SharedDtor();
}

void SMDHeartbeatRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void SMDHeartbeatRsp::ArenaDtor(void* object) {
  SMDHeartbeatRsp* _this = reinterpret_cast< SMDHeartbeatRsp* >(object);
  (void)_this;
}
void SMDHeartbeatRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SMDHeartbeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMDHeartbeatRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[1].descriptor;
}

const SMDHeartbeatRsp& SMDHeartbeatRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SMDHeartbeatRsp* SMDHeartbeatRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SMDHeartbeatRsp>(arena);
}

void SMDHeartbeatRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
}

bool SMDHeartbeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  return false;
#undef DO_
}

void SMDHeartbeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
}

::google::protobuf::uint8* SMDHeartbeatRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  return target;
}

size_t SMDHeartbeatRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMDHeartbeatRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SMDHeartbeatRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SMDHeartbeatRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
    MergeFrom(*source);
  }
}

void SMDHeartbeatRsp::MergeFrom(const SMDHeartbeatRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void SMDHeartbeatRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMDHeartbeatRsp::CopyFrom(const SMDHeartbeatRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.SMDHeartbeatRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMDHeartbeatRsp::IsInitialized() const {
  return true;
}

void SMDHeartbeatRsp::Swap(SMDHeartbeatRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SMDHeartbeatRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SMDHeartbeatRsp::UnsafeArenaSwap(SMDHeartbeatRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SMDHeartbeatRsp::InternalSwap(SMDHeartbeatRsp* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SMDHeartbeatRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SMDHeartbeatRsp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceOnline::kSmdNameFieldNumber;
const int ServiceOnline::kSmdReportAddrFieldNumber;
const int ServiceOnline::kAvailableServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceOnline::ServiceOnline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ServiceOnline)
}
ServiceOnline::ServiceOnline(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  available_services_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ServiceOnline)
}
ServiceOnline::ServiceOnline(const ServiceOnline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      available_services_(from.available_services_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smd_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.smd_name().size() > 0) {
    smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smd_name(),
      GetArenaNoVirtual());
  }
  smd_report_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.smd_report_addr().size() > 0) {
    smd_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smd_report_addr(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ServiceOnline)
}

void ServiceOnline::SharedCtor() {
  smd_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  smd_report_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServiceOnline::~ServiceOnline() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  SharedDtor();
}

void ServiceOnline::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  smd_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  smd_report_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ServiceOnline::ArenaDtor(void* object) {
  ServiceOnline* _this = reinterpret_cast< ServiceOnline* >(object);
  (void)_this;
}
void ServiceOnline::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceOnline::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[2].descriptor;
}

const ServiceOnline& ServiceOnline::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceOnline* ServiceOnline::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceOnline>(arena);
}

void ServiceOnline::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  available_services_.Clear();
  smd_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  smd_report_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ServiceOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string smd_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smd_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smd_name().data(), this->smd_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string smd_report_addr = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smd_report_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smd_report_addr().data(), this->smd_report_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string available_services = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_available_services()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->available_services(this->available_services_size() - 1).data(),
            this->available_services(this->available_services_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  return false;
#undef DO_
}

void ServiceOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  // string smd_name = 1;
  if (this->smd_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smd_name().data(), this->smd_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smd_name(), output);
  }

  // string smd_report_addr = 2;
  if (this->smd_report_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smd_report_addr().data(), this->smd_report_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->smd_report_addr(), output);
  }

  // repeated string available_services = 3;
  for (int i = 0; i < this->available_services_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->available_services(i).data(), this->available_services(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->available_services(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ServiceOnline)
}

::google::protobuf::uint8* ServiceOnline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  // string smd_name = 1;
  if (this->smd_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smd_name().data(), this->smd_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->smd_name(), target);
  }

  // string smd_report_addr = 2;
  if (this->smd_report_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smd_report_addr().data(), this->smd_report_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->smd_report_addr(), target);
  }

  // repeated string available_services = 3;
  for (int i = 0; i < this->available_services_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->available_services(i).data(), this->available_services(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->available_services(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  return target;
}

size_t ServiceOnline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  size_t total_size = 0;

  // repeated string available_services = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->available_services_size());
  for (int i = 0; i < this->available_services_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->available_services(i));
  }

  // string smd_name = 1;
  if (this->smd_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smd_name());
  }

  // string smd_report_addr = 2;
  if (this->smd_report_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smd_report_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceOnline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceOnline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceOnline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ServiceOnline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ServiceOnline)
    MergeFrom(*source);
  }
}

void ServiceOnline::MergeFrom(const ServiceOnline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  available_services_.MergeFrom(from.available_services_);
  if (from.smd_name().size() > 0) {
    set_smd_name(from.smd_name());
  }
  if (from.smd_report_addr().size() > 0) {
    set_smd_report_addr(from.smd_report_addr());
  }
}

void ServiceOnline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceOnline::CopyFrom(const ServiceOnline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceOnline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceOnline::IsInitialized() const {
  return true;
}

void ServiceOnline::Swap(ServiceOnline* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceOnline* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceOnline::UnsafeArenaSwap(ServiceOnline* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceOnline::InternalSwap(ServiceOnline* other) {
  available_services_.UnsafeArenaSwap(&other->available_services_);
  smd_name_.Swap(&other->smd_name_);
  smd_report_addr_.Swap(&other->smd_report_addr_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceOnline::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceOnline

// string smd_name = 1;
void ServiceOnline::clear_smd_name() {
  smd_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceOnline::smd_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
  return smd_name_.Get();
}
void ServiceOnline::set_smd_name(const ::std::string& value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}
void ServiceOnline::set_smd_name(const char* value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}
void ServiceOnline::set_smd_name(const char* value,
    size_t size) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}
::std::string* ServiceOnline::mutable_smd_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
  return smd_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceOnline::release_smd_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
  
  return smd_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceOnline::unsafe_arena_release_smd_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return smd_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceOnline::set_allocated_smd_name(::std::string* smd_name) {
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smd_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}
void ServiceOnline::unsafe_arena_set_allocated_smd_name(
    ::std::string* smd_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      smd_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_name)
}

// string smd_report_addr = 2;
void ServiceOnline::clear_smd_report_addr() {
  smd_report_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceOnline::smd_report_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
  return smd_report_addr_.Get();
}
void ServiceOnline::set_smd_report_addr(const ::std::string& value) {
  
  smd_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}
void ServiceOnline::set_smd_report_addr(const char* value) {
  
  smd_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}
void ServiceOnline::set_smd_report_addr(const char* value,
    size_t size) {
  
  smd_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}
::std::string* ServiceOnline::mutable_smd_report_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
  return smd_report_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceOnline::release_smd_report_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
  
  return smd_report_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceOnline::unsafe_arena_release_smd_report_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return smd_report_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceOnline::set_allocated_smd_report_addr(::std::string* smd_report_addr) {
  if (smd_report_addr != NULL) {
    
  } else {
    
  }
  smd_report_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smd_report_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}
void ServiceOnline::unsafe_arena_set_allocated_smd_report_addr(
    ::std::string* smd_report_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (smd_report_addr != NULL) {
    
  } else {
    
  }
  smd_report_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      smd_report_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnline.smd_report_addr)
}

// repeated string available_services = 3;
int ServiceOnline::available_services_size() const {
  return available_services_.size();
}
void ServiceOnline::clear_available_services() {
  available_services_.Clear();
}
const ::std::string& ServiceOnline::available_services(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return available_services_.Get(index);
}
::std::string* ServiceOnline::mutable_available_services(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return available_services_.Mutable(index);
}
void ServiceOnline::set_available_services(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  available_services_.Mutable(index)->assign(value);
}
void ServiceOnline::set_available_services(int index, const char* value) {
  available_services_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
void ServiceOnline::set_available_services(int index, const char* value, size_t size) {
  available_services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
::std::string* ServiceOnline::add_available_services() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return available_services_.Add();
}
void ServiceOnline::add_available_services(const ::std::string& value) {
  available_services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
void ServiceOnline::add_available_services(const char* value) {
  available_services_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
void ServiceOnline::add_available_services(const char* value, size_t size) {
  available_services_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceOnline::available_services() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return available_services_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceOnline::mutable_available_services() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.smd.ServiceOnline.available_services)
  return &available_services_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ServiceOnlineRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceOnlineRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceOnlineRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void ServiceOnlineRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void ServiceOnlineRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceOnlineRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceOnlineRsp::ServiceOnlineRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
}
ServiceOnlineRsp::ServiceOnlineRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
}
ServiceOnlineRsp::ServiceOnlineRsp(const ServiceOnlineRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
}

void ServiceOnlineRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

ServiceOnlineRsp::~ServiceOnlineRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  SharedDtor();
}

void ServiceOnlineRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void ServiceOnlineRsp::ArenaDtor(void* object) {
  ServiceOnlineRsp* _this = reinterpret_cast< ServiceOnlineRsp* >(object);
  (void)_this;
}
void ServiceOnlineRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceOnlineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceOnlineRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[3].descriptor;
}

const ServiceOnlineRsp& ServiceOnlineRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceOnlineRsp* ServiceOnlineRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceOnlineRsp>(arena);
}

void ServiceOnlineRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool ServiceOnlineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  return false;
#undef DO_
}

void ServiceOnlineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
}

::google::protobuf::uint8* ServiceOnlineRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  return target;
}

size_t ServiceOnlineRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceOnlineRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceOnlineRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceOnlineRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
    MergeFrom(*source);
  }
}

void ServiceOnlineRsp::MergeFrom(const ServiceOnlineRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void ServiceOnlineRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceOnlineRsp::CopyFrom(const ServiceOnlineRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceOnlineRsp::IsInitialized() const {
  return true;
}

void ServiceOnlineRsp::Swap(ServiceOnlineRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceOnlineRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceOnlineRsp::UnsafeArenaSwap(ServiceOnlineRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceOnlineRsp::InternalSwap(ServiceOnlineRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceOnlineRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceOnlineRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool ServiceOnlineRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void ServiceOnlineRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& ServiceOnlineRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceOnlineRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceOnlineRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void ServiceOnlineRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceOnlineRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceStop::kSmdNameFieldNumber;
const int ServiceStop::kServiceNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceStop::ServiceStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ServiceStop)
}
ServiceStop::ServiceStop(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ServiceStop)
}
ServiceStop::ServiceStop(const ServiceStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smd_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.smd_name().size() > 0) {
    smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smd_name(),
      GetArenaNoVirtual());
  }
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ServiceStop)
}

void ServiceStop::SharedCtor() {
  smd_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServiceStop::~ServiceStop() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ServiceStop)
  SharedDtor();
}

void ServiceStop::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  smd_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ServiceStop::ArenaDtor(void* object) {
  ServiceStop* _this = reinterpret_cast< ServiceStop* >(object);
  (void)_this;
}
void ServiceStop::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceStop::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[4].descriptor;
}

const ServiceStop& ServiceStop::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceStop* ServiceStop::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceStop>(arena);
}

void ServiceStop::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ServiceStop)
  smd_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ServiceStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ServiceStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string smd_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smd_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smd_name().data(), this->smd_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceStop.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ServiceStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ServiceStop)
  return false;
#undef DO_
}

void ServiceStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ServiceStop)
  // string smd_name = 1;
  if (this->smd_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smd_name().data(), this->smd_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smd_name(), output);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceStop.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ServiceStop)
}

::google::protobuf::uint8* ServiceStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ServiceStop)
  // string smd_name = 1;
  if (this->smd_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smd_name().data(), this->smd_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->smd_name(), target);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceStop.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ServiceStop)
  return target;
}

size_t ServiceStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ServiceStop)
  size_t total_size = 0;

  // string smd_name = 1;
  if (this->smd_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smd_name());
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceStop)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ServiceStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ServiceStop)
    MergeFrom(*source);
  }
}

void ServiceStop::MergeFrom(const ServiceStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.smd_name().size() > 0) {
    set_smd_name(from.smd_name());
  }
  if (from.service_name().size() > 0) {
    set_service_name(from.service_name());
  }
}

void ServiceStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStop::CopyFrom(const ServiceStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStop::IsInitialized() const {
  return true;
}

void ServiceStop::Swap(ServiceStop* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceStop* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceStop::UnsafeArenaSwap(ServiceStop* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceStop::InternalSwap(ServiceStop* other) {
  smd_name_.Swap(&other->smd_name_);
  service_name_.Swap(&other->service_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceStop::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceStop

// string smd_name = 1;
void ServiceStop::clear_smd_name() {
  smd_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceStop::smd_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
  return smd_name_.Get();
}
void ServiceStop::set_smd_name(const ::std::string& value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}
void ServiceStop::set_smd_name(const char* value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}
void ServiceStop::set_smd_name(const char* value,
    size_t size) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}
::std::string* ServiceStop::mutable_smd_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
  return smd_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceStop::release_smd_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
  
  return smd_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceStop::unsafe_arena_release_smd_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return smd_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceStop::set_allocated_smd_name(::std::string* smd_name) {
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smd_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}
void ServiceStop::unsafe_arena_set_allocated_smd_name(
    ::std::string* smd_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      smd_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStop.smd_name)
}

// string service_name = 2;
void ServiceStop::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceStop::service_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
  return service_name_.Get();
}
void ServiceStop::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}
void ServiceStop::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}
void ServiceStop::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}
::std::string* ServiceStop::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceStop::release_service_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceStop::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceStop::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}
void ServiceStop::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStop.service_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ServiceStopRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceStopRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceStopRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void ServiceStopRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void ServiceStopRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceStopRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceStopRsp::ServiceStopRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
}
ServiceStopRsp::ServiceStopRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
}
ServiceStopRsp::ServiceStopRsp(const ServiceStopRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
}

void ServiceStopRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

ServiceStopRsp::~ServiceStopRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  SharedDtor();
}

void ServiceStopRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void ServiceStopRsp::ArenaDtor(void* object) {
  ServiceStopRsp* _this = reinterpret_cast< ServiceStopRsp* >(object);
  (void)_this;
}
void ServiceStopRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceStopRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceStopRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[5].descriptor;
}

const ServiceStopRsp& ServiceStopRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceStopRsp* ServiceStopRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceStopRsp>(arena);
}

void ServiceStopRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool ServiceStopRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  return false;
#undef DO_
}

void ServiceStopRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
}

::google::protobuf::uint8* ServiceStopRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  return target;
}

size_t ServiceStopRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStopRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceStopRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceStopRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
    MergeFrom(*source);
  }
}

void ServiceStopRsp::MergeFrom(const ServiceStopRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void ServiceStopRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStopRsp::CopyFrom(const ServiceStopRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceStopRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStopRsp::IsInitialized() const {
  return true;
}

void ServiceStopRsp::Swap(ServiceStopRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceStopRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceStopRsp::UnsafeArenaSwap(ServiceStopRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceStopRsp::InternalSwap(ServiceStopRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceStopRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool ServiceStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void ServiceStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& ServiceStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void ServiceStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceStopRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceConf::kSmdNameFieldNumber;
const int ServiceConf::kServiceNameFieldNumber;
const int ServiceConf::kDownloadUrlFieldNumber;
const int ServiceConf::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceConf::ServiceConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ServiceConf)
}
ServiceConf::ServiceConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ServiceConf)
}
ServiceConf::ServiceConf(const ServiceConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smd_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.smd_name().size() > 0) {
    smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.smd_name(),
      GetArenaNoVirtual());
  }
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name(),
      GetArenaNoVirtual());
  }
  download_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.download_url().size() > 0) {
    download_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_url(),
      GetArenaNoVirtual());
  }
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config().size() > 0) {
    config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ServiceConf)
}

void ServiceConf::SharedCtor() {
  smd_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServiceConf::~ServiceConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ServiceConf)
  SharedDtor();
}

void ServiceConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  smd_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  download_url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  config_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ServiceConf::ArenaDtor(void* object) {
  ServiceConf* _this = reinterpret_cast< ServiceConf* >(object);
  (void)_this;
}
void ServiceConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[6].descriptor;
}

const ServiceConf& ServiceConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceConf* ServiceConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceConf>(arena);
}

void ServiceConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ServiceConf)
  smd_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  download_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  config_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ServiceConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ServiceConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string smd_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smd_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->smd_name().data(), this->smd_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceConf.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string download_url = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->download_url().data(), this->download_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceConf.download_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes config = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ServiceConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ServiceConf)
  return false;
#undef DO_
}

void ServiceConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ServiceConf)
  // string smd_name = 1;
  if (this->smd_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smd_name().data(), this->smd_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->smd_name(), output);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConf.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_name(), output);
  }

  // string download_url = 3;
  if (this->download_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConf.download_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->download_url(), output);
  }

  // bytes config = 4;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->config(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ServiceConf)
}

::google::protobuf::uint8* ServiceConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ServiceConf)
  // string smd_name = 1;
  if (this->smd_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->smd_name().data(), this->smd_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->smd_name(), target);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConf.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_name(), target);
  }

  // string download_url = 3;
  if (this->download_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->download_url().data(), this->download_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConf.download_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->download_url(), target);
  }

  // bytes config = 4;
  if (this->config().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->config(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ServiceConf)
  return target;
}

size_t ServiceConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ServiceConf)
  size_t total_size = 0;

  // string smd_name = 1;
  if (this->smd_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->smd_name());
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string download_url = 3;
  if (this->download_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->download_url());
  }

  // bytes config = 4;
  if (this->config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->config());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ServiceConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ServiceConf)
    MergeFrom(*source);
  }
}

void ServiceConf::MergeFrom(const ServiceConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.smd_name().size() > 0) {
    set_smd_name(from.smd_name());
  }
  if (from.service_name().size() > 0) {
    set_service_name(from.service_name());
  }
  if (from.download_url().size() > 0) {
    set_download_url(from.download_url());
  }
  if (from.config().size() > 0) {
    set_config(from.config());
  }
}

void ServiceConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceConf::CopyFrom(const ServiceConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceConf::IsInitialized() const {
  return true;
}

void ServiceConf::Swap(ServiceConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceConf::UnsafeArenaSwap(ServiceConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceConf::InternalSwap(ServiceConf* other) {
  smd_name_.Swap(&other->smd_name_);
  service_name_.Swap(&other->service_name_);
  download_url_.Swap(&other->download_url_);
  config_.Swap(&other->config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceConf

// string smd_name = 1;
void ServiceConf::clear_smd_name() {
  smd_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceConf::smd_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
  return smd_name_.Get();
}
void ServiceConf::set_smd_name(const ::std::string& value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}
void ServiceConf::set_smd_name(const char* value) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}
void ServiceConf::set_smd_name(const char* value,
    size_t size) {
  
  smd_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}
::std::string* ServiceConf::mutable_smd_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
  return smd_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConf::release_smd_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
  
  return smd_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConf::unsafe_arena_release_smd_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return smd_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceConf::set_allocated_smd_name(::std::string* smd_name) {
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), smd_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}
void ServiceConf::unsafe_arena_set_allocated_smd_name(
    ::std::string* smd_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (smd_name != NULL) {
    
  } else {
    
  }
  smd_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      smd_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.smd_name)
}

// string service_name = 2;
void ServiceConf::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceConf::service_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
  return service_name_.Get();
}
void ServiceConf::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}
void ServiceConf::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}
void ServiceConf::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}
::std::string* ServiceConf::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConf::release_service_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConf::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceConf::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}
void ServiceConf::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.service_name)
}

// string download_url = 3;
void ServiceConf::clear_download_url() {
  download_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceConf::download_url() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
  return download_url_.Get();
}
void ServiceConf::set_download_url(const ::std::string& value) {
  
  download_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}
void ServiceConf::set_download_url(const char* value) {
  
  download_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}
void ServiceConf::set_download_url(const char* value,
    size_t size) {
  
  download_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}
::std::string* ServiceConf::mutable_download_url() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
  return download_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConf::release_download_url() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
  
  return download_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConf::unsafe_arena_release_download_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return download_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceConf::set_allocated_download_url(::std::string* download_url) {
  if (download_url != NULL) {
    
  } else {
    
  }
  download_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}
void ServiceConf::unsafe_arena_set_allocated_download_url(
    ::std::string* download_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (download_url != NULL) {
    
  } else {
    
  }
  download_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      download_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.download_url)
}

// bytes config = 4;
void ServiceConf::clear_config() {
  config_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceConf::config() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
  return config_.Get();
}
void ServiceConf::set_config(const ::std::string& value) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}
void ServiceConf::set_config(const char* value) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}
void ServiceConf::set_config(const void* value,
    size_t size) {
  
  config_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}
::std::string* ServiceConf::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
  return config_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConf::release_config() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
  
  return config_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConf::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return config_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceConf::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}
void ServiceConf::unsafe_arena_set_allocated_config(
    ::std::string* config) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (config != NULL) {
    
  } else {
    
  }
  config_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      config, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConf.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ServiceConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void ServiceConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void ServiceConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceConfRsp::kServiceNameFieldNumber;
const int ServiceConfRsp::kServiceReportAddrFieldNumber;
const int ServiceConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceConfRsp::ServiceConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
}
ServiceConfRsp::ServiceConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
}
ServiceConfRsp::ServiceConfRsp(const ServiceConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name(),
      GetArenaNoVirtual());
  }
  service_report_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_report_addr().size() > 0) {
    service_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_report_addr(),
      GetArenaNoVirtual());
  }
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
}

void ServiceConfRsp::SharedCtor() {
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_report_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = NULL;
  _cached_size_ = 0;
}

ServiceConfRsp::~ServiceConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  SharedDtor();
}

void ServiceConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  service_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_report_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete response_;
  }
}

void ServiceConfRsp::ArenaDtor(void* object) {
  ServiceConfRsp* _this = reinterpret_cast< ServiceConfRsp* >(object);
  (void)_this;
}
void ServiceConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[7].descriptor;
}

const ServiceConfRsp& ServiceConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceConfRsp* ServiceConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceConfRsp>(arena);
}

void ServiceConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_report_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool ServiceConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_report_addr = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_report_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_report_addr().data(), this->service_report_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  return false;
#undef DO_
}

void ServiceConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // string service_report_addr = 2;
  if (this->service_report_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_report_addr().data(), this->service_report_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_report_addr(), output);
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 3;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
}

::google::protobuf::uint8* ServiceConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // string service_report_addr = 2;
  if (this->service_report_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_report_addr().data(), this->service_report_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_report_addr(), target);
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 3;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  return target;
}

size_t ServiceConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  size_t total_size = 0;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string service_report_addr = 2;
  if (this->service_report_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_report_addr());
  }

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 3;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
    MergeFrom(*source);
  }
}

void ServiceConfRsp::MergeFrom(const ServiceConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.service_name().size() > 0) {
    set_service_name(from.service_name());
  }
  if (from.service_report_addr().size() > 0) {
    set_service_report_addr(from.service_report_addr());
  }
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void ServiceConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceConfRsp::CopyFrom(const ServiceConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceConfRsp::IsInitialized() const {
  return true;
}

void ServiceConfRsp::Swap(ServiceConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceConfRsp::UnsafeArenaSwap(ServiceConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceConfRsp::InternalSwap(ServiceConfRsp* other) {
  service_name_.Swap(&other->service_name_);
  service_report_addr_.Swap(&other->service_report_addr_);
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceConfRsp

// string service_name = 1;
void ServiceConfRsp::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceConfRsp::service_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
  return service_name_.Get();
}
void ServiceConfRsp::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}
void ServiceConfRsp::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}
void ServiceConfRsp::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}
::std::string* ServiceConfRsp::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConfRsp::release_service_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConfRsp::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceConfRsp::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}
void ServiceConfRsp::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_name)
}

// string service_report_addr = 2;
void ServiceConfRsp::clear_service_report_addr() {
  service_report_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceConfRsp::service_report_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
  return service_report_addr_.Get();
}
void ServiceConfRsp::set_service_report_addr(const ::std::string& value) {
  
  service_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}
void ServiceConfRsp::set_service_report_addr(const char* value) {
  
  service_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}
void ServiceConfRsp::set_service_report_addr(const char* value,
    size_t size) {
  
  service_report_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}
::std::string* ServiceConfRsp::mutable_service_report_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
  return service_report_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConfRsp::release_service_report_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
  
  return service_report_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceConfRsp::unsafe_arena_release_service_report_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_report_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceConfRsp::set_allocated_service_report_addr(::std::string* service_report_addr) {
  if (service_report_addr != NULL) {
    
  } else {
    
  }
  service_report_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_report_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}
void ServiceConfRsp::unsafe_arena_set_allocated_service_report_addr(
    ::std::string* service_report_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_report_addr != NULL) {
    
  } else {
    
  }
  service_report_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_report_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.service_report_addr)
}

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 3;
bool ServiceConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void ServiceConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& ServiceConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ServiceConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void ServiceConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceQuery::kQueryTypeFieldNumber;
const int ServiceQuery::kQueryArgumentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceQuery::ServiceQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ServiceQuery)
}
ServiceQuery::ServiceQuery(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ServiceQuery)
}
ServiceQuery::ServiceQuery(const ServiceQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_argument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query_argument().size() > 0) {
    query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_argument(),
      GetArenaNoVirtual());
  }
  query_type_ = from.query_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ServiceQuery)
}

void ServiceQuery::SharedCtor() {
  query_argument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_type_ = 0;
  _cached_size_ = 0;
}

ServiceQuery::~ServiceQuery() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  SharedDtor();
}

void ServiceQuery::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  query_argument_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ServiceQuery::ArenaDtor(void* object) {
  ServiceQuery* _this = reinterpret_cast< ServiceQuery* >(object);
  (void)_this;
}
void ServiceQuery::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceQuery::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[8].descriptor;
}

const ServiceQuery& ServiceQuery::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceQuery* ServiceQuery::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceQuery>(arena);
}

void ServiceQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  query_argument_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  query_type_ = 0;
}

bool ServiceQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_query_type(static_cast< ::com::fsmeeting::fsp::proto::smd::ServiceQueryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query_argument = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_argument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query_argument().data(), this->query_argument().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  return false;
#undef DO_
}

void ServiceQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
  if (this->query_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->query_type(), output);
  }

  // string query_argument = 2;
  if (this->query_argument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_argument().data(), this->query_argument().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query_argument(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ServiceQuery)
}

::google::protobuf::uint8* ServiceQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
  if (this->query_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->query_type(), target);
  }

  // string query_argument = 2;
  if (this->query_argument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_argument().data(), this->query_argument().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query_argument(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  return target;
}

size_t ServiceQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  size_t total_size = 0;

  // string query_argument = 2;
  if (this->query_argument().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query_argument());
  }

  // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
  if (this->query_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ServiceQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ServiceQuery)
    MergeFrom(*source);
  }
}

void ServiceQuery::MergeFrom(const ServiceQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.query_argument().size() > 0) {
    set_query_argument(from.query_argument());
  }
  if (from.query_type() != 0) {
    set_query_type(from.query_type());
  }
}

void ServiceQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceQuery::CopyFrom(const ServiceQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceQuery::IsInitialized() const {
  return true;
}

void ServiceQuery::Swap(ServiceQuery* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceQuery* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceQuery::UnsafeArenaSwap(ServiceQuery* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceQuery::InternalSwap(ServiceQuery* other) {
  query_argument_.Swap(&other->query_argument_);
  std::swap(query_type_, other->query_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceQuery::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceQuery

// .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
void ServiceQuery::clear_query_type() {
  query_type_ = 0;
}
::com::fsmeeting::fsp::proto::smd::ServiceQueryType ServiceQuery::query_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_type)
  return static_cast< ::com::fsmeeting::fsp::proto::smd::ServiceQueryType >(query_type_);
}
void ServiceQuery::set_query_type(::com::fsmeeting::fsp::proto::smd::ServiceQueryType value) {
  
  query_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_type)
}

// string query_argument = 2;
void ServiceQuery::clear_query_argument() {
  query_argument_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceQuery::query_argument() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
  return query_argument_.Get();
}
void ServiceQuery::set_query_argument(const ::std::string& value) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}
void ServiceQuery::set_query_argument(const char* value) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}
void ServiceQuery::set_query_argument(const char* value,
    size_t size) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}
::std::string* ServiceQuery::mutable_query_argument() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
  return query_argument_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceQuery::release_query_argument() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
  
  return query_argument_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceQuery::unsafe_arena_release_query_argument() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return query_argument_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceQuery::set_allocated_query_argument(::std::string* query_argument) {
  if (query_argument != NULL) {
    
  } else {
    
  }
  query_argument_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_argument,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}
void ServiceQuery::unsafe_arena_set_allocated_query_argument(
    ::std::string* query_argument) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (query_argument != NULL) {
    
  } else {
    
  }
  query_argument_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      query_argument, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceQuery.query_argument)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceQueryRsp::kQueryTypeFieldNumber;
const int ServiceQueryRsp::kQueryArgumentFieldNumber;
const int ServiceQueryRsp::kQueryResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceQueryRsp::ServiceQueryRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
}
ServiceQueryRsp::ServiceQueryRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  query_result_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
}
ServiceQueryRsp::ServiceQueryRsp(const ServiceQueryRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      query_result_(from.query_result_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_argument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.query_argument().size() > 0) {
    query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_argument(),
      GetArenaNoVirtual());
  }
  query_type_ = from.query_type_;
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
}

void ServiceQueryRsp::SharedCtor() {
  query_argument_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_type_ = 0;
  _cached_size_ = 0;
}

ServiceQueryRsp::~ServiceQueryRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  SharedDtor();
}

void ServiceQueryRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  query_argument_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ServiceQueryRsp::ArenaDtor(void* object) {
  ServiceQueryRsp* _this = reinterpret_cast< ServiceQueryRsp* >(object);
  (void)_this;
}
void ServiceQueryRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceQueryRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[9].descriptor;
}

const ServiceQueryRsp& ServiceQueryRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceQueryRsp* ServiceQueryRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceQueryRsp>(arena);
}

void ServiceQueryRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  query_result_.Clear();
  query_argument_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  query_type_ = 0;
}

bool ServiceQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_query_type(static_cast< ::com::fsmeeting::fsp::proto::smd::ServiceQueryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string query_argument = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_argument()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query_argument().data(), this->query_argument().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string query_result = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_query_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->query_result(this->query_result_size() - 1).data(),
            this->query_result(this->query_result_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  return false;
#undef DO_
}

void ServiceQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
  if (this->query_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->query_type(), output);
  }

  // string query_argument = 2;
  if (this->query_argument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_argument().data(), this->query_argument().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->query_argument(), output);
  }

  // repeated string query_result = 3;
  for (int i = 0; i < this->query_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_result(i).data(), this->query_result(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->query_result(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
}

::google::protobuf::uint8* ServiceQueryRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
  if (this->query_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->query_type(), target);
  }

  // string query_argument = 2;
  if (this->query_argument().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_argument().data(), this->query_argument().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->query_argument(), target);
  }

  // repeated string query_result = 3;
  for (int i = 0; i < this->query_result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->query_result(i).data(), this->query_result(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->query_result(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  return target;
}

size_t ServiceQueryRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  size_t total_size = 0;

  // repeated string query_result = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->query_result_size());
  for (int i = 0; i < this->query_result_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->query_result(i));
  }

  // string query_argument = 2;
  if (this->query_argument().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->query_argument());
  }

  // .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
  if (this->query_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceQueryRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceQueryRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceQueryRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
    MergeFrom(*source);
  }
}

void ServiceQueryRsp::MergeFrom(const ServiceQueryRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  query_result_.MergeFrom(from.query_result_);
  if (from.query_argument().size() > 0) {
    set_query_argument(from.query_argument());
  }
  if (from.query_type() != 0) {
    set_query_type(from.query_type());
  }
}

void ServiceQueryRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceQueryRsp::CopyFrom(const ServiceQueryRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceQueryRsp::IsInitialized() const {
  return true;
}

void ServiceQueryRsp::Swap(ServiceQueryRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceQueryRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceQueryRsp::UnsafeArenaSwap(ServiceQueryRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceQueryRsp::InternalSwap(ServiceQueryRsp* other) {
  query_result_.UnsafeArenaSwap(&other->query_result_);
  query_argument_.Swap(&other->query_argument_);
  std::swap(query_type_, other->query_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceQueryRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceQueryRsp

// .com.fsmeeting.fsp.proto.smd.ServiceQueryType query_type = 1;
void ServiceQueryRsp::clear_query_type() {
  query_type_ = 0;
}
::com::fsmeeting::fsp::proto::smd::ServiceQueryType ServiceQueryRsp::query_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_type)
  return static_cast< ::com::fsmeeting::fsp::proto::smd::ServiceQueryType >(query_type_);
}
void ServiceQueryRsp::set_query_type(::com::fsmeeting::fsp::proto::smd::ServiceQueryType value) {
  
  query_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_type)
}

// string query_argument = 2;
void ServiceQueryRsp::clear_query_argument() {
  query_argument_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ServiceQueryRsp::query_argument() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
  return query_argument_.Get();
}
void ServiceQueryRsp::set_query_argument(const ::std::string& value) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}
void ServiceQueryRsp::set_query_argument(const char* value) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}
void ServiceQueryRsp::set_query_argument(const char* value,
    size_t size) {
  
  query_argument_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}
::std::string* ServiceQueryRsp::mutable_query_argument() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
  return query_argument_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceQueryRsp::release_query_argument() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
  
  return query_argument_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ServiceQueryRsp::unsafe_arena_release_query_argument() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return query_argument_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ServiceQueryRsp::set_allocated_query_argument(::std::string* query_argument) {
  if (query_argument != NULL) {
    
  } else {
    
  }
  query_argument_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_argument,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}
void ServiceQueryRsp::unsafe_arena_set_allocated_query_argument(
    ::std::string* query_argument) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (query_argument != NULL) {
    
  } else {
    
  }
  query_argument_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      query_argument, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_argument)
}

// repeated string query_result = 3;
int ServiceQueryRsp::query_result_size() const {
  return query_result_.size();
}
void ServiceQueryRsp::clear_query_result() {
  query_result_.Clear();
}
const ::std::string& ServiceQueryRsp::query_result(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return query_result_.Get(index);
}
::std::string* ServiceQueryRsp::mutable_query_result(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return query_result_.Mutable(index);
}
void ServiceQueryRsp::set_query_result(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  query_result_.Mutable(index)->assign(value);
}
void ServiceQueryRsp::set_query_result(int index, const char* value) {
  query_result_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
void ServiceQueryRsp::set_query_result(int index, const char* value, size_t size) {
  query_result_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
::std::string* ServiceQueryRsp::add_query_result() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return query_result_.Add();
}
void ServiceQueryRsp::add_query_result(const ::std::string& value) {
  query_result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
void ServiceQueryRsp::add_query_result(const char* value) {
  query_result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
void ServiceQueryRsp::add_query_result(const char* value, size_t size) {
  query_result_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServiceQueryRsp::query_result() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return query_result_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ServiceQueryRsp::mutable_query_result() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.smd.ServiceQueryRsp.query_result)
  return &query_result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SsConf::kIceAddrFieldNumber;
const int SsConf::kKafkaBrokersFieldNumber;
const int SsConf::kScTopicFieldNumber;
const int SsConf::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SsConf::SsConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.SsConf)
}
SsConf::SsConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.SsConf)
}
SsConf::SsConf(const SsConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kafka_brokers().size() > 0) {
    kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kafka_brokers(),
      GetArenaNoVirtual());
  }
  sc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sc_topic().size() > 0) {
    sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sc_topic(),
      GetArenaNoVirtual());
  }
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_id().size() > 0) {
    instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.SsConf)
}

void SsConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SsConf::~SsConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.SsConf)
  SharedDtor();
}

void SsConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  kafka_brokers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sc_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SsConf::ArenaDtor(void* object) {
  SsConf* _this = reinterpret_cast< SsConf* >(object);
  (void)_this;
}
void SsConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SsConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SsConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[10].descriptor;
}

const SsConf& SsConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SsConf* SsConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SsConf>(arena);
}

void SsConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.SsConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SsConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.SsConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SsConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kafka_brokers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kafka_brokers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kafka_brokers().data(), this->kafka_brokers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sc_topic = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sc_topic().data(), this->sc_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SsConf.sc_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instance_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_id().data(), this->instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SsConf.instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.SsConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.SsConf)
  return false;
#undef DO_
}

void SsConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.SsConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SsConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kafka_brokers(), output);
  }

  // string sc_topic = 3;
  if (this->sc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_topic().data(), this->sc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SsConf.sc_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sc_topic(), output);
  }

  // string instance_id = 4;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SsConf.instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instance_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.SsConf)
}

::google::protobuf::uint8* SsConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.SsConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SsConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kafka_brokers(), target);
  }

  // string sc_topic = 3;
  if (this->sc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_topic().data(), this->sc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SsConf.sc_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sc_topic(), target);
  }

  // string instance_id = 4;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SsConf.instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instance_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.SsConf)
  return target;
}

size_t SsConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.SsConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kafka_brokers());
  }

  // string sc_topic = 3;
  if (this->sc_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sc_topic());
  }

  // string instance_id = 4;
  if (this->instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SsConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.SsConf)
  GOOGLE_DCHECK_NE(&from, this);
  const SsConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SsConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.SsConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.SsConf)
    MergeFrom(*source);
  }
}

void SsConf::MergeFrom(const SsConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.SsConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.kafka_brokers().size() > 0) {
    set_kafka_brokers(from.kafka_brokers());
  }
  if (from.sc_topic().size() > 0) {
    set_sc_topic(from.sc_topic());
  }
  if (from.instance_id().size() > 0) {
    set_instance_id(from.instance_id());
  }
}

void SsConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.SsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsConf::CopyFrom(const SsConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.SsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsConf::IsInitialized() const {
  return true;
}

void SsConf::Swap(SsConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SsConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SsConf::UnsafeArenaSwap(SsConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SsConf::InternalSwap(SsConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  kafka_brokers_.Swap(&other->kafka_brokers_);
  sc_topic_.Swap(&other->sc_topic_);
  instance_id_.Swap(&other->instance_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SsConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SsConf

// string ice_addr = 1;
void SsConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SsConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
  return ice_addr_.Get();
}
void SsConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}
void SsConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}
void SsConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}
::std::string* SsConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SsConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SsConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SsConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}
void SsConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.ice_addr)
}

// string kafka_brokers = 2;
void SsConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SsConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
  return kafka_brokers_.Get();
}
void SsConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}
void SsConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}
void SsConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}
::std::string* SsConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SsConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SsConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SsConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}
void SsConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.kafka_brokers)
}

// string sc_topic = 3;
void SsConf::clear_sc_topic() {
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SsConf::sc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
  return sc_topic_.Get();
}
void SsConf::set_sc_topic(const ::std::string& value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}
void SsConf::set_sc_topic(const char* value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}
void SsConf::set_sc_topic(const char* value,
    size_t size) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}
::std::string* SsConf::mutable_sc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
  return sc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SsConf::release_sc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
  
  return sc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SsConf::unsafe_arena_release_sc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SsConf::set_allocated_sc_topic(::std::string* sc_topic) {
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}
void SsConf::unsafe_arena_set_allocated_sc_topic(
    ::std::string* sc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.sc_topic)
}

// string instance_id = 4;
void SsConf::clear_instance_id() {
  instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SsConf::instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
  return instance_id_.Get();
}
void SsConf::set_instance_id(const ::std::string& value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}
void SsConf::set_instance_id(const char* value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}
void SsConf::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}
::std::string* SsConf::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
  return instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SsConf::release_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
  
  return instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SsConf::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SsConf::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}
void SsConf::unsafe_arena_set_allocated_instance_id(
    ::std::string* instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SsConf.instance_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SsConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SsConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SsConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void SsConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void SsConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SsConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SsConfRsp::SsConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.SsConfRsp)
}
SsConfRsp::SsConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.SsConfRsp)
}
SsConfRsp::SsConfRsp(const SsConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.SsConfRsp)
}

void SsConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

SsConfRsp::~SsConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  SharedDtor();
}

void SsConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void SsConfRsp::ArenaDtor(void* object) {
  SsConfRsp* _this = reinterpret_cast< SsConfRsp* >(object);
  (void)_this;
}
void SsConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SsConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SsConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[11].descriptor;
}

const SsConfRsp& SsConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SsConfRsp* SsConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SsConfRsp>(arena);
}

void SsConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool SsConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  return false;
#undef DO_
}

void SsConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.SsConfRsp)
}

::google::protobuf::uint8* SsConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  return target;
}

size_t SsConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SsConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SsConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SsConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.SsConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.SsConfRsp)
    MergeFrom(*source);
  }
}

void SsConfRsp::MergeFrom(const SsConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void SsConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SsConfRsp::CopyFrom(const SsConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.SsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SsConfRsp::IsInitialized() const {
  return true;
}

void SsConfRsp::Swap(SsConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SsConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SsConfRsp::UnsafeArenaSwap(SsConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SsConfRsp::InternalSwap(SsConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SsConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool SsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void SsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& SsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void SsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SsConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CpConf::kIceAddrFieldNumber;
const int CpConf::kKafkaBrokersFieldNumber;
const int CpConf::kScTopicFieldNumber;
const int CpConf::kInstanceIdFieldNumber;
const int CpConf::kSessionAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CpConf::CpConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.CpConf)
}
CpConf::CpConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.CpConf)
}
CpConf::CpConf(const CpConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kafka_brokers().size() > 0) {
    kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kafka_brokers(),
      GetArenaNoVirtual());
  }
  sc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sc_topic().size() > 0) {
    sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sc_topic(),
      GetArenaNoVirtual());
  }
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_id().size() > 0) {
    instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_id(),
      GetArenaNoVirtual());
  }
  session_app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_app_id().size() > 0) {
    session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_app_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.CpConf)
}

void CpConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CpConf::~CpConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.CpConf)
  SharedDtor();
}

void CpConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  kafka_brokers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sc_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  session_app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void CpConf::ArenaDtor(void* object) {
  CpConf* _this = reinterpret_cast< CpConf* >(object);
  (void)_this;
}
void CpConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CpConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CpConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[12].descriptor;
}

const CpConf& CpConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

CpConf* CpConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CpConf>(arena);
}

void CpConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.CpConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  session_app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool CpConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.CpConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.CpConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kafka_brokers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kafka_brokers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kafka_brokers().data(), this->kafka_brokers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sc_topic = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sc_topic().data(), this->sc_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.CpConf.sc_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instance_id = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_id().data(), this->instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.CpConf.instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_app_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_app_id().data(), this->session_app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.CpConf.session_app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.CpConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.CpConf)
  return false;
#undef DO_
}

void CpConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.CpConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kafka_brokers(), output);
  }

  // string sc_topic = 3;
  if (this->sc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_topic().data(), this->sc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.sc_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sc_topic(), output);
  }

  // string instance_id = 4;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->instance_id(), output);
  }

  // string session_app_id = 5;
  if (this->session_app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_app_id().data(), this->session_app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.session_app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->session_app_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.CpConf)
}

::google::protobuf::uint8* CpConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.CpConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kafka_brokers(), target);
  }

  // string sc_topic = 3;
  if (this->sc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_topic().data(), this->sc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.sc_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sc_topic(), target);
  }

  // string instance_id = 4;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->instance_id(), target);
  }

  // string session_app_id = 5;
  if (this->session_app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_app_id().data(), this->session_app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.CpConf.session_app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->session_app_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.CpConf)
  return target;
}

size_t CpConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.CpConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kafka_brokers());
  }

  // string sc_topic = 3;
  if (this->sc_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sc_topic());
  }

  // string instance_id = 4;
  if (this->instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_id());
  }

  // string session_app_id = 5;
  if (this->session_app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_app_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CpConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.CpConf)
  GOOGLE_DCHECK_NE(&from, this);
  const CpConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CpConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.CpConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.CpConf)
    MergeFrom(*source);
  }
}

void CpConf::MergeFrom(const CpConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.CpConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.kafka_brokers().size() > 0) {
    set_kafka_brokers(from.kafka_brokers());
  }
  if (from.sc_topic().size() > 0) {
    set_sc_topic(from.sc_topic());
  }
  if (from.instance_id().size() > 0) {
    set_instance_id(from.instance_id());
  }
  if (from.session_app_id().size() > 0) {
    set_session_app_id(from.session_app_id());
  }
}

void CpConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.CpConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpConf::CopyFrom(const CpConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.CpConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpConf::IsInitialized() const {
  return true;
}

void CpConf::Swap(CpConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CpConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CpConf::UnsafeArenaSwap(CpConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CpConf::InternalSwap(CpConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  kafka_brokers_.Swap(&other->kafka_brokers_);
  sc_topic_.Swap(&other->sc_topic_);
  instance_id_.Swap(&other->instance_id_);
  session_app_id_.Swap(&other->session_app_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CpConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CpConf

// string ice_addr = 1;
void CpConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CpConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
  return ice_addr_.Get();
}
void CpConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}
void CpConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}
void CpConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}
::std::string* CpConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CpConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}
void CpConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.ice_addr)
}

// string kafka_brokers = 2;
void CpConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CpConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
  return kafka_brokers_.Get();
}
void CpConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}
void CpConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}
void CpConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}
::std::string* CpConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CpConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}
void CpConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.kafka_brokers)
}

// string sc_topic = 3;
void CpConf::clear_sc_topic() {
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CpConf::sc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
  return sc_topic_.Get();
}
void CpConf::set_sc_topic(const ::std::string& value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}
void CpConf::set_sc_topic(const char* value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}
void CpConf::set_sc_topic(const char* value,
    size_t size) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}
::std::string* CpConf::mutable_sc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
  return sc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::release_sc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
  
  return sc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::unsafe_arena_release_sc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CpConf::set_allocated_sc_topic(::std::string* sc_topic) {
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}
void CpConf::unsafe_arena_set_allocated_sc_topic(
    ::std::string* sc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.sc_topic)
}

// string instance_id = 4;
void CpConf::clear_instance_id() {
  instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CpConf::instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
  return instance_id_.Get();
}
void CpConf::set_instance_id(const ::std::string& value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}
void CpConf::set_instance_id(const char* value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}
void CpConf::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}
::std::string* CpConf::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
  return instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::release_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
  
  return instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CpConf::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}
void CpConf::unsafe_arena_set_allocated_instance_id(
    ::std::string* instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.instance_id)
}

// string session_app_id = 5;
void CpConf::clear_session_app_id() {
  session_app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& CpConf::session_app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
  return session_app_id_.Get();
}
void CpConf::set_session_app_id(const ::std::string& value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}
void CpConf::set_session_app_id(const char* value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}
void CpConf::set_session_app_id(const char* value,
    size_t size) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}
::std::string* CpConf::mutable_session_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
  return session_app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::release_session_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
  
  return session_app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* CpConf::unsafe_arena_release_session_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void CpConf::set_allocated_session_app_id(::std::string* session_app_id) {
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}
void CpConf::unsafe_arena_set_allocated_session_app_id(
    ::std::string* session_app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConf.session_app_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void CpConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CpConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CpConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void CpConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void CpConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CpConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CpConfRsp::CpConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.CpConfRsp)
}
CpConfRsp::CpConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.CpConfRsp)
}
CpConfRsp::CpConfRsp(const CpConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.CpConfRsp)
}

void CpConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

CpConfRsp::~CpConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  SharedDtor();
}

void CpConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void CpConfRsp::ArenaDtor(void* object) {
  CpConfRsp* _this = reinterpret_cast< CpConfRsp* >(object);
  (void)_this;
}
void CpConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CpConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CpConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[13].descriptor;
}

const CpConfRsp& CpConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

CpConfRsp* CpConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CpConfRsp>(arena);
}

void CpConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool CpConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  return false;
#undef DO_
}

void CpConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.CpConfRsp)
}

::google::protobuf::uint8* CpConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  return target;
}

size_t CpConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CpConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const CpConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CpConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.CpConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.CpConfRsp)
    MergeFrom(*source);
  }
}

void CpConfRsp::MergeFrom(const CpConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void CpConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpConfRsp::CopyFrom(const CpConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.CpConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpConfRsp::IsInitialized() const {
  return true;
}

void CpConfRsp::Swap(CpConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CpConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CpConfRsp::UnsafeArenaSwap(CpConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CpConfRsp::InternalSwap(CpConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CpConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CpConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool CpConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void CpConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& CpConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CpConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* CpConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void CpConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.CpConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamAsConf::kAccessUrlFieldNumber;
const int StreamAsConf::kSessionAppIdFieldNumber;
const int StreamAsConf::kDebugModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamAsConf::StreamAsConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.StreamAsConf)
}
StreamAsConf::StreamAsConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.StreamAsConf)
}
StreamAsConf::StreamAsConf(const StreamAsConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  access_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.access_url().size() > 0) {
    access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_url(),
      GetArenaNoVirtual());
  }
  session_app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_app_id().size() > 0) {
    session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_app_id(),
      GetArenaNoVirtual());
  }
  debug_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.debug_mode().size() > 0) {
    debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_mode(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.StreamAsConf)
}

void StreamAsConf::SharedCtor() {
  access_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StreamAsConf::~StreamAsConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  SharedDtor();
}

void StreamAsConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  access_url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  session_app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  debug_mode_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void StreamAsConf::ArenaDtor(void* object) {
  StreamAsConf* _this = reinterpret_cast< StreamAsConf* >(object);
  (void)_this;
}
void StreamAsConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamAsConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAsConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[14].descriptor;
}

const StreamAsConf& StreamAsConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamAsConf* StreamAsConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamAsConf>(arena);
}

void StreamAsConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  access_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  session_app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  debug_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool StreamAsConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string access_url = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->access_url().data(), this->access_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_app_id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_app_id().data(), this->session_app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string debug_mode = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->debug_mode().data(), this->debug_mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  return false;
#undef DO_
}

void StreamAsConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  // string access_url = 1;
  if (this->access_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->access_url().data(), this->access_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_url(), output);
  }

  // string session_app_id = 2;
  if (this->session_app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_app_id().data(), this->session_app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_app_id(), output);
  }

  // string debug_mode = 3;
  if (this->debug_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug_mode().data(), this->debug_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->debug_mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.StreamAsConf)
}

::google::protobuf::uint8* StreamAsConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  // string access_url = 1;
  if (this->access_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->access_url().data(), this->access_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_url(), target);
  }

  // string session_app_id = 2;
  if (this->session_app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_app_id().data(), this->session_app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_app_id(), target);
  }

  // string debug_mode = 3;
  if (this->debug_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug_mode().data(), this->debug_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->debug_mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  return target;
}

size_t StreamAsConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  size_t total_size = 0;

  // string access_url = 1;
  if (this->access_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->access_url());
  }

  // string session_app_id = 2;
  if (this->session_app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_app_id());
  }

  // string debug_mode = 3;
  if (this->debug_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->debug_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAsConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAsConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamAsConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.StreamAsConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.StreamAsConf)
    MergeFrom(*source);
  }
}

void StreamAsConf::MergeFrom(const StreamAsConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.access_url().size() > 0) {
    set_access_url(from.access_url());
  }
  if (from.session_app_id().size() > 0) {
    set_session_app_id(from.session_app_id());
  }
  if (from.debug_mode().size() > 0) {
    set_debug_mode(from.debug_mode());
  }
}

void StreamAsConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAsConf::CopyFrom(const StreamAsConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.StreamAsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAsConf::IsInitialized() const {
  return true;
}

void StreamAsConf::Swap(StreamAsConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamAsConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamAsConf::UnsafeArenaSwap(StreamAsConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamAsConf::InternalSwap(StreamAsConf* other) {
  access_url_.Swap(&other->access_url_);
  session_app_id_.Swap(&other->session_app_id_);
  debug_mode_.Swap(&other->debug_mode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamAsConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamAsConf

// string access_url = 1;
void StreamAsConf::clear_access_url() {
  access_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamAsConf::access_url() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
  return access_url_.Get();
}
void StreamAsConf::set_access_url(const ::std::string& value) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}
void StreamAsConf::set_access_url(const char* value) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}
void StreamAsConf::set_access_url(const char* value,
    size_t size) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}
::std::string* StreamAsConf::mutable_access_url() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
  return access_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamAsConf::release_access_url() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
  
  return access_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamAsConf::unsafe_arena_release_access_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return access_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamAsConf::set_allocated_access_url(::std::string* access_url) {
  if (access_url != NULL) {
    
  } else {
    
  }
  access_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}
void StreamAsConf::unsafe_arena_set_allocated_access_url(
    ::std::string* access_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (access_url != NULL) {
    
  } else {
    
  }
  access_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      access_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.access_url)
}

// string session_app_id = 2;
void StreamAsConf::clear_session_app_id() {
  session_app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamAsConf::session_app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
  return session_app_id_.Get();
}
void StreamAsConf::set_session_app_id(const ::std::string& value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}
void StreamAsConf::set_session_app_id(const char* value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}
void StreamAsConf::set_session_app_id(const char* value,
    size_t size) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}
::std::string* StreamAsConf::mutable_session_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
  return session_app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamAsConf::release_session_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
  
  return session_app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamAsConf::unsafe_arena_release_session_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamAsConf::set_allocated_session_app_id(::std::string* session_app_id) {
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}
void StreamAsConf::unsafe_arena_set_allocated_session_app_id(
    ::std::string* session_app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.session_app_id)
}

// string debug_mode = 3;
void StreamAsConf::clear_debug_mode() {
  debug_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& StreamAsConf::debug_mode() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
  return debug_mode_.Get();
}
void StreamAsConf::set_debug_mode(const ::std::string& value) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}
void StreamAsConf::set_debug_mode(const char* value) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}
void StreamAsConf::set_debug_mode(const char* value,
    size_t size) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}
::std::string* StreamAsConf::mutable_debug_mode() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
  return debug_mode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamAsConf::release_debug_mode() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
  
  return debug_mode_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* StreamAsConf::unsafe_arena_release_debug_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return debug_mode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void StreamAsConf::set_allocated_debug_mode(::std::string* debug_mode) {
  if (debug_mode != NULL) {
    
  } else {
    
  }
  debug_mode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_mode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}
void StreamAsConf::unsafe_arena_set_allocated_debug_mode(
    ::std::string* debug_mode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (debug_mode != NULL) {
    
  } else {
    
  }
  debug_mode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      debug_mode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConf.debug_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void StreamAsConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamAsConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamAsConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void StreamAsConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void StreamAsConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamAsConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamAsConfRsp::StreamAsConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
}
StreamAsConfRsp::StreamAsConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
}
StreamAsConfRsp::StreamAsConfRsp(const StreamAsConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
}

void StreamAsConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

StreamAsConfRsp::~StreamAsConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  SharedDtor();
}

void StreamAsConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void StreamAsConfRsp::ArenaDtor(void* object) {
  StreamAsConfRsp* _this = reinterpret_cast< StreamAsConfRsp* >(object);
  (void)_this;
}
void StreamAsConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamAsConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamAsConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[15].descriptor;
}

const StreamAsConfRsp& StreamAsConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreamAsConfRsp* StreamAsConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamAsConfRsp>(arena);
}

void StreamAsConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool StreamAsConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  return false;
#undef DO_
}

void StreamAsConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
}

::google::protobuf::uint8* StreamAsConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  return target;
}

size_t StreamAsConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamAsConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamAsConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamAsConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
    MergeFrom(*source);
  }
}

void StreamAsConfRsp::MergeFrom(const StreamAsConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void StreamAsConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamAsConfRsp::CopyFrom(const StreamAsConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamAsConfRsp::IsInitialized() const {
  return true;
}

void StreamAsConfRsp::Swap(StreamAsConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamAsConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamAsConfRsp::UnsafeArenaSwap(StreamAsConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamAsConfRsp::InternalSwap(StreamAsConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamAsConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamAsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool StreamAsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void StreamAsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamAsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamAsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* StreamAsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void StreamAsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.StreamAsConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupAsConf::kAccessUrlFieldNumber;
const int GroupAsConf::kIceAddrFieldNumber;
const int GroupAsConf::kDevIdFieldNumber;
const int GroupAsConf::kDevVerifyCodeFieldNumber;
const int GroupAsConf::kAppIdFieldNumber;
const int GroupAsConf::kVerificationCodeFieldNumber;
const int GroupAsConf::kDevGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupAsConf::GroupAsConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.GroupAsConf)
}
GroupAsConf::GroupAsConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.GroupAsConf)
}
GroupAsConf::GroupAsConf(const GroupAsConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  access_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.access_url().size() > 0) {
    access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_url(),
      GetArenaNoVirtual());
  }
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  dev_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dev_id().size() > 0) {
    dev_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_id(),
      GetArenaNoVirtual());
  }
  dev_verify_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dev_verify_code().size() > 0) {
    dev_verify_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_verify_code(),
      GetArenaNoVirtual());
  }
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.app_id().size() > 0) {
    app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_id(),
      GetArenaNoVirtual());
  }
  verification_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.verification_code().size() > 0) {
    verification_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verification_code(),
      GetArenaNoVirtual());
  }
  dev_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dev_group().size() > 0) {
    dev_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_group(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.GroupAsConf)
}

void GroupAsConf::SharedCtor() {
  access_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_verify_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verification_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GroupAsConf::~GroupAsConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  SharedDtor();
}

void GroupAsConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  access_url_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  dev_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  dev_verify_code_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  verification_code_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  dev_group_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GroupAsConf::ArenaDtor(void* object) {
  GroupAsConf* _this = reinterpret_cast< GroupAsConf* >(object);
  (void)_this;
}
void GroupAsConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GroupAsConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAsConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[16].descriptor;
}

const GroupAsConf& GroupAsConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupAsConf* GroupAsConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GroupAsConf>(arena);
}

void GroupAsConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  access_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dev_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dev_verify_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  verification_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  dev_group_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GroupAsConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string access_url = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->access_url().data(), this->access_url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ice_addr = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dev_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dev_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dev_id().data(), this->dev_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dev_verify_code = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dev_verify_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dev_verify_code().data(), this->dev_verify_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string app_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->app_id().data(), this->app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string verification_code = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verification_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verification_code().data(), this->verification_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dev_group = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dev_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dev_group().data(), this->dev_group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  return false;
#undef DO_
}

void GroupAsConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  // string access_url = 1;
  if (this->access_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->access_url().data(), this->access_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_url(), output);
  }

  // string ice_addr = 2;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ice_addr(), output);
  }

  // string dev_id = 3;
  if (this->dev_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev_id().data(), this->dev_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dev_id(), output);
  }

  // string dev_verify_code = 4;
  if (this->dev_verify_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev_verify_code().data(), this->dev_verify_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dev_verify_code(), output);
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->app_id(), output);
  }

  // string verification_code = 6;
  if (this->verification_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verification_code().data(), this->verification_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->verification_code(), output);
  }

  // string dev_group = 7;
  if (this->dev_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev_group().data(), this->dev_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->dev_group(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.GroupAsConf)
}

::google::protobuf::uint8* GroupAsConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  // string access_url = 1;
  if (this->access_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->access_url().data(), this->access_url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_url(), target);
  }

  // string ice_addr = 2;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ice_addr(), target);
  }

  // string dev_id = 3;
  if (this->dev_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev_id().data(), this->dev_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dev_id(), target);
  }

  // string dev_verify_code = 4;
  if (this->dev_verify_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev_verify_code().data(), this->dev_verify_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dev_verify_code(), target);
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->app_id().data(), this->app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->app_id(), target);
  }

  // string verification_code = 6;
  if (this->verification_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verification_code().data(), this->verification_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->verification_code(), target);
  }

  // string dev_group = 7;
  if (this->dev_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dev_group().data(), this->dev_group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->dev_group(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  return target;
}

size_t GroupAsConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  size_t total_size = 0;

  // string access_url = 1;
  if (this->access_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->access_url());
  }

  // string ice_addr = 2;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string dev_id = 3;
  if (this->dev_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dev_id());
  }

  // string dev_verify_code = 4;
  if (this->dev_verify_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dev_verify_code());
  }

  // string app_id = 5;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->app_id());
  }

  // string verification_code = 6;
  if (this->verification_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verification_code());
  }

  // string dev_group = 7;
  if (this->dev_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dev_group());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAsConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupAsConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupAsConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.GroupAsConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.GroupAsConf)
    MergeFrom(*source);
  }
}

void GroupAsConf::MergeFrom(const GroupAsConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.access_url().size() > 0) {
    set_access_url(from.access_url());
  }
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.dev_id().size() > 0) {
    set_dev_id(from.dev_id());
  }
  if (from.dev_verify_code().size() > 0) {
    set_dev_verify_code(from.dev_verify_code());
  }
  if (from.app_id().size() > 0) {
    set_app_id(from.app_id());
  }
  if (from.verification_code().size() > 0) {
    set_verification_code(from.verification_code());
  }
  if (from.dev_group().size() > 0) {
    set_dev_group(from.dev_group());
  }
}

void GroupAsConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAsConf::CopyFrom(const GroupAsConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.GroupAsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAsConf::IsInitialized() const {
  return true;
}

void GroupAsConf::Swap(GroupAsConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GroupAsConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GroupAsConf::UnsafeArenaSwap(GroupAsConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GroupAsConf::InternalSwap(GroupAsConf* other) {
  access_url_.Swap(&other->access_url_);
  ice_addr_.Swap(&other->ice_addr_);
  dev_id_.Swap(&other->dev_id_);
  dev_verify_code_.Swap(&other->dev_verify_code_);
  app_id_.Swap(&other->app_id_);
  verification_code_.Swap(&other->verification_code_);
  dev_group_.Swap(&other->dev_group_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupAsConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupAsConf

// string access_url = 1;
void GroupAsConf::clear_access_url() {
  access_url_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupAsConf::access_url() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
  return access_url_.Get();
}
void GroupAsConf::set_access_url(const ::std::string& value) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}
void GroupAsConf::set_access_url(const char* value) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}
void GroupAsConf::set_access_url(const char* value,
    size_t size) {
  
  access_url_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}
::std::string* GroupAsConf::mutable_access_url() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
  return access_url_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::release_access_url() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
  
  return access_url_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::unsafe_arena_release_access_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return access_url_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupAsConf::set_allocated_access_url(::std::string* access_url) {
  if (access_url != NULL) {
    
  } else {
    
  }
  access_url_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_url,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}
void GroupAsConf::unsafe_arena_set_allocated_access_url(
    ::std::string* access_url) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (access_url != NULL) {
    
  } else {
    
  }
  access_url_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      access_url, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.access_url)
}

// string ice_addr = 2;
void GroupAsConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupAsConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
  return ice_addr_.Get();
}
void GroupAsConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}
void GroupAsConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}
void GroupAsConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}
::std::string* GroupAsConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupAsConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}
void GroupAsConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.ice_addr)
}

// string dev_id = 3;
void GroupAsConf::clear_dev_id() {
  dev_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupAsConf::dev_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
  return dev_id_.Get();
}
void GroupAsConf::set_dev_id(const ::std::string& value) {
  
  dev_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}
void GroupAsConf::set_dev_id(const char* value) {
  
  dev_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}
void GroupAsConf::set_dev_id(const char* value,
    size_t size) {
  
  dev_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}
::std::string* GroupAsConf::mutable_dev_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
  return dev_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::release_dev_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
  
  return dev_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::unsafe_arena_release_dev_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dev_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupAsConf::set_allocated_dev_id(::std::string* dev_id) {
  if (dev_id != NULL) {
    
  } else {
    
  }
  dev_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}
void GroupAsConf::unsafe_arena_set_allocated_dev_id(
    ::std::string* dev_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dev_id != NULL) {
    
  } else {
    
  }
  dev_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dev_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_id)
}

// string dev_verify_code = 4;
void GroupAsConf::clear_dev_verify_code() {
  dev_verify_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupAsConf::dev_verify_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
  return dev_verify_code_.Get();
}
void GroupAsConf::set_dev_verify_code(const ::std::string& value) {
  
  dev_verify_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}
void GroupAsConf::set_dev_verify_code(const char* value) {
  
  dev_verify_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}
void GroupAsConf::set_dev_verify_code(const char* value,
    size_t size) {
  
  dev_verify_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}
::std::string* GroupAsConf::mutable_dev_verify_code() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
  return dev_verify_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::release_dev_verify_code() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
  
  return dev_verify_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::unsafe_arena_release_dev_verify_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dev_verify_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupAsConf::set_allocated_dev_verify_code(::std::string* dev_verify_code) {
  if (dev_verify_code != NULL) {
    
  } else {
    
  }
  dev_verify_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_verify_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}
void GroupAsConf::unsafe_arena_set_allocated_dev_verify_code(
    ::std::string* dev_verify_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dev_verify_code != NULL) {
    
  } else {
    
  }
  dev_verify_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dev_verify_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_verify_code)
}

// string app_id = 5;
void GroupAsConf::clear_app_id() {
  app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupAsConf::app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
  return app_id_.Get();
}
void GroupAsConf::set_app_id(const ::std::string& value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}
void GroupAsConf::set_app_id(const char* value) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}
void GroupAsConf::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}
::std::string* GroupAsConf::mutable_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
  return app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::release_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
  
  return app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupAsConf::set_allocated_app_id(::std::string* app_id) {
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}
void GroupAsConf::unsafe_arena_set_allocated_app_id(
    ::std::string* app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (app_id != NULL) {
    
  } else {
    
  }
  app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.app_id)
}

// string verification_code = 6;
void GroupAsConf::clear_verification_code() {
  verification_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupAsConf::verification_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
  return verification_code_.Get();
}
void GroupAsConf::set_verification_code(const ::std::string& value) {
  
  verification_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}
void GroupAsConf::set_verification_code(const char* value) {
  
  verification_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}
void GroupAsConf::set_verification_code(const char* value,
    size_t size) {
  
  verification_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}
::std::string* GroupAsConf::mutable_verification_code() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
  return verification_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::release_verification_code() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
  
  return verification_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::unsafe_arena_release_verification_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return verification_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupAsConf::set_allocated_verification_code(::std::string* verification_code) {
  if (verification_code != NULL) {
    
  } else {
    
  }
  verification_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verification_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}
void GroupAsConf::unsafe_arena_set_allocated_verification_code(
    ::std::string* verification_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (verification_code != NULL) {
    
  } else {
    
  }
  verification_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      verification_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.verification_code)
}

// string dev_group = 7;
void GroupAsConf::clear_dev_group() {
  dev_group_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GroupAsConf::dev_group() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
  return dev_group_.Get();
}
void GroupAsConf::set_dev_group(const ::std::string& value) {
  
  dev_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}
void GroupAsConf::set_dev_group(const char* value) {
  
  dev_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}
void GroupAsConf::set_dev_group(const char* value,
    size_t size) {
  
  dev_group_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}
::std::string* GroupAsConf::mutable_dev_group() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
  return dev_group_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::release_dev_group() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
  
  return dev_group_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GroupAsConf::unsafe_arena_release_dev_group() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return dev_group_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GroupAsConf::set_allocated_dev_group(::std::string* dev_group) {
  if (dev_group != NULL) {
    
  } else {
    
  }
  dev_group_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_group,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}
void GroupAsConf::unsafe_arena_set_allocated_dev_group(
    ::std::string* dev_group) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (dev_group != NULL) {
    
  } else {
    
  }
  dev_group_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      dev_group, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConf.dev_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GroupAsConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GroupAsConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GroupAsConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GroupAsConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GroupAsConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupAsConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupAsConfRsp::GroupAsConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
}
GroupAsConfRsp::GroupAsConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
}
GroupAsConfRsp::GroupAsConfRsp(const GroupAsConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
}

void GroupAsConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

GroupAsConfRsp::~GroupAsConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  SharedDtor();
}

void GroupAsConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GroupAsConfRsp::ArenaDtor(void* object) {
  GroupAsConfRsp* _this = reinterpret_cast< GroupAsConfRsp* >(object);
  (void)_this;
}
void GroupAsConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GroupAsConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAsConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[17].descriptor;
}

const GroupAsConfRsp& GroupAsConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

GroupAsConfRsp* GroupAsConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GroupAsConfRsp>(arena);
}

void GroupAsConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool GroupAsConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  return false;
#undef DO_
}

void GroupAsConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
}

::google::protobuf::uint8* GroupAsConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  return target;
}

size_t GroupAsConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAsConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupAsConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupAsConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
    MergeFrom(*source);
  }
}

void GroupAsConfRsp::MergeFrom(const GroupAsConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void GroupAsConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAsConfRsp::CopyFrom(const GroupAsConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAsConfRsp::IsInitialized() const {
  return true;
}

void GroupAsConfRsp::Swap(GroupAsConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GroupAsConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GroupAsConfRsp::UnsafeArenaSwap(GroupAsConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GroupAsConfRsp::InternalSwap(GroupAsConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupAsConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupAsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GroupAsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GroupAsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GroupAsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GroupAsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GroupAsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GroupAsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GroupAsConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScConf::kIceAddrFieldNumber;
const int ScConf::kKafkaBrokersFieldNumber;
const int ScConf::kZookeeperServersFieldNumber;
const int ScConf::kScTopicFieldNumber;
const int ScConf::kScGroupTopicFieldNumber;
const int ScConf::kConsumerClientIdFieldNumber;
const int ScConf::kLockTimeoutFieldNumber;
const int ScConf::kTopicPartitionsFieldNumber;
const int ScConf::kTopicReplicationFieldNumber;
const int ScConf::kRouterStatusReturnSizeFieldNumber;
const int ScConf::kProtocolVersionFieldNumber;
const int ScConf::kRetryPolicyFieldNumber;
const int ScConf::kRootPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScConf::ScConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ScConf)
}
ScConf::ScConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ScConf)
}
ScConf::ScConf(const ScConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kafka_brokers().size() > 0) {
    kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kafka_brokers(),
      GetArenaNoVirtual());
  }
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zookeeper_servers().size() > 0) {
    zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zookeeper_servers(),
      GetArenaNoVirtual());
  }
  sc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sc_topic().size() > 0) {
    sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sc_topic(),
      GetArenaNoVirtual());
  }
  sc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sc_group_topic().size() > 0) {
    sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sc_group_topic(),
      GetArenaNoVirtual());
  }
  consumer_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.consumer_client_id().size() > 0) {
    consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_client_id(),
      GetArenaNoVirtual());
  }
  lock_timeout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_timeout().size() > 0) {
    lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_timeout(),
      GetArenaNoVirtual());
  }
  topic_partitions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic_partitions().size() > 0) {
    topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_partitions(),
      GetArenaNoVirtual());
  }
  topic_replication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic_replication().size() > 0) {
    topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_replication(),
      GetArenaNoVirtual());
  }
  router_status_return_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.router_status_return_size().size() > 0) {
    router_status_return_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.router_status_return_size(),
      GetArenaNoVirtual());
  }
  protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol_version().size() > 0) {
    protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_version(),
      GetArenaNoVirtual());
  }
  retry_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.retry_policy().size() > 0) {
    retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_policy(),
      GetArenaNoVirtual());
  }
  root_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.root_path().size() > 0) {
    root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_path(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ScConf)
}

void ScConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_timeout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_partitions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_replication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  router_status_return_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retry_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ScConf::~ScConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ScConf)
  SharedDtor();
}

void ScConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  kafka_brokers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  zookeeper_servers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sc_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sc_group_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  consumer_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  lock_timeout_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  topic_partitions_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  topic_replication_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  router_status_return_size_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  protocol_version_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  retry_policy_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  root_path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void ScConf::ArenaDtor(void* object) {
  ScConf* _this = reinterpret_cast< ScConf* >(object);
  (void)_this;
}
void ScConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ScConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[18].descriptor;
}

const ScConf& ScConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScConf* ScConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ScConf>(arena);
}

void ScConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ScConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  consumer_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  lock_timeout_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_partitions_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_replication_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  router_status_return_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  protocol_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  retry_policy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  root_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool ScConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ScConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kafka_brokers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kafka_brokers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kafka_brokers().data(), this->kafka_brokers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zookeeper_servers = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zookeeper_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zookeeper_servers().data(), this->zookeeper_servers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sc_topic = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sc_topic().data(), this->sc_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.sc_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sc_group_topic = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_group_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sc_group_topic().data(), this->sc_group_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string consumer_client_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consumer_client_id().data(), this->consumer_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic_partitions = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_partitions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic_partitions().data(), this->topic_partitions().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic_replication = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_replication()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic_replication().data(), this->topic_replication().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.topic_replication"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string router_status_return_size = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_router_status_return_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->router_status_return_size().data(), this->router_status_return_size().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol_version = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol_version().data(), this->protocol_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.protocol_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_timeout = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_timeout()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_timeout().data(), this->lock_timeout().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string retry_policy = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retry_policy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->retry_policy().data(), this->retry_policy().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.retry_policy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string root_path = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->root_path().data(), this->root_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.ScConf.root_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ScConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ScConf)
  return false;
#undef DO_
}

void ScConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ScConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kafka_brokers(), output);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->zookeeper_servers(), output);
  }

  // string sc_topic = 4;
  if (this->sc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_topic().data(), this->sc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.sc_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sc_topic(), output);
  }

  // string sc_group_topic = 5;
  if (this->sc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_group_topic().data(), this->sc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sc_group_topic(), output);
  }

  // string consumer_client_id = 6;
  if (this->consumer_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_client_id().data(), this->consumer_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->consumer_client_id(), output);
  }

  // string topic_partitions = 7;
  if (this->topic_partitions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_partitions().data(), this->topic_partitions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->topic_partitions(), output);
  }

  // string topic_replication = 8;
  if (this->topic_replication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_replication().data(), this->topic_replication().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.topic_replication");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->topic_replication(), output);
  }

  // string router_status_return_size = 9;
  if (this->router_status_return_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->router_status_return_size().data(), this->router_status_return_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->router_status_return_size(), output);
  }

  // string protocol_version = 10;
  if (this->protocol_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.protocol_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->protocol_version(), output);
  }

  // string lock_timeout = 11;
  if (this->lock_timeout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_timeout().data(), this->lock_timeout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->lock_timeout(), output);
  }

  // string retry_policy = 12;
  if (this->retry_policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_policy().data(), this->retry_policy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.retry_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->retry_policy(), output);
  }

  // string root_path = 13;
  if (this->root_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), this->root_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.root_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->root_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ScConf)
}

::google::protobuf::uint8* ScConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ScConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kafka_brokers(), target);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->zookeeper_servers(), target);
  }

  // string sc_topic = 4;
  if (this->sc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_topic().data(), this->sc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.sc_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sc_topic(), target);
  }

  // string sc_group_topic = 5;
  if (this->sc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_group_topic().data(), this->sc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sc_group_topic(), target);
  }

  // string consumer_client_id = 6;
  if (this->consumer_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_client_id().data(), this->consumer_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->consumer_client_id(), target);
  }

  // string topic_partitions = 7;
  if (this->topic_partitions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_partitions().data(), this->topic_partitions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->topic_partitions(), target);
  }

  // string topic_replication = 8;
  if (this->topic_replication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_replication().data(), this->topic_replication().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.topic_replication");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->topic_replication(), target);
  }

  // string router_status_return_size = 9;
  if (this->router_status_return_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->router_status_return_size().data(), this->router_status_return_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->router_status_return_size(), target);
  }

  // string protocol_version = 10;
  if (this->protocol_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.protocol_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->protocol_version(), target);
  }

  // string lock_timeout = 11;
  if (this->lock_timeout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_timeout().data(), this->lock_timeout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->lock_timeout(), target);
  }

  // string retry_policy = 12;
  if (this->retry_policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_policy().data(), this->retry_policy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.retry_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->retry_policy(), target);
  }

  // string root_path = 13;
  if (this->root_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), this->root_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.ScConf.root_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->root_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ScConf)
  return target;
}

size_t ScConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ScConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kafka_brokers());
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zookeeper_servers());
  }

  // string sc_topic = 4;
  if (this->sc_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sc_topic());
  }

  // string sc_group_topic = 5;
  if (this->sc_group_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sc_group_topic());
  }

  // string consumer_client_id = 6;
  if (this->consumer_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consumer_client_id());
  }

  // string lock_timeout = 11;
  if (this->lock_timeout().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_timeout());
  }

  // string topic_partitions = 7;
  if (this->topic_partitions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_partitions());
  }

  // string topic_replication = 8;
  if (this->topic_replication().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_replication());
  }

  // string router_status_return_size = 9;
  if (this->router_status_return_size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->router_status_return_size());
  }

  // string protocol_version = 10;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_version());
  }

  // string retry_policy = 12;
  if (this->retry_policy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->retry_policy());
  }

  // string root_path = 13;
  if (this->root_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->root_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ScConf)
  GOOGLE_DCHECK_NE(&from, this);
  const ScConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ScConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ScConf)
    MergeFrom(*source);
  }
}

void ScConf::MergeFrom(const ScConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ScConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.kafka_brokers().size() > 0) {
    set_kafka_brokers(from.kafka_brokers());
  }
  if (from.zookeeper_servers().size() > 0) {
    set_zookeeper_servers(from.zookeeper_servers());
  }
  if (from.sc_topic().size() > 0) {
    set_sc_topic(from.sc_topic());
  }
  if (from.sc_group_topic().size() > 0) {
    set_sc_group_topic(from.sc_group_topic());
  }
  if (from.consumer_client_id().size() > 0) {
    set_consumer_client_id(from.consumer_client_id());
  }
  if (from.lock_timeout().size() > 0) {
    set_lock_timeout(from.lock_timeout());
  }
  if (from.topic_partitions().size() > 0) {
    set_topic_partitions(from.topic_partitions());
  }
  if (from.topic_replication().size() > 0) {
    set_topic_replication(from.topic_replication());
  }
  if (from.router_status_return_size().size() > 0) {
    set_router_status_return_size(from.router_status_return_size());
  }
  if (from.protocol_version().size() > 0) {
    set_protocol_version(from.protocol_version());
  }
  if (from.retry_policy().size() > 0) {
    set_retry_policy(from.retry_policy());
  }
  if (from.root_path().size() > 0) {
    set_root_path(from.root_path());
  }
}

void ScConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ScConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScConf::CopyFrom(const ScConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ScConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScConf::IsInitialized() const {
  return true;
}

void ScConf::Swap(ScConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ScConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ScConf::UnsafeArenaSwap(ScConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ScConf::InternalSwap(ScConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  kafka_brokers_.Swap(&other->kafka_brokers_);
  zookeeper_servers_.Swap(&other->zookeeper_servers_);
  sc_topic_.Swap(&other->sc_topic_);
  sc_group_topic_.Swap(&other->sc_group_topic_);
  consumer_client_id_.Swap(&other->consumer_client_id_);
  lock_timeout_.Swap(&other->lock_timeout_);
  topic_partitions_.Swap(&other->topic_partitions_);
  topic_replication_.Swap(&other->topic_replication_);
  router_status_return_size_.Swap(&other->router_status_return_size_);
  protocol_version_.Swap(&other->protocol_version_);
  retry_policy_.Swap(&other->retry_policy_);
  root_path_.Swap(&other->root_path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[18];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScConf

// string ice_addr = 1;
void ScConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
  return ice_addr_.Get();
}
void ScConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}
void ScConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}
void ScConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}
::std::string* ScConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}
void ScConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.ice_addr)
}

// string kafka_brokers = 2;
void ScConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
  return kafka_brokers_.Get();
}
void ScConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}
void ScConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}
void ScConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}
::std::string* ScConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}
void ScConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.kafka_brokers)
}

// string zookeeper_servers = 3;
void ScConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
void ScConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}
void ScConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}
void ScConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}
::std::string* ScConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}
void ScConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.zookeeper_servers)
}

// string sc_topic = 4;
void ScConf::clear_sc_topic() {
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::sc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
  return sc_topic_.Get();
}
void ScConf::set_sc_topic(const ::std::string& value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}
void ScConf::set_sc_topic(const char* value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}
void ScConf::set_sc_topic(const char* value,
    size_t size) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}
::std::string* ScConf::mutable_sc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
  return sc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_sc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
  
  return sc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_sc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_sc_topic(::std::string* sc_topic) {
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}
void ScConf::unsafe_arena_set_allocated_sc_topic(
    ::std::string* sc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.sc_topic)
}

// string sc_group_topic = 5;
void ScConf::clear_sc_group_topic() {
  sc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::sc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
  return sc_group_topic_.Get();
}
void ScConf::set_sc_group_topic(const ::std::string& value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}
void ScConf::set_sc_group_topic(const char* value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}
void ScConf::set_sc_group_topic(const char* value,
    size_t size) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}
::std::string* ScConf::mutable_sc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
  return sc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_sc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
  
  return sc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_sc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_sc_group_topic(::std::string* sc_group_topic) {
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}
void ScConf::unsafe_arena_set_allocated_sc_group_topic(
    ::std::string* sc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.sc_group_topic)
}

// string consumer_client_id = 6;
void ScConf::clear_consumer_client_id() {
  consumer_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::consumer_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
  return consumer_client_id_.Get();
}
void ScConf::set_consumer_client_id(const ::std::string& value) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}
void ScConf::set_consumer_client_id(const char* value) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}
void ScConf::set_consumer_client_id(const char* value,
    size_t size) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}
::std::string* ScConf::mutable_consumer_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
  return consumer_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_consumer_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
  
  return consumer_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_consumer_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return consumer_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_consumer_client_id(::std::string* consumer_client_id) {
  if (consumer_client_id != NULL) {
    
  } else {
    
  }
  consumer_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}
void ScConf::unsafe_arena_set_allocated_consumer_client_id(
    ::std::string* consumer_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (consumer_client_id != NULL) {
    
  } else {
    
  }
  consumer_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      consumer_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.consumer_client_id)
}

// string lock_timeout = 11;
void ScConf::clear_lock_timeout() {
  lock_timeout_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::lock_timeout() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
  return lock_timeout_.Get();
}
void ScConf::set_lock_timeout(const ::std::string& value) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}
void ScConf::set_lock_timeout(const char* value) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}
void ScConf::set_lock_timeout(const char* value,
    size_t size) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}
::std::string* ScConf::mutable_lock_timeout() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
  return lock_timeout_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_lock_timeout() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
  
  return lock_timeout_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_lock_timeout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return lock_timeout_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_lock_timeout(::std::string* lock_timeout) {
  if (lock_timeout != NULL) {
    
  } else {
    
  }
  lock_timeout_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_timeout,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}
void ScConf::unsafe_arena_set_allocated_lock_timeout(
    ::std::string* lock_timeout) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (lock_timeout != NULL) {
    
  } else {
    
  }
  lock_timeout_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      lock_timeout, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.lock_timeout)
}

// string topic_partitions = 7;
void ScConf::clear_topic_partitions() {
  topic_partitions_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::topic_partitions() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
  return topic_partitions_.Get();
}
void ScConf::set_topic_partitions(const ::std::string& value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}
void ScConf::set_topic_partitions(const char* value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}
void ScConf::set_topic_partitions(const char* value,
    size_t size) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}
::std::string* ScConf::mutable_topic_partitions() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
  return topic_partitions_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_topic_partitions() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
  
  return topic_partitions_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_topic_partitions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_partitions_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_topic_partitions(::std::string* topic_partitions) {
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_partitions,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}
void ScConf::unsafe_arena_set_allocated_topic_partitions(
    ::std::string* topic_partitions) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_partitions, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.topic_partitions)
}

// string topic_replication = 8;
void ScConf::clear_topic_replication() {
  topic_replication_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::topic_replication() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
  return topic_replication_.Get();
}
void ScConf::set_topic_replication(const ::std::string& value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}
void ScConf::set_topic_replication(const char* value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}
void ScConf::set_topic_replication(const char* value,
    size_t size) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}
::std::string* ScConf::mutable_topic_replication() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
  return topic_replication_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_topic_replication() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
  
  return topic_replication_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_topic_replication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_replication_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_topic_replication(::std::string* topic_replication) {
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_replication,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}
void ScConf::unsafe_arena_set_allocated_topic_replication(
    ::std::string* topic_replication) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_replication, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.topic_replication)
}

// string router_status_return_size = 9;
void ScConf::clear_router_status_return_size() {
  router_status_return_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::router_status_return_size() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
  return router_status_return_size_.Get();
}
void ScConf::set_router_status_return_size(const ::std::string& value) {
  
  router_status_return_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}
void ScConf::set_router_status_return_size(const char* value) {
  
  router_status_return_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}
void ScConf::set_router_status_return_size(const char* value,
    size_t size) {
  
  router_status_return_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}
::std::string* ScConf::mutable_router_status_return_size() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
  return router_status_return_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_router_status_return_size() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
  
  return router_status_return_size_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_router_status_return_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return router_status_return_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_router_status_return_size(::std::string* router_status_return_size) {
  if (router_status_return_size != NULL) {
    
  } else {
    
  }
  router_status_return_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), router_status_return_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}
void ScConf::unsafe_arena_set_allocated_router_status_return_size(
    ::std::string* router_status_return_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (router_status_return_size != NULL) {
    
  } else {
    
  }
  router_status_return_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      router_status_return_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.router_status_return_size)
}

// string protocol_version = 10;
void ScConf::clear_protocol_version() {
  protocol_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::protocol_version() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
  return protocol_version_.Get();
}
void ScConf::set_protocol_version(const ::std::string& value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}
void ScConf::set_protocol_version(const char* value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}
void ScConf::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}
::std::string* ScConf::mutable_protocol_version() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
  return protocol_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_protocol_version() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
  
  return protocol_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_protocol_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return protocol_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}
void ScConf::unsafe_arena_set_allocated_protocol_version(
    ::std::string* protocol_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      protocol_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.protocol_version)
}

// string retry_policy = 12;
void ScConf::clear_retry_policy() {
  retry_policy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::retry_policy() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
  return retry_policy_.Get();
}
void ScConf::set_retry_policy(const ::std::string& value) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}
void ScConf::set_retry_policy(const char* value) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}
void ScConf::set_retry_policy(const char* value,
    size_t size) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}
::std::string* ScConf::mutable_retry_policy() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
  return retry_policy_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_retry_policy() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
  
  return retry_policy_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_retry_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return retry_policy_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_retry_policy(::std::string* retry_policy) {
  if (retry_policy != NULL) {
    
  } else {
    
  }
  retry_policy_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_policy,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}
void ScConf::unsafe_arena_set_allocated_retry_policy(
    ::std::string* retry_policy) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (retry_policy != NULL) {
    
  } else {
    
  }
  retry_policy_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      retry_policy, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.retry_policy)
}

// string root_path = 13;
void ScConf::clear_root_path() {
  root_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& ScConf::root_path() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
  return root_path_.Get();
}
void ScConf::set_root_path(const ::std::string& value) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}
void ScConf::set_root_path(const char* value) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}
void ScConf::set_root_path(const char* value,
    size_t size) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}
::std::string* ScConf::mutable_root_path() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
  return root_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::release_root_path() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
  
  return root_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* ScConf::unsafe_arena_release_root_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return root_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void ScConf::set_allocated_root_path(::std::string* root_path) {
  if (root_path != NULL) {
    
  } else {
    
  }
  root_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}
void ScConf::unsafe_arena_set_allocated_root_path(
    ::std::string* root_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (root_path != NULL) {
    
  } else {
    
  }
  root_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      root_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConf.root_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void ScConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ScConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ScConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void ScConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void ScConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScConfRsp::ScConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.ScConfRsp)
}
ScConfRsp::ScConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.ScConfRsp)
}
ScConfRsp::ScConfRsp(const ScConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.ScConfRsp)
}

void ScConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

ScConfRsp::~ScConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  SharedDtor();
}

void ScConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void ScConfRsp::ArenaDtor(void* object) {
  ScConfRsp* _this = reinterpret_cast< ScConfRsp* >(object);
  (void)_this;
}
void ScConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ScConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[19].descriptor;
}

const ScConfRsp& ScConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScConfRsp* ScConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ScConfRsp>(arena);
}

void ScConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool ScConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  return false;
#undef DO_
}

void ScConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.ScConfRsp)
}

::google::protobuf::uint8* ScConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  return target;
}

size_t ScConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ScConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.ScConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.ScConfRsp)
    MergeFrom(*source);
  }
}

void ScConfRsp::MergeFrom(const ScConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void ScConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScConfRsp::CopyFrom(const ScConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.ScConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScConfRsp::IsInitialized() const {
  return true;
}

void ScConfRsp::Swap(ScConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ScConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ScConfRsp::UnsafeArenaSwap(ScConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ScConfRsp::InternalSwap(ScConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[19];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool ScConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void ScConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& ScConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ScConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* ScConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void ScConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.ScConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessConf::kIceAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessConf::AccessConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.AccessConf)
}
AccessConf::AccessConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.AccessConf)
}
AccessConf::AccessConf(const AccessConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.AccessConf)
}

void AccessConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AccessConf::~AccessConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.AccessConf)
  SharedDtor();
}

void AccessConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void AccessConf::ArenaDtor(void* object) {
  AccessConf* _this = reinterpret_cast< AccessConf* >(object);
  (void)_this;
}
void AccessConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AccessConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[20].descriptor;
}

const AccessConf& AccessConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccessConf* AccessConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AccessConf>(arena);
}

void AccessConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.AccessConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool AccessConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.AccessConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.AccessConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.AccessConf)
  return false;
#undef DO_
}

void AccessConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.AccessConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.AccessConf)
}

::google::protobuf::uint8* AccessConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.AccessConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.AccessConf)
  return target;
}

size_t AccessConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.AccessConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.AccessConf)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.AccessConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.AccessConf)
    MergeFrom(*source);
  }
}

void AccessConf::MergeFrom(const AccessConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.AccessConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
}

void AccessConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.AccessConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessConf::CopyFrom(const AccessConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.AccessConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessConf::IsInitialized() const {
  return true;
}

void AccessConf::Swap(AccessConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AccessConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AccessConf::UnsafeArenaSwap(AccessConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AccessConf::InternalSwap(AccessConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[20];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessConf

// string ice_addr = 1;
void AccessConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& AccessConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
  return ice_addr_.Get();
}
void AccessConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}
void AccessConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}
void AccessConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}
::std::string* AccessConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AccessConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* AccessConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void AccessConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}
void AccessConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.AccessConf.ice_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void AccessConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* AccessConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* AccessConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void AccessConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void AccessConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccessConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccessConfRsp::AccessConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
}
AccessConfRsp::AccessConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
}
AccessConfRsp::AccessConfRsp(const AccessConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
}

void AccessConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

AccessConfRsp::~AccessConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  SharedDtor();
}

void AccessConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void AccessConfRsp::ArenaDtor(void* object) {
  AccessConfRsp* _this = reinterpret_cast< AccessConfRsp* >(object);
  (void)_this;
}
void AccessConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AccessConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[21].descriptor;
}

const AccessConfRsp& AccessConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccessConfRsp* AccessConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AccessConfRsp>(arena);
}

void AccessConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool AccessConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  return false;
#undef DO_
}

void AccessConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
}

::google::protobuf::uint8* AccessConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  return target;
}

size_t AccessConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
    MergeFrom(*source);
  }
}

void AccessConfRsp::MergeFrom(const AccessConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void AccessConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessConfRsp::CopyFrom(const AccessConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.AccessConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessConfRsp::IsInitialized() const {
  return true;
}

void AccessConfRsp::Swap(AccessConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AccessConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AccessConfRsp::UnsafeArenaSwap(AccessConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AccessConfRsp::InternalSwap(AccessConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[21];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool AccessConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void AccessConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& AccessConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* AccessConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* AccessConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void AccessConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.AccessConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpConf::kIceAddrFieldNumber;
const int SpConf::kKafkaBrokersFieldNumber;
const int SpConf::kZookeeperServersFieldNumber;
const int SpConf::kSpTopicFieldNumber;
const int SpConf::kScGroupTopicFieldNumber;
const int SpConf::kGcGroupTopicFieldNumber;
const int SpConf::kSpServerIdFieldNumber;
const int SpConf::kTopicPartitionsFieldNumber;
const int SpConf::kTopicReplicationFieldNumber;
const int SpConf::kProtocolVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpConf::SpConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.SpConf)
}
SpConf::SpConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.SpConf)
}
SpConf::SpConf(const SpConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kafka_brokers().size() > 0) {
    kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kafka_brokers(),
      GetArenaNoVirtual());
  }
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zookeeper_servers().size() > 0) {
    zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zookeeper_servers(),
      GetArenaNoVirtual());
  }
  sp_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sp_topic().size() > 0) {
    sp_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sp_topic(),
      GetArenaNoVirtual());
  }
  sc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sc_group_topic().size() > 0) {
    sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sc_group_topic(),
      GetArenaNoVirtual());
  }
  gc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gc_group_topic().size() > 0) {
    gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_group_topic(),
      GetArenaNoVirtual());
  }
  sp_server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sp_server_id().size() > 0) {
    sp_server_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sp_server_id(),
      GetArenaNoVirtual());
  }
  topic_partitions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic_partitions().size() > 0) {
    topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_partitions(),
      GetArenaNoVirtual());
  }
  topic_replication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic_replication().size() > 0) {
    topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_replication(),
      GetArenaNoVirtual());
  }
  protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol_version().size() > 0) {
    protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_version(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.SpConf)
}

void SpConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sp_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sp_server_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_partitions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_replication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SpConf::~SpConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.SpConf)
  SharedDtor();
}

void SpConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  kafka_brokers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  zookeeper_servers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sp_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sc_group_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  gc_group_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sp_server_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  topic_partitions_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  topic_replication_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  protocol_version_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void SpConf::ArenaDtor(void* object) {
  SpConf* _this = reinterpret_cast< SpConf* >(object);
  (void)_this;
}
void SpConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[22].descriptor;
}

const SpConf& SpConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpConf* SpConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpConf>(arena);
}

void SpConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.SpConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sp_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  gc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sp_server_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_partitions_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_replication_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  protocol_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool SpConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.SpConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kafka_brokers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kafka_brokers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kafka_brokers().data(), this->kafka_brokers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zookeeper_servers = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zookeeper_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zookeeper_servers().data(), this->zookeeper_servers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sp_topic = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sp_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sp_topic().data(), this->sp_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.sp_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sc_group_topic = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_group_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sc_group_topic().data(), this->sc_group_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gc_group_topic = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gc_group_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gc_group_topic().data(), this->gc_group_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sp_server_id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sp_server_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sp_server_id().data(), this->sp_server_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic_partitions = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_partitions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic_partitions().data(), this->topic_partitions().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic_replication = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_replication()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic_replication().data(), this->topic_replication().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.topic_replication"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol_version = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol_version().data(), this->protocol_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.SpConf.protocol_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.SpConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.SpConf)
  return false;
#undef DO_
}

void SpConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.SpConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kafka_brokers(), output);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->zookeeper_servers(), output);
  }

  // string sp_topic = 4;
  if (this->sp_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sp_topic().data(), this->sp_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.sp_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sp_topic(), output);
  }

  // string sc_group_topic = 5;
  if (this->sc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_group_topic().data(), this->sc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sc_group_topic(), output);
  }

  // string gc_group_topic = 6;
  if (this->gc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_group_topic().data(), this->gc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->gc_group_topic(), output);
  }

  // string sp_server_id = 7;
  if (this->sp_server_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sp_server_id().data(), this->sp_server_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sp_server_id(), output);
  }

  // string topic_partitions = 8;
  if (this->topic_partitions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_partitions().data(), this->topic_partitions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->topic_partitions(), output);
  }

  // string topic_replication = 9;
  if (this->topic_replication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_replication().data(), this->topic_replication().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.topic_replication");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->topic_replication(), output);
  }

  // string protocol_version = 10;
  if (this->protocol_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.protocol_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->protocol_version(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.SpConf)
}

::google::protobuf::uint8* SpConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.SpConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kafka_brokers(), target);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->zookeeper_servers(), target);
  }

  // string sp_topic = 4;
  if (this->sp_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sp_topic().data(), this->sp_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.sp_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sp_topic(), target);
  }

  // string sc_group_topic = 5;
  if (this->sc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_group_topic().data(), this->sc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sc_group_topic(), target);
  }

  // string gc_group_topic = 6;
  if (this->gc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_group_topic().data(), this->gc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gc_group_topic(), target);
  }

  // string sp_server_id = 7;
  if (this->sp_server_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sp_server_id().data(), this->sp_server_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sp_server_id(), target);
  }

  // string topic_partitions = 8;
  if (this->topic_partitions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_partitions().data(), this->topic_partitions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->topic_partitions(), target);
  }

  // string topic_replication = 9;
  if (this->topic_replication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_replication().data(), this->topic_replication().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.topic_replication");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->topic_replication(), target);
  }

  // string protocol_version = 10;
  if (this->protocol_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.SpConf.protocol_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->protocol_version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.SpConf)
  return target;
}

size_t SpConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.SpConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kafka_brokers());
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zookeeper_servers());
  }

  // string sp_topic = 4;
  if (this->sp_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sp_topic());
  }

  // string sc_group_topic = 5;
  if (this->sc_group_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sc_group_topic());
  }

  // string gc_group_topic = 6;
  if (this->gc_group_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gc_group_topic());
  }

  // string sp_server_id = 7;
  if (this->sp_server_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sp_server_id());
  }

  // string topic_partitions = 8;
  if (this->topic_partitions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_partitions());
  }

  // string topic_replication = 9;
  if (this->topic_replication().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_replication());
  }

  // string protocol_version = 10;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.SpConf)
  GOOGLE_DCHECK_NE(&from, this);
  const SpConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.SpConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.SpConf)
    MergeFrom(*source);
  }
}

void SpConf::MergeFrom(const SpConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.SpConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.kafka_brokers().size() > 0) {
    set_kafka_brokers(from.kafka_brokers());
  }
  if (from.zookeeper_servers().size() > 0) {
    set_zookeeper_servers(from.zookeeper_servers());
  }
  if (from.sp_topic().size() > 0) {
    set_sp_topic(from.sp_topic());
  }
  if (from.sc_group_topic().size() > 0) {
    set_sc_group_topic(from.sc_group_topic());
  }
  if (from.gc_group_topic().size() > 0) {
    set_gc_group_topic(from.gc_group_topic());
  }
  if (from.sp_server_id().size() > 0) {
    set_sp_server_id(from.sp_server_id());
  }
  if (from.topic_partitions().size() > 0) {
    set_topic_partitions(from.topic_partitions());
  }
  if (from.topic_replication().size() > 0) {
    set_topic_replication(from.topic_replication());
  }
  if (from.protocol_version().size() > 0) {
    set_protocol_version(from.protocol_version());
  }
}

void SpConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.SpConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpConf::CopyFrom(const SpConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.SpConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpConf::IsInitialized() const {
  return true;
}

void SpConf::Swap(SpConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpConf::UnsafeArenaSwap(SpConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpConf::InternalSwap(SpConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  kafka_brokers_.Swap(&other->kafka_brokers_);
  zookeeper_servers_.Swap(&other->zookeeper_servers_);
  sp_topic_.Swap(&other->sp_topic_);
  sc_group_topic_.Swap(&other->sc_group_topic_);
  gc_group_topic_.Swap(&other->gc_group_topic_);
  sp_server_id_.Swap(&other->sp_server_id_);
  topic_partitions_.Swap(&other->topic_partitions_);
  topic_replication_.Swap(&other->topic_replication_);
  protocol_version_.Swap(&other->protocol_version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[22];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpConf

// string ice_addr = 1;
void SpConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
  return ice_addr_.Get();
}
void SpConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}
void SpConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}
void SpConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}
::std::string* SpConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}
void SpConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.ice_addr)
}

// string kafka_brokers = 2;
void SpConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
  return kafka_brokers_.Get();
}
void SpConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}
void SpConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}
void SpConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}
::std::string* SpConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}
void SpConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.kafka_brokers)
}

// string zookeeper_servers = 3;
void SpConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
void SpConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}
void SpConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}
void SpConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}
::std::string* SpConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}
void SpConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.zookeeper_servers)
}

// string sp_topic = 4;
void SpConf::clear_sp_topic() {
  sp_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::sp_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
  return sp_topic_.Get();
}
void SpConf::set_sp_topic(const ::std::string& value) {
  
  sp_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}
void SpConf::set_sp_topic(const char* value) {
  
  sp_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}
void SpConf::set_sp_topic(const char* value,
    size_t size) {
  
  sp_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}
::std::string* SpConf::mutable_sp_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
  return sp_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_sp_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
  
  return sp_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_sp_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sp_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_sp_topic(::std::string* sp_topic) {
  if (sp_topic != NULL) {
    
  } else {
    
  }
  sp_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sp_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}
void SpConf::unsafe_arena_set_allocated_sp_topic(
    ::std::string* sp_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sp_topic != NULL) {
    
  } else {
    
  }
  sp_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sp_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sp_topic)
}

// string sc_group_topic = 5;
void SpConf::clear_sc_group_topic() {
  sc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::sc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
  return sc_group_topic_.Get();
}
void SpConf::set_sc_group_topic(const ::std::string& value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}
void SpConf::set_sc_group_topic(const char* value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}
void SpConf::set_sc_group_topic(const char* value,
    size_t size) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}
::std::string* SpConf::mutable_sc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
  return sc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_sc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
  
  return sc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_sc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_sc_group_topic(::std::string* sc_group_topic) {
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}
void SpConf::unsafe_arena_set_allocated_sc_group_topic(
    ::std::string* sc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sc_group_topic)
}

// string gc_group_topic = 6;
void SpConf::clear_gc_group_topic() {
  gc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::gc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
  return gc_group_topic_.Get();
}
void SpConf::set_gc_group_topic(const ::std::string& value) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}
void SpConf::set_gc_group_topic(const char* value) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}
void SpConf::set_gc_group_topic(const char* value,
    size_t size) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}
::std::string* SpConf::mutable_gc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
  return gc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_gc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
  
  return gc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_gc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_gc_group_topic(::std::string* gc_group_topic) {
  if (gc_group_topic != NULL) {
    
  } else {
    
  }
  gc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}
void SpConf::unsafe_arena_set_allocated_gc_group_topic(
    ::std::string* gc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gc_group_topic != NULL) {
    
  } else {
    
  }
  gc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.gc_group_topic)
}

// string sp_server_id = 7;
void SpConf::clear_sp_server_id() {
  sp_server_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::sp_server_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
  return sp_server_id_.Get();
}
void SpConf::set_sp_server_id(const ::std::string& value) {
  
  sp_server_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}
void SpConf::set_sp_server_id(const char* value) {
  
  sp_server_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}
void SpConf::set_sp_server_id(const char* value,
    size_t size) {
  
  sp_server_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}
::std::string* SpConf::mutable_sp_server_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
  return sp_server_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_sp_server_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
  
  return sp_server_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_sp_server_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sp_server_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_sp_server_id(::std::string* sp_server_id) {
  if (sp_server_id != NULL) {
    
  } else {
    
  }
  sp_server_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sp_server_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}
void SpConf::unsafe_arena_set_allocated_sp_server_id(
    ::std::string* sp_server_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sp_server_id != NULL) {
    
  } else {
    
  }
  sp_server_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sp_server_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.sp_server_id)
}

// string topic_partitions = 8;
void SpConf::clear_topic_partitions() {
  topic_partitions_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::topic_partitions() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
  return topic_partitions_.Get();
}
void SpConf::set_topic_partitions(const ::std::string& value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}
void SpConf::set_topic_partitions(const char* value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}
void SpConf::set_topic_partitions(const char* value,
    size_t size) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}
::std::string* SpConf::mutable_topic_partitions() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
  return topic_partitions_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_topic_partitions() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
  
  return topic_partitions_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_topic_partitions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_partitions_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_topic_partitions(::std::string* topic_partitions) {
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_partitions,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}
void SpConf::unsafe_arena_set_allocated_topic_partitions(
    ::std::string* topic_partitions) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_partitions, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.topic_partitions)
}

// string topic_replication = 9;
void SpConf::clear_topic_replication() {
  topic_replication_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::topic_replication() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
  return topic_replication_.Get();
}
void SpConf::set_topic_replication(const ::std::string& value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}
void SpConf::set_topic_replication(const char* value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}
void SpConf::set_topic_replication(const char* value,
    size_t size) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}
::std::string* SpConf::mutable_topic_replication() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
  return topic_replication_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_topic_replication() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
  
  return topic_replication_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_topic_replication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_replication_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_topic_replication(::std::string* topic_replication) {
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_replication,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}
void SpConf::unsafe_arena_set_allocated_topic_replication(
    ::std::string* topic_replication) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_replication, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.topic_replication)
}

// string protocol_version = 10;
void SpConf::clear_protocol_version() {
  protocol_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& SpConf::protocol_version() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
  return protocol_version_.Get();
}
void SpConf::set_protocol_version(const ::std::string& value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}
void SpConf::set_protocol_version(const char* value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}
void SpConf::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}
::std::string* SpConf::mutable_protocol_version() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
  return protocol_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::release_protocol_version() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
  
  return protocol_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* SpConf::unsafe_arena_release_protocol_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return protocol_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void SpConf::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}
void SpConf::unsafe_arena_set_allocated_protocol_version(
    ::std::string* protocol_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      protocol_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConf.protocol_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void SpConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SpConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SpConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void SpConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void SpConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpConfRsp::SpConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.SpConfRsp)
}
SpConfRsp::SpConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.SpConfRsp)
}
SpConfRsp::SpConfRsp(const SpConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.SpConfRsp)
}

void SpConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

SpConfRsp::~SpConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  SharedDtor();
}

void SpConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void SpConfRsp::ArenaDtor(void* object) {
  SpConfRsp* _this = reinterpret_cast< SpConfRsp* >(object);
  (void)_this;
}
void SpConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SpConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[23].descriptor;
}

const SpConfRsp& SpConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpConfRsp* SpConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SpConfRsp>(arena);
}

void SpConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool SpConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  return false;
#undef DO_
}

void SpConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.SpConfRsp)
}

::google::protobuf::uint8* SpConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  return target;
}

size_t SpConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SpConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.SpConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.SpConfRsp)
    MergeFrom(*source);
  }
}

void SpConfRsp::MergeFrom(const SpConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void SpConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpConfRsp::CopyFrom(const SpConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.SpConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpConfRsp::IsInitialized() const {
  return true;
}

void SpConfRsp::Swap(SpConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SpConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SpConfRsp::UnsafeArenaSwap(SpConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SpConfRsp::InternalSwap(SpConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[23];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool SpConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void SpConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& SpConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SpConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* SpConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void SpConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.SpConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IceConf::kRedisAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IceConf::IceConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.IceConf)
}
IceConf::IceConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.IceConf)
}
IceConf::IceConf(const IceConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  redis_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.redis_addr().size() > 0) {
    redis_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redis_addr(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.IceConf)
}

void IceConf::SharedCtor() {
  redis_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IceConf::~IceConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.IceConf)
  SharedDtor();
}

void IceConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  redis_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void IceConf::ArenaDtor(void* object) {
  IceConf* _this = reinterpret_cast< IceConf* >(object);
  (void)_this;
}
void IceConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void IceConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IceConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[24].descriptor;
}

const IceConf& IceConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

IceConf* IceConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<IceConf>(arena);
}

void IceConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.IceConf)
  redis_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool IceConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.IceConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string redis_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redis_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->redis_addr().data(), this->redis_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.IceConf.redis_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.IceConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.IceConf)
  return false;
#undef DO_
}

void IceConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.IceConf)
  // string redis_addr = 1;
  if (this->redis_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redis_addr().data(), this->redis_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.IceConf.redis_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->redis_addr(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.IceConf)
}

::google::protobuf::uint8* IceConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.IceConf)
  // string redis_addr = 1;
  if (this->redis_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redis_addr().data(), this->redis_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.IceConf.redis_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->redis_addr(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.IceConf)
  return target;
}

size_t IceConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.IceConf)
  size_t total_size = 0;

  // string redis_addr = 1;
  if (this->redis_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->redis_addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IceConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.IceConf)
  GOOGLE_DCHECK_NE(&from, this);
  const IceConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IceConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.IceConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.IceConf)
    MergeFrom(*source);
  }
}

void IceConf::MergeFrom(const IceConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.IceConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.redis_addr().size() > 0) {
    set_redis_addr(from.redis_addr());
  }
}

void IceConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.IceConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IceConf::CopyFrom(const IceConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.IceConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceConf::IsInitialized() const {
  return true;
}

void IceConf::Swap(IceConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    IceConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void IceConf::UnsafeArenaSwap(IceConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void IceConf::InternalSwap(IceConf* other) {
  redis_addr_.Swap(&other->redis_addr_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IceConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[24];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IceConf

// string redis_addr = 1;
void IceConf::clear_redis_addr() {
  redis_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& IceConf::redis_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
  return redis_addr_.Get();
}
void IceConf::set_redis_addr(const ::std::string& value) {
  
  redis_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}
void IceConf::set_redis_addr(const char* value) {
  
  redis_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}
void IceConf::set_redis_addr(const char* value,
    size_t size) {
  
  redis_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}
::std::string* IceConf::mutable_redis_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
  return redis_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* IceConf::release_redis_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
  
  return redis_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* IceConf::unsafe_arena_release_redis_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return redis_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void IceConf::set_allocated_redis_addr(::std::string* redis_addr) {
  if (redis_addr != NULL) {
    
  } else {
    
  }
  redis_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redis_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}
void IceConf::unsafe_arena_set_allocated_redis_addr(
    ::std::string* redis_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (redis_addr != NULL) {
    
  } else {
    
  }
  redis_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      redis_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.IceConf.redis_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void IceConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* IceConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* IceConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void IceConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void IceConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IceConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IceConfRsp::IceConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.IceConfRsp)
}
IceConfRsp::IceConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.IceConfRsp)
}
IceConfRsp::IceConfRsp(const IceConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.IceConfRsp)
}

void IceConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

IceConfRsp::~IceConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  SharedDtor();
}

void IceConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void IceConfRsp::ArenaDtor(void* object) {
  IceConfRsp* _this = reinterpret_cast< IceConfRsp* >(object);
  (void)_this;
}
void IceConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void IceConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IceConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[25].descriptor;
}

const IceConfRsp& IceConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

IceConfRsp* IceConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<IceConfRsp>(arena);
}

void IceConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool IceConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  return false;
#undef DO_
}

void IceConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.IceConfRsp)
}

::google::protobuf::uint8* IceConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  return target;
}

size_t IceConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IceConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IceConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IceConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.IceConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.IceConfRsp)
    MergeFrom(*source);
  }
}

void IceConfRsp::MergeFrom(const IceConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void IceConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IceConfRsp::CopyFrom(const IceConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.IceConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceConfRsp::IsInitialized() const {
  return true;
}

void IceConfRsp::Swap(IceConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    IceConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void IceConfRsp::UnsafeArenaSwap(IceConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void IceConfRsp::InternalSwap(IceConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IceConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[25];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IceConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool IceConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void IceConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& IceConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* IceConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* IceConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void IceConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.IceConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpList::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpList::IpList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.IpList)
}
IpList::IpList(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ip_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.IpList)
}
IpList::IpList(const IpList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ip_(from.ip_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.IpList)
}

void IpList::SharedCtor() {
  _cached_size_ = 0;
}

IpList::~IpList() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.IpList)
  SharedDtor();
}

void IpList::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void IpList::ArenaDtor(void* object) {
  IpList* _this = reinterpret_cast< IpList* >(object);
  (void)_this;
}
void IpList::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void IpList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpList::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[26].descriptor;
}

const IpList& IpList::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

IpList* IpList::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<IpList>(arena);
}

void IpList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.IpList)
  ip_.Clear();
}

bool IpList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.IpList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string ip = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip(this->ip_size() - 1).data(),
            this->ip(this->ip_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.IpList.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.IpList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.IpList)
  return false;
#undef DO_
}

void IpList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.IpList)
  // repeated string ip = 1;
  for (int i = 0; i < this->ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip(i).data(), this->ip(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.IpList.ip");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.IpList)
}

::google::protobuf::uint8* IpList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.IpList)
  // repeated string ip = 1;
  for (int i = 0; i < this->ip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip(i).data(), this->ip(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.IpList.ip");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->ip(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.IpList)
  return target;
}

size_t IpList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.IpList)
  size_t total_size = 0;

  // repeated string ip = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ip_size());
  for (int i = 0; i < this->ip_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.IpList)
  GOOGLE_DCHECK_NE(&from, this);
  const IpList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.IpList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.IpList)
    MergeFrom(*source);
  }
}

void IpList::MergeFrom(const IpList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.IpList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.MergeFrom(from.ip_);
}

void IpList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.IpList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpList::CopyFrom(const IpList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.IpList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpList::IsInitialized() const {
  return true;
}

void IpList::Swap(IpList* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    IpList* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void IpList::UnsafeArenaSwap(IpList* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void IpList::InternalSwap(IpList* other) {
  ip_.UnsafeArenaSwap(&other->ip_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IpList::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[26];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IpList

// repeated string ip = 1;
int IpList::ip_size() const {
  return ip_.size();
}
void IpList::clear_ip() {
  ip_.Clear();
}
const ::std::string& IpList::ip(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return ip_.Get(index);
}
::std::string* IpList::mutable_ip(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return ip_.Mutable(index);
}
void IpList::set_ip(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.IpList.ip)
  ip_.Mutable(index)->assign(value);
}
void IpList::set_ip(int index, const char* value) {
  ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
void IpList::set_ip(int index, const char* value, size_t size) {
  ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
::std::string* IpList::add_ip() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return ip_.Add();
}
void IpList::add_ip(const ::std::string& value) {
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
void IpList::add_ip(const char* value) {
  ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
void IpList::add_ip(const char* value, size_t size) {
  ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.smd.IpList.ip)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
IpList::ip() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return ip_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
IpList::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.smd.IpList.ip)
  return &ip_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GsConf::_slow_mutable_nat_ip_list() {
  nat_ip_list_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::smd::IpList >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::smd::IpList* GsConf::_slow_release_nat_ip_list() {
  if (nat_ip_list_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::smd::IpList* temp = new ::com::fsmeeting::fsp::proto::smd::IpList(*nat_ip_list_);
    nat_ip_list_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::smd::IpList* GsConf::unsafe_arena_release_nat_ip_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
  
  ::com::fsmeeting::fsp::proto::smd::IpList* temp = nat_ip_list_;
  nat_ip_list_ = NULL;
  return temp;
}
void GsConf::_slow_set_allocated_nat_ip_list(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::smd::IpList** nat_ip_list) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*nat_ip_list) == NULL) {
      message_arena->Own(*nat_ip_list);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*nat_ip_list)) {
      ::com::fsmeeting::fsp::proto::smd::IpList* new_nat_ip_list = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::smd::IpList >(
            message_arena);
      new_nat_ip_list->CopyFrom(**nat_ip_list);
      *nat_ip_list = new_nat_ip_list;
    }
}
void GsConf::unsafe_arena_set_allocated_nat_ip_list(
    ::com::fsmeeting::fsp::proto::smd::IpList* nat_ip_list) {
  if (GetArenaNoVirtual() == NULL) {
    delete nat_ip_list_;
  }
  nat_ip_list_ = nat_ip_list;
  if (nat_ip_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GsConf::kIceAddrFieldNumber;
const int GsConf::kKafkaBrokersFieldNumber;
const int GsConf::kScTopicFieldNumber;
const int GsConf::kGcTopicFieldNumber;
const int GsConf::kInstanceIdFieldNumber;
const int GsConf::kGroupIdFieldNumber;
const int GsConf::kNatIpListFieldNumber;
const int GsConf::kLogSaveDaysFieldNumber;
const int GsConf::kProcessNameFieldNumber;
const int GsConf::kGuidFieldNumber;
const int GsConf::kServiceNameFieldNumber;
const int GsConf::kPriorityFieldNumber;
const int GsConf::kSessionAppIdFieldNumber;
const int GsConf::kDebugModeFieldNumber;
const int GsConf::kSysLogIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GsConf::GsConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.GsConf)
}
GsConf::GsConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.GsConf)
}
GsConf::GsConf(const GsConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kafka_brokers().size() > 0) {
    kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kafka_brokers(),
      GetArenaNoVirtual());
  }
  sc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sc_topic().size() > 0) {
    sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sc_topic(),
      GetArenaNoVirtual());
  }
  gc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gc_topic().size() > 0) {
    gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_topic(),
      GetArenaNoVirtual());
  }
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.instance_id().size() > 0) {
    instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.instance_id(),
      GetArenaNoVirtual());
  }
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_id().size() > 0) {
    group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id(),
      GetArenaNoVirtual());
  }
  log_save_days_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.log_save_days().size() > 0) {
    log_save_days_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_save_days(),
      GetArenaNoVirtual());
  }
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.process_name().size() > 0) {
    process_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.process_name(),
      GetArenaNoVirtual());
  }
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.guid().size() > 0) {
    guid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid(),
      GetArenaNoVirtual());
  }
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_name().size() > 0) {
    service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name(),
      GetArenaNoVirtual());
  }
  priority_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.priority().size() > 0) {
    priority_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.priority(),
      GetArenaNoVirtual());
  }
  session_app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_app_id().size() > 0) {
    session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_app_id(),
      GetArenaNoVirtual());
  }
  debug_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.debug_mode().size() > 0) {
    debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_mode(),
      GetArenaNoVirtual());
  }
  sys_log_interval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sys_log_interval().size() > 0) {
    sys_log_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sys_log_interval(),
      GetArenaNoVirtual());
  }
  if (from.has_nat_ip_list()) {
    nat_ip_list_ = new ::com::fsmeeting::fsp::proto::smd::IpList(*from.nat_ip_list_);
  } else {
    nat_ip_list_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.GsConf)
}

void GsConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_save_days_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  process_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_app_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sys_log_interval_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nat_ip_list_ = NULL;
  _cached_size_ = 0;
}

GsConf::~GsConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.GsConf)
  SharedDtor();
}

void GsConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  kafka_brokers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sc_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  gc_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  instance_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  group_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  log_save_days_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  process_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  guid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  service_name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  priority_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  session_app_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  debug_mode_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sys_log_interval_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete nat_ip_list_;
  }
}

void GsConf::ArenaDtor(void* object) {
  GsConf* _this = reinterpret_cast< GsConf* >(object);
  (void)_this;
}
void GsConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GsConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GsConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[27].descriptor;
}

const GsConf& GsConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

GsConf* GsConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GsConf>(arena);
}

void GsConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.GsConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  gc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  log_save_days_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  process_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  guid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  priority_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  session_app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  debug_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sys_log_interval_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && nat_ip_list_ != NULL) {
    delete nat_ip_list_;
  }
  nat_ip_list_ = NULL;
}

bool GsConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.GsConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kafka_brokers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kafka_brokers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kafka_brokers().data(), this->kafka_brokers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sc_topic = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sc_topic().data(), this->sc_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.sc_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gc_topic = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gc_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gc_topic().data(), this->gc_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.gc_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string instance_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instance_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->instance_id().data(), this->instance_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.instance_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_id().data(), this->group_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.fsmeeting.fsp.proto.smd.IpList nat_ip_list = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nat_ip_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string log_save_days = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_save_days()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->log_save_days().data(), this->log_save_days().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.log_save_days"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string process_name = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.process_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string guid = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.guid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_name = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.service_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string priority = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_priority()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->priority().data(), this->priority().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.priority"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string session_app_id = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_app_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session_app_id().data(), this->session_app_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.session_app_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string debug_mode = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->debug_mode().data(), this->debug_mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.debug_mode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sys_log_interval = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_log_interval()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sys_log_interval().data(), this->sys_log_interval().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.GsConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.GsConf)
  return false;
#undef DO_
}

void GsConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.GsConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kafka_brokers(), output);
  }

  // string sc_topic = 3;
  if (this->sc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_topic().data(), this->sc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.sc_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sc_topic(), output);
  }

  // string gc_topic = 4;
  if (this->gc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_topic().data(), this->gc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.gc_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gc_topic(), output);
  }

  // string instance_id = 5;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.instance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->instance_id(), output);
  }

  // string group_id = 6;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.group_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->group_id(), output);
  }

  // .com.fsmeeting.fsp.proto.smd.IpList nat_ip_list = 7;
  if (this->has_nat_ip_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->nat_ip_list_, output);
  }

  // string log_save_days = 8;
  if (this->log_save_days().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_save_days().data(), this->log_save_days().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.log_save_days");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->log_save_days(), output);
  }

  // string process_name = 9;
  if (this->process_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.process_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->process_name(), output);
  }

  // string guid = 10;
  if (this->guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guid(), output);
  }

  // string service_name = 11;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->service_name(), output);
  }

  // string priority = 12;
  if (this->priority().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->priority().data(), this->priority().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.priority");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->priority(), output);
  }

  // string session_app_id = 13;
  if (this->session_app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_app_id().data(), this->session_app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.session_app_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->session_app_id(), output);
  }

  // string debug_mode = 14;
  if (this->debug_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug_mode().data(), this->debug_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.debug_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->debug_mode(), output);
  }

  // string sys_log_interval = 15;
  if (this->sys_log_interval().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sys_log_interval().data(), this->sys_log_interval().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->sys_log_interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.GsConf)
}

::google::protobuf::uint8* GsConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.GsConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kafka_brokers(), target);
  }

  // string sc_topic = 3;
  if (this->sc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_topic().data(), this->sc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.sc_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sc_topic(), target);
  }

  // string gc_topic = 4;
  if (this->gc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_topic().data(), this->gc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.gc_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gc_topic(), target);
  }

  // string instance_id = 5;
  if (this->instance_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->instance_id().data(), this->instance_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.instance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->instance_id(), target);
  }

  // string group_id = 6;
  if (this->group_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_id().data(), this->group_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.group_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->group_id(), target);
  }

  // .com.fsmeeting.fsp.proto.smd.IpList nat_ip_list = 7;
  if (this->has_nat_ip_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->nat_ip_list_, false, target);
  }

  // string log_save_days = 8;
  if (this->log_save_days().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->log_save_days().data(), this->log_save_days().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.log_save_days");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->log_save_days(), target);
  }

  // string process_name = 9;
  if (this->process_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.process_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->process_name(), target);
  }

  // string guid = 10;
  if (this->guid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guid(), target);
  }

  // string service_name = 11;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->service_name(), target);
  }

  // string priority = 12;
  if (this->priority().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->priority().data(), this->priority().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.priority");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->priority(), target);
  }

  // string session_app_id = 13;
  if (this->session_app_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session_app_id().data(), this->session_app_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.session_app_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->session_app_id(), target);
  }

  // string debug_mode = 14;
  if (this->debug_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug_mode().data(), this->debug_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.debug_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->debug_mode(), target);
  }

  // string sys_log_interval = 15;
  if (this->sys_log_interval().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sys_log_interval().data(), this->sys_log_interval().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->sys_log_interval(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.GsConf)
  return target;
}

size_t GsConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.GsConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kafka_brokers());
  }

  // string sc_topic = 3;
  if (this->sc_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sc_topic());
  }

  // string gc_topic = 4;
  if (this->gc_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gc_topic());
  }

  // string instance_id = 5;
  if (this->instance_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->instance_id());
  }

  // string group_id = 6;
  if (this->group_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_id());
  }

  // string log_save_days = 8;
  if (this->log_save_days().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->log_save_days());
  }

  // string process_name = 9;
  if (this->process_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->process_name());
  }

  // string guid = 10;
  if (this->guid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guid());
  }

  // string service_name = 11;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // string priority = 12;
  if (this->priority().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->priority());
  }

  // string session_app_id = 13;
  if (this->session_app_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session_app_id());
  }

  // string debug_mode = 14;
  if (this->debug_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->debug_mode());
  }

  // string sys_log_interval = 15;
  if (this->sys_log_interval().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sys_log_interval());
  }

  // .com.fsmeeting.fsp.proto.smd.IpList nat_ip_list = 7;
  if (this->has_nat_ip_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nat_ip_list_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GsConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.GsConf)
  GOOGLE_DCHECK_NE(&from, this);
  const GsConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GsConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.GsConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.GsConf)
    MergeFrom(*source);
  }
}

void GsConf::MergeFrom(const GsConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.GsConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.kafka_brokers().size() > 0) {
    set_kafka_brokers(from.kafka_brokers());
  }
  if (from.sc_topic().size() > 0) {
    set_sc_topic(from.sc_topic());
  }
  if (from.gc_topic().size() > 0) {
    set_gc_topic(from.gc_topic());
  }
  if (from.instance_id().size() > 0) {
    set_instance_id(from.instance_id());
  }
  if (from.group_id().size() > 0) {
    set_group_id(from.group_id());
  }
  if (from.log_save_days().size() > 0) {
    set_log_save_days(from.log_save_days());
  }
  if (from.process_name().size() > 0) {
    set_process_name(from.process_name());
  }
  if (from.guid().size() > 0) {
    set_guid(from.guid());
  }
  if (from.service_name().size() > 0) {
    set_service_name(from.service_name());
  }
  if (from.priority().size() > 0) {
    set_priority(from.priority());
  }
  if (from.session_app_id().size() > 0) {
    set_session_app_id(from.session_app_id());
  }
  if (from.debug_mode().size() > 0) {
    set_debug_mode(from.debug_mode());
  }
  if (from.sys_log_interval().size() > 0) {
    set_sys_log_interval(from.sys_log_interval());
  }
  if (from.has_nat_ip_list()) {
    mutable_nat_ip_list()->::com::fsmeeting::fsp::proto::smd::IpList::MergeFrom(from.nat_ip_list());
  }
}

void GsConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.GsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GsConf::CopyFrom(const GsConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.GsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GsConf::IsInitialized() const {
  return true;
}

void GsConf::Swap(GsConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GsConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GsConf::UnsafeArenaSwap(GsConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GsConf::InternalSwap(GsConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  kafka_brokers_.Swap(&other->kafka_brokers_);
  sc_topic_.Swap(&other->sc_topic_);
  gc_topic_.Swap(&other->gc_topic_);
  instance_id_.Swap(&other->instance_id_);
  group_id_.Swap(&other->group_id_);
  log_save_days_.Swap(&other->log_save_days_);
  process_name_.Swap(&other->process_name_);
  guid_.Swap(&other->guid_);
  service_name_.Swap(&other->service_name_);
  priority_.Swap(&other->priority_);
  session_app_id_.Swap(&other->session_app_id_);
  debug_mode_.Swap(&other->debug_mode_);
  sys_log_interval_.Swap(&other->sys_log_interval_);
  std::swap(nat_ip_list_, other->nat_ip_list_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GsConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[27];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GsConf

// string ice_addr = 1;
void GsConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
  return ice_addr_.Get();
}
void GsConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}
void GsConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}
void GsConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}
::std::string* GsConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}
void GsConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.ice_addr)
}

// string kafka_brokers = 2;
void GsConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
  return kafka_brokers_.Get();
}
void GsConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}
void GsConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}
void GsConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}
::std::string* GsConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}
void GsConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.kafka_brokers)
}

// string sc_topic = 3;
void GsConf::clear_sc_topic() {
  sc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::sc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
  return sc_topic_.Get();
}
void GsConf::set_sc_topic(const ::std::string& value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}
void GsConf::set_sc_topic(const char* value) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}
void GsConf::set_sc_topic(const char* value,
    size_t size) {
  
  sc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}
::std::string* GsConf::mutable_sc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
  return sc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_sc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
  
  return sc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_sc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_sc_topic(::std::string* sc_topic) {
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}
void GsConf::unsafe_arena_set_allocated_sc_topic(
    ::std::string* sc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_topic != NULL) {
    
  } else {
    
  }
  sc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.sc_topic)
}

// string gc_topic = 4;
void GsConf::clear_gc_topic() {
  gc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::gc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
  return gc_topic_.Get();
}
void GsConf::set_gc_topic(const ::std::string& value) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}
void GsConf::set_gc_topic(const char* value) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}
void GsConf::set_gc_topic(const char* value,
    size_t size) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}
::std::string* GsConf::mutable_gc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
  return gc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_gc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
  
  return gc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_gc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_gc_topic(::std::string* gc_topic) {
  if (gc_topic != NULL) {
    
  } else {
    
  }
  gc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}
void GsConf::unsafe_arena_set_allocated_gc_topic(
    ::std::string* gc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gc_topic != NULL) {
    
  } else {
    
  }
  gc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.gc_topic)
}

// string instance_id = 5;
void GsConf::clear_instance_id() {
  instance_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::instance_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
  return instance_id_.Get();
}
void GsConf::set_instance_id(const ::std::string& value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}
void GsConf::set_instance_id(const char* value) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}
void GsConf::set_instance_id(const char* value,
    size_t size) {
  
  instance_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}
::std::string* GsConf::mutable_instance_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
  return instance_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_instance_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
  
  return instance_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_instance_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return instance_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_instance_id(::std::string* instance_id) {
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}
void GsConf::unsafe_arena_set_allocated_instance_id(
    ::std::string* instance_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (instance_id != NULL) {
    
  } else {
    
  }
  instance_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      instance_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.instance_id)
}

// string group_id = 6;
void GsConf::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
  return group_id_.Get();
}
void GsConf::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}
void GsConf::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}
void GsConf::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}
::std::string* GsConf::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}
void GsConf::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.group_id)
}

// .com.fsmeeting.fsp.proto.smd.IpList nat_ip_list = 7;
bool GsConf::has_nat_ip_list() const {
  return this != internal_default_instance() && nat_ip_list_ != NULL;
}
void GsConf::clear_nat_ip_list() {
  if (GetArenaNoVirtual() == NULL && nat_ip_list_ != NULL) delete nat_ip_list_;
  nat_ip_list_ = NULL;
}
const ::com::fsmeeting::fsp::proto::smd::IpList& GsConf::nat_ip_list() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
  return nat_ip_list_ != NULL ? *nat_ip_list_
                         : *::com::fsmeeting::fsp::proto::smd::IpList::internal_default_instance();
}
::com::fsmeeting::fsp::proto::smd::IpList* GsConf::mutable_nat_ip_list() {
  
  if (nat_ip_list_ == NULL) {
    _slow_mutable_nat_ip_list();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
  return nat_ip_list_;
}
::com::fsmeeting::fsp::proto::smd::IpList* GsConf::release_nat_ip_list() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_nat_ip_list();
  } else {
    ::com::fsmeeting::fsp::proto::smd::IpList* temp = nat_ip_list_;
    nat_ip_list_ = NULL;
    return temp;
  }
}
 void GsConf::set_allocated_nat_ip_list(::com::fsmeeting::fsp::proto::smd::IpList* nat_ip_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nat_ip_list_;
  }
  if (nat_ip_list != NULL) {
    _slow_set_allocated_nat_ip_list(message_arena, &nat_ip_list);
  }
  nat_ip_list_ = nat_ip_list;
  if (nat_ip_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.nat_ip_list)
}

// string log_save_days = 8;
void GsConf::clear_log_save_days() {
  log_save_days_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::log_save_days() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
  return log_save_days_.Get();
}
void GsConf::set_log_save_days(const ::std::string& value) {
  
  log_save_days_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}
void GsConf::set_log_save_days(const char* value) {
  
  log_save_days_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}
void GsConf::set_log_save_days(const char* value,
    size_t size) {
  
  log_save_days_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}
::std::string* GsConf::mutable_log_save_days() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
  return log_save_days_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_log_save_days() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
  
  return log_save_days_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_log_save_days() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return log_save_days_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_log_save_days(::std::string* log_save_days) {
  if (log_save_days != NULL) {
    
  } else {
    
  }
  log_save_days_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_save_days,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}
void GsConf::unsafe_arena_set_allocated_log_save_days(
    ::std::string* log_save_days) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (log_save_days != NULL) {
    
  } else {
    
  }
  log_save_days_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      log_save_days, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.log_save_days)
}

// string process_name = 9;
void GsConf::clear_process_name() {
  process_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::process_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
  return process_name_.Get();
}
void GsConf::set_process_name(const ::std::string& value) {
  
  process_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}
void GsConf::set_process_name(const char* value) {
  
  process_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}
void GsConf::set_process_name(const char* value,
    size_t size) {
  
  process_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}
::std::string* GsConf::mutable_process_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
  return process_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_process_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
  
  return process_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_process_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return process_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_process_name(::std::string* process_name) {
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}
void GsConf::unsafe_arena_set_allocated_process_name(
    ::std::string* process_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (process_name != NULL) {
    
  } else {
    
  }
  process_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      process_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.process_name)
}

// string guid = 10;
void GsConf::clear_guid() {
  guid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::guid() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.guid)
  return guid_.Get();
}
void GsConf::set_guid(const ::std::string& value) {
  
  guid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}
void GsConf::set_guid(const char* value) {
  
  guid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}
void GsConf::set_guid(const char* value,
    size_t size) {
  
  guid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}
::std::string* GsConf::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.guid)
  return guid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_guid() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.guid)
  
  return guid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_guid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.guid)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return guid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_guid(::std::string* guid) {
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}
void GsConf::unsafe_arena_set_allocated_guid(
    ::std::string* guid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (guid != NULL) {
    
  } else {
    
  }
  guid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      guid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.guid)
}

// string service_name = 11;
void GsConf::clear_service_name() {
  service_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::service_name() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
  return service_name_.Get();
}
void GsConf::set_service_name(const ::std::string& value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}
void GsConf::set_service_name(const char* value) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}
void GsConf::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}
::std::string* GsConf::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
  return service_name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_service_name() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
  
  return service_name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return service_name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}
void GsConf::unsafe_arena_set_allocated_service_name(
    ::std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.service_name)
}

// string priority = 12;
void GsConf::clear_priority() {
  priority_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::priority() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.priority)
  return priority_.Get();
}
void GsConf::set_priority(const ::std::string& value) {
  
  priority_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}
void GsConf::set_priority(const char* value) {
  
  priority_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}
void GsConf::set_priority(const char* value,
    size_t size) {
  
  priority_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}
::std::string* GsConf::mutable_priority() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.priority)
  return priority_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_priority() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.priority)
  
  return priority_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_priority() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.priority)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return priority_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_priority(::std::string* priority) {
  if (priority != NULL) {
    
  } else {
    
  }
  priority_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), priority,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}
void GsConf::unsafe_arena_set_allocated_priority(
    ::std::string* priority) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (priority != NULL) {
    
  } else {
    
  }
  priority_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      priority, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.priority)
}

// string session_app_id = 13;
void GsConf::clear_session_app_id() {
  session_app_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::session_app_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
  return session_app_id_.Get();
}
void GsConf::set_session_app_id(const ::std::string& value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}
void GsConf::set_session_app_id(const char* value) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}
void GsConf::set_session_app_id(const char* value,
    size_t size) {
  
  session_app_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}
::std::string* GsConf::mutable_session_app_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
  return session_app_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_session_app_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
  
  return session_app_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_session_app_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return session_app_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_session_app_id(::std::string* session_app_id) {
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_app_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}
void GsConf::unsafe_arena_set_allocated_session_app_id(
    ::std::string* session_app_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (session_app_id != NULL) {
    
  } else {
    
  }
  session_app_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      session_app_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.session_app_id)
}

// string debug_mode = 14;
void GsConf::clear_debug_mode() {
  debug_mode_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::debug_mode() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
  return debug_mode_.Get();
}
void GsConf::set_debug_mode(const ::std::string& value) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}
void GsConf::set_debug_mode(const char* value) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}
void GsConf::set_debug_mode(const char* value,
    size_t size) {
  
  debug_mode_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}
::std::string* GsConf::mutable_debug_mode() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
  return debug_mode_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_debug_mode() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
  
  return debug_mode_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_debug_mode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return debug_mode_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_debug_mode(::std::string* debug_mode) {
  if (debug_mode != NULL) {
    
  } else {
    
  }
  debug_mode_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_mode,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}
void GsConf::unsafe_arena_set_allocated_debug_mode(
    ::std::string* debug_mode) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (debug_mode != NULL) {
    
  } else {
    
  }
  debug_mode_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      debug_mode, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.debug_mode)
}

// string sys_log_interval = 15;
void GsConf::clear_sys_log_interval() {
  sys_log_interval_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GsConf::sys_log_interval() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
  return sys_log_interval_.Get();
}
void GsConf::set_sys_log_interval(const ::std::string& value) {
  
  sys_log_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}
void GsConf::set_sys_log_interval(const char* value) {
  
  sys_log_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}
void GsConf::set_sys_log_interval(const char* value,
    size_t size) {
  
  sys_log_interval_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}
::std::string* GsConf::mutable_sys_log_interval() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
  return sys_log_interval_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::release_sys_log_interval() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
  
  return sys_log_interval_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GsConf::unsafe_arena_release_sys_log_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sys_log_interval_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GsConf::set_allocated_sys_log_interval(::std::string* sys_log_interval) {
  if (sys_log_interval != NULL) {
    
  } else {
    
  }
  sys_log_interval_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sys_log_interval,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}
void GsConf::unsafe_arena_set_allocated_sys_log_interval(
    ::std::string* sys_log_interval) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sys_log_interval != NULL) {
    
  } else {
    
  }
  sys_log_interval_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sys_log_interval, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConf.sys_log_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GsConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GsConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GsConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GsConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GsConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GsConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GsConfRsp::GsConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.GsConfRsp)
}
GsConfRsp::GsConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.GsConfRsp)
}
GsConfRsp::GsConfRsp(const GsConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.GsConfRsp)
}

void GsConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

GsConfRsp::~GsConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  SharedDtor();
}

void GsConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GsConfRsp::ArenaDtor(void* object) {
  GsConfRsp* _this = reinterpret_cast< GsConfRsp* >(object);
  (void)_this;
}
void GsConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GsConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GsConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[28].descriptor;
}

const GsConfRsp& GsConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

GsConfRsp* GsConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GsConfRsp>(arena);
}

void GsConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool GsConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  return false;
#undef DO_
}

void GsConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.GsConfRsp)
}

::google::protobuf::uint8* GsConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  return target;
}

size_t GsConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GsConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GsConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GsConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.GsConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.GsConfRsp)
    MergeFrom(*source);
  }
}

void GsConfRsp::MergeFrom(const GsConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void GsConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GsConfRsp::CopyFrom(const GsConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.GsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GsConfRsp::IsInitialized() const {
  return true;
}

void GsConfRsp::Swap(GsConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GsConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GsConfRsp::UnsafeArenaSwap(GsConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GsConfRsp::InternalSwap(GsConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GsConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[28];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GsConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcConf::kIceAddrFieldNumber;
const int GcConf::kKafkaBrokersFieldNumber;
const int GcConf::kZookeeperServersFieldNumber;
const int GcConf::kGcTopicFieldNumber;
const int GcConf::kGcGroupTopicFieldNumber;
const int GcConf::kScGroupTopicFieldNumber;
const int GcConf::kConsumerClientIdFieldNumber;
const int GcConf::kLockTimeoutFieldNumber;
const int GcConf::kTopicPartitionsFieldNumber;
const int GcConf::kTopicReplicationFieldNumber;
const int GcConf::kProtocolVersionFieldNumber;
const int GcConf::kRetryPolicyFieldNumber;
const int GcConf::kRootPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcConf::GcConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.GcConf)
}
GcConf::GcConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.GcConf)
}
GcConf::GcConf(const GcConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kafka_brokers().size() > 0) {
    kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kafka_brokers(),
      GetArenaNoVirtual());
  }
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zookeeper_servers().size() > 0) {
    zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zookeeper_servers(),
      GetArenaNoVirtual());
  }
  gc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gc_topic().size() > 0) {
    gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_topic(),
      GetArenaNoVirtual());
  }
  gc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gc_group_topic().size() > 0) {
    gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gc_group_topic(),
      GetArenaNoVirtual());
  }
  sc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sc_group_topic().size() > 0) {
    sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sc_group_topic(),
      GetArenaNoVirtual());
  }
  consumer_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.consumer_client_id().size() > 0) {
    consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_client_id(),
      GetArenaNoVirtual());
  }
  lock_timeout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lock_timeout().size() > 0) {
    lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_timeout(),
      GetArenaNoVirtual());
  }
  topic_partitions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic_partitions().size() > 0) {
    topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_partitions(),
      GetArenaNoVirtual());
  }
  topic_replication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic_replication().size() > 0) {
    topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_replication(),
      GetArenaNoVirtual());
  }
  protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol_version().size() > 0) {
    protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_version(),
      GetArenaNoVirtual());
  }
  retry_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.retry_policy().size() > 0) {
    retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.retry_policy(),
      GetArenaNoVirtual());
  }
  root_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.root_path().size() > 0) {
    root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.root_path(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.GcConf)
}

void GcConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sc_group_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_timeout_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_partitions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_replication_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retry_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GcConf::~GcConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.GcConf)
  SharedDtor();
}

void GcConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  kafka_brokers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  zookeeper_servers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  gc_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  gc_group_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  sc_group_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  consumer_client_id_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  lock_timeout_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  topic_partitions_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  topic_replication_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  protocol_version_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  retry_policy_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  root_path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void GcConf::ArenaDtor(void* object) {
  GcConf* _this = reinterpret_cast< GcConf* >(object);
  (void)_this;
}
void GcConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GcConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GcConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[29].descriptor;
}

const GcConf& GcConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

GcConf* GcConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GcConf>(arena);
}

void GcConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.GcConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  gc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  gc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  sc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  consumer_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  lock_timeout_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_partitions_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_replication_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  protocol_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  retry_policy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  root_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool GcConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.GcConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kafka_brokers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kafka_brokers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kafka_brokers().data(), this->kafka_brokers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zookeeper_servers = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zookeeper_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zookeeper_servers().data(), this->zookeeper_servers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gc_topic = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gc_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gc_topic().data(), this->gc_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.gc_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gc_group_topic = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gc_group_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gc_group_topic().data(), this->gc_group_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sc_group_topic = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sc_group_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sc_group_topic().data(), this->sc_group_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string consumer_client_id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->consumer_client_id().data(), this->consumer_client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic_partitions = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_partitions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic_partitions().data(), this->topic_partitions().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic_replication = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_replication()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic_replication().data(), this->topic_replication().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.topic_replication"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol_version = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol_version().data(), this->protocol_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.protocol_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lock_timeout = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_timeout()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lock_timeout().data(), this->lock_timeout().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string retry_policy = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retry_policy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->retry_policy().data(), this->retry_policy().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.retry_policy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string root_path = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->root_path().data(), this->root_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.GcConf.root_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.GcConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.GcConf)
  return false;
#undef DO_
}

void GcConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.GcConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kafka_brokers(), output);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->zookeeper_servers(), output);
  }

  // string gc_topic = 4;
  if (this->gc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_topic().data(), this->gc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.gc_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->gc_topic(), output);
  }

  // string gc_group_topic = 5;
  if (this->gc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_group_topic().data(), this->gc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->gc_group_topic(), output);
  }

  // string sc_group_topic = 6;
  if (this->sc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_group_topic().data(), this->sc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sc_group_topic(), output);
  }

  // string consumer_client_id = 7;
  if (this->consumer_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_client_id().data(), this->consumer_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->consumer_client_id(), output);
  }

  // string topic_partitions = 8;
  if (this->topic_partitions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_partitions().data(), this->topic_partitions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->topic_partitions(), output);
  }

  // string topic_replication = 9;
  if (this->topic_replication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_replication().data(), this->topic_replication().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.topic_replication");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->topic_replication(), output);
  }

  // string protocol_version = 10;
  if (this->protocol_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.protocol_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->protocol_version(), output);
  }

  // string lock_timeout = 11;
  if (this->lock_timeout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_timeout().data(), this->lock_timeout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->lock_timeout(), output);
  }

  // string retry_policy = 12;
  if (this->retry_policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_policy().data(), this->retry_policy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.retry_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->retry_policy(), output);
  }

  // string root_path = 13;
  if (this->root_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), this->root_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.root_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->root_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.GcConf)
}

::google::protobuf::uint8* GcConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.GcConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kafka_brokers(), target);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->zookeeper_servers(), target);
  }

  // string gc_topic = 4;
  if (this->gc_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_topic().data(), this->gc_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.gc_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gc_topic(), target);
  }

  // string gc_group_topic = 5;
  if (this->gc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gc_group_topic().data(), this->gc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->gc_group_topic(), target);
  }

  // string sc_group_topic = 6;
  if (this->sc_group_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sc_group_topic().data(), this->sc_group_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sc_group_topic(), target);
  }

  // string consumer_client_id = 7;
  if (this->consumer_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->consumer_client_id().data(), this->consumer_client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->consumer_client_id(), target);
  }

  // string topic_partitions = 8;
  if (this->topic_partitions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_partitions().data(), this->topic_partitions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->topic_partitions(), target);
  }

  // string topic_replication = 9;
  if (this->topic_replication().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_replication().data(), this->topic_replication().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.topic_replication");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->topic_replication(), target);
  }

  // string protocol_version = 10;
  if (this->protocol_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol_version().data(), this->protocol_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.protocol_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->protocol_version(), target);
  }

  // string lock_timeout = 11;
  if (this->lock_timeout().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lock_timeout().data(), this->lock_timeout().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->lock_timeout(), target);
  }

  // string retry_policy = 12;
  if (this->retry_policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->retry_policy().data(), this->retry_policy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.retry_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->retry_policy(), target);
  }

  // string root_path = 13;
  if (this->root_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->root_path().data(), this->root_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.GcConf.root_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->root_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.GcConf)
  return target;
}

size_t GcConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.GcConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kafka_brokers());
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zookeeper_servers());
  }

  // string gc_topic = 4;
  if (this->gc_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gc_topic());
  }

  // string gc_group_topic = 5;
  if (this->gc_group_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gc_group_topic());
  }

  // string sc_group_topic = 6;
  if (this->sc_group_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sc_group_topic());
  }

  // string consumer_client_id = 7;
  if (this->consumer_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->consumer_client_id());
  }

  // string lock_timeout = 11;
  if (this->lock_timeout().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lock_timeout());
  }

  // string topic_partitions = 8;
  if (this->topic_partitions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_partitions());
  }

  // string topic_replication = 9;
  if (this->topic_replication().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_replication());
  }

  // string protocol_version = 10;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol_version());
  }

  // string retry_policy = 12;
  if (this->retry_policy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->retry_policy());
  }

  // string root_path = 13;
  if (this->root_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->root_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.GcConf)
  GOOGLE_DCHECK_NE(&from, this);
  const GcConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.GcConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.GcConf)
    MergeFrom(*source);
  }
}

void GcConf::MergeFrom(const GcConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.GcConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.kafka_brokers().size() > 0) {
    set_kafka_brokers(from.kafka_brokers());
  }
  if (from.zookeeper_servers().size() > 0) {
    set_zookeeper_servers(from.zookeeper_servers());
  }
  if (from.gc_topic().size() > 0) {
    set_gc_topic(from.gc_topic());
  }
  if (from.gc_group_topic().size() > 0) {
    set_gc_group_topic(from.gc_group_topic());
  }
  if (from.sc_group_topic().size() > 0) {
    set_sc_group_topic(from.sc_group_topic());
  }
  if (from.consumer_client_id().size() > 0) {
    set_consumer_client_id(from.consumer_client_id());
  }
  if (from.lock_timeout().size() > 0) {
    set_lock_timeout(from.lock_timeout());
  }
  if (from.topic_partitions().size() > 0) {
    set_topic_partitions(from.topic_partitions());
  }
  if (from.topic_replication().size() > 0) {
    set_topic_replication(from.topic_replication());
  }
  if (from.protocol_version().size() > 0) {
    set_protocol_version(from.protocol_version());
  }
  if (from.retry_policy().size() > 0) {
    set_retry_policy(from.retry_policy());
  }
  if (from.root_path().size() > 0) {
    set_root_path(from.root_path());
  }
}

void GcConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.GcConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcConf::CopyFrom(const GcConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.GcConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcConf::IsInitialized() const {
  return true;
}

void GcConf::Swap(GcConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GcConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GcConf::UnsafeArenaSwap(GcConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GcConf::InternalSwap(GcConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  kafka_brokers_.Swap(&other->kafka_brokers_);
  zookeeper_servers_.Swap(&other->zookeeper_servers_);
  gc_topic_.Swap(&other->gc_topic_);
  gc_group_topic_.Swap(&other->gc_group_topic_);
  sc_group_topic_.Swap(&other->sc_group_topic_);
  consumer_client_id_.Swap(&other->consumer_client_id_);
  lock_timeout_.Swap(&other->lock_timeout_);
  topic_partitions_.Swap(&other->topic_partitions_);
  topic_replication_.Swap(&other->topic_replication_);
  protocol_version_.Swap(&other->protocol_version_);
  retry_policy_.Swap(&other->retry_policy_);
  root_path_.Swap(&other->root_path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GcConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[29];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GcConf

// string ice_addr = 1;
void GcConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
  return ice_addr_.Get();
}
void GcConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}
void GcConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}
void GcConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}
::std::string* GcConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}
void GcConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.ice_addr)
}

// string kafka_brokers = 2;
void GcConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
  return kafka_brokers_.Get();
}
void GcConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}
void GcConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}
void GcConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}
::std::string* GcConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}
void GcConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.kafka_brokers)
}

// string zookeeper_servers = 3;
void GcConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
void GcConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}
void GcConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}
void GcConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}
::std::string* GcConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}
void GcConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.zookeeper_servers)
}

// string gc_topic = 4;
void GcConf::clear_gc_topic() {
  gc_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::gc_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
  return gc_topic_.Get();
}
void GcConf::set_gc_topic(const ::std::string& value) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}
void GcConf::set_gc_topic(const char* value) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}
void GcConf::set_gc_topic(const char* value,
    size_t size) {
  
  gc_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}
::std::string* GcConf::mutable_gc_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
  return gc_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_gc_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
  
  return gc_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_gc_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gc_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_gc_topic(::std::string* gc_topic) {
  if (gc_topic != NULL) {
    
  } else {
    
  }
  gc_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}
void GcConf::unsafe_arena_set_allocated_gc_topic(
    ::std::string* gc_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gc_topic != NULL) {
    
  } else {
    
  }
  gc_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gc_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.gc_topic)
}

// string gc_group_topic = 5;
void GcConf::clear_gc_group_topic() {
  gc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::gc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
  return gc_group_topic_.Get();
}
void GcConf::set_gc_group_topic(const ::std::string& value) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}
void GcConf::set_gc_group_topic(const char* value) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}
void GcConf::set_gc_group_topic(const char* value,
    size_t size) {
  
  gc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}
::std::string* GcConf::mutable_gc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
  return gc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_gc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
  
  return gc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_gc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return gc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_gc_group_topic(::std::string* gc_group_topic) {
  if (gc_group_topic != NULL) {
    
  } else {
    
  }
  gc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}
void GcConf::unsafe_arena_set_allocated_gc_group_topic(
    ::std::string* gc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (gc_group_topic != NULL) {
    
  } else {
    
  }
  gc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      gc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.gc_group_topic)
}

// string sc_group_topic = 6;
void GcConf::clear_sc_group_topic() {
  sc_group_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::sc_group_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
  return sc_group_topic_.Get();
}
void GcConf::set_sc_group_topic(const ::std::string& value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}
void GcConf::set_sc_group_topic(const char* value) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}
void GcConf::set_sc_group_topic(const char* value,
    size_t size) {
  
  sc_group_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}
::std::string* GcConf::mutable_sc_group_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
  return sc_group_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_sc_group_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
  
  return sc_group_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_sc_group_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return sc_group_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_sc_group_topic(::std::string* sc_group_topic) {
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sc_group_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}
void GcConf::unsafe_arena_set_allocated_sc_group_topic(
    ::std::string* sc_group_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (sc_group_topic != NULL) {
    
  } else {
    
  }
  sc_group_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      sc_group_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.sc_group_topic)
}

// string consumer_client_id = 7;
void GcConf::clear_consumer_client_id() {
  consumer_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::consumer_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
  return consumer_client_id_.Get();
}
void GcConf::set_consumer_client_id(const ::std::string& value) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}
void GcConf::set_consumer_client_id(const char* value) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}
void GcConf::set_consumer_client_id(const char* value,
    size_t size) {
  
  consumer_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}
::std::string* GcConf::mutable_consumer_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
  return consumer_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_consumer_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
  
  return consumer_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_consumer_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return consumer_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_consumer_client_id(::std::string* consumer_client_id) {
  if (consumer_client_id != NULL) {
    
  } else {
    
  }
  consumer_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}
void GcConf::unsafe_arena_set_allocated_consumer_client_id(
    ::std::string* consumer_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (consumer_client_id != NULL) {
    
  } else {
    
  }
  consumer_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      consumer_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.consumer_client_id)
}

// string lock_timeout = 11;
void GcConf::clear_lock_timeout() {
  lock_timeout_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::lock_timeout() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
  return lock_timeout_.Get();
}
void GcConf::set_lock_timeout(const ::std::string& value) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}
void GcConf::set_lock_timeout(const char* value) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}
void GcConf::set_lock_timeout(const char* value,
    size_t size) {
  
  lock_timeout_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}
::std::string* GcConf::mutable_lock_timeout() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
  return lock_timeout_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_lock_timeout() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
  
  return lock_timeout_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_lock_timeout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return lock_timeout_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_lock_timeout(::std::string* lock_timeout) {
  if (lock_timeout != NULL) {
    
  } else {
    
  }
  lock_timeout_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_timeout,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}
void GcConf::unsafe_arena_set_allocated_lock_timeout(
    ::std::string* lock_timeout) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (lock_timeout != NULL) {
    
  } else {
    
  }
  lock_timeout_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      lock_timeout, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.lock_timeout)
}

// string topic_partitions = 8;
void GcConf::clear_topic_partitions() {
  topic_partitions_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::topic_partitions() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
  return topic_partitions_.Get();
}
void GcConf::set_topic_partitions(const ::std::string& value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}
void GcConf::set_topic_partitions(const char* value) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}
void GcConf::set_topic_partitions(const char* value,
    size_t size) {
  
  topic_partitions_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}
::std::string* GcConf::mutable_topic_partitions() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
  return topic_partitions_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_topic_partitions() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
  
  return topic_partitions_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_topic_partitions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_partitions_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_topic_partitions(::std::string* topic_partitions) {
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_partitions,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}
void GcConf::unsafe_arena_set_allocated_topic_partitions(
    ::std::string* topic_partitions) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_partitions != NULL) {
    
  } else {
    
  }
  topic_partitions_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_partitions, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.topic_partitions)
}

// string topic_replication = 9;
void GcConf::clear_topic_replication() {
  topic_replication_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::topic_replication() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
  return topic_replication_.Get();
}
void GcConf::set_topic_replication(const ::std::string& value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}
void GcConf::set_topic_replication(const char* value) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}
void GcConf::set_topic_replication(const char* value,
    size_t size) {
  
  topic_replication_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}
::std::string* GcConf::mutable_topic_replication() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
  return topic_replication_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_topic_replication() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
  
  return topic_replication_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_topic_replication() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_replication_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_topic_replication(::std::string* topic_replication) {
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_replication,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}
void GcConf::unsafe_arena_set_allocated_topic_replication(
    ::std::string* topic_replication) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic_replication != NULL) {
    
  } else {
    
  }
  topic_replication_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic_replication, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.topic_replication)
}

// string protocol_version = 10;
void GcConf::clear_protocol_version() {
  protocol_version_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::protocol_version() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
  return protocol_version_.Get();
}
void GcConf::set_protocol_version(const ::std::string& value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}
void GcConf::set_protocol_version(const char* value) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}
void GcConf::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}
::std::string* GcConf::mutable_protocol_version() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
  return protocol_version_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_protocol_version() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
  
  return protocol_version_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_protocol_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return protocol_version_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_protocol_version(::std::string* protocol_version) {
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}
void GcConf::unsafe_arena_set_allocated_protocol_version(
    ::std::string* protocol_version) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (protocol_version != NULL) {
    
  } else {
    
  }
  protocol_version_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      protocol_version, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.protocol_version)
}

// string retry_policy = 12;
void GcConf::clear_retry_policy() {
  retry_policy_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::retry_policy() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
  return retry_policy_.Get();
}
void GcConf::set_retry_policy(const ::std::string& value) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}
void GcConf::set_retry_policy(const char* value) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}
void GcConf::set_retry_policy(const char* value,
    size_t size) {
  
  retry_policy_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}
::std::string* GcConf::mutable_retry_policy() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
  return retry_policy_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_retry_policy() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
  
  return retry_policy_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_retry_policy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return retry_policy_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_retry_policy(::std::string* retry_policy) {
  if (retry_policy != NULL) {
    
  } else {
    
  }
  retry_policy_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retry_policy,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}
void GcConf::unsafe_arena_set_allocated_retry_policy(
    ::std::string* retry_policy) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (retry_policy != NULL) {
    
  } else {
    
  }
  retry_policy_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      retry_policy, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.retry_policy)
}

// string root_path = 13;
void GcConf::clear_root_path() {
  root_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& GcConf::root_path() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
  return root_path_.Get();
}
void GcConf::set_root_path(const ::std::string& value) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}
void GcConf::set_root_path(const char* value) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}
void GcConf::set_root_path(const char* value,
    size_t size) {
  
  root_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}
::std::string* GcConf::mutable_root_path() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
  return root_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::release_root_path() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
  
  return root_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* GcConf::unsafe_arena_release_root_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return root_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void GcConf::set_allocated_root_path(::std::string* root_path) {
  if (root_path != NULL) {
    
  } else {
    
  }
  root_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), root_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}
void GcConf::unsafe_arena_set_allocated_root_path(
    ::std::string* root_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (root_path != NULL) {
    
  } else {
    
  }
  root_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      root_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConf.root_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void GcConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GcConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GcConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void GcConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void GcConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GcConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GcConfRsp::GcConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.GcConfRsp)
}
GcConfRsp::GcConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.GcConfRsp)
}
GcConfRsp::GcConfRsp(const GcConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.GcConfRsp)
}

void GcConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

GcConfRsp::~GcConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  SharedDtor();
}

void GcConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void GcConfRsp::ArenaDtor(void* object) {
  GcConfRsp* _this = reinterpret_cast< GcConfRsp* >(object);
  (void)_this;
}
void GcConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GcConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GcConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[30].descriptor;
}

const GcConfRsp& GcConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

GcConfRsp* GcConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GcConfRsp>(arena);
}

void GcConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool GcConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  return false;
#undef DO_
}

void GcConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.GcConfRsp)
}

::google::protobuf::uint8* GcConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  return target;
}

size_t GcConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GcConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GcConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GcConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.GcConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.GcConfRsp)
    MergeFrom(*source);
  }
}

void GcConfRsp::MergeFrom(const GcConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void GcConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GcConfRsp::CopyFrom(const GcConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.GcConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GcConfRsp::IsInitialized() const {
  return true;
}

void GcConfRsp::Swap(GcConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GcConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GcConfRsp::UnsafeArenaSwap(GcConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GcConfRsp::InternalSwap(GcConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GcConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[30];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GcConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool GcConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void GcConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& GcConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GcConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* GcConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void GcConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.GcConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaConf::kIceAddrFieldNumber;
const int MaConf::kKafkaBrokersFieldNumber;
const int MaConf::kZookeeperServersFieldNumber;
const int MaConf::kMaTopicFieldNumber;
const int MaConf::kBandwidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaConf::MaConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.MaConf)
}
MaConf::MaConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.MaConf)
}
MaConf::MaConf(const MaConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kafka_brokers().size() > 0) {
    kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kafka_brokers(),
      GetArenaNoVirtual());
  }
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zookeeper_servers().size() > 0) {
    zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zookeeper_servers(),
      GetArenaNoVirtual());
  }
  ma_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ma_topic().size() > 0) {
    ma_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ma_topic(),
      GetArenaNoVirtual());
  }
  bandwidth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bandwidth().size() > 0) {
    bandwidth_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bandwidth(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.MaConf)
}

void MaConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ma_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bandwidth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MaConf::~MaConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.MaConf)
  SharedDtor();
}

void MaConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  kafka_brokers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  zookeeper_servers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  ma_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  bandwidth_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void MaConf::ArenaDtor(void* object) {
  MaConf* _this = reinterpret_cast< MaConf* >(object);
  (void)_this;
}
void MaConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[31].descriptor;
}

const MaConf& MaConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaConf* MaConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MaConf>(arena);
}

void MaConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.MaConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ma_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bandwidth_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool MaConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.MaConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MaConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kafka_brokers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kafka_brokers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kafka_brokers().data(), this->kafka_brokers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zookeeper_servers = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zookeeper_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zookeeper_servers().data(), this->zookeeper_servers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ma_topic = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ma_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ma_topic().data(), this->ma_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MaConf.ma_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bandwidth = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bandwidth()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bandwidth().data(), this->bandwidth().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MaConf.bandwidth"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.MaConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.MaConf)
  return false;
#undef DO_
}

void MaConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.MaConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kafka_brokers(), output);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->zookeeper_servers(), output);
  }

  // string ma_topic = 4;
  if (this->ma_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ma_topic().data(), this->ma_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.ma_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ma_topic(), output);
  }

  // string bandwidth = 5;
  if (this->bandwidth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bandwidth().data(), this->bandwidth().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.bandwidth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bandwidth(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.MaConf)
}

::google::protobuf::uint8* MaConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.MaConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kafka_brokers(), target);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->zookeeper_servers(), target);
  }

  // string ma_topic = 4;
  if (this->ma_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ma_topic().data(), this->ma_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.ma_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ma_topic(), target);
  }

  // string bandwidth = 5;
  if (this->bandwidth().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bandwidth().data(), this->bandwidth().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MaConf.bandwidth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bandwidth(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.MaConf)
  return target;
}

size_t MaConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.MaConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kafka_brokers());
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zookeeper_servers());
  }

  // string ma_topic = 4;
  if (this->ma_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ma_topic());
  }

  // string bandwidth = 5;
  if (this->bandwidth().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bandwidth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.MaConf)
  GOOGLE_DCHECK_NE(&from, this);
  const MaConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.MaConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.MaConf)
    MergeFrom(*source);
  }
}

void MaConf::MergeFrom(const MaConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.MaConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.kafka_brokers().size() > 0) {
    set_kafka_brokers(from.kafka_brokers());
  }
  if (from.zookeeper_servers().size() > 0) {
    set_zookeeper_servers(from.zookeeper_servers());
  }
  if (from.ma_topic().size() > 0) {
    set_ma_topic(from.ma_topic());
  }
  if (from.bandwidth().size() > 0) {
    set_bandwidth(from.bandwidth());
  }
}

void MaConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.MaConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaConf::CopyFrom(const MaConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.MaConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaConf::IsInitialized() const {
  return true;
}

void MaConf::Swap(MaConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaConf::UnsafeArenaSwap(MaConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaConf::InternalSwap(MaConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  kafka_brokers_.Swap(&other->kafka_brokers_);
  zookeeper_servers_.Swap(&other->zookeeper_servers_);
  ma_topic_.Swap(&other->ma_topic_);
  bandwidth_.Swap(&other->bandwidth_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[31];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaConf

// string ice_addr = 1;
void MaConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MaConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
  return ice_addr_.Get();
}
void MaConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}
void MaConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}
void MaConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}
::std::string* MaConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MaConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}
void MaConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.ice_addr)
}

// string kafka_brokers = 2;
void MaConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MaConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
  return kafka_brokers_.Get();
}
void MaConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}
void MaConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}
void MaConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}
::std::string* MaConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MaConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}
void MaConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.kafka_brokers)
}

// string zookeeper_servers = 3;
void MaConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MaConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
void MaConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}
void MaConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}
void MaConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}
::std::string* MaConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MaConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}
void MaConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.zookeeper_servers)
}

// string ma_topic = 4;
void MaConf::clear_ma_topic() {
  ma_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MaConf::ma_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
  return ma_topic_.Get();
}
void MaConf::set_ma_topic(const ::std::string& value) {
  
  ma_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}
void MaConf::set_ma_topic(const char* value) {
  
  ma_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}
void MaConf::set_ma_topic(const char* value,
    size_t size) {
  
  ma_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}
::std::string* MaConf::mutable_ma_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
  return ma_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::release_ma_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
  
  return ma_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::unsafe_arena_release_ma_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ma_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MaConf::set_allocated_ma_topic(::std::string* ma_topic) {
  if (ma_topic != NULL) {
    
  } else {
    
  }
  ma_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ma_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}
void MaConf::unsafe_arena_set_allocated_ma_topic(
    ::std::string* ma_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ma_topic != NULL) {
    
  } else {
    
  }
  ma_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ma_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.ma_topic)
}

// string bandwidth = 5;
void MaConf::clear_bandwidth() {
  bandwidth_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MaConf::bandwidth() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
  return bandwidth_.Get();
}
void MaConf::set_bandwidth(const ::std::string& value) {
  
  bandwidth_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}
void MaConf::set_bandwidth(const char* value) {
  
  bandwidth_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}
void MaConf::set_bandwidth(const char* value,
    size_t size) {
  
  bandwidth_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}
::std::string* MaConf::mutable_bandwidth() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
  return bandwidth_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::release_bandwidth() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
  
  return bandwidth_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MaConf::unsafe_arena_release_bandwidth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return bandwidth_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MaConf::set_allocated_bandwidth(::std::string* bandwidth) {
  if (bandwidth != NULL) {
    
  } else {
    
  }
  bandwidth_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bandwidth,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}
void MaConf::unsafe_arena_set_allocated_bandwidth(
    ::std::string* bandwidth) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (bandwidth != NULL) {
    
  } else {
    
  }
  bandwidth_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      bandwidth, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConf.bandwidth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MaConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* MaConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* MaConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void MaConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void MaConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaConfRsp::MaConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.MaConfRsp)
}
MaConfRsp::MaConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.MaConfRsp)
}
MaConfRsp::MaConfRsp(const MaConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.MaConfRsp)
}

void MaConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

MaConfRsp::~MaConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  SharedDtor();
}

void MaConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void MaConfRsp::ArenaDtor(void* object) {
  MaConfRsp* _this = reinterpret_cast< MaConfRsp* >(object);
  (void)_this;
}
void MaConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MaConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[32].descriptor;
}

const MaConfRsp& MaConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

MaConfRsp* MaConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MaConfRsp>(arena);
}

void MaConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool MaConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  return false;
#undef DO_
}

void MaConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.MaConfRsp)
}

::google::protobuf::uint8* MaConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  return target;
}

size_t MaConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const MaConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MaConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.MaConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.MaConfRsp)
    MergeFrom(*source);
  }
}

void MaConfRsp::MergeFrom(const MaConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void MaConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaConfRsp::CopyFrom(const MaConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.MaConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaConfRsp::IsInitialized() const {
  return true;
}

void MaConfRsp::Swap(MaConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MaConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MaConfRsp::UnsafeArenaSwap(MaConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MaConfRsp::InternalSwap(MaConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[32];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool MaConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void MaConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& MaConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* MaConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* MaConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void MaConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MaConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsConf::kIceAddrFieldNumber;
const int MsConf::kKafkaBrokersFieldNumber;
const int MsConf::kZookeeperServersFieldNumber;
const int MsConf::kMsTopicFieldNumber;
const int MsConf::kPollTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsConf::MsConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.MsConf)
}
MsConf::MsConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.MsConf)
}
MsConf::MsConf(const MsConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kafka_brokers().size() > 0) {
    kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kafka_brokers(),
      GetArenaNoVirtual());
  }
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zookeeper_servers().size() > 0) {
    zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zookeeper_servers(),
      GetArenaNoVirtual());
  }
  ms_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ms_topic().size() > 0) {
    ms_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ms_topic(),
      GetArenaNoVirtual());
  }
  poll_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.poll_time().size() > 0) {
    poll_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.poll_time(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.MsConf)
}

void MsConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kafka_brokers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ms_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  poll_time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MsConf::~MsConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.MsConf)
  SharedDtor();
}

void MsConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  kafka_brokers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  zookeeper_servers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  ms_topic_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  poll_time_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void MsConf::ArenaDtor(void* object) {
  MsConf* _this = reinterpret_cast< MsConf* >(object);
  (void)_this;
}
void MsConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MsConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[33].descriptor;
}

const MsConf& MsConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsConf* MsConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MsConf>(arena);
}

void MsConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.MsConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ms_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  poll_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool MsConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.MsConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MsConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kafka_brokers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kafka_brokers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kafka_brokers().data(), this->kafka_brokers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zookeeper_servers = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zookeeper_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zookeeper_servers().data(), this->zookeeper_servers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ms_topic = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ms_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ms_topic().data(), this->ms_topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MsConf.ms_topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string poll_time = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poll_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->poll_time().data(), this->poll_time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.MsConf.poll_time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.MsConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.MsConf)
  return false;
#undef DO_
}

void MsConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.MsConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kafka_brokers(), output);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->zookeeper_servers(), output);
  }

  // string ms_topic = 4;
  if (this->ms_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ms_topic().data(), this->ms_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.ms_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ms_topic(), output);
  }

  // string poll_time = 5;
  if (this->poll_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->poll_time().data(), this->poll_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.poll_time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->poll_time(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.MsConf)
}

::google::protobuf::uint8* MsConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.MsConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kafka_brokers().data(), this->kafka_brokers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kafka_brokers(), target);
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->zookeeper_servers(), target);
  }

  // string ms_topic = 4;
  if (this->ms_topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ms_topic().data(), this->ms_topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.ms_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ms_topic(), target);
  }

  // string poll_time = 5;
  if (this->poll_time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->poll_time().data(), this->poll_time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.MsConf.poll_time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->poll_time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.MsConf)
  return target;
}

size_t MsConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.MsConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string kafka_brokers = 2;
  if (this->kafka_brokers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kafka_brokers());
  }

  // string zookeeper_servers = 3;
  if (this->zookeeper_servers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zookeeper_servers());
  }

  // string ms_topic = 4;
  if (this->ms_topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ms_topic());
  }

  // string poll_time = 5;
  if (this->poll_time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->poll_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.MsConf)
  GOOGLE_DCHECK_NE(&from, this);
  const MsConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.MsConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.MsConf)
    MergeFrom(*source);
  }
}

void MsConf::MergeFrom(const MsConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.MsConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.kafka_brokers().size() > 0) {
    set_kafka_brokers(from.kafka_brokers());
  }
  if (from.zookeeper_servers().size() > 0) {
    set_zookeeper_servers(from.zookeeper_servers());
  }
  if (from.ms_topic().size() > 0) {
    set_ms_topic(from.ms_topic());
  }
  if (from.poll_time().size() > 0) {
    set_poll_time(from.poll_time());
  }
}

void MsConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.MsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsConf::CopyFrom(const MsConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.MsConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsConf::IsInitialized() const {
  return true;
}

void MsConf::Swap(MsConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MsConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MsConf::UnsafeArenaSwap(MsConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MsConf::InternalSwap(MsConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  kafka_brokers_.Swap(&other->kafka_brokers_);
  zookeeper_servers_.Swap(&other->zookeeper_servers_);
  ms_topic_.Swap(&other->ms_topic_);
  poll_time_.Swap(&other->poll_time_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[33];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsConf

// string ice_addr = 1;
void MsConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MsConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
  return ice_addr_.Get();
}
void MsConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}
void MsConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}
void MsConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}
::std::string* MsConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MsConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}
void MsConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.ice_addr)
}

// string kafka_brokers = 2;
void MsConf::clear_kafka_brokers() {
  kafka_brokers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MsConf::kafka_brokers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
  return kafka_brokers_.Get();
}
void MsConf::set_kafka_brokers(const ::std::string& value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}
void MsConf::set_kafka_brokers(const char* value) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}
void MsConf::set_kafka_brokers(const char* value,
    size_t size) {
  
  kafka_brokers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}
::std::string* MsConf::mutable_kafka_brokers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
  return kafka_brokers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::release_kafka_brokers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
  
  return kafka_brokers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::unsafe_arena_release_kafka_brokers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return kafka_brokers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MsConf::set_allocated_kafka_brokers(::std::string* kafka_brokers) {
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kafka_brokers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}
void MsConf::unsafe_arena_set_allocated_kafka_brokers(
    ::std::string* kafka_brokers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (kafka_brokers != NULL) {
    
  } else {
    
  }
  kafka_brokers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      kafka_brokers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.kafka_brokers)
}

// string zookeeper_servers = 3;
void MsConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MsConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
void MsConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}
void MsConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}
void MsConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}
::std::string* MsConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MsConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}
void MsConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.zookeeper_servers)
}

// string ms_topic = 4;
void MsConf::clear_ms_topic() {
  ms_topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MsConf::ms_topic() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
  return ms_topic_.Get();
}
void MsConf::set_ms_topic(const ::std::string& value) {
  
  ms_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}
void MsConf::set_ms_topic(const char* value) {
  
  ms_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}
void MsConf::set_ms_topic(const char* value,
    size_t size) {
  
  ms_topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}
::std::string* MsConf::mutable_ms_topic() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
  return ms_topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::release_ms_topic() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
  
  return ms_topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::unsafe_arena_release_ms_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ms_topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MsConf::set_allocated_ms_topic(::std::string* ms_topic) {
  if (ms_topic != NULL) {
    
  } else {
    
  }
  ms_topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ms_topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}
void MsConf::unsafe_arena_set_allocated_ms_topic(
    ::std::string* ms_topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ms_topic != NULL) {
    
  } else {
    
  }
  ms_topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ms_topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.ms_topic)
}

// string poll_time = 5;
void MsConf::clear_poll_time() {
  poll_time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& MsConf::poll_time() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
  return poll_time_.Get();
}
void MsConf::set_poll_time(const ::std::string& value) {
  
  poll_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}
void MsConf::set_poll_time(const char* value) {
  
  poll_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}
void MsConf::set_poll_time(const char* value,
    size_t size) {
  
  poll_time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}
::std::string* MsConf::mutable_poll_time() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
  return poll_time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::release_poll_time() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
  
  return poll_time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* MsConf::unsafe_arena_release_poll_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return poll_time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void MsConf::set_allocated_poll_time(::std::string* poll_time) {
  if (poll_time != NULL) {
    
  } else {
    
  }
  poll_time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), poll_time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}
void MsConf::unsafe_arena_set_allocated_poll_time(
    ::std::string* poll_time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (poll_time != NULL) {
    
  } else {
    
  }
  poll_time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      poll_time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConf.poll_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void MsConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* MsConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* MsConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void MsConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void MsConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsConfRsp::MsConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.MsConfRsp)
}
MsConfRsp::MsConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.MsConfRsp)
}
MsConfRsp::MsConfRsp(const MsConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.MsConfRsp)
}

void MsConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

MsConfRsp::~MsConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  SharedDtor();
}

void MsConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void MsConfRsp::ArenaDtor(void* object) {
  MsConfRsp* _this = reinterpret_cast< MsConfRsp* >(object);
  (void)_this;
}
void MsConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void MsConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[34].descriptor;
}

const MsConfRsp& MsConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsConfRsp* MsConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<MsConfRsp>(arena);
}

void MsConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool MsConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  return false;
#undef DO_
}

void MsConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.MsConfRsp)
}

::google::protobuf::uint8* MsConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  return target;
}

size_t MsConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const MsConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.MsConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.MsConfRsp)
    MergeFrom(*source);
  }
}

void MsConfRsp::MergeFrom(const MsConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void MsConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsConfRsp::CopyFrom(const MsConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.MsConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsConfRsp::IsInitialized() const {
  return true;
}

void MsConfRsp::Swap(MsConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MsConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void MsConfRsp::UnsafeArenaSwap(MsConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MsConfRsp::InternalSwap(MsConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[34];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool MsConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void MsConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& MsConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* MsConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* MsConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void MsConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.MsConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuleConf::kIceAddrFieldNumber;
const int RuleConf::kZookeeperServersFieldNumber;
const int RuleConf::kIplibPathFieldNumber;
const int RuleConf::kConfigPathFieldNumber;
const int RuleConf::kMaxInstanceSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuleConf::RuleConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.RuleConf)
}
RuleConf::RuleConf(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.RuleConf)
}
RuleConf::RuleConf(const RuleConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ice_addr().size() > 0) {
    ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ice_addr(),
      GetArenaNoVirtual());
  }
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.zookeeper_servers().size() > 0) {
    zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zookeeper_servers(),
      GetArenaNoVirtual());
  }
  iplib_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iplib_path().size() > 0) {
    iplib_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iplib_path(),
      GetArenaNoVirtual());
  }
  config_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config_path().size() > 0) {
    config_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_path(),
      GetArenaNoVirtual());
  }
  max_instance_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.max_instance_size().size() > 0) {
    max_instance_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.max_instance_size(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.RuleConf)
}

void RuleConf::SharedCtor() {
  ice_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zookeeper_servers_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iplib_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  config_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_instance_size_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RuleConf::~RuleConf() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.RuleConf)
  SharedDtor();
}

void RuleConf::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  ice_addr_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  zookeeper_servers_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  iplib_path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  config_path_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  max_instance_size_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void RuleConf::ArenaDtor(void* object) {
  RuleConf* _this = reinterpret_cast< RuleConf* >(object);
  (void)_this;
}
void RuleConf::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RuleConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleConf::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[35].descriptor;
}

const RuleConf& RuleConf::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

RuleConf* RuleConf::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RuleConf>(arena);
}

void RuleConf::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.RuleConf)
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  iplib_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  config_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  max_instance_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool RuleConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.RuleConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ice_addr = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ice_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ice_addr().data(), this->ice_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string zookeeper_servers = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zookeeper_servers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zookeeper_servers().data(), this->zookeeper_servers().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string iplib_path = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iplib_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iplib_path().data(), this->iplib_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string config_path = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config_path().data(), this->config_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.RuleConf.config_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string max_instance_size = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_max_instance_size()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->max_instance_size().data(), this->max_instance_size().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.RuleConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.RuleConf)
  return false;
#undef DO_
}

void RuleConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.RuleConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ice_addr(), output);
  }

  // string zookeeper_servers = 2;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->zookeeper_servers(), output);
  }

  // string iplib_path = 3;
  if (this->iplib_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iplib_path().data(), this->iplib_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->iplib_path(), output);
  }

  // string config_path = 4;
  if (this->config_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_path().data(), this->config_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.config_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->config_path(), output);
  }

  // string max_instance_size = 5;
  if (this->max_instance_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->max_instance_size().data(), this->max_instance_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->max_instance_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.RuleConf)
}

::google::protobuf::uint8* RuleConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.RuleConf)
  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ice_addr().data(), this->ice_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ice_addr(), target);
  }

  // string zookeeper_servers = 2;
  if (this->zookeeper_servers().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zookeeper_servers().data(), this->zookeeper_servers().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zookeeper_servers(), target);
  }

  // string iplib_path = 3;
  if (this->iplib_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iplib_path().data(), this->iplib_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->iplib_path(), target);
  }

  // string config_path = 4;
  if (this->config_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config_path().data(), this->config_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.config_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->config_path(), target);
  }

  // string max_instance_size = 5;
  if (this->max_instance_size().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->max_instance_size().data(), this->max_instance_size().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->max_instance_size(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.RuleConf)
  return target;
}

size_t RuleConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.RuleConf)
  size_t total_size = 0;

  // string ice_addr = 1;
  if (this->ice_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ice_addr());
  }

  // string zookeeper_servers = 2;
  if (this->zookeeper_servers().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zookeeper_servers());
  }

  // string iplib_path = 3;
  if (this->iplib_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iplib_path());
  }

  // string config_path = 4;
  if (this->config_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config_path());
  }

  // string max_instance_size = 5;
  if (this->max_instance_size().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->max_instance_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.RuleConf)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuleConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.RuleConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.RuleConf)
    MergeFrom(*source);
  }
}

void RuleConf::MergeFrom(const RuleConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.RuleConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ice_addr().size() > 0) {
    set_ice_addr(from.ice_addr());
  }
  if (from.zookeeper_servers().size() > 0) {
    set_zookeeper_servers(from.zookeeper_servers());
  }
  if (from.iplib_path().size() > 0) {
    set_iplib_path(from.iplib_path());
  }
  if (from.config_path().size() > 0) {
    set_config_path(from.config_path());
  }
  if (from.max_instance_size().size() > 0) {
    set_max_instance_size(from.max_instance_size());
  }
}

void RuleConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.RuleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleConf::CopyFrom(const RuleConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.RuleConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleConf::IsInitialized() const {
  return true;
}

void RuleConf::Swap(RuleConf* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RuleConf* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RuleConf::UnsafeArenaSwap(RuleConf* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RuleConf::InternalSwap(RuleConf* other) {
  ice_addr_.Swap(&other->ice_addr_);
  zookeeper_servers_.Swap(&other->zookeeper_servers_);
  iplib_path_.Swap(&other->iplib_path_);
  config_path_.Swap(&other->config_path_);
  max_instance_size_.Swap(&other->max_instance_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuleConf::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[35];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuleConf

// string ice_addr = 1;
void RuleConf::clear_ice_addr() {
  ice_addr_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleConf::ice_addr() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
  return ice_addr_.Get();
}
void RuleConf::set_ice_addr(const ::std::string& value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}
void RuleConf::set_ice_addr(const char* value) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}
void RuleConf::set_ice_addr(const char* value,
    size_t size) {
  
  ice_addr_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}
::std::string* RuleConf::mutable_ice_addr() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
  return ice_addr_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::release_ice_addr() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
  
  return ice_addr_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::unsafe_arena_release_ice_addr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ice_addr_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleConf::set_allocated_ice_addr(::std::string* ice_addr) {
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ice_addr,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}
void RuleConf::unsafe_arena_set_allocated_ice_addr(
    ::std::string* ice_addr) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ice_addr != NULL) {
    
  } else {
    
  }
  ice_addr_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ice_addr, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.ice_addr)
}

// string zookeeper_servers = 2;
void RuleConf::clear_zookeeper_servers() {
  zookeeper_servers_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleConf::zookeeper_servers() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
  return zookeeper_servers_.Get();
}
void RuleConf::set_zookeeper_servers(const ::std::string& value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}
void RuleConf::set_zookeeper_servers(const char* value) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}
void RuleConf::set_zookeeper_servers(const char* value,
    size_t size) {
  
  zookeeper_servers_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}
::std::string* RuleConf::mutable_zookeeper_servers() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
  return zookeeper_servers_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::release_zookeeper_servers() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
  
  return zookeeper_servers_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::unsafe_arena_release_zookeeper_servers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return zookeeper_servers_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleConf::set_allocated_zookeeper_servers(::std::string* zookeeper_servers) {
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zookeeper_servers,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}
void RuleConf::unsafe_arena_set_allocated_zookeeper_servers(
    ::std::string* zookeeper_servers) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (zookeeper_servers != NULL) {
    
  } else {
    
  }
  zookeeper_servers_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      zookeeper_servers, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.zookeeper_servers)
}

// string iplib_path = 3;
void RuleConf::clear_iplib_path() {
  iplib_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleConf::iplib_path() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
  return iplib_path_.Get();
}
void RuleConf::set_iplib_path(const ::std::string& value) {
  
  iplib_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}
void RuleConf::set_iplib_path(const char* value) {
  
  iplib_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}
void RuleConf::set_iplib_path(const char* value,
    size_t size) {
  
  iplib_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}
::std::string* RuleConf::mutable_iplib_path() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
  return iplib_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::release_iplib_path() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
  
  return iplib_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::unsafe_arena_release_iplib_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return iplib_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleConf::set_allocated_iplib_path(::std::string* iplib_path) {
  if (iplib_path != NULL) {
    
  } else {
    
  }
  iplib_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iplib_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}
void RuleConf::unsafe_arena_set_allocated_iplib_path(
    ::std::string* iplib_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (iplib_path != NULL) {
    
  } else {
    
  }
  iplib_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      iplib_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.iplib_path)
}

// string config_path = 4;
void RuleConf::clear_config_path() {
  config_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleConf::config_path() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
  return config_path_.Get();
}
void RuleConf::set_config_path(const ::std::string& value) {
  
  config_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}
void RuleConf::set_config_path(const char* value) {
  
  config_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}
void RuleConf::set_config_path(const char* value,
    size_t size) {
  
  config_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}
::std::string* RuleConf::mutable_config_path() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
  return config_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::release_config_path() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
  
  return config_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::unsafe_arena_release_config_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return config_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleConf::set_allocated_config_path(::std::string* config_path) {
  if (config_path != NULL) {
    
  } else {
    
  }
  config_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}
void RuleConf::unsafe_arena_set_allocated_config_path(
    ::std::string* config_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (config_path != NULL) {
    
  } else {
    
  }
  config_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      config_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.config_path)
}

// string max_instance_size = 5;
void RuleConf::clear_max_instance_size() {
  max_instance_size_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RuleConf::max_instance_size() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
  return max_instance_size_.Get();
}
void RuleConf::set_max_instance_size(const ::std::string& value) {
  
  max_instance_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}
void RuleConf::set_max_instance_size(const char* value) {
  
  max_instance_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}
void RuleConf::set_max_instance_size(const char* value,
    size_t size) {
  
  max_instance_size_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}
::std::string* RuleConf::mutable_max_instance_size() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
  return max_instance_size_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::release_max_instance_size() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
  
  return max_instance_size_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RuleConf::unsafe_arena_release_max_instance_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return max_instance_size_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RuleConf::set_allocated_max_instance_size(::std::string* max_instance_size) {
  if (max_instance_size != NULL) {
    
  } else {
    
  }
  max_instance_size_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), max_instance_size,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}
void RuleConf::unsafe_arena_set_allocated_max_instance_size(
    ::std::string* max_instance_size) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (max_instance_size != NULL) {
    
  } else {
    
  }
  max_instance_size_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      max_instance_size, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConf.max_instance_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RuleConfRsp::_slow_mutable_response() {
  response_ = ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
      GetArenaNoVirtual());
}
::com::fsmeeting::fsp::proto::common::CommonResponse* RuleConfRsp::_slow_release_response() {
  if (response_ == NULL) {
    return NULL;
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*response_);
    response_ = NULL;
    return temp;
  }
}
::com::fsmeeting::fsp::proto::common::CommonResponse* RuleConfRsp::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
  
  ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
  response_ = NULL;
  return temp;
}
void RuleConfRsp::_slow_set_allocated_response(
    ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*response) == NULL) {
      message_arena->Own(*response);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*response)) {
      ::com::fsmeeting::fsp::proto::common::CommonResponse* new_response = 
            ::google::protobuf::Arena::CreateMessage< ::com::fsmeeting::fsp::proto::common::CommonResponse >(
            message_arena);
      new_response->CopyFrom(**response);
      *response = new_response;
    }
}
void RuleConfRsp::unsafe_arena_set_allocated_response(
    ::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  if (GetArenaNoVirtual() == NULL) {
    delete response_;
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RuleConfRsp::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RuleConfRsp::RuleConfRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fsp_2dsmd_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
}
RuleConfRsp::RuleConfRsp(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
}
RuleConfRsp::RuleConfRsp(const RuleConfRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    response_ = new ::com::fsmeeting::fsp::proto::common::CommonResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
}

void RuleConfRsp::SharedCtor() {
  response_ = NULL;
  _cached_size_ = 0;
}

RuleConfRsp::~RuleConfRsp() {
  // @@protoc_insertion_point(destructor:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  SharedDtor();
}

void RuleConfRsp::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  if (this != internal_default_instance()) {
    delete response_;
  }
}

void RuleConfRsp::ArenaDtor(void* object) {
  RuleConfRsp* _this = reinterpret_cast< RuleConfRsp* >(object);
  (void)_this;
}
void RuleConfRsp::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RuleConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuleConfRsp::descriptor() {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[36].descriptor;
}

const RuleConfRsp& RuleConfRsp::default_instance() {
  protobuf_fsp_2dsmd_2eproto::InitDefaults();
  return *internal_default_instance();
}

RuleConfRsp* RuleConfRsp::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RuleConfRsp>(arena);
}

void RuleConfRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}

bool RuleConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  return false;
#undef DO_
}

void RuleConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
}

::google::protobuf::uint8* RuleConfRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  return target;
}

size_t RuleConfRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  size_t total_size = 0;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuleConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const RuleConfRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RuleConfRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
    MergeFrom(*source);
  }
}

void RuleConfRsp::MergeFrom(const RuleConfRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_response()) {
    mutable_response()->::com::fsmeeting::fsp::proto::common::CommonResponse::MergeFrom(from.response());
  }
}

void RuleConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuleConfRsp::CopyFrom(const RuleConfRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.fsmeeting.fsp.proto.smd.RuleConfRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuleConfRsp::IsInitialized() const {
  return true;
}

void RuleConfRsp::Swap(RuleConfRsp* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RuleConfRsp* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RuleConfRsp::UnsafeArenaSwap(RuleConfRsp* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RuleConfRsp::InternalSwap(RuleConfRsp* other) {
  std::swap(response_, other->response_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RuleConfRsp::GetMetadata() const {
  protobuf_fsp_2dsmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fsp_2dsmd_2eproto::file_level_metadata[36];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RuleConfRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
bool RuleConfRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void RuleConfRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::com::fsmeeting::fsp::proto::common::CommonResponse& RuleConfRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
::com::fsmeeting::fsp::proto::common::CommonResponse* RuleConfRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
  return response_;
}
::com::fsmeeting::fsp::proto::common::CommonResponse* RuleConfRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
 void RuleConfRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.smd.RuleConfRsp.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace smd
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

// @@protoc_insertion_point(global_scope)
