// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsp-cp.proto

#ifndef PROTOBUF_fsp_2dcp_2eproto__INCLUDED
#define PROTOBUF_fsp_2dcp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fsp-common.pb.h"
// @@protoc_insertion_point(includes)
namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace common {
class BillInfo;
class BillInfoDefaultTypeInternal;
extern BillInfoDefaultTypeInternal _BillInfo_default_instance_;
class BroadcastInfo;
class BroadcastInfoDefaultTypeInternal;
extern BroadcastInfoDefaultTypeInternal _BroadcastInfo_default_instance_;
class CommonInfo;
class CommonInfoDefaultTypeInternal;
extern CommonInfoDefaultTypeInternal _CommonInfo_default_instance_;
class CommonInvokeInfo;
class CommonInvokeInfoDefaultTypeInternal;
extern CommonInvokeInfoDefaultTypeInternal _CommonInvokeInfo_default_instance_;
class CommonResponse;
class CommonResponseDefaultTypeInternal;
extern CommonResponseDefaultTypeInternal _CommonResponse_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupServer;
class GroupServerDefaultTypeInternal;
extern GroupServerDefaultTypeInternal _GroupServer_default_instance_;
class NotifyStreamDestroied;
class NotifyStreamDestroiedDefaultTypeInternal;
extern NotifyStreamDestroiedDefaultTypeInternal _NotifyStreamDestroied_default_instance_;
class NotifyStreamDestroiedRsp;
class NotifyStreamDestroiedRspDefaultTypeInternal;
extern NotifyStreamDestroiedRspDefaultTypeInternal _NotifyStreamDestroiedRsp_default_instance_;
class Proxy;
class ProxyDefaultTypeInternal;
extern ProxyDefaultTypeInternal _Proxy_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamData;
class StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class StreamServer;
class StreamServerDefaultTypeInternal;
extern StreamServerDefaultTypeInternal _StreamServer_default_instance_;
class StreamSourceChanged;
class StreamSourceChangedDefaultTypeInternal;
extern StreamSourceChangedDefaultTypeInternal _StreamSourceChanged_default_instance_;
class StreamSourceChangedRsp;
class StreamSourceChangedRspDefaultTypeInternal;
extern StreamSourceChangedRspDefaultTypeInternal _StreamSourceChangedRsp_default_instance_;
}  // namespace common
namespace cp {
class GetStream;
class GetStreamDefaultTypeInternal;
extern GetStreamDefaultTypeInternal _GetStream_default_instance_;
class GetStreamRsp;
class GetStreamRspDefaultTypeInternal;
extern GetStreamRspDefaultTypeInternal _GetStreamRsp_default_instance_;
class GetStreamServers;
class GetStreamServersDefaultTypeInternal;
extern GetStreamServersDefaultTypeInternal _GetStreamServers_default_instance_;
class GetStreamServersRsp;
class GetStreamServersRspDefaultTypeInternal;
extern GetStreamServersRspDefaultTypeInternal _GetStreamServersRsp_default_instance_;
class JoinGroup;
class JoinGroupDefaultTypeInternal;
extern JoinGroupDefaultTypeInternal _JoinGroup_default_instance_;
class JoinGroupRsp;
class JoinGroupRspDefaultTypeInternal;
extern JoinGroupRspDefaultTypeInternal _JoinGroupRsp_default_instance_;
class Login;
class LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class LoginRsp;
class LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class Logout;
class LogoutDefaultTypeInternal;
extern LogoutDefaultTypeInternal _Logout_default_instance_;
class LogoutRsp;
class LogoutRspDefaultTypeInternal;
extern LogoutRspDefaultTypeInternal _LogoutRsp_default_instance_;
class NotifyPublishStream;
class NotifyPublishStreamDefaultTypeInternal;
extern NotifyPublishStreamDefaultTypeInternal _NotifyPublishStream_default_instance_;
class NotifyPublishStreamRsp;
class NotifyPublishStreamRspDefaultTypeInternal;
extern NotifyPublishStreamRspDefaultTypeInternal _NotifyPublishStreamRsp_default_instance_;
class NotifyStreamPublished;
class NotifyStreamPublishedDefaultTypeInternal;
extern NotifyStreamPublishedDefaultTypeInternal _NotifyStreamPublished_default_instance_;
class NotifyStreamPublishedRsp;
class NotifyStreamPublishedRspDefaultTypeInternal;
extern NotifyStreamPublishedRspDefaultTypeInternal _NotifyStreamPublishedRsp_default_instance_;
class NotifyStreamSendingStart;
class NotifyStreamSendingStartDefaultTypeInternal;
extern NotifyStreamSendingStartDefaultTypeInternal _NotifyStreamSendingStart_default_instance_;
class NotifyStreamSendingStartRsp;
class NotifyStreamSendingStartRspDefaultTypeInternal;
extern NotifyStreamSendingStartRspDefaultTypeInternal _NotifyStreamSendingStartRsp_default_instance_;
class NotifyStreamSendingStop;
class NotifyStreamSendingStopDefaultTypeInternal;
extern NotifyStreamSendingStopDefaultTypeInternal _NotifyStreamSendingStop_default_instance_;
class NotifyStreamSendingStopRsp;
class NotifyStreamSendingStopRspDefaultTypeInternal;
extern NotifyStreamSendingStopRspDefaultTypeInternal _NotifyStreamSendingStopRsp_default_instance_;
class PublishStream;
class PublishStreamDefaultTypeInternal;
extern PublishStreamDefaultTypeInternal _PublishStream_default_instance_;
class PublishStreamRsp;
class PublishStreamRspDefaultTypeInternal;
extern PublishStreamRspDefaultTypeInternal _PublishStreamRsp_default_instance_;
class QuitGroup;
class QuitGroupDefaultTypeInternal;
extern QuitGroupDefaultTypeInternal _QuitGroup_default_instance_;
class QuitGroupRsp;
class QuitGroupRspDefaultTypeInternal;
extern QuitGroupRspDefaultTypeInternal _QuitGroupRsp_default_instance_;
class SelectStreamServer;
class SelectStreamServerDefaultTypeInternal;
extern SelectStreamServerDefaultTypeInternal _SelectStreamServer_default_instance_;
class SelectStreamServerRsp;
class SelectStreamServerRspDefaultTypeInternal;
extern SelectStreamServerRspDefaultTypeInternal _SelectStreamServerRsp_default_instance_;
class StreamSendingStart;
class StreamSendingStartDefaultTypeInternal;
extern StreamSendingStartDefaultTypeInternal _StreamSendingStart_default_instance_;
class StreamSendingStartRsp;
class StreamSendingStartRspDefaultTypeInternal;
extern StreamSendingStartRspDefaultTypeInternal _StreamSendingStartRsp_default_instance_;
class UnPublishStream;
class UnPublishStreamDefaultTypeInternal;
extern UnPublishStreamDefaultTypeInternal _UnPublishStream_default_instance_;
class UnPublishStreamRsp;
class UnPublishStreamRspDefaultTypeInternal;
extern UnPublishStreamRspDefaultTypeInternal _UnPublishStreamRsp_default_instance_;
}  // namespace cp
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

namespace com {
namespace fsmeeting {
namespace fsp {
namespace proto {
namespace cp {

namespace protobuf_fsp_2dcp_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fsp_2dcp_2eproto

enum ProtoDictionary {
  Enum2UnknownInterface = 0,
  Enum2Login = 2000,
  Enum2LoginRsp = 2001,
  Enum2Logout = 2002,
  Enum2LogoutRsp = 2003,
  Enum2PublishStream = 2004,
  Enum2PublishStreamRsp = 2005,
  Enum2UnPublishStream = 2006,
  Enum2UnPublishStreamRsp = 2007,
  Enum2GetStreamServers = 2008,
  Enum2GetStreamServersRsp = 2009,
  Enum2StreamSendingStart = 2010,
  Enum2StreamSendingStartRsp = 2011,
  Enum2JoinGroup = 2012,
  Enum2JoinGroupRsp = 2013,
  Enum2QuitGroup = 2014,
  Enum2QuitGroupRsp = 2015,
  Enum2GetStream = 2016,
  Enum2GetStreamRsp = 2017,
  Enum2NotifyStreamPublished = 2018,
  Enum2NotifyStreamPublishedRsp = 2019,
  Enum2SelectStreamServer = 2020,
  Enum2SelectStreamServerRsp = 2021,
  Enum2NotifyStreamSendingStart = 2022,
  Enum2NotifyStreamSendingStartRsp = 2023,
  Enum2NotifyStreamSendingStop = 2024,
  Enum2NotifyStreamSendingStopRsp = 2025,
  Enum2NotifyPublishStream = 2026,
  Enum2NotifyPublishStreamRsp = 2027,
  ProtoDictionary_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ProtoDictionary_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ProtoDictionary_IsValid(int value);
const ProtoDictionary ProtoDictionary_MIN = Enum2UnknownInterface;
const ProtoDictionary ProtoDictionary_MAX = Enum2NotifyPublishStreamRsp;
const int ProtoDictionary_ARRAYSIZE = ProtoDictionary_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtoDictionary_descriptor();
inline const ::std::string& ProtoDictionary_Name(ProtoDictionary value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtoDictionary_descriptor(), value);
}
inline bool ProtoDictionary_Parse(
    const ::std::string& name, ProtoDictionary* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtoDictionary>(
    ProtoDictionary_descriptor(), name, value);
}
// ===================================================================

class Login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }

  void UnsafeArenaSwap(Login* other);
  void Swap(Login* other);

  // implements Message ----------------------------------------------

  inline Login* New() const PROTOBUF_FINAL { return New(NULL); }

  Login* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Login* other);
  protected:
  explicit Login(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_token = 1;
  void clear_client_token();
  static const int kClientTokenFieldNumber = 1;
  const ::std::string& client_token() const;
  void set_client_token(const ::std::string& value);
  void set_client_token(const char* value);
  void set_client_token(const char* value, size_t size);
  ::std::string* mutable_client_token();
  ::std::string* release_client_token();
  void set_allocated_client_token(::std::string* client_token);
  ::std::string* unsafe_arena_release_client_token();
  void unsafe_arena_set_allocated_client_token(
      ::std::string* client_token);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.Login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_token_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.LoginRsp) */ {
 public:
  LoginRsp();
  virtual ~LoginRsp();

  LoginRsp(const LoginRsp& from);

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRsp& default_instance();

  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }

  void UnsafeArenaSwap(LoginRsp* other);
  void Swap(LoginRsp* other);

  // implements Message ----------------------------------------------

  inline LoginRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LoginRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LoginRsp& from);
  void MergeFrom(const LoginRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LoginRsp* other);
  protected:
  explicit LoginRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.LoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Logout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.Logout) */ {
 public:
  Logout();
  virtual ~Logout();

  Logout(const Logout& from);

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logout& default_instance();

  static inline const Logout* internal_default_instance() {
    return reinterpret_cast<const Logout*>(
               &_Logout_default_instance_);
  }

  void UnsafeArenaSwap(Logout* other);
  void Swap(Logout* other);

  // implements Message ----------------------------------------------

  inline Logout* New() const PROTOBUF_FINAL { return New(NULL); }

  Logout* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Logout* other);
  protected:
  explicit Logout(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_token = 1;
  void clear_client_token();
  static const int kClientTokenFieldNumber = 1;
  const ::std::string& client_token() const;
  void set_client_token(const ::std::string& value);
  void set_client_token(const char* value);
  void set_client_token(const char* value, size_t size);
  ::std::string* mutable_client_token();
  ::std::string* release_client_token();
  void set_allocated_client_token(::std::string* client_token);
  ::std::string* unsafe_arena_release_client_token();
  void unsafe_arena_set_allocated_client_token(
      ::std::string* client_token);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.Logout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_token_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.LogoutRsp) */ {
 public:
  LogoutRsp();
  virtual ~LogoutRsp();

  LogoutRsp(const LogoutRsp& from);

  inline LogoutRsp& operator=(const LogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRsp& default_instance();

  static inline const LogoutRsp* internal_default_instance() {
    return reinterpret_cast<const LogoutRsp*>(
               &_LogoutRsp_default_instance_);
  }

  void UnsafeArenaSwap(LogoutRsp* other);
  void Swap(LogoutRsp* other);

  // implements Message ----------------------------------------------

  inline LogoutRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutRsp& from);
  void MergeFrom(const LogoutRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutRsp* other);
  protected:
  explicit LogoutRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.LogoutRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublishStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.PublishStream) */ {
 public:
  PublishStream();
  virtual ~PublishStream();

  PublishStream(const PublishStream& from);

  inline PublishStream& operator=(const PublishStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishStream& default_instance();

  static inline const PublishStream* internal_default_instance() {
    return reinterpret_cast<const PublishStream*>(
               &_PublishStream_default_instance_);
  }

  void UnsafeArenaSwap(PublishStream* other);
  void Swap(PublishStream* other);

  // implements Message ----------------------------------------------

  inline PublishStream* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishStream& from);
  void MergeFrom(const PublishStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishStream* other);
  protected:
  explicit PublishStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string stream_publish_token = 2;
  void clear_stream_publish_token();
  static const int kStreamPublishTokenFieldNumber = 2;
  const ::std::string& stream_publish_token() const;
  void set_stream_publish_token(const ::std::string& value);
  void set_stream_publish_token(const char* value);
  void set_stream_publish_token(const char* value, size_t size);
  ::std::string* mutable_stream_publish_token();
  ::std::string* release_stream_publish_token();
  void set_allocated_stream_publish_token(::std::string* stream_publish_token);
  ::std::string* unsafe_arena_release_stream_publish_token();
  void unsafe_arena_set_allocated_stream_publish_token(
      ::std::string* stream_publish_token);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.PublishStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_publish_token_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PublishStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.PublishStreamRsp) */ {
 public:
  PublishStreamRsp();
  virtual ~PublishStreamRsp();

  PublishStreamRsp(const PublishStreamRsp& from);

  inline PublishStreamRsp& operator=(const PublishStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishStreamRsp& default_instance();

  static inline const PublishStreamRsp* internal_default_instance() {
    return reinterpret_cast<const PublishStreamRsp*>(
               &_PublishStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(PublishStreamRsp* other);
  void Swap(PublishStreamRsp* other);

  // implements Message ----------------------------------------------

  inline PublishStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishStreamRsp& from);
  void MergeFrom(const PublishStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishStreamRsp* other);
  protected:
  explicit PublishStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.PublishStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnPublishStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.UnPublishStream) */ {
 public:
  UnPublishStream();
  virtual ~UnPublishStream();

  UnPublishStream(const UnPublishStream& from);

  inline UnPublishStream& operator=(const UnPublishStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnPublishStream& default_instance();

  static inline const UnPublishStream* internal_default_instance() {
    return reinterpret_cast<const UnPublishStream*>(
               &_UnPublishStream_default_instance_);
  }

  void UnsafeArenaSwap(UnPublishStream* other);
  void Swap(UnPublishStream* other);

  // implements Message ----------------------------------------------

  inline UnPublishStream* New() const PROTOBUF_FINAL { return New(NULL); }

  UnPublishStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnPublishStream& from);
  void MergeFrom(const UnPublishStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnPublishStream* other);
  protected:
  explicit UnPublishStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.UnPublishStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnPublishStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp) */ {
 public:
  UnPublishStreamRsp();
  virtual ~UnPublishStreamRsp();

  UnPublishStreamRsp(const UnPublishStreamRsp& from);

  inline UnPublishStreamRsp& operator=(const UnPublishStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnPublishStreamRsp& default_instance();

  static inline const UnPublishStreamRsp* internal_default_instance() {
    return reinterpret_cast<const UnPublishStreamRsp*>(
               &_UnPublishStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(UnPublishStreamRsp* other);
  void Swap(UnPublishStreamRsp* other);

  // implements Message ----------------------------------------------

  inline UnPublishStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  UnPublishStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnPublishStreamRsp& from);
  void MergeFrom(const UnPublishStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnPublishStreamRsp* other);
  protected:
  explicit UnPublishStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamServers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.GetStreamServers) */ {
 public:
  GetStreamServers();
  virtual ~GetStreamServers();

  GetStreamServers(const GetStreamServers& from);

  inline GetStreamServers& operator=(const GetStreamServers& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamServers& default_instance();

  static inline const GetStreamServers* internal_default_instance() {
    return reinterpret_cast<const GetStreamServers*>(
               &_GetStreamServers_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamServers* other);
  void Swap(GetStreamServers* other);

  // implements Message ----------------------------------------------

  inline GetStreamServers* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamServers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamServers& from);
  void MergeFrom(const GetStreamServers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamServers* other);
  protected:
  explicit GetStreamServers(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string exception_servers = 3;
  int exception_servers_size() const;
  void clear_exception_servers();
  static const int kExceptionServersFieldNumber = 3;
  const ::std::string& exception_servers(int index) const;
  ::std::string* mutable_exception_servers(int index);
  void set_exception_servers(int index, const ::std::string& value);
  void set_exception_servers(int index, const char* value);
  void set_exception_servers(int index, const char* value, size_t size);
  ::std::string* add_exception_servers();
  void add_exception_servers(const ::std::string& value);
  void add_exception_servers(const char* value);
  void add_exception_servers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& exception_servers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_exception_servers();

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string stream_subscribe_token = 2;
  void clear_stream_subscribe_token();
  static const int kStreamSubscribeTokenFieldNumber = 2;
  const ::std::string& stream_subscribe_token() const;
  void set_stream_subscribe_token(const ::std::string& value);
  void set_stream_subscribe_token(const char* value);
  void set_stream_subscribe_token(const char* value, size_t size);
  ::std::string* mutable_stream_subscribe_token();
  ::std::string* release_stream_subscribe_token();
  void set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token);
  ::std::string* unsafe_arena_release_stream_subscribe_token();
  void unsafe_arena_set_allocated_stream_subscribe_token(
      ::std::string* stream_subscribe_token);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.GetStreamServers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> exception_servers_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_subscribe_token_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamServersRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp) */ {
 public:
  GetStreamServersRsp();
  virtual ~GetStreamServersRsp();

  GetStreamServersRsp(const GetStreamServersRsp& from);

  inline GetStreamServersRsp& operator=(const GetStreamServersRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamServersRsp& default_instance();

  static inline const GetStreamServersRsp* internal_default_instance() {
    return reinterpret_cast<const GetStreamServersRsp*>(
               &_GetStreamServersRsp_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamServersRsp* other);
  void Swap(GetStreamServersRsp* other);

  // implements Message ----------------------------------------------

  inline GetStreamServersRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamServersRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamServersRsp& from);
  void MergeFrom(const GetStreamServersRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamServersRsp* other);
  protected:
  explicit GetStreamServersRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
  int streamservers_size() const;
  void clear_streamservers();
  static const int kStreamServersFieldNumber = 2;
  const ::com::fsmeeting::fsp::proto::common::StreamServer& streamservers(int index) const;
  ::com::fsmeeting::fsp::proto::common::StreamServer* mutable_streamservers(int index);
  ::com::fsmeeting::fsp::proto::common::StreamServer* add_streamservers();
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
      mutable_streamservers();
  const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
      streamservers() const;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer > streamservers_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamSendingStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.StreamSendingStart) */ {
 public:
  StreamSendingStart();
  virtual ~StreamSendingStart();

  StreamSendingStart(const StreamSendingStart& from);

  inline StreamSendingStart& operator=(const StreamSendingStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSendingStart& default_instance();

  static inline const StreamSendingStart* internal_default_instance() {
    return reinterpret_cast<const StreamSendingStart*>(
               &_StreamSendingStart_default_instance_);
  }

  void UnsafeArenaSwap(StreamSendingStart* other);
  void Swap(StreamSendingStart* other);

  // implements Message ----------------------------------------------

  inline StreamSendingStart* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSendingStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSendingStart& from);
  void MergeFrom(const StreamSendingStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSendingStart* other);
  protected:
  explicit StreamSendingStart(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 2;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 2;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.StreamSendingStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StreamSendingStartRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp) */ {
 public:
  StreamSendingStartRsp();
  virtual ~StreamSendingStartRsp();

  StreamSendingStartRsp(const StreamSendingStartRsp& from);

  inline StreamSendingStartRsp& operator=(const StreamSendingStartRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamSendingStartRsp& default_instance();

  static inline const StreamSendingStartRsp* internal_default_instance() {
    return reinterpret_cast<const StreamSendingStartRsp*>(
               &_StreamSendingStartRsp_default_instance_);
  }

  void UnsafeArenaSwap(StreamSendingStartRsp* other);
  void Swap(StreamSendingStartRsp* other);

  // implements Message ----------------------------------------------

  inline StreamSendingStartRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamSendingStartRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamSendingStartRsp& from);
  void MergeFrom(const StreamSendingStartRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamSendingStartRsp* other);
  protected:
  explicit StreamSendingStartRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.JoinGroup) */ {
 public:
  JoinGroup();
  virtual ~JoinGroup();

  JoinGroup(const JoinGroup& from);

  inline JoinGroup& operator=(const JoinGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGroup& default_instance();

  static inline const JoinGroup* internal_default_instance() {
    return reinterpret_cast<const JoinGroup*>(
               &_JoinGroup_default_instance_);
  }

  void UnsafeArenaSwap(JoinGroup* other);
  void Swap(JoinGroup* other);

  // implements Message ----------------------------------------------

  inline JoinGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinGroup& from);
  void MergeFrom(const JoinGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGroup* other);
  protected:
  explicit JoinGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string group_token = 3;
  void clear_group_token();
  static const int kGroupTokenFieldNumber = 3;
  const ::std::string& group_token() const;
  void set_group_token(const ::std::string& value);
  void set_group_token(const char* value);
  void set_group_token(const char* value, size_t size);
  ::std::string* mutable_group_token();
  ::std::string* release_group_token();
  void set_allocated_group_token(::std::string* group_token);
  ::std::string* unsafe_arena_release_group_token();
  void unsafe_arena_set_allocated_group_token(
      ::std::string* group_token);

  // string group_check_code = 4;
  void clear_group_check_code();
  static const int kGroupCheckCodeFieldNumber = 4;
  const ::std::string& group_check_code() const;
  void set_group_check_code(const ::std::string& value);
  void set_group_check_code(const char* value);
  void set_group_check_code(const char* value, size_t size);
  ::std::string* mutable_group_check_code();
  ::std::string* release_group_check_code();
  void set_allocated_group_check_code(::std::string* group_check_code);
  ::std::string* unsafe_arena_release_group_check_code();
  void unsafe_arena_set_allocated_group_check_code(
      ::std::string* group_check_code);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.JoinGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr group_token_;
  ::google::protobuf::internal::ArenaStringPtr group_check_code_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JoinGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.JoinGroupRsp) */ {
 public:
  JoinGroupRsp();
  virtual ~JoinGroupRsp();

  JoinGroupRsp(const JoinGroupRsp& from);

  inline JoinGroupRsp& operator=(const JoinGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinGroupRsp& default_instance();

  static inline const JoinGroupRsp* internal_default_instance() {
    return reinterpret_cast<const JoinGroupRsp*>(
               &_JoinGroupRsp_default_instance_);
  }

  void UnsafeArenaSwap(JoinGroupRsp* other);
  void Swap(JoinGroupRsp* other);

  // implements Message ----------------------------------------------

  inline JoinGroupRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  JoinGroupRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const JoinGroupRsp& from);
  void MergeFrom(const JoinGroupRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(JoinGroupRsp* other);
  protected:
  explicit JoinGroupRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.JoinGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuitGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.QuitGroup) */ {
 public:
  QuitGroup();
  virtual ~QuitGroup();

  QuitGroup(const QuitGroup& from);

  inline QuitGroup& operator=(const QuitGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitGroup& default_instance();

  static inline const QuitGroup* internal_default_instance() {
    return reinterpret_cast<const QuitGroup*>(
               &_QuitGroup_default_instance_);
  }

  void UnsafeArenaSwap(QuitGroup* other);
  void Swap(QuitGroup* other);

  // implements Message ----------------------------------------------

  inline QuitGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  QuitGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuitGroup& from);
  void MergeFrom(const QuitGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuitGroup* other);
  protected:
  explicit QuitGroup(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.QuitGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuitGroupRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.QuitGroupRsp) */ {
 public:
  QuitGroupRsp();
  virtual ~QuitGroupRsp();

  QuitGroupRsp(const QuitGroupRsp& from);

  inline QuitGroupRsp& operator=(const QuitGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuitGroupRsp& default_instance();

  static inline const QuitGroupRsp* internal_default_instance() {
    return reinterpret_cast<const QuitGroupRsp*>(
               &_QuitGroupRsp_default_instance_);
  }

  void UnsafeArenaSwap(QuitGroupRsp* other);
  void Swap(QuitGroupRsp* other);

  // implements Message ----------------------------------------------

  inline QuitGroupRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  QuitGroupRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuitGroupRsp& from);
  void MergeFrom(const QuitGroupRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuitGroupRsp* other);
  protected:
  explicit QuitGroupRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.QuitGroupRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.GetStream) */ {
 public:
  GetStream();
  virtual ~GetStream();

  GetStream(const GetStream& from);

  inline GetStream& operator=(const GetStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStream& default_instance();

  static inline const GetStream* internal_default_instance() {
    return reinterpret_cast<const GetStream*>(
               &_GetStream_default_instance_);
  }

  void UnsafeArenaSwap(GetStream* other);
  void Swap(GetStream* other);

  // implements Message ----------------------------------------------

  inline GetStream* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStream& from);
  void MergeFrom(const GetStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStream* other);
  protected:
  explicit GetStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string media_id = 3;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 3;
  const ::std::string& media_id() const;
  void set_media_id(const ::std::string& value);
  void set_media_id(const char* value);
  void set_media_id(const char* value, size_t size);
  ::std::string* mutable_media_id();
  ::std::string* release_media_id();
  void set_allocated_media_id(::std::string* media_id);
  ::std::string* unsafe_arena_release_media_id();
  void unsafe_arena_set_allocated_media_id(
      ::std::string* media_id);

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 4;
  ::com::fsmeeting::fsp::proto::common::MediaType media_type() const;
  void set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.GetStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr media_id_;
  int media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.GetStreamRsp) */ {
 public:
  GetStreamRsp();
  virtual ~GetStreamRsp();

  GetStreamRsp(const GetStreamRsp& from);

  inline GetStreamRsp& operator=(const GetStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamRsp& default_instance();

  static inline const GetStreamRsp* internal_default_instance() {
    return reinterpret_cast<const GetStreamRsp*>(
               &_GetStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(GetStreamRsp* other);
  void Swap(GetStreamRsp* other);

  // implements Message ----------------------------------------------

  inline GetStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GetStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetStreamRsp& from);
  void MergeFrom(const GetStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetStreamRsp* other);
  protected:
  explicit GetStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fsmeeting.fsp.proto.common.Stream stream = 2;
  int stream_size() const;
  void clear_stream();
  static const int kStreamFieldNumber = 2;
  const ::com::fsmeeting::fsp::proto::common::Stream& stream(int index) const;
  ::com::fsmeeting::fsp::proto::common::Stream* mutable_stream(int index);
  ::com::fsmeeting::fsp::proto::common::Stream* add_stream();
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::Stream >*
      mutable_stream();
  const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::Stream >&
      stream() const;

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.GetStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::Stream > stream_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamPublished : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished) */ {
 public:
  NotifyStreamPublished();
  virtual ~NotifyStreamPublished();

  NotifyStreamPublished(const NotifyStreamPublished& from);

  inline NotifyStreamPublished& operator=(const NotifyStreamPublished& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamPublished& default_instance();

  static inline const NotifyStreamPublished* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamPublished*>(
               &_NotifyStreamPublished_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamPublished* other);
  void Swap(NotifyStreamPublished* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamPublished* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamPublished* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamPublished& from);
  void MergeFrom(const NotifyStreamPublished& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamPublished* other);
  protected:
  explicit NotifyStreamPublished(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamPublishedRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp) */ {
 public:
  NotifyStreamPublishedRsp();
  virtual ~NotifyStreamPublishedRsp();

  NotifyStreamPublishedRsp(const NotifyStreamPublishedRsp& from);

  inline NotifyStreamPublishedRsp& operator=(const NotifyStreamPublishedRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamPublishedRsp& default_instance();

  static inline const NotifyStreamPublishedRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamPublishedRsp*>(
               &_NotifyStreamPublishedRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamPublishedRsp* other);
  void Swap(NotifyStreamPublishedRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamPublishedRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamPublishedRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamPublishedRsp& from);
  void MergeFrom(const NotifyStreamPublishedRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamPublishedRsp* other);
  protected:
  explicit NotifyStreamPublishedRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectStreamServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.SelectStreamServer) */ {
 public:
  SelectStreamServer();
  virtual ~SelectStreamServer();

  SelectStreamServer(const SelectStreamServer& from);

  inline SelectStreamServer& operator=(const SelectStreamServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectStreamServer& default_instance();

  static inline const SelectStreamServer* internal_default_instance() {
    return reinterpret_cast<const SelectStreamServer*>(
               &_SelectStreamServer_default_instance_);
  }

  void UnsafeArenaSwap(SelectStreamServer* other);
  void Swap(SelectStreamServer* other);

  // implements Message ----------------------------------------------

  inline SelectStreamServer* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectStreamServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectStreamServer& from);
  void MergeFrom(const SelectStreamServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectStreamServer* other);
  protected:
  explicit SelectStreamServer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 3;
  int stream_server_size() const;
  void clear_stream_server();
  static const int kStreamServerFieldNumber = 3;
  const ::com::fsmeeting::fsp::proto::common::StreamServer& stream_server(int index) const;
  ::com::fsmeeting::fsp::proto::common::StreamServer* mutable_stream_server(int index);
  ::com::fsmeeting::fsp::proto::common::StreamServer* add_stream_server();
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
      mutable_stream_server();
  const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
      stream_server() const;

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string stream_id = 2;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.SelectStreamServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer > stream_server_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SelectStreamServerRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp) */ {
 public:
  SelectStreamServerRsp();
  virtual ~SelectStreamServerRsp();

  SelectStreamServerRsp(const SelectStreamServerRsp& from);

  inline SelectStreamServerRsp& operator=(const SelectStreamServerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectStreamServerRsp& default_instance();

  static inline const SelectStreamServerRsp* internal_default_instance() {
    return reinterpret_cast<const SelectStreamServerRsp*>(
               &_SelectStreamServerRsp_default_instance_);
  }

  void UnsafeArenaSwap(SelectStreamServerRsp* other);
  void Swap(SelectStreamServerRsp* other);

  // implements Message ----------------------------------------------

  inline SelectStreamServerRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  SelectStreamServerRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SelectStreamServerRsp& from);
  void MergeFrom(const SelectStreamServerRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SelectStreamServerRsp* other);
  protected:
  explicit SelectStreamServerRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart) */ {
 public:
  NotifyStreamSendingStart();
  virtual ~NotifyStreamSendingStart();

  NotifyStreamSendingStart(const NotifyStreamSendingStart& from);

  inline NotifyStreamSendingStart& operator=(const NotifyStreamSendingStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStart& default_instance();

  static inline const NotifyStreamSendingStart* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStart*>(
               &_NotifyStreamSendingStart_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStart* other);
  void Swap(NotifyStreamSendingStart* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStart* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStart* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStart& from);
  void MergeFrom(const NotifyStreamSendingStart& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStart* other);
  protected:
  explicit NotifyStreamSendingStart(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string recv_client_id = 1;
  void clear_recv_client_id();
  static const int kRecvClientIdFieldNumber = 1;
  const ::std::string& recv_client_id() const;
  void set_recv_client_id(const ::std::string& value);
  void set_recv_client_id(const char* value);
  void set_recv_client_id(const char* value, size_t size);
  ::std::string* mutable_recv_client_id();
  ::std::string* release_recv_client_id();
  void set_allocated_recv_client_id(::std::string* recv_client_id);
  ::std::string* unsafe_arena_release_recv_client_id();
  void unsafe_arena_set_allocated_recv_client_id(
      ::std::string* recv_client_id);

  // string stream_id = 2;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string client_id = 3;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
  bool has_commoninvokeinfo() const;
  void clear_commoninvokeinfo();
  static const int kCommonInvokeInfoFieldNumber = 4;
  private:
  void _slow_mutable_commoninvokeinfo();
  void _slow_set_allocated_commoninvokeinfo(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo** commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* _slow_release_commoninvokeinfo();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& commoninvokeinfo() const;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* mutable_commoninvokeinfo();
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* release_commoninvokeinfo();
  void set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* unsafe_arena_release_commoninvokeinfo();
  void unsafe_arena_set_allocated_commoninvokeinfo(
      ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr recv_client_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStartRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp) */ {
 public:
  NotifyStreamSendingStartRsp();
  virtual ~NotifyStreamSendingStartRsp();

  NotifyStreamSendingStartRsp(const NotifyStreamSendingStartRsp& from);

  inline NotifyStreamSendingStartRsp& operator=(const NotifyStreamSendingStartRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStartRsp& default_instance();

  static inline const NotifyStreamSendingStartRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStartRsp*>(
               &_NotifyStreamSendingStartRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStartRsp* other);
  void Swap(NotifyStreamSendingStartRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStartRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStartRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStartRsp& from);
  void MergeFrom(const NotifyStreamSendingStartRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStartRsp* other);
  protected:
  explicit NotifyStreamSendingStartRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStop : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop) */ {
 public:
  NotifyStreamSendingStop();
  virtual ~NotifyStreamSendingStop();

  NotifyStreamSendingStop(const NotifyStreamSendingStop& from);

  inline NotifyStreamSendingStop& operator=(const NotifyStreamSendingStop& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStop& default_instance();

  static inline const NotifyStreamSendingStop* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStop*>(
               &_NotifyStreamSendingStop_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStop* other);
  void Swap(NotifyStreamSendingStop* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStop* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStop* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStop& from);
  void MergeFrom(const NotifyStreamSendingStop& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStop* other);
  protected:
  explicit NotifyStreamSendingStop(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string stream_id = 1;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 1;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string recv_client_id = 2;
  void clear_recv_client_id();
  static const int kRecvClientIdFieldNumber = 2;
  const ::std::string& recv_client_id() const;
  void set_recv_client_id(const ::std::string& value);
  void set_recv_client_id(const char* value);
  void set_recv_client_id(const char* value, size_t size);
  ::std::string* mutable_recv_client_id();
  ::std::string* release_recv_client_id();
  void set_allocated_recv_client_id(::std::string* recv_client_id);
  ::std::string* unsafe_arena_release_recv_client_id();
  void unsafe_arena_set_allocated_recv_client_id(
      ::std::string* recv_client_id);

  // string client_id = 3;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr recv_client_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyStreamSendingStopRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp) */ {
 public:
  NotifyStreamSendingStopRsp();
  virtual ~NotifyStreamSendingStopRsp();

  NotifyStreamSendingStopRsp(const NotifyStreamSendingStopRsp& from);

  inline NotifyStreamSendingStopRsp& operator=(const NotifyStreamSendingStopRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyStreamSendingStopRsp& default_instance();

  static inline const NotifyStreamSendingStopRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyStreamSendingStopRsp*>(
               &_NotifyStreamSendingStopRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyStreamSendingStopRsp* other);
  void Swap(NotifyStreamSendingStopRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyStreamSendingStopRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyStreamSendingStopRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyStreamSendingStopRsp& from);
  void MergeFrom(const NotifyStreamSendingStopRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyStreamSendingStopRsp* other);
  protected:
  explicit NotifyStreamSendingStopRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyPublishStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.NotifyPublishStream) */ {
 public:
  NotifyPublishStream();
  virtual ~NotifyPublishStream();

  NotifyPublishStream(const NotifyPublishStream& from);

  inline NotifyPublishStream& operator=(const NotifyPublishStream& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyPublishStream& default_instance();

  static inline const NotifyPublishStream* internal_default_instance() {
    return reinterpret_cast<const NotifyPublishStream*>(
               &_NotifyPublishStream_default_instance_);
  }

  void UnsafeArenaSwap(NotifyPublishStream* other);
  void Swap(NotifyPublishStream* other);

  // implements Message ----------------------------------------------

  inline NotifyPublishStream* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyPublishStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyPublishStream& from);
  void MergeFrom(const NotifyPublishStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyPublishStream* other);
  protected:
  explicit NotifyPublishStream(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);
  ::std::string* unsafe_arena_release_client_id();
  void unsafe_arena_set_allocated_client_id(
      ::std::string* client_id);

  // string stream_id = 2;
  void clear_stream_id();
  static const int kStreamIdFieldNumber = 2;
  const ::std::string& stream_id() const;
  void set_stream_id(const ::std::string& value);
  void set_stream_id(const char* value);
  void set_stream_id(const char* value, size_t size);
  ::std::string* mutable_stream_id();
  ::std::string* release_stream_id();
  void set_allocated_stream_id(::std::string* stream_id);
  ::std::string* unsafe_arena_release_stream_id();
  void unsafe_arena_set_allocated_stream_id(
      ::std::string* stream_id);

  // string stream_publish_token = 3;
  void clear_stream_publish_token();
  static const int kStreamPublishTokenFieldNumber = 3;
  const ::std::string& stream_publish_token() const;
  void set_stream_publish_token(const ::std::string& value);
  void set_stream_publish_token(const char* value);
  void set_stream_publish_token(const char* value, size_t size);
  ::std::string* mutable_stream_publish_token();
  ::std::string* release_stream_publish_token();
  void set_allocated_stream_publish_token(::std::string* stream_publish_token);
  ::std::string* unsafe_arena_release_stream_publish_token();
  void unsafe_arena_set_allocated_stream_publish_token(
      ::std::string* stream_publish_token);

  // string group_id = 4;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  const ::std::string& group_id() const;
  void set_group_id(const ::std::string& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  ::std::string* mutable_group_id();
  ::std::string* release_group_id();
  void set_allocated_group_id(::std::string* group_id);
  ::std::string* unsafe_arena_release_group_id();
  void unsafe_arena_set_allocated_group_id(
      ::std::string* group_id);

  // string user_id = 5;
  void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);
  ::std::string* unsafe_arena_release_user_id();
  void unsafe_arena_set_allocated_user_id(
      ::std::string* user_id);

  // string media_id = 6;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 6;
  const ::std::string& media_id() const;
  void set_media_id(const ::std::string& value);
  void set_media_id(const char* value);
  void set_media_id(const char* value, size_t size);
  ::std::string* mutable_media_id();
  ::std::string* release_media_id();
  void set_allocated_media_id(::std::string* media_id);
  ::std::string* unsafe_arena_release_media_id();
  void unsafe_arena_set_allocated_media_id(
      ::std::string* media_id);

  // .com.fsmeeting.fsp.proto.common.MediaType media_type = 7;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 7;
  ::com::fsmeeting::fsp::proto::common::MediaType media_type() const;
  void set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.NotifyPublishStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_id_;
  ::google::protobuf::internal::ArenaStringPtr stream_publish_token_;
  ::google::protobuf::internal::ArenaStringPtr group_id_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr media_id_;
  int media_type_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyPublishStreamRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp) */ {
 public:
  NotifyPublishStreamRsp();
  virtual ~NotifyPublishStreamRsp();

  NotifyPublishStreamRsp(const NotifyPublishStreamRsp& from);

  inline NotifyPublishStreamRsp& operator=(const NotifyPublishStreamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyPublishStreamRsp& default_instance();

  static inline const NotifyPublishStreamRsp* internal_default_instance() {
    return reinterpret_cast<const NotifyPublishStreamRsp*>(
               &_NotifyPublishStreamRsp_default_instance_);
  }

  void UnsafeArenaSwap(NotifyPublishStreamRsp* other);
  void Swap(NotifyPublishStreamRsp* other);

  // implements Message ----------------------------------------------

  inline NotifyPublishStreamRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyPublishStreamRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyPublishStreamRsp& from);
  void MergeFrom(const NotifyPublishStreamRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyPublishStreamRsp* other);
  protected:
  explicit NotifyPublishStreamRsp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  private:
  void _slow_mutable_response();
  void _slow_set_allocated_response(
      ::google::protobuf::Arena* message_arena, ::com::fsmeeting::fsp::proto::common::CommonResponse** response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* _slow_release_response();
  public:
  const ::com::fsmeeting::fsp::proto::common::CommonResponse& response() const;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* mutable_response();
  ::com::fsmeeting::fsp::proto::common::CommonResponse* release_response();
  void set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response);
  ::com::fsmeeting::fsp::proto::common::CommonResponse* unsafe_arena_release_response();
  void unsafe_arena_set_allocated_response(
      ::com::fsmeeting::fsp::proto::common::CommonResponse* response);

  // @@protoc_insertion_point(class_scope:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::fsmeeting::fsp::proto::common::CommonResponse* response_;
  mutable int _cached_size_;
  friend struct  protobuf_fsp_2dcp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Login

// string client_token = 1;
inline void Login::clear_client_token() {
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Login::client_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.Login.client_token)
  return client_token_.Get();
}
inline void Login::set_client_token(const ::std::string& value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.Login.client_token)
}
inline void Login::set_client_token(const char* value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.Login.client_token)
}
inline void Login::set_client_token(const char* value,
    size_t size) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.Login.client_token)
}
inline ::std::string* Login::mutable_client_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.Login.client_token)
  return client_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Login::release_client_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.Login.client_token)
  
  return client_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Login::unsafe_arena_release_client_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.Login.client_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Login::set_allocated_client_token(::std::string* client_token) {
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.Login.client_token)
}
inline void Login::unsafe_arena_set_allocated_client_token(
    ::std::string* client_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.Login.client_token)
}

// -------------------------------------------------------------------

// LoginRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool LoginRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void LoginRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& LoginRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LoginRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LoginRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void LoginRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.LoginRsp.response)
}

// -------------------------------------------------------------------

// Logout

// string client_token = 1;
inline void Logout::clear_client_token() {
  client_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Logout::client_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.Logout.client_token)
  return client_token_.Get();
}
inline void Logout::set_client_token(const ::std::string& value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}
inline void Logout::set_client_token(const char* value) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}
inline void Logout::set_client_token(const char* value,
    size_t size) {
  
  client_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}
inline ::std::string* Logout::mutable_client_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.Logout.client_token)
  return client_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Logout::release_client_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.Logout.client_token)
  
  return client_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Logout::unsafe_arena_release_client_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.Logout.client_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Logout::set_allocated_client_token(::std::string* client_token) {
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}
inline void Logout::unsafe_arena_set_allocated_client_token(
    ::std::string* client_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_token != NULL) {
    
  } else {
    
  }
  client_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.Logout.client_token)
}

// -------------------------------------------------------------------

// LogoutRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool LogoutRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void LogoutRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& LogoutRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* LogoutRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void LogoutRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.LogoutRsp.response)
}

// -------------------------------------------------------------------

// PublishStream

// string stream_id = 1;
inline void PublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
  return stream_id_.Get();
}
inline void PublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}
inline void PublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}
inline void PublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}
inline ::std::string* PublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}
inline void PublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStream.stream_id)
}

// string stream_publish_token = 2;
inline void PublishStream::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PublishStream::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
  return stream_publish_token_.Get();
}
inline void PublishStream::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}
inline void PublishStream::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}
inline void PublishStream::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}
inline ::std::string* PublishStream::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishStream::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PublishStream::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}
inline void PublishStream::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStream.stream_publish_token)
}

// -------------------------------------------------------------------

// PublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool PublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void PublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& PublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* PublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void PublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.PublishStreamRsp.response)
}

// -------------------------------------------------------------------

// UnPublishStream

// string stream_id = 1;
inline void UnPublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UnPublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
  return stream_id_.Get();
}
inline void UnPublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}
inline void UnPublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}
inline void UnPublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}
inline ::std::string* UnPublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UnPublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UnPublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UnPublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}
inline void UnPublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStream.stream_id)
}

// string client_id = 2;
inline void UnPublishStream::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& UnPublishStream::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
  return client_id_.Get();
}
inline void UnPublishStream::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}
inline void UnPublishStream::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}
inline void UnPublishStream::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}
inline ::std::string* UnPublishStream::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UnPublishStream::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* UnPublishStream::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UnPublishStream::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}
inline void UnPublishStream::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStream.client_id)
}

// -------------------------------------------------------------------

// UnPublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool UnPublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void UnPublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& UnPublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* UnPublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* UnPublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void UnPublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.UnPublishStreamRsp.response)
}

// -------------------------------------------------------------------

// GetStreamServers

// string stream_id = 1;
inline void GetStreamServers::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
  return stream_id_.Get();
}
inline void GetStreamServers::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}
inline void GetStreamServers::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}
inline void GetStreamServers::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}
inline ::std::string* GetStreamServers::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}
inline void GetStreamServers::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_id)
}

// string stream_subscribe_token = 2;
inline void GetStreamServers::clear_stream_subscribe_token() {
  stream_subscribe_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStreamServers::stream_subscribe_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
  return stream_subscribe_token_.Get();
}
inline void GetStreamServers::set_stream_subscribe_token(const ::std::string& value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}
inline void GetStreamServers::set_stream_subscribe_token(const char* value) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}
inline void GetStreamServers::set_stream_subscribe_token(const char* value,
    size_t size) {
  
  stream_subscribe_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}
inline ::std::string* GetStreamServers::mutable_stream_subscribe_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
  return stream_subscribe_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
  
  return stream_subscribe_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStreamServers::unsafe_arena_release_stream_subscribe_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_subscribe_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStreamServers::set_allocated_stream_subscribe_token(::std::string* stream_subscribe_token) {
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_subscribe_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}
inline void GetStreamServers::unsafe_arena_set_allocated_stream_subscribe_token(
    ::std::string* stream_subscribe_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_subscribe_token != NULL) {
    
  } else {
    
  }
  stream_subscribe_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_subscribe_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServers.stream_subscribe_token)
}

// repeated string exception_servers = 3;
inline int GetStreamServers::exception_servers_size() const {
  return exception_servers_.size();
}
inline void GetStreamServers::clear_exception_servers() {
  exception_servers_.Clear();
}
inline const ::std::string& GetStreamServers::exception_servers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return exception_servers_.Get(index);
}
inline ::std::string* GetStreamServers::mutable_exception_servers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return exception_servers_.Mutable(index);
}
inline void GetStreamServers::set_exception_servers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  exception_servers_.Mutable(index)->assign(value);
}
inline void GetStreamServers::set_exception_servers(int index, const char* value) {
  exception_servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
inline void GetStreamServers::set_exception_servers(int index, const char* value, size_t size) {
  exception_servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
inline ::std::string* GetStreamServers::add_exception_servers() {
  // @@protoc_insertion_point(field_add_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return exception_servers_.Add();
}
inline void GetStreamServers::add_exception_servers(const ::std::string& value) {
  exception_servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
inline void GetStreamServers::add_exception_servers(const char* value) {
  exception_servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
inline void GetStreamServers::add_exception_servers(const char* value, size_t size) {
  exception_servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetStreamServers::exception_servers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return exception_servers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetStreamServers::mutable_exception_servers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.cp.GetStreamServers.exception_servers)
  return &exception_servers_;
}

// -------------------------------------------------------------------

// GetStreamServersRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GetStreamServersRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GetStreamServersRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamServersRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamServersRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GetStreamServersRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.response)
}

// repeated .com.fsmeeting.fsp.proto.common.StreamServer streamServers = 2;
inline int GetStreamServersRsp::streamservers_size() const {
  return streamservers_.size();
}
inline void GetStreamServersRsp::clear_streamservers() {
  streamservers_.Clear();
}
inline const ::com::fsmeeting::fsp::proto::common::StreamServer& GetStreamServersRsp::streamservers(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return streamservers_.Get(index);
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* GetStreamServersRsp::mutable_streamservers(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return streamservers_.Mutable(index);
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* GetStreamServersRsp::add_streamservers() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return streamservers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
GetStreamServersRsp::mutable_streamservers() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return &streamservers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
GetStreamServersRsp::streamservers() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.cp.GetStreamServersRsp.streamServers)
  return streamservers_;
}

// -------------------------------------------------------------------

// StreamSendingStart

// string stream_id = 1;
inline void StreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
  return stream_id_.Get();
}
inline void StreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}
inline void StreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}
inline void StreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}
inline ::std::string* StreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}
inline void StreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStart.stream_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 2;
inline bool StreamSendingStart::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void StreamSendingStart::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& StreamSendingStart::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* StreamSendingStart::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void StreamSendingStart::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStart.commonInvokeInfo)
}

// -------------------------------------------------------------------

// StreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool StreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void StreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& StreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* StreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void StreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.StreamSendingStartRsp.response)
}

// -------------------------------------------------------------------

// JoinGroup

// string group_id = 1;
inline void JoinGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
  return group_id_.Get();
}
inline void JoinGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}
inline void JoinGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}
inline void JoinGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}
inline ::std::string* JoinGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}
inline void JoinGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_id)
}

// string user_id = 2;
inline void JoinGroup::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroup::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
  return user_id_.Get();
}
inline void JoinGroup::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}
inline void JoinGroup::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}
inline void JoinGroup::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}
inline ::std::string* JoinGroup::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroup::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}
inline void JoinGroup::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.user_id)
}

// string group_token = 3;
inline void JoinGroup::clear_group_token() {
  group_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroup::group_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
  return group_token_.Get();
}
inline void JoinGroup::set_group_token(const ::std::string& value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}
inline void JoinGroup::set_group_token(const char* value) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}
inline void JoinGroup::set_group_token(const char* value,
    size_t size) {
  
  group_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}
inline ::std::string* JoinGroup::mutable_group_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
  return group_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::release_group_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
  
  return group_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::unsafe_arena_release_group_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroup::set_allocated_group_token(::std::string* group_token) {
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}
inline void JoinGroup::unsafe_arena_set_allocated_group_token(
    ::std::string* group_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_token != NULL) {
    
  } else {
    
  }
  group_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_token)
}

// string group_check_code = 4;
inline void JoinGroup::clear_group_check_code() {
  group_check_code_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& JoinGroup::group_check_code() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
  return group_check_code_.Get();
}
inline void JoinGroup::set_group_check_code(const ::std::string& value) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}
inline void JoinGroup::set_group_check_code(const char* value) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}
inline void JoinGroup::set_group_check_code(const char* value,
    size_t size) {
  
  group_check_code_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}
inline ::std::string* JoinGroup::mutable_group_check_code() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
  return group_check_code_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::release_group_check_code() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
  
  return group_check_code_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* JoinGroup::unsafe_arena_release_group_check_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_check_code_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void JoinGroup::set_allocated_group_check_code(::std::string* group_check_code) {
  if (group_check_code != NULL) {
    
  } else {
    
  }
  group_check_code_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_check_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}
inline void JoinGroup::unsafe_arena_set_allocated_group_check_code(
    ::std::string* group_check_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_check_code != NULL) {
    
  } else {
    
  }
  group_check_code_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_check_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroup.group_check_code)
}

// -------------------------------------------------------------------

// JoinGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool JoinGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void JoinGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& JoinGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* JoinGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void JoinGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.JoinGroupRsp.response)
}

// -------------------------------------------------------------------

// QuitGroup

// string group_id = 1;
inline void QuitGroup::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QuitGroup::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
  return group_id_.Get();
}
inline void QuitGroup::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}
inline void QuitGroup::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}
inline void QuitGroup::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}
inline ::std::string* QuitGroup::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QuitGroup::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}
inline void QuitGroup::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroup.group_id)
}

// string user_id = 2;
inline void QuitGroup::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& QuitGroup::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
  return user_id_.Get();
}
inline void QuitGroup::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}
inline void QuitGroup::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}
inline void QuitGroup::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}
inline ::std::string* QuitGroup::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* QuitGroup::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void QuitGroup::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}
inline void QuitGroup::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroup.user_id)
}

// -------------------------------------------------------------------

// QuitGroupRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool QuitGroupRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void QuitGroupRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& QuitGroupRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* QuitGroupRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void QuitGroupRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.QuitGroupRsp.response)
}

// -------------------------------------------------------------------

// GetStream

// string group_id = 1;
inline void GetStream::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStream::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
  return group_id_.Get();
}
inline void GetStream::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}
inline void GetStream::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}
inline void GetStream::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}
inline ::std::string* GetStream::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStream::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}
inline void GetStream::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.group_id)
}

// string user_id = 2;
inline void GetStream::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStream::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
  return user_id_.Get();
}
inline void GetStream::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}
inline void GetStream::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}
inline void GetStream::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}
inline ::std::string* GetStream::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStream::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}
inline void GetStream::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.user_id)
}

// string media_id = 3;
inline void GetStream::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetStream::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
  return media_id_.Get();
}
inline void GetStream::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}
inline void GetStream::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}
inline void GetStream::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}
inline ::std::string* GetStream::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetStream::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetStream::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}
inline void GetStream::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.GetStream.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 4;
inline void GetStream::clear_media_type() {
  media_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::MediaType GetStream::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStream.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
inline void GetStream::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.GetStream.media_type)
}

// -------------------------------------------------------------------

// GetStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool GetStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void GetStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& GetStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* GetStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void GetStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.GetStreamRsp.response)
}

// repeated .com.fsmeeting.fsp.proto.common.Stream stream = 2;
inline int GetStreamRsp::stream_size() const {
  return stream_.size();
}
inline void GetStreamRsp::clear_stream() {
  stream_.Clear();
}
inline const ::com::fsmeeting::fsp::proto::common::Stream& GetStreamRsp::stream(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return stream_.Get(index);
}
inline ::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::mutable_stream(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return stream_.Mutable(index);
}
inline ::com::fsmeeting::fsp::proto::common::Stream* GetStreamRsp::add_stream() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return stream_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::Stream >*
GetStreamRsp::mutable_stream() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return &stream_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::Stream >&
GetStreamRsp::stream() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.cp.GetStreamRsp.stream)
  return stream_;
}

// -------------------------------------------------------------------

// NotifyStreamPublished

// string stream_id = 1;
inline void NotifyStreamPublished::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamPublished::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
  return stream_id_.Get();
}
inline void NotifyStreamPublished::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}
inline void NotifyStreamPublished::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}
inline void NotifyStreamPublished::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}
inline ::std::string* NotifyStreamPublished::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamPublished::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamPublished::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}
inline void NotifyStreamPublished::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamPublished.stream_id)
}

// -------------------------------------------------------------------

// NotifyStreamPublishedRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyStreamPublishedRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyStreamPublishedRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamPublishedRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamPublishedRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamPublishedRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamPublishedRsp.response)
}

// -------------------------------------------------------------------

// SelectStreamServer

// string client_id = 1;
inline void SelectStreamServer::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SelectStreamServer::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
  return client_id_.Get();
}
inline void SelectStreamServer::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}
inline void SelectStreamServer::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}
inline void SelectStreamServer::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}
inline ::std::string* SelectStreamServer::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SelectStreamServer::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SelectStreamServer::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SelectStreamServer::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}
inline void SelectStreamServer::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServer.client_id)
}

// string stream_id = 2;
inline void SelectStreamServer::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SelectStreamServer::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
  return stream_id_.Get();
}
inline void SelectStreamServer::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}
inline void SelectStreamServer::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}
inline void SelectStreamServer::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}
inline ::std::string* SelectStreamServer::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SelectStreamServer::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SelectStreamServer::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SelectStreamServer::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}
inline void SelectStreamServer::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_id)
}

// repeated .com.fsmeeting.fsp.proto.common.StreamServer stream_server = 3;
inline int SelectStreamServer::stream_server_size() const {
  return stream_server_.size();
}
inline void SelectStreamServer::clear_stream_server() {
  stream_server_.Clear();
}
inline const ::com::fsmeeting::fsp::proto::common::StreamServer& SelectStreamServer::stream_server(int index) const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return stream_server_.Get(index);
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* SelectStreamServer::mutable_stream_server(int index) {
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return stream_server_.Mutable(index);
}
inline ::com::fsmeeting::fsp::proto::common::StreamServer* SelectStreamServer::add_stream_server() {
  // @@protoc_insertion_point(field_add:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return stream_server_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >*
SelectStreamServer::mutable_stream_server() {
  // @@protoc_insertion_point(field_mutable_list:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return &stream_server_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::fsmeeting::fsp::proto::common::StreamServer >&
SelectStreamServer::stream_server() const {
  // @@protoc_insertion_point(field_list:com.fsmeeting.fsp.proto.cp.SelectStreamServer.stream_server)
  return stream_server_;
}

// -------------------------------------------------------------------

// SelectStreamServerRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool SelectStreamServerRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void SelectStreamServerRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& SelectStreamServerRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* SelectStreamServerRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void SelectStreamServerRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.SelectStreamServerRsp.response)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStart

// string recv_client_id = 1;
inline void NotifyStreamSendingStart::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStart::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Get();
}
inline void NotifyStreamSendingStart::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}
inline void NotifyStreamSendingStart::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}
inline void NotifyStreamSendingStart::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}
inline ::std::string* NotifyStreamSendingStart::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStart::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}
inline void NotifyStreamSendingStart::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.recv_client_id)
}

// string stream_id = 2;
inline void NotifyStreamSendingStart::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStart::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
  return stream_id_.Get();
}
inline void NotifyStreamSendingStart::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}
inline void NotifyStreamSendingStart::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}
inline void NotifyStreamSendingStart::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}
inline ::std::string* NotifyStreamSendingStart::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStart::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}
inline void NotifyStreamSendingStart::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.stream_id)
}

// string client_id = 3;
inline void NotifyStreamSendingStart::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStart::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
  return client_id_.Get();
}
inline void NotifyStreamSendingStart::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}
inline void NotifyStreamSendingStart::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}
inline void NotifyStreamSendingStart::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}
inline ::std::string* NotifyStreamSendingStart::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStart::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStart::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}
inline void NotifyStreamSendingStart::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.client_id)
}

// .com.fsmeeting.fsp.proto.common.CommonInvokeInfo commonInvokeInfo = 4;
inline bool NotifyStreamSendingStart::has_commoninvokeinfo() const {
  return this != internal_default_instance() && commoninvokeinfo_ != NULL;
}
inline void NotifyStreamSendingStart::clear_commoninvokeinfo() {
  if (GetArenaNoVirtual() == NULL && commoninvokeinfo_ != NULL) delete commoninvokeinfo_;
  commoninvokeinfo_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo& NotifyStreamSendingStart::commoninvokeinfo() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_ != NULL ? *commoninvokeinfo_
                         : *::com::fsmeeting::fsp::proto::common::CommonInvokeInfo::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::mutable_commoninvokeinfo() {
  
  if (commoninvokeinfo_ == NULL) {
    _slow_mutable_commoninvokeinfo();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
  return commoninvokeinfo_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* NotifyStreamSendingStart::release_commoninvokeinfo() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_commoninvokeinfo();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* temp = commoninvokeinfo_;
    commoninvokeinfo_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamSendingStart::set_allocated_commoninvokeinfo(::com::fsmeeting::fsp::proto::common::CommonInvokeInfo* commoninvokeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commoninvokeinfo_;
  }
  if (commoninvokeinfo != NULL) {
    _slow_set_allocated_commoninvokeinfo(message_arena, &commoninvokeinfo);
  }
  commoninvokeinfo_ = commoninvokeinfo;
  if (commoninvokeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStart.commonInvokeInfo)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStartRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyStreamSendingStartRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyStreamSendingStartRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStartRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStartRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamSendingStartRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStartRsp.response)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStop

// string stream_id = 1;
inline void NotifyStreamSendingStop::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStop::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
  return stream_id_.Get();
}
inline void NotifyStreamSendingStop::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}
inline void NotifyStreamSendingStop::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}
inline void NotifyStreamSendingStop::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}
inline ::std::string* NotifyStreamSendingStop::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStop::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}
inline void NotifyStreamSendingStop::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.stream_id)
}

// string recv_client_id = 2;
inline void NotifyStreamSendingStop::clear_recv_client_id() {
  recv_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStop::recv_client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Get();
}
inline void NotifyStreamSendingStop::set_recv_client_id(const ::std::string& value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}
inline void NotifyStreamSendingStop::set_recv_client_id(const char* value) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}
inline void NotifyStreamSendingStop::set_recv_client_id(const char* value,
    size_t size) {
  
  recv_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}
inline ::std::string* NotifyStreamSendingStop::mutable_recv_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
  return recv_client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::release_recv_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
  
  return recv_client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::unsafe_arena_release_recv_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return recv_client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStop::set_allocated_recv_client_id(::std::string* recv_client_id) {
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recv_client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}
inline void NotifyStreamSendingStop::unsafe_arena_set_allocated_recv_client_id(
    ::std::string* recv_client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (recv_client_id != NULL) {
    
  } else {
    
  }
  recv_client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      recv_client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.recv_client_id)
}

// string client_id = 3;
inline void NotifyStreamSendingStop::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyStreamSendingStop::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
  return client_id_.Get();
}
inline void NotifyStreamSendingStop::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}
inline void NotifyStreamSendingStop::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}
inline void NotifyStreamSendingStop::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}
inline ::std::string* NotifyStreamSendingStop::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyStreamSendingStop::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyStreamSendingStop::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}
inline void NotifyStreamSendingStop::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStop.client_id)
}

// -------------------------------------------------------------------

// NotifyStreamSendingStopRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyStreamSendingStopRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyStreamSendingStopRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyStreamSendingStopRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyStreamSendingStopRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyStreamSendingStopRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyStreamSendingStopRsp.response)
}

// -------------------------------------------------------------------

// NotifyPublishStream

// string client_id = 1;
inline void NotifyPublishStream::clear_client_id() {
  client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::client_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
  return client_id_.Get();
}
inline void NotifyPublishStream::set_client_id(const ::std::string& value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}
inline void NotifyPublishStream::set_client_id(const char* value) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}
inline void NotifyPublishStream::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}
inline ::std::string* NotifyPublishStream::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
  return client_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_client_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
  
  return client_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return client_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_client_id(
    ::std::string* client_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      client_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.client_id)
}

// string stream_id = 2;
inline void NotifyPublishStream::clear_stream_id() {
  stream_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::stream_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
  return stream_id_.Get();
}
inline void NotifyPublishStream::set_stream_id(const ::std::string& value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}
inline void NotifyPublishStream::set_stream_id(const char* value) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}
inline void NotifyPublishStream::set_stream_id(const char* value,
    size_t size) {
  
  stream_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}
inline ::std::string* NotifyPublishStream::mutable_stream_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
  return stream_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_stream_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
  
  return stream_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_stream_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_stream_id(::std::string* stream_id) {
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_stream_id(
    ::std::string* stream_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_id != NULL) {
    
  } else {
    
  }
  stream_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_id)
}

// string stream_publish_token = 3;
inline void NotifyPublishStream::clear_stream_publish_token() {
  stream_publish_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::stream_publish_token() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
  return stream_publish_token_.Get();
}
inline void NotifyPublishStream::set_stream_publish_token(const ::std::string& value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}
inline void NotifyPublishStream::set_stream_publish_token(const char* value) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}
inline void NotifyPublishStream::set_stream_publish_token(const char* value,
    size_t size) {
  
  stream_publish_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}
inline ::std::string* NotifyPublishStream::mutable_stream_publish_token() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
  return stream_publish_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_stream_publish_token() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
  
  return stream_publish_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_stream_publish_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return stream_publish_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_stream_publish_token(::std::string* stream_publish_token) {
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_publish_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_stream_publish_token(
    ::std::string* stream_publish_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (stream_publish_token != NULL) {
    
  } else {
    
  }
  stream_publish_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      stream_publish_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.stream_publish_token)
}

// string group_id = 4;
inline void NotifyPublishStream::clear_group_id() {
  group_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::group_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
  return group_id_.Get();
}
inline void NotifyPublishStream::set_group_id(const ::std::string& value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}
inline void NotifyPublishStream::set_group_id(const char* value) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}
inline void NotifyPublishStream::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}
inline ::std::string* NotifyPublishStream::mutable_group_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
  return group_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_group_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
  
  return group_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_group_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return group_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_group_id(::std::string* group_id) {
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_group_id(
    ::std::string* group_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (group_id != NULL) {
    
  } else {
    
  }
  group_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      group_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.group_id)
}

// string user_id = 5;
inline void NotifyPublishStream::clear_user_id() {
  user_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::user_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
  return user_id_.Get();
}
inline void NotifyPublishStream::set_user_id(const ::std::string& value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}
inline void NotifyPublishStream::set_user_id(const char* value) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}
inline void NotifyPublishStream::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}
inline ::std::string* NotifyPublishStream::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
  return user_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_user_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
  
  return user_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_user_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return user_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_user_id(
    ::std::string* user_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      user_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.user_id)
}

// string media_id = 6;
inline void NotifyPublishStream::clear_media_id() {
  media_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& NotifyPublishStream::media_id() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
  return media_id_.Get();
}
inline void NotifyPublishStream::set_media_id(const ::std::string& value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}
inline void NotifyPublishStream::set_media_id(const char* value) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}
inline void NotifyPublishStream::set_media_id(const char* value,
    size_t size) {
  
  media_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}
inline ::std::string* NotifyPublishStream::mutable_media_id() {
  
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
  return media_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::release_media_id() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
  
  return media_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* NotifyPublishStream::unsafe_arena_release_media_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return media_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void NotifyPublishStream::set_allocated_media_id(::std::string* media_id) {
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}
inline void NotifyPublishStream::unsafe_arena_set_allocated_media_id(
    ::std::string* media_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (media_id != NULL) {
    
  } else {
    
  }
  media_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      media_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_id)
}

// .com.fsmeeting.fsp.proto.common.MediaType media_type = 7;
inline void NotifyPublishStream::clear_media_type() {
  media_type_ = 0;
}
inline ::com::fsmeeting::fsp::proto::common::MediaType NotifyPublishStream::media_type() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_type)
  return static_cast< ::com::fsmeeting::fsp::proto::common::MediaType >(media_type_);
}
inline void NotifyPublishStream::set_media_type(::com::fsmeeting::fsp::proto::common::MediaType value) {
  
  media_type_ = value;
  // @@protoc_insertion_point(field_set:com.fsmeeting.fsp.proto.cp.NotifyPublishStream.media_type)
}

// -------------------------------------------------------------------

// NotifyPublishStreamRsp

// .com.fsmeeting.fsp.proto.common.CommonResponse response = 1;
inline bool NotifyPublishStreamRsp::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void NotifyPublishStreamRsp::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::com::fsmeeting::fsp::proto::common::CommonResponse& NotifyPublishStreamRsp::response() const {
  // @@protoc_insertion_point(field_get:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
  return response_ != NULL ? *response_
                         : *::com::fsmeeting::fsp::proto::common::CommonResponse::internal_default_instance();
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::mutable_response() {
  
  if (response_ == NULL) {
    _slow_mutable_response();
  }
  // @@protoc_insertion_point(field_mutable:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
  return response_;
}
inline ::com::fsmeeting::fsp::proto::common::CommonResponse* NotifyPublishStreamRsp::release_response() {
  // @@protoc_insertion_point(field_release:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_response();
  } else {
    ::com::fsmeeting::fsp::proto::common::CommonResponse* temp = response_;
    response_ = NULL;
    return temp;
  }
}
inline  void NotifyPublishStreamRsp::set_allocated_response(::com::fsmeeting::fsp::proto::common::CommonResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response != NULL) {
    _slow_set_allocated_response(message_arena, &response);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.fsmeeting.fsp.proto.cp.NotifyPublishStreamRsp.response)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace cp
}  // namespace proto
}  // namespace fsp
}  // namespace fsmeeting
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::fsmeeting::fsp::proto::cp::ProtoDictionary> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::fsmeeting::fsp::proto::cp::ProtoDictionary>() {
  return ::com::fsmeeting::fsp::proto::cp::ProtoDictionary_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fsp_2dcp_2eproto__INCLUDED
